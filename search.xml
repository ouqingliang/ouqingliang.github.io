<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>模板</title>
    <url>/2022/01/01/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="扩展KMP"><a href="#扩展KMP" class="headerlink" title="扩展KMP"></a>扩展KMP</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ll extend[N],ne[N],ans;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ne,<span class="number">0</span>,<span class="built_in">sizeof</span>(ne));</span><br><span class="line">    ne[<span class="number">0</span>]=len;</span><br><span class="line">    ll a,p;</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( a&lt;len &amp;&amp; s[a]==s[a<span class="number">-1</span>]) a++;</span><br><span class="line">    ne[<span class="number">1</span>]=a<span class="number">-1</span>;</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=a+ne[a]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>((i<span class="number">-1</span>)+ne[i-a]&lt;p) ne[i]=ne[i-a];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=<span class="built_in">max</span>(p-i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;len&amp;&amp;s[i+j]==s[j]) j++;</span><br><span class="line">            ne[i]=j; a=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exkmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getne</span>();</span><br><span class="line">    ll a=<span class="number">0</span>,p;</span><br><span class="line">    p=len;</span><br><span class="line">    extend[<span class="number">0</span>]=p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=a+extend[a]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>((i<span class="number">-1</span>)+ne[i-a]&lt;p) extend[i]=ne[i-a];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=<span class="built_in">max</span>(p-i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(j&lt;len&amp;&amp;i+j&lt;len&amp;&amp;s[i+j]==s[j]) j++;</span><br><span class="line">            extend[i]=j; a=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lyndon-分解"><a href="#Lyndon-分解" class="headerlink" title="Lyndon 分解"></a>Lyndon 分解</h3><p>最小表示的初始位置为 $s+s$ 的Lyndon分解中字符串初始位置 $\le |s|$ 且最大的那个。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>); n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k;i&lt;=n;)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(j=i,k=i+<span class="number">1</span>;k&lt;=n&amp;&amp;s[j]&lt;=s[k];j=(s[j]==s[k++])?j+<span class="number">1</span>:i);</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;=j;i+=k-j,ans^=(i<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br></pre></td></tr></table></figure>

<h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> ne[N][Size],fail[N],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,Size) <span class="keyword">if</span>(ne[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ne[<span class="number">0</span>][i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,Size)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=ne[u][i];</span><br><span class="line">			<span class="keyword">if</span>(!v) ne[u][i]=ne[fail[u]][i];</span><br><span class="line">			<span class="keyword">else</span> fail[v]=ne[fail[u]][i],q.<span class="built_in">push</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),u=<span class="number">0</span>,c;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(!ne[u][c]) ne[u][c]=++cnt;</span><br><span class="line">		u=ne[u][c];</span><br><span class="line">		<span class="comment">//do sth</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=siz;i++) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),fa[i]=len[i]=<span class="number">0</span>;</span><br><span class="line">    las=siz=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> cur=++siz;</span><br><span class="line">	len[cur]=len[las]+<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> p=las;</span><br><span class="line">	<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">	<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> q=ne[p][c];</span><br><span class="line">		<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> clone=++siz;</span><br><span class="line">			len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">			fa[clone]=fa[q];</span><br><span class="line">			<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">			fa[cur]=fa[q]=clone;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	las=cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;<span class="keyword">return</span> t[x]==t[y]&amp;&amp;t[x+k]==t[y+k];&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuufixArray</span>&#123;</span><br><span class="line">    <span class="type">int</span> height[N],sa[N],rk[N],f[N][K],len; ll sum[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in">sizeof</span>(t));</span><br><span class="line">        len=n; s[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=i,rk[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rsort</span>(n,<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">            <span class="built_in">rsort</span>(n,p);</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">            rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">            <span class="keyword">for</span>(j=sa[rk[i]<span class="number">-1</span>],(k?(k--):<span class="number">0</span>);s[i+k]==s[j+k];k++);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i],sum[i]=sum[i<span class="number">-1</span>]+(n-sa[i]+<span class="number">1</span>)-height[i];</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,K<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">return</span> len-x+<span class="number">1</span>;</span><br><span class="line">        x=rk[x]; y=rk[y];</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x++; <span class="type">int</span> k=l2[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">(<span class="type">char</span> *a,<span class="type">int</span> *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> s[N];</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(a); s[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) s[(i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]=a[i],s[(i&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	<span class="type">int</span> id=<span class="number">0</span>,mx=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	n=n*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(mx&gt;i) f[i]=<span class="built_in">min</span>(f[(id&lt;&lt;<span class="number">1</span>)-i],mx-i); <span class="keyword">else</span> f[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i-f[i]&gt;=<span class="number">0</span> &amp;&amp; i+f[i]&lt;n &amp;&amp; s[i+f[i]] == s[i-f[i]]) f[i]++;</span><br><span class="line">		<span class="keyword">if</span>(i+f[i]&gt;mx) id=i,mx=i+f[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PAM"><a href="#PAM" class="headerlink" title="PAM"></a>PAM</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> PAM&#123;</span><br><span class="line">	<span class="type">int</span> n,s[N],num[N],p,las,nex[N][S],fail[N],len[N],sz[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) s[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++) len[i]=fail[i]=sz[i]=<span class="number">0</span>,<span class="built_in">memset</span>(nex[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(nex[i]));</span><br><span class="line">		s[n=<span class="number">0</span>]=len[p=<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">		fail[las=<span class="number">1</span>]=fail[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">for</span>(;s[n<span class="number">-1</span>-len[x]]!=s[n];x=fail[x]); <span class="keyword">return</span> x;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[++n]=c;</span><br><span class="line">		<span class="type">int</span> cur=<span class="built_in">getfail</span>(las);</span><br><span class="line">		<span class="keyword">if</span>(!nex[cur][c])</span><br><span class="line">		&#123;</span><br><span class="line">			len[++p]=len[cur]+<span class="number">2</span>;</span><br><span class="line">			fail[p]=nex[<span class="built_in">getfail</span>(fail[cur])][c];</span><br><span class="line">			<span class="keyword">if</span>(!fail[p]) fail[p]=<span class="number">1</span>;</span><br><span class="line">			nex[cur][c]=p;</span><br><span class="line">		&#125;</span><br><span class="line">		las=nex[cur][c];</span><br><span class="line">		sz[las]++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="杨氏图表"><a href="#杨氏图表" class="headerlink" title="杨氏图表"></a>杨氏图表</h2><p>插入一个数 $x$：</p>
<ol>
<li>找到当前行中最小的比 $x$ 大的数 $y$：<ul>
<li>若有，$x$ 将 $y$ 替换，往下一行插入 $y$；</li>
<li>否则将 $x$ 放置</li>
</ul>
</li>
</ol>
<h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Treap&#123;</span><br><span class="line">	<span class="type">int</span> son[N][<span class="number">2</span>],val[N],siz[N],rnd[N],cnt,root;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> u=++cnt;</span><br><span class="line">		val[u]=v; siz[u]=<span class="number">1</span>; rnd[u]=<span class="built_in">rand</span>()+(<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>);</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;siz[u]=siz[son[u][<span class="number">0</span>]]+siz[son[u][<span class="number">1</span>]]+<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[y]) &#123;son[x][<span class="number">1</span>]=<span class="built_in">merge</span>(son[x][<span class="number">1</span>],y);<span class="built_in">pushup</span>(x);<span class="keyword">return</span> x;&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;son[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,son[y][<span class="number">0</span>]);<span class="built_in">pushup</span>(y);<span class="keyword">return</span> y;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_val</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(val[u]&lt;=k) x=u,<span class="built_in">split_val</span>(son[x][<span class="number">1</span>],k,son[x][<span class="number">1</span>],y);</span><br><span class="line">		<span class="keyword">else</span> y=u,<span class="built_in">split_val</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_rank</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(k&lt;=siz[son[u][<span class="number">0</span>]]) y=u,<span class="built_in">split_rank</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">else</span> x=u,<span class="built_in">split_rank</span>(son[x][<span class="number">1</span>],k-siz[son[u][<span class="number">0</span>]]<span class="number">-1</span>,son[x][<span class="number">1</span>],y);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> s=siz[son[u][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(s==k) <span class="keyword">return</span> u;</span><br><span class="line">		<span class="keyword">if</span>(s&lt;k) <span class="keyword">return</span> <span class="built_in">kth</span>(son[u][<span class="number">1</span>],k-s);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">kth</span>(son[u][<span class="number">0</span>],k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x,y,z,ans;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(root,v,x,y);</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,<span class="built_in">newnode</span>(v)),y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(root,v,x,y);</span><br><span class="line">		<span class="built_in">split_val</span>(x,v<span class="number">-1</span>,x,z);</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,z=<span class="built_in">merge</span>(son[z][<span class="number">0</span>],son[z][<span class="number">1</span>])),y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line">		ans=siz[x]+<span class="number">1</span>;</span><br><span class="line">		root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Kth</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;<span class="keyword">return</span> val[<span class="built_in">kth</span>(root,v)];&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line">		ans=val[<span class="built_in">kth</span>(x,siz[x])];</span><br><span class="line">		root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">nex</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(root,v,x,y);</span><br><span class="line">		ans=val[<span class="built_in">kth</span>(y,<span class="number">1</span>)];</span><br><span class="line">		root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LCT"><a href="#LCT" class="headerlink" title="LCT"></a>LCT</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">	<span class="type">int</span> ch[N][<span class="number">2</span>],fa[N]; <span class="type">bool</span> r[N];</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc ch[u][0]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc ch[u][1]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> son(x) (ch[fa[x]][1]==x)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> isr(x) (ch[fa[x]][1]!=x&amp;&amp;ch[fa[x]][0]!=x)</span></span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;siz[u]=<span class="number">1</span>+siz[lc]+siz[rc]+si[u];&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">torev</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;<span class="built_in">swap</span>(lc,rc); r[u]^=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;<span class="keyword">if</span>(r[u]) <span class="built_in">torev</span>(lc),<span class="built_in">torev</span>(rc),r[u]=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x],z=fa[y],d=<span class="built_in">son</span>(x);</span><br><span class="line">		fa[x]=z; <span class="keyword">if</span>(!<span class="built_in">isr</span>(y)) ch[z][<span class="built_in">son</span>(y)]=x;</span><br><span class="line">		fa[ch[y][d]=ch[x][<span class="number">1</span>-d]]=y;</span><br><span class="line">		fa[ch[x][<span class="number">1</span>-d]=y]=x;</span><br><span class="line">		<span class="built_in">pushup</span>(y); <span class="built_in">pushup</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;<span class="keyword">if</span>(!<span class="built_in">isr</span>(u)) <span class="built_in">push</span>(fa[u]); <span class="built_in">pushdown</span>(u);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="built_in">push</span>(x);<span class="keyword">for</span>(<span class="type">int</span> y=fa[x];!<span class="built_in">isr</span>(x);<span class="built_in">rotate</span>(x),y=fa[x]) <span class="keyword">if</span>(!<span class="built_in">isr</span>(y)) <span class="built_in">rotate</span>(<span class="built_in">son</span>(x)==<span class="built_in">son</span>(y)?y:x);<span class="built_in">pushup</span>(x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;x;) <span class="built_in">splay</span>(x),si[x]+=siz[ch[x][<span class="number">1</span>]],ch[x][<span class="number">1</span>]=y,si[x]-=siz[y],<span class="built_in">pushup</span>(x),y=x,x=fa[x];&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="built_in">access</span>(x);<span class="built_in">splay</span>(x);<span class="built_in">torev</span>(x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="built_in">makeroot</span>(x);<span class="built_in">access</span>(y);<span class="built_in">splay</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="built_in">makeroot</span>(x);<span class="built_in">makeroot</span>(y);fa[x]=y;si[y]+=siz[x];<span class="built_in">pushup</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="built_in">split</span>(x,y);ch[y][<span class="number">0</span>]=fa[x]=<span class="number">0</span>;<span class="built_in">pushup</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="built_in">access</span>(x);<span class="built_in">splay</span>(x);<span class="keyword">for</span>(;ch[x][<span class="number">0</span>];x=ch[x][<span class="number">0</span>]); <span class="keyword">return</span> x;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="KD-Tree"><a href="#KD-Tree" class="headerlink" title="KD-Tree"></a>KD-Tree</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,o;</span><br><span class="line"><span class="type">int</span> a,b,c,d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> v[<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">point</span> ()&#123;&#125;</span><br><span class="line">	<span class="built_in">point</span> (<span class="type">int</span> x,<span class="type">int</span> y) &#123;v[<span class="number">0</span>]=x; v[<span class="number">1</span>]=y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (point a,point b) &#123;<span class="keyword">return</span> a.v[<span class="number">0</span>]==b.v[<span class="number">0</span>]&amp;&amp;a.v[<span class="number">1</span>]==b.v[<span class="number">1</span>]; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;= (point a,point b) &#123;<span class="keyword">return</span> a.v[<span class="number">0</span>]&lt;=b.v[<span class="number">0</span>]&amp;&amp;a.v[<span class="number">1</span>]&lt;=b.v[<span class="number">1</span>]; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (point a,point b) &#123;<span class="keyword">return</span> a.v[<span class="number">0</span>]&lt;b.v[<span class="number">0</span>]||a.v[<span class="number">1</span>]&lt;b.v[<span class="number">1</span>]; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b,<span class="type">int</span> c)</span> </span>&#123;<span class="keyword">return</span> a.v[c]&lt;b.v[c]; &#125;</span><br><span class="line"><span class="function">point <span class="title">min</span><span class="params">(point a,point b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">point</span>(<span class="built_in">min</span>(a.v[<span class="number">0</span>],b.v[<span class="number">0</span>]),<span class="built_in">min</span>(a.v[<span class="number">1</span>],b.v[<span class="number">1</span>])); &#125;</span><br><span class="line"><span class="function">point <span class="title">max</span><span class="params">(point a,point b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">point</span>(<span class="built_in">max</span>(a.v[<span class="number">0</span>],b.v[<span class="number">0</span>]),<span class="built_in">max</span>(a.v[<span class="number">1</span>],b.v[<span class="number">1</span>])); &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	point l,r,v;</span><br><span class="line">	<span class="type">int</span> lc,rc;</span><br><span class="line">	<span class="type">int</span> q,s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> rt,la,nt,cnt;</span><br><span class="line">node t[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t[u].s=t[u].q;t[u].l=t[u].v;t[u].r=t[u].v;</span><br><span class="line">	<span class="keyword">if</span> (t[u].lc)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].s+=t[t[u].lc].s;</span><br><span class="line">		t[u].l=<span class="built_in">min</span>(t[u].l,t[t[u].lc].l);</span><br><span class="line">		t[u].r=<span class="built_in">max</span>(t[u].r,t[t[u].lc].r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t[u].rc)</span><br><span class="line">	&#123;</span><br><span class="line">		t[u].s+=t[t[u].rc].s;</span><br><span class="line">		t[u].l=<span class="built_in">min</span>(t[u].l,t[t[u].rc].l);</span><br><span class="line">		t[u].r=<span class="built_in">max</span>(t[u].r,t[t[u].rc].r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> d,point s,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!u) &#123;u=++nt; t[u].l=s; t[u].r=s; t[u].v=s;&#125;</span><br><span class="line">	<span class="keyword">if</span> (s==t[u].v) &#123;t[u].s+=c; t[u].q+=c; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">cmp</span>(s,t[u].v,d)) <span class="built_in">ins</span>(t[u].lc,d^<span class="number">1</span>,s,c);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">ins</span>(t[u].rc,d^<span class="number">1</span>,s,c);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> d,point l,point r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (l&lt;=t[u].l&amp;&amp;t[u].r&lt;=r) <span class="keyword">return</span> t[u].s;</span><br><span class="line">	<span class="keyword">if</span> (r&lt;t[u].l||t[u].r&lt;l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (l&lt;=t[u].v&amp;&amp;t[u].v&lt;=r) ret+=t[u].q;</span><br><span class="line">	ret+=<span class="built_in">qry</span>(t[u].lc,d^<span class="number">1</span>,l,r)+<span class="built_in">qry</span>(t[u].rc,d^<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	a=l; b=r;</span><br><span class="line">	point x=t[(l+r)&gt;&gt;<span class="number">1</span>].v;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">cmp</span>(t[a].v,x,d)) a++;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">cmp</span>(x,t[b].v,d)) b--;</span><br><span class="line">		<span class="keyword">if</span> (a&lt;=b) <span class="built_in">swap</span>(t[a],t[b]),a++,b--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (a&lt;=b);</span><br><span class="line">	<span class="keyword">if</span> (k&gt;=a&amp;&amp;a&lt;r) <span class="built_in">kth</span>(a,r,k,d);</span><br><span class="line">	<span class="keyword">if</span> (k&lt;=b&amp;&amp;l&lt;b) <span class="built_in">kth</span>(l,b,k,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mid</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> d,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (l==r)&#123;u=l;<span class="built_in">update</span>(u);<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">kth</span>(l,r,(l+r)&gt;&gt;<span class="number">1</span>,d);</span><br><span class="line">	u=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">mid</span>(t[u].lc,d^<span class="number">1</span>,l,u<span class="number">-1</span>); <span class="built_in">mid</span>(t[u].rc,d^<span class="number">1</span>,u+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=nt;i++) t[i].lc=t[i].rc=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">mid</span>(rt,<span class="number">0</span>,<span class="number">1</span>,nt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;o);</span><br><span class="line">		<span class="keyword">if</span> (o==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">			a^=la;b^=la;c^=la;</span><br><span class="line">			<span class="built_in">ins</span>(rt,<span class="number">0</span>,<span class="built_in">point</span>(a,b),c);</span><br><span class="line">			cnt++;</span><br><span class="line">			<span class="keyword">if</span> (cnt%<span class="number">5000</span>==<span class="number">0</span>) <span class="built_in">rebuild</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (o==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">			a^=la;b^=la;c^=la;d^=la;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,la=<span class="built_in">qry</span>(rt,<span class="number">0</span>,<span class="built_in">point</span>(a,b),<span class="built_in">point</span>(c,d)););</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (o==<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"><span class="type">int</span> fa[N],val[N],dis[N],ls[N],rs[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	<span class="keyword">if</span>(val[x]&gt;val[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">	<span class="keyword">if</span>(dis[ls[x]]&lt;dis[rs[x]]) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">	dis[x]=dis[rs[x]]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fa[x]=<span class="built_in">merge</span>(ls[x],rs[x]);</span><br><span class="line">	fa[fa[x]]=fa[x]; ls[x]=rs[x]=val[x]=dis[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dis[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=<span class="built_in">read</span>(),fa[i]=i;</span><br><span class="line">	<span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> T=<span class="built_in">read</span>(),x,y,fx,fy;T--;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">		<span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(flag[x]||flag[y]) <span class="keyword">continue</span>;</span><br><span class="line">			fx=<span class="built_in">find</span>(x); fy=<span class="built_in">find</span>(y);</span><br><span class="line">			<span class="keyword">if</span>(fx==fy) <span class="keyword">continue</span>;</span><br><span class="line">			fa[fx]=fa[fy]=<span class="built_in">merge</span>(fx,fy);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag[x=<span class="built_in">read</span>()]) &#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">			flag[x=<span class="built_in">find</span>(x)]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[x]);</span><br><span class="line">			<span class="built_in">pop</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h3><p>$ S_2(n,k) = S_2(n-1,k-1) + k S_2(n-1,k)$</p>
<p>$ S_2(n,m)=\frac{1}{m!}\sum_{i=0}^m(-1)^{m-i}\binom{m}{i}i^n$</p>
<p>$ S_1(n,k) = S_1(n-1,k-1) + (n-1) S_1(n-1,k) $</p>
<p>$ F_n(x) = \sum_{i=0}^n S_1(n,i) x^i = \prod_{i=0}^{n-1}  (x+i) $</p>
<p>$ x^{\overline{n}}=\sum_{k} S_1(n,k)x^k $</p>
<p>$ x^n=\sum_{k} S_2(n,k)  (-1)^{n-k}  x^{\overline{  k }  } $</p>
<p>$ x^{\underline{n}}=\sum_{k} S_1(n,k) (-1) ^ { n- k } x^k $</p>
<p>$ x^n=\sum_{k} S_2(n,k) x^{\underline{  k }  } $</p>
<h3 id="贝尔数"><a href="#贝尔数" class="headerlink" title="贝尔数"></a>贝尔数</h3><p>$B_{n+1} = \sum_{k=0}^n\binom{n}{k} B_k$</p>
<p>$B_n = \sum_{k=0}^n S_2(n,k)$</p>
<h3 id="伯努利数"><a href="#伯努利数" class="headerlink" title="伯努利数"></a>伯努利数</h3><p>$S_m(n) = \sum_{k=0}^{n-1} k^m = \frac{1}{m+1} \sum_{k=0}^m \binom{m+1}{k}B_kn^{m+1-k}$</p>
<p>$B(x) = \sum_{i} \frac{B_i}{i!}x^i = \frac{x}{e^x-1}$.</p>
<h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(<span class="type">const</span> ll &amp;a,<span class="type">const</span> ll &amp;b,<span class="type">const</span> ll &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll d=((<span class="type">long</span> <span class="type">double</span>)a/p*b+<span class="number">1e-9</span>),res=a*b-d*p;</span><br><span class="line">	<span class="keyword">return</span> res&lt;<span class="number">0</span>?res+p:res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ex-CRT-and-Pollard-rho"><a href="#ex-CRT-and-Pollard-rho" class="headerlink" title="ex_CRT and Pollard rho"></a>ex_CRT and Pollard rho</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,<span class="type">const</span> ll &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(a%=p,b%=p;b;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) &#123;ans+=a; <span class="keyword">if</span>(ans&gt;=p) ans-=p;&#125;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>; a+=a; <span class="keyword">if</span>(a&gt;=p) a-=p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll a,ll b,<span class="type">const</span> ll &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=<span class="built_in">mul</span>(a,a,p)) <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,a,p);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> !y?x:<span class="built_in">gcd</span>(y,x%y);&#125;</span><br><span class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>; y=<span class="number">0</span>; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    ll d=<span class="built_in">ex_gcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x; <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll a,ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y,d;</span><br><span class="line">    d=<span class="built_in">ex_gcd</span>(a,m,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+m)%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> QuadraticResidue&#123;</span><br><span class="line">	ll mod,n,w;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">num</span>&#123;</span><br><span class="line">		ll a,b;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> num <span class="keyword">operator</span> *(<span class="type">const</span> num &amp;A,<span class="type">const</span> num &amp;B)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> (num)&#123;(A.a*B.a+A.b*B.b%mod*w)%mod,(A.b*B.a+A.a*B.b)%mod&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(num x,ll y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		num ans=(num)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x;</span><br><span class="line">		<span class="keyword">return</span> ans.a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">L</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll ans=<span class="built_in">Pow</span>(x,(mod<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> (ans==mod<span class="number">-1</span>)?<span class="number">-1</span>:ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x%=mod; <span class="type">int</span> l=<span class="built_in">L</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(l!=<span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">		ll a=<span class="built_in">rand</span>()%mod;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">L</span>(w=(a*a%mod-x+mod)%mod)!=<span class="number">-1</span>;a=<span class="built_in">rand</span>()%mod);</span><br><span class="line">		num y=(num)&#123;a,<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Pow</span>(y,(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> CRT&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exCRT</span><span class="params">(<span class="type">int</span> n,ll *a,ll *m,ll &amp;A)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll M;<span class="comment">//lcm</span></span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=(a[i]%m[i]+m[i])%m[i];</span><br><span class="line">        A=a[<span class="number">1</span>],M=m[<span class="number">1</span>];</span><br><span class="line">        ll c,d,x,y,t;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            c=a[i]-A;</span><br><span class="line">            d=<span class="built_in">exgcd</span>(M,m[i],x,y);</span><br><span class="line">            <span class="keyword">if</span>(c%d!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            t=m[i]/d; x=<span class="built_in">mul</span>(x,c/d,t); x=(x%t+t)%t;</span><br><span class="line">            A=A+M*x; M=M/d*m[i]; A=(A+M)%M;</span><br><span class="line">        &#125;</span><br><span class="line">        A=(A+M<span class="number">-1</span>)%M+<span class="number">1</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Pollard_Rho&#123;</span><br><span class="line">	<span class="type">const</span> __int128 ONE=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">RandInt</span><span class="params">(ll l,ll r)</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="type">static</span> mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">		<span class="function">uniform_int_distribution&lt;ll&gt; <span class="title">dis</span><span class="params">(l,r)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">dis</span>(rnd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y,ll mod)</span> </span>&#123;</span><br><span class="line">		ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=ONE*x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ONE*ans*x%mod;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Miller_Rabin</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> vector&lt;ll&gt; p = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;<span class="number">3</span>||(!(n&amp;<span class="number">1ll</span>))) <span class="keyword">return</span> n==<span class="number">2ll</span>;</span><br><span class="line">		ll a=n<span class="number">-1</span>,b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;!(a&amp;<span class="number">1</span>);a&gt;&gt;=<span class="number">1</span>) b++;</span><br><span class="line">		<span class="keyword">auto</span> chk = [&amp;](<span class="type">const</span> ll &amp;x) &#123;</span><br><span class="line">			ll v = <span class="built_in">Pow</span>(x,a,n);</span><br><span class="line">			<span class="keyword">if</span>(v==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(;j&lt;=b;j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(v==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">				v=ONE*v*v%n;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(n&gt;<span class="number">37</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:p) <span class="keyword">if</span>(!<span class="built_in">chk</span>(x)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:p) <span class="keyword">if</span>(n==x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">Pollard_Rho</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">		ll s=<span class="number">0</span>,t=<span class="number">0</span>,c=<span class="built_in">RandInt</span>(<span class="number">1</span>,n<span class="number">-1</span>),val=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">auto</span> f = [&amp;](<span class="type">const</span> ll &amp;x) &#123;<span class="built_in">return</span> (ONE*x*x+c)%n;&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> g=<span class="number">1</span>;;g&lt;&lt;=<span class="number">1</span>,s=t,val=<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> st=<span class="number">1</span>;st&lt;=g;st++) &#123;</span><br><span class="line">				t=<span class="built_in">f</span>(t);</span><br><span class="line">				val = (ONE*val*<span class="built_in">abs</span>(t-s))%n;</span><br><span class="line">				<span class="keyword">if</span>(st%<span class="number">127</span>==<span class="number">0</span>) &#123;</span><br><span class="line">					ll d = __gcd(val,n);</span><br><span class="line">					<span class="keyword">if</span>(d&gt;<span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ll d = __gcd(val,n);</span><br><span class="line">			<span class="keyword">if</span>(d&gt;<span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll Ans;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Divide</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">Miller_Rabin</span>(n)) &#123;</span><br><span class="line">			Ans=<span class="built_in">max</span>(Ans,n);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll p = n;</span><br><span class="line">		<span class="keyword">for</span>(;p==n;) p = <span class="built_in">Pollard_Rho</span>(n);</span><br><span class="line">		<span class="built_in">Divide</span>(n/p); <span class="built_in">Divide</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Powerful-Number"><a href="#Powerful-Number" class="headerlink" title="Powerful Number"></a>Powerful Number</h2><p>一个数 $n$ 满足 $\forall p((p\in \mathbb{P} \and p|n )\rightarrow p^2|n )$，则称 $n$ 为Powerful Number（简称PN）。</p>
<p>求出 $n$ 以内的PN数可以暴力搜索质因数。</p>
<p>假设我们要求 $\sum_{i=1}^nf(i)$，构造两个函数 $g,h$ 使得：</p>
<ul>
<li>$g$ 是积性函数。且 $g$ 的前缀和 $S_g(n)$ 容易求出。</li>
<li>$\forall p\in \mathbb{P},g(p)=f(p)$。</li>
<li>$f=g * h$。</li>
</ul>
<p>那么，将原式变一变：</p>
<p>$$\sum_{i=1}^n f(i)\=\sum <em>{i=1}^n\sum</em>{d|i}h(d)g(i/d)\=\sum_{i=1}^nh(i)\sum_{j=1}^{n/i}g(j)\=\sum_{i=1}^n h(i)S_g(\left \lfloor \frac{n}{i} \right \rfloor)$$</p>
<p>可以发现 $f(p)=g(1)h(p)+g(p)h(1)=h(p)+g(p)$，又因为有 $g(p)=f(p)$，因此 $h(p)=0$。</p>
<p>显然 $h$ 是个积性函数，那么由积性函数的定义，对于 $h$ 的所有非 PN 数下标的取值均为 $0$。</p>
<p>我们只需快速求出所有 PN 数下标的 $h$ ，就可以了。</p>
<p>只需要求出 $h(p^k)$ 就可以了。这个可以通过推式子或者递推等解决。</p>
<h2 id="类欧几里得"><a href="#类欧几里得" class="headerlink" title="类欧几里得"></a>类欧几里得</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Ans</span>&#123;</span><br><span class="line">	ll f,g,h;</span><br><span class="line">	<span class="comment">// f = \sum_&#123;i=0&#125;^n (ai+b)/c</span></span><br><span class="line">	<span class="comment">// g = \sum_&#123;i=0&#125;^n [(ai+b)/c]^2</span></span><br><span class="line">	<span class="comment">// h = \sum_&#123;i=0&#125;^n i[(ai+b)/c]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Ans <span class="title">solve</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!a) <span class="keyword">return</span> &#123;</span><br><span class="line">		(ll)b/c*(n+<span class="number">1</span>)%mod,</span><br><span class="line">		(ll)<span class="built_in">Sqr</span>(b/c)*(n+<span class="number">1</span>)%mod,</span><br><span class="line">		(ll)b/c*n%mod*(n+<span class="number">1</span>)%mod*inv2%mod</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=c||b&gt;=c) &#123;</span><br><span class="line">		Ans d=<span class="built_in">solve</span>(a%c,b%c,c,n);</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			((ll)a/c*n%mod*(n+<span class="number">1</span>)%mod*inv2+(ll)b/c*(n+<span class="number">1</span>)+d.f)%mod,</span><br><span class="line">			((ll)n*(n+<span class="number">1</span>)%mod*(n*<span class="number">2ll</span>+<span class="number">1</span>)%mod*inv6%mod*<span class="built_in">Sqr</span>(a/c)+</span><br><span class="line">				(ll)(n+<span class="number">1</span>)*<span class="built_in">Sqr</span>(b/c)+(ll)n*(n+<span class="number">1</span>)%mod*(a/c)%mod*(b/c)+</span><br><span class="line">				b/c*<span class="number">2ll</span>*d.f+a/c*<span class="number">2ll</span>%mod*d.h+d.g)%mod,</span><br><span class="line">			((ll)n*(n+<span class="number">1</span>)%mod*(n*<span class="number">2ll</span>+<span class="number">1</span>)%mod*inv6%mod*(a/c)+</span><br><span class="line">				(ll)n*(n+<span class="number">1</span>)%mod*inv2%mod*(b/c)+d.h)%mod</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> m=((ll)a*n+b)/c;</span><br><span class="line">		Ans d=<span class="built_in">solve</span>(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			((ll)n*m-d.f+mod)%mod,</span><br><span class="line">			((ll)n*m%mod*m%mod-d.f-d.h*<span class="number">2</span>+mod*<span class="number">3</span>)%mod,</span><br><span class="line">			((ll)n*m%mod*(n+<span class="number">1</span>)-d.g-d.f+mod+mod)%mod*inv2%mod</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//y^x==z (mod p) −&gt;x=?</span></span><br><span class="line"><span class="built_in">scanf</span>(”%d%d%d”,&amp;y,&amp;z,&amp;p),y%=p,z%=p;j=z;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">0</span>)&#123;<span class="built_in">puts</span>(”Cannot␣find␣x”);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(k=s=<span class="number">1</span>;k*k&lt;=p;k++);</span><br><span class="line">std::map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;hash;flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++,s=<span class="number">1LL</span>*s*y%p,j=<span class="number">1LL</span>*j*y%p)hash[j]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=s;i&lt;=k&amp;&amp;!flag;i++,j=<span class="number">1LL</span>*j*s%p)</span><br><span class="line"><span class="keyword">if</span>(hash.<span class="built_in">count</span>(j))ans=i*k−hash[j],flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">puts</span>(”Cannot find x”);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(”%d\n”,ans);</span><br><span class="line"><span class="comment">//exBSGS</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsgs</span><span class="params">(<span class="type">int</span> a,ll b,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a%=p,b%=p,b==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll t=<span class="number">1</span>;<span class="type">int</span> f,g,delta=<span class="number">0</span>,m=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>,i;</span><br><span class="line">	<span class="keyword">for</span>(g=<span class="built_in">gcd</span>(a,p);g!=<span class="number">1</span>;g=<span class="built_in">gcd</span>(a,p))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b%g)<span class="keyword">return</span> −<span class="number">1</span>;</span><br><span class="line">		b/=g,p/=g,t=t*(a/g)%p,delta++;</span><br><span class="line">		<span class="keyword">if</span>(b==t)<span class="keyword">return</span> delta;</span><br><span class="line">	&#125;</span><br><span class="line">	std::map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;hash;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++,b=b*a%p)hash[b]=i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>,f=<span class="built_in">power</span>(a,m);i&lt;=m+<span class="number">1</span>;i++)</span><br><span class="line">	<span class="keyword">if</span>(t=t*f%p,hash.<span class="built_in">count</span>(t))<span class="keyword">return</span> i*m−hash[t]+delta;</span><br><span class="line">	<span class="keyword">return</span> −<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展Lucas"><a href="#扩展Lucas" class="headerlink" title="扩展Lucas"></a>扩展Lucas</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!b)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="number">1</span>; y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	ll d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">	y-=a/b*x;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x,y,d;</span><br><span class="line">	d=<span class="built_in">exgcd</span>(a,b,x,y);</span><br><span class="line">	<span class="keyword">if</span>(d!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pair&lt;ll,ll&gt; <span class="title">excrt</span><span class="params">(<span class="type">int</span> n,ll *c,ll *m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll nc=c[<span class="number">1</span>],nm=m[<span class="number">1</span>],d;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		d=<span class="built_in">gcd</span>(m[i],nm);</span><br><span class="line">		<span class="keyword">if</span>((c[i]-nc)%d!=<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">		nc=<span class="built_in">inv</span>(nm/d,m[i]/d)*((c[i]-nc)/d)*nm+nc;</span><br><span class="line">		nm=nm/d*m[i];</span><br><span class="line">		nc=(nc%nm+nm)%nm;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(nc,nm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> ExLucas&#123;</span><br><span class="line">	ll sum[M];</span><br><span class="line">	<span class="type">int</span> t,p;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _p,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		p=_p; t=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) t=t*p;</span><br><span class="line">		sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,t) sum[i]=(sum[i<span class="number">-1</span>]*((i%p==<span class="number">0</span>)?<span class="number">1</span>:i))%t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> nq,sq;</span><br><span class="line">	<span class="function">ll <span class="title">fac</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		nq+=n/p;</span><br><span class="line">		<span class="keyword">if</span>(sum[t]==<span class="number">1</span>||(n/t)%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> sum[n%t]*<span class="built_in">fac</span>(n/p)%t;</span><br><span class="line">		<span class="keyword">return</span> (t-sum[n%t]%t*<span class="built_in">fac</span>(n/p)%t)%t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m,<span class="type">int</span> p,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">init</span>(p,k); sq=<span class="number">0</span>;</span><br><span class="line">		ll ans,sum;</span><br><span class="line">		nq=<span class="number">0</span>; ans=<span class="built_in">fac</span>(n); sq+=nq;</span><br><span class="line">		nq=<span class="number">0</span>; sum=<span class="built_in">fac</span>(m); sq-=nq;</span><br><span class="line">		nq=<span class="number">0</span>; sum=sum*<span class="built_in">fac</span>(n-m)%t; sq-=nq;</span><br><span class="line">		<span class="keyword">return</span> ans*<span class="built_in">inv</span>(sum,t)%t*<span class="built_in">Pow</span>(p,sq,t)%t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,mod,q,c[<span class="number">100</span>],mo[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod; q=mod;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">if</span>(q%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(t=<span class="number">0</span>;q%i==<span class="number">0</span>;q/=i) t++;</span><br><span class="line">			++top;</span><br><span class="line">			c[top]=ExLucas::<span class="built_in">C</span>(n,m,i,t);</span><br><span class="line">			mo[top]=ExLucas::t;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(q!=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		c[++top]=ExLucas::<span class="built_in">C</span>(n,m,q,<span class="number">1</span>);</span><br><span class="line">		mo[top]=ExLucas::t;</span><br><span class="line">	&#125;</span><br><span class="line">	pair&lt;ll,ll&gt; ans=<span class="built_in">excrt</span>(top,c,mo);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans.fi);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Min25筛"><a href="#Min25筛" class="headerlink" title="Min25筛"></a>Min25筛</h2><p>前提：积性函数；表示为 $\sum_{i\in \mathbb{P}}i^k$ 或 直接算；$f(p^k)$ 快速算。</p>
<p>$g(n,j)=\sum_{i=1}^{n}[i\in \mathbb{P} \text{ or }\min_i(p)&gt; P_j]$</p>
<p>$$<br>g(n,j)=\begin{cases}<br>    g(n,j-1) &amp; \text{ if } P_j^2&gt;n \newline<br>    g(n,j-1)-P_j^k\left ( g(\left \lfloor \frac{n}{P_j} \right \rfloor,j-1)-g(P_{j-1},j-1) \right ) &amp; \text{ otherwise }<br>\end{cases}<br>$$</p>
<p>$\sum_{i=1}^n[i\in \mathbb{P}]i^k=g(n,\pi( \left \lfloor  \sqrt n\right \rfloor))$。</p>
<p>$$S(n,j)=\left ( g(n,\pi( \left \lfloor  \sqrt n\right \rfloor)) \right )-g(P_{j-1},j-1))+ \sum_{k=j}^{\sqrt n}\sum_{P_k^{q+1}\leq n}(f(P_k^q)S(\left \lfloor \frac{n}{P_k^q} \right \rfloor,k+1)+f(P_{k}^{q+1}))$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000000</span>;</span><br><span class="line">ll n,m,Sqr,pri[N],sp[N],id1[N],id2[N],w[N];</span><br><span class="line">ll h[N],g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];<span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;pri[++tot]=i; sp[tot]=(sp[tot<span class="number">-1</span>]+i)%mod;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;<span class="number">1ll</span>*i*pri[j]&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll n,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>||pri[j]&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll t=(n&lt;=Sqr)?id1[n]:id2[::n/n];</span><br><span class="line">    ll ans=(mod+(g[t]-sp[j<span class="number">-1</span>])-(h[t]-(j<span class="number">-1</span>))%mod)%mod;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">1</span>) ans+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;=tot&amp;&amp;pri[k]*pri[k]&lt;=n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll tmp=pri[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> q=<span class="number">1</span>;tmp*pri[k]&lt;=n;q++,tmp*=pri[k])</span><br><span class="line">            ans=<span class="built_in">Add</span>(ans,<span class="built_in">Add</span>(pri[k]^(q+<span class="number">1</span>),<span class="built_in">Mul</span>(pri[k]^q,<span class="built_in">S</span>(n/tmp,k+<span class="number">1</span>))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n); Sqr=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">init_prime</span>(Sqr);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j=n/(n/i); w[++m]=n/i;</span><br><span class="line">        h[m]=(w[m]<span class="number">-1</span>)%mod;</span><br><span class="line">        g[m]=(w[m]%mod)*((w[m]+<span class="number">1</span>)%mod)%mod*inv2%mod<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(w[m]&lt;=Sqr) id1[w[m]]=m;</span><br><span class="line">        <span class="keyword">else</span> id2[j]=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll k=pri[i]*pri[i];<span class="comment">//可用long double 优化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;k&lt;=w[j];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t=(w[j]/pri[i]&lt;=Sqr)?id1[w[j]/pri[i]]:id2[n/(w[j]/pri[i])];</span><br><span class="line">            h[j]=<span class="built_in">Add</span>(h[j],(mod-(h[t]-(i<span class="number">-1</span>)%mod))%mod);</span><br><span class="line">            g[j]=<span class="built_in">Add</span>(g[j],mod<span class="number">-1ll</span>*pri[i]*(g[t]-sp[i<span class="number">-1</span>]+mod)%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(<span class="built_in">S</span>(n,<span class="number">1</span>)+<span class="number">1</span>)%mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h2><h3 id="FWT"><a href="#FWT" class="headerlink" title="FWT"></a>FWT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_or</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;N;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">                <span class="keyword">if</span>(opt==<span class="number">1</span>)a[i+j+k]=(a[j+k]+a[i+j+k])%MOD;</span><br><span class="line">                <span class="keyword">else</span> a[i+j+k]=(a[i+j+k]+MOD-a[j+k])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_and</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;N;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">                <span class="keyword">if</span>(opt==<span class="number">1</span>)a[j+k]=(a[j+k]+a[i+j+k])%MOD;</span><br><span class="line">                <span class="keyword">else</span> a[j+k]=(a[j+k]+MOD-a[i+j+k])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT_xor</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;N;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> X=a[j+k],Y=a[i+j+k];</span><br><span class="line">                a[j+k]=(X+Y)%MOD;a[i+j+k]=(X+MOD-Y)%MOD;</span><br><span class="line">                <span class="keyword">if</span>(opt==<span class="number">-1</span>)a[j+k]=<span class="number">1ll</span>*a[j+k]*inv2%MOD,a[i+j+k]=<span class="number">1ll</span>*a[i+j+k]*inv2%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Com</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">Com</span>(db _x=<span class="number">0</span>,db _y=<span class="number">0</span>) &#123;x=_x,y=_y;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Com <span class="keyword">operator</span> + (<span class="type">const</span> Com &amp;A,<span class="type">const</span> Com &amp;B)</span><br><span class="line">	&#123;<span class="keyword">return</span> <span class="built_in">Com</span>(A.x+B.x,A.y+B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Com <span class="keyword">operator</span> - (<span class="type">const</span> Com &amp;A,<span class="type">const</span> Com &amp;B)</span><br><span class="line">	&#123;<span class="keyword">return</span> <span class="built_in">Com</span>(A.x-B.x,A.y-B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Com <span class="keyword">operator</span> * (<span class="type">const</span> Com &amp;A,<span class="type">const</span> Com &amp;B)</span><br><span class="line">	&#123;<span class="keyword">return</span> <span class="built_in">Com</span>(A.x*B.x-A.y*B.y,A.x*B.y+B.x*A.y);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="keyword">namespace</span> Poly&#123;</span><br><span class="line">	<span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">	<span class="type">int</span> R[M]; Com W[M];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(Com *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">		&#125;</span><br><span class="line">		Com w;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">					w=W[i+k]*a[i+j+k],</span><br><span class="line">					a[i+j+k]=a[j+k]-w,</span><br><span class="line">					a[j+k]=a[j+k]+w;</span><br><span class="line">		<span class="keyword">if</span>(opt!=<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">			<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i].x/=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">				W[i+j]=<span class="built_in">Com</span>(<span class="built_in">cos</span>(pi*j/i),<span class="built_in">sin</span>(pi*j/i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="拆系数FFT"><a href="#拆系数FFT" class="headerlink" title="拆系数FFT"></a>拆系数FFT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mo=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">db pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    db x,y;</span><br><span class="line">    <span class="built_in">P</span>(db _x=<span class="number">0</span>,db _y=<span class="number">0</span>) &#123;x=_x,y=_y;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> +(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)&#123;<span class="keyword">return</span> (P)&#123;A.x+B.x,A.y+B.y&#125;;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> -(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)&#123;<span class="keyword">return</span> (P)&#123;A.x-B.x,A.y-B.y&#125;;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> *(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)&#123;<span class="keyword">return</span> (P)&#123;A.x*B.x-A.y*B.y,A.x*B.y+A.y*B.x&#125;;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> /(<span class="type">const</span> P&amp;A,<span class="type">const</span> db &amp;x)&#123;<span class="keyword">return</span> (P)&#123;A.x/x,A.y/x&#125;;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">P <span class="title">conj</span><span class="params">(P A)</span> </span>&#123;<span class="keyword">return</span> (P)&#123;A.x,-A.y&#125;;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">P W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">            W[i+j]=(P)&#123;<span class="built_in">cos</span>(pi*j/i),<span class="built_in">sin</span>(pi*j/i)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;P&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(P *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    P w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k],</span><br><span class="line">                a[i+j+k]=a[j+k]-w,</span><br><span class="line">                a[j+k]=a[j+k]+w;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=a[i]/n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]+B[i];</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Real(A) ((ll)floor(A.x+0.5))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Imag(A) ((ll)floor(A.y+0.5))</span></span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> Poly C,D;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    C.<span class="built_in">resize</span>(len); D.<span class="built_in">resize</span>(len); A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(P)&#123;<span class="built_in">Real</span>(A[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(A[i])&gt;&gt;<span class="number">15</span>&#125;,D[i]=(P)&#123;<span class="built_in">Real</span>(B[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(B[i])&gt;&gt;<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="built_in">ntt</span>(C,len,<span class="number">1</span>); <span class="built_in">ntt</span>(D,len,<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,len)</span><br><span class="line">    &#123;</span><br><span class="line">        P d4,d0,d1,d2,d3;</span><br><span class="line">        j=(len-i)&amp;(len<span class="number">-1</span>);</span><br><span class="line">        d4=<span class="built_in">conj</span>(C[j]); d0=(d4+C[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>); d1=(d4-C[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">        d4=<span class="built_in">conj</span>(D[j]);  d2=(d4+D[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>); d3=(d4-D[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">        A[i]=d0*d2+d1*d3*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        B[i]=d0*d3+d1*d2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(<span class="built_in">Real</span>(A[i]) + (<span class="built_in">Imag</span>(A[i]) % mo &lt;&lt; <span class="number">30</span>) + (<span class="built_in">Real</span>(B[i]) % mo &lt;&lt; <span class="number">15</span>))%mo;</span><br><span class="line">    C.<span class="built_in">resize</span>(k); <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">ll W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">    A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Mul</span>(A[i],k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">    B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">    Poly g,h;</span><br><span class="line">    g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">    <span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">        <span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">        <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">    <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Ln</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	A=<span class="built_in">jf</span>((~A)*<span class="built_in">df</span>(A));</span><br><span class="line">	A.<span class="built_in">resize</span>(n); <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Exp</span><span class="params">(<span class="type">const</span> Poly &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>; <span class="keyword">for</span>(;n&lt;A.<span class="built_in">size</span>();n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	Poly B,C,D; B.<span class="built_in">clear</span>(); B.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">2</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=B; C.<span class="built_in">resize</span>(m); D=A; D.<span class="built_in">resize</span>(m);</span><br><span class="line">		C=D-<span class="built_in">Ln</span>(C); C[<span class="number">0</span>]=<span class="built_in">Add</span>(C[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">		B=B*C; B.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ^(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(!A.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	ll tmp=A[<span class="number">0</span>],w=<span class="built_in">Pow</span>(tmp,k);</span><br><span class="line">	tmp=<span class="built_in">Pow</span>(tmp,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*tmp%mod;</span><br><span class="line">	A=<span class="built_in">Exp</span>(<span class="built_in">Ln</span>(A)*k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*w%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Cos</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)+<span class="built_in">Exp</span>(A*(mod-w4)))*((mod+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sin</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)-<span class="built_in">Exp</span>(A*(mod-w4)))*(<span class="built_in">Pow</span>(w4,mod<span class="number">-2</span>)*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sqrt</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly C,D,<span class="built_in">B</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	C.<span class="built_in">clear</span>(); D.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">4</span>;(l&gt;&gt;<span class="number">2</span>)&lt;n;l&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=A; C.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		D=B; D.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>); D=(~D);</span><br><span class="line">		C.<span class="built_in">resize</span>(l); D.<span class="built_in">resize</span>(l);</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">1</span>); <span class="built_in">ntt</span>(D,l,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,l) C[i]=C[i]*D[i]%mod;</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">-1</span>);</span><br><span class="line">		B.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,(l&gt;&gt;<span class="number">1</span>)) B[i]=<span class="built_in">Add</span>(C[i],B[i])*((mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>/(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>,deg=A.<span class="built_in">size</span>()-B.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A)); <span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;=deg;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); B=~B; B.<span class="built_in">resize</span>(deg);</span><br><span class="line">	A=A*B; A.<span class="built_in">resize</span>(deg);</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A));</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>%(<span class="type">const</span> Poly &amp;A,<span class="type">const</span> Poly &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>()&lt;B.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	Poly C=A-(A/B)*B;</span><br><span class="line">	C.<span class="built_in">resize</span>(B.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Pow</span><span class="params">(Poly A,ll n,Poly M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly B=A; n--;</span><br><span class="line">	<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,A=(A*A)%M) <span class="keyword">if</span>(n&amp;<span class="number">1ll</span>) B=(B*A)%M;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">64005</span>*<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ((u&lt;&lt;1)|1)</span></span><br><span class="line">Poly P[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll ans[N],a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">MulT</span><span class="params">(Poly A,Poly B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	B.<span class="built_in">clear</span>();</span><br><span class="line">	len--;</span><br><span class="line">	<span class="built_in">fo</span>(i,m<span class="number">-1</span>,n+m<span class="number">-2</span>) B.<span class="built_in">pb</span>(A[i&amp;len]);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		P[u].<span class="built_in">pb</span>(<span class="number">1</span>); P[u].<span class="built_in">pb</span>(<span class="built_in">Dec</span>(<span class="number">0</span>,a[l]));<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">	P[u]=P[lc]*P[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(ans[l]=A[<span class="number">0</span>]);</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid,<span class="built_in">MulT</span>(A,P[rc])); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r,<span class="built_in">MulT</span>(A,P[lc]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">Poly F,G;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">max</span>(n,m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) F.<span class="built_in">pb</span>(<span class="built_in">read</span>());</span><br><span class="line">	F.<span class="built_in">resize</span>(n+k+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k);</span><br><span class="line">	F=<span class="built_in">MulT</span>(F,(~P[<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k,F);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll fc[N],fv[N],iv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PolyInit</span>();</span><br><span class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fc[i]=fc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    fv[n]=<span class="built_in">Pow</span>(fc[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) fv[i<span class="number">-1</span>]=fv[i]*i%mod;</span><br><span class="line">    iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcS</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//第一类斯特林数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) &#123;s[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;s[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">calcS</span>(n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fd</span>(i,n,<span class="number">1</span>) s[i]=<span class="built_in">Add</span>(s[i<span class="number">-1</span>],<span class="built_in">Mul</span>(s[i],n<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">calcS</span>(n&gt;&gt;<span class="number">1</span>); <span class="type">int</span> l=n&gt;&gt;<span class="number">1</span>,len;</span><br><span class="line">        <span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">        d[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,l) d[i]=d[i<span class="number">-1</span>]*l%mod;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) d[i]=d[i]*fv[i]%mod,c[i]=s[i]*fc[i]%mod;</span><br><span class="line">        <span class="built_in">reverse</span>(&amp;d[<span class="number">0</span>],&amp;d[l+<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">1</span>); <span class="built_in">ntt</span>(c,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=d[i]*c[i]%mod;</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) d[i]=d[i+l]*fv[i]%mod;</span><br><span class="line">        <span class="built_in">fo</span>(i,l+<span class="number">1</span>,len<span class="number">-1</span>) d[i]=c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) c[i]=s[i];</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">1</span>); <span class="built_in">ntt</span>(c,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=d[i]*c[i]%mod;</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n) s[i]=d[i];</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=c[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcB</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="comment">//求伯努利数</span></span></span><br><span class="line"><span class="function"><span class="comment">//原理:伯努利数的EGF=x/(e^x-1)</span></span></span><br><span class="line"><span class="function"><span class="comment">//sum(i=[0,n-1])[B_i*C(n,i)]=0(n&gt;1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n+=<span class="number">2</span>;</span><br><span class="line">    B.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) B[i]=fv[i+<span class="number">1</span>];</span><br><span class="line">    B=~B;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n) B[i]=B[i]*fc[i]%mod;</span><br><span class="line">    B.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="矩阵相关"><a href="#矩阵相关" class="headerlink" title="矩阵相关"></a>矩阵相关</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">502</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	ll a[N][N];</span><br><span class="line">	<span class="built_in">matrix</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> Mat&#123;</span><br><span class="line">	<span class="type">static</span> ll a[N][N],b[N][N+N],c[N][N],d[N][N];</span><br><span class="line">	<span class="type">static</span> matrix B,C;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">det</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span><span class="comment">//行列式</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		ll d=<span class="number">1</span>,iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=i;</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(a[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) &#123;<span class="built_in">fo</span>(j,i,n) <span class="built_in">swap</span>(a[k][j],a[i][j]); d=(mod-d)%mod;&#125;</span><br><span class="line">			<span class="keyword">if</span>(!a[i][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			iv=<span class="built_in">Pow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=a[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n) a[j][k]=<span class="built_in">Dec</span>(a[j][k],a[i][k]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">			d=d*a[i][i]%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> matrix <span class="title">inv</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span><span class="comment">//求逆</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) b[i][j+n]=<span class="number">0</span>,b[i][j]=A.a[i][j];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i][i+n]=<span class="number">1</span>;</span><br><span class="line">		ll iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=n+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n) <span class="keyword">if</span>(b[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) <span class="built_in">fo</span>(j,<span class="number">1</span>,n+n) <span class="built_in">swap</span>(b[i][j],b[k][j]);</span><br><span class="line">			iv=<span class="built_in">Pow</span>(b[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=b[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n+n) b[j][k]=<span class="built_in">Dec</span>(b[j][k],b[i][k]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			iv=<span class="built_in">Pow</span>(b[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n+n) b[i][j]=b[i][j]*iv%mod;</span><br><span class="line">			<span class="built_in">fd</span>(j,i<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">if</span>(b[j][i])</span><br><span class="line">				&#123;</span><br><span class="line">					tmp=b[j][i];</span><br><span class="line">					<span class="built_in">fo</span>(k,i,n+n) b[j][k]=<span class="built_in">Dec</span>(b[j][k],b[i][k]*tmp%mod);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		B.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) B.a[i][j]=b[i][j+n];</span><br><span class="line">		<span class="keyword">return</span> B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">r</span><span class="params">(<span class="type">const</span> matrix A,<span class="type">int</span> n)</span><span class="comment">//求秩</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		<span class="type">int</span> d=<span class="number">0</span>;</span><br><span class="line">		ll iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=n+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n) <span class="keyword">if</span>(a[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			d++;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) <span class="built_in">fo</span>(j,i,n) <span class="built_in">swap</span>(a[i][j],a[k][j]);</span><br><span class="line">			iv=<span class="built_in">Pow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=a[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n) a[j][k]=<span class="built_in">Dec</span>(a[j][k],tmp*a[i][k]%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">static</span> ll v[N],w[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ins</span><span class="params">(ll *v,<span class="type">int</span> n,<span class="type">int</span> id,ll *ans)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) w[i]=<span class="number">0</span>;</span><br><span class="line">		w[id]=<span class="number">1</span>;</span><br><span class="line">		ll tmp;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">if</span>(v[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(!c[i][i])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">fd</span>(j,i,<span class="number">1</span>) c[i][j]=v[j];</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">1</span>,n) d[i][j]=w[j];</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				tmp=<span class="built_in">Pow</span>(c[i][i],mod<span class="number">-2</span>)*v[i]%mod;</span><br><span class="line">				<span class="built_in">fd</span>(j,i,<span class="number">1</span>) v[j]=<span class="built_in">Dec</span>(v[j],c[i][j]*tmp%mod);</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">1</span>,n) w[j]=<span class="built_in">Dec</span>(w[j],d[i][j]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans[i]=w[i];</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_G</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n,ll *p)</span><span class="comment">//解齐次线性方程非零解</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c)); <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,n) v[j]=a[j][i];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ins</span>(v,n,i,p)) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> matrix <span class="title">solve</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span><span class="comment">//求所有代数余子式</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> rank=<span class="built_in">r</span>(A,n);</span><br><span class="line">		<span class="keyword">if</span>(rank == n)</span><br><span class="line">		&#123;</span><br><span class="line">			ll d=<span class="built_in">det</span>(A,n);</span><br><span class="line">			B=<span class="built_in">inv</span>(A,n);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) C.a[i][j]=B.a[j][i]*d%mod;</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(rank &lt;= n<span class="number">-2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			C.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">static</span> ll p[N],q[N];</span><br><span class="line">			<span class="built_in">get_G</span>(A,n,q);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) B.a[j][i]=A.a[i][j];</span><br><span class="line">			<span class="built_in">get_G</span>(B,n,p);</span><br><span class="line">			<span class="type">int</span> c=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(q[i]) &#123;c=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(p[i]) &#123;r=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(i!=r)</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">						<span class="keyword">if</span>(j!=c)</span><br><span class="line">							B.a[i-(i&gt;r)][j-(j&gt;c)]=A.a[i][j];</span><br><span class="line">			ll d=<span class="built_in">det</span>(B,n<span class="number">-1</span>);</span><br><span class="line">			C.a[r][c]=((r+c)%<span class="number">2</span>==<span class="number">1</span>)?(mod-d)%mod:d;</span><br><span class="line">			ll iv=<span class="built_in">Pow</span>(q[c]*p[r]%mod,mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">					C.a[i][j]=C.a[r][c]*iv%mod*p[i]%mod*q[j]%mod;</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> n,w[N][N],l[N];</span><br><span class="line">	<span class="type">int</span> lx[N],ly[N],slk[N],pre[N];</span><br><span class="line">	<span class="type">bool</span> visy[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> v=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) pre[i]=visy[i]=<span class="number">0</span>,slk[i]=inf;</span><br><span class="line">		l[v]=u;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> t,d,id;;)</span><br><span class="line">		&#123;</span><br><span class="line">			t=l[v]; d=inf; visy[v]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(!visy[i])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(slk[i]&gt;lx[t]+ly[i]-w[t][i])</span><br><span class="line">						slk[i]=lx[t]+ly[i]-w[t][i],pre[i]=v;</span><br><span class="line">					<span class="keyword">if</span>(d&gt;slk[i]) d=slk[i],id=i;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(!visy[i]) slk[i]-=d;</span><br><span class="line">				<span class="keyword">else</span> lx[l[i]]-=d,ly[i]+=d;</span><br><span class="line">			v=id;</span><br><span class="line">			<span class="keyword">if</span>(l[v]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(;v;l[v]=l[pre[v]],v=pre[v]);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//calculate w</span></span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) lx[i]=ly[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) lx[i]=<span class="built_in">max</span>(lx[i],w[i][j]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">bfs</span>(i);</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans+=w[l[i]][i];</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> inf=<span class="number">2e9</span>;</span><br><span class="line">	<span class="type">int</span> n,s,t,d[N]; queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="type">int</span> head[N],cur[N],ne[M],ver[M],val[M],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) head[i]=<span class="number">0</span>; tot=<span class="number">1</span>; n=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) cur[i]=head[i];</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) d[i]=<span class="number">-1</span>; q.<span class="built_in">push</span>(s); d[s]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,r,v;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==d[u]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i]));</span><br><span class="line">				<span class="keyword">if</span>(!r) <span class="keyword">continue</span>;</span><br><span class="line">				val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">				res-=r; <span class="keyword">if</span>(!res) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> flow=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">bfs</span>()) flow+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dijkstra优化费用流"><a href="#Dijkstra优化费用流" class="headerlink" title="Dijkstra优化费用流"></a>Dijkstra优化费用流</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> n,m,s,t;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],cost[M],ne[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; cost[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; cost[tot]=-c;ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> h[N],dis[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=inf;</span><br><span class="line">		queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(h[s]=<span class="number">0</span>,q.<span class="built_in">push</span>(s);!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;h[v=ver[i]]&gt;h[u]+cost[i])</span><br><span class="line">				&#123;</span><br><span class="line">					h[v]=h[u]+cost[i];</span><br><span class="line">					<span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			vis[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> u,dis;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)&#123;<span class="keyword">return</span> A.dis&gt;B.dis;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> pv[N],pe[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">MCMF</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>,co=<span class="number">0</span>;</span><br><span class="line">		priority_queue&lt;node&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(;;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">			<span class="keyword">for</span>(dis[s]=<span class="number">0</span>,q.<span class="built_in">push</span>((node)&#123;s,dis[s]&#125;);!q.<span class="built_in">empty</span>();)</span><br><span class="line">			&#123;</span><br><span class="line">				node now=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">				<span class="type">int</span> u=now.u;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]&lt;now.dis) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					v=ver[i];</span><br><span class="line">					<span class="keyword">if</span>(dis[v]+h[v]&gt;dis[u]+h[u]+cost[i])</span><br><span class="line">						dis[v]=dis[u]+h[u]+cost[i]-h[v],</span><br><span class="line">						q.<span class="built_in">push</span>((node)&#123;v,dis[v]&#125;),</span><br><span class="line">						pv[v]=u,pe[v]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dis[t]==inf) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]+=dis[i];</span><br><span class="line">			<span class="type">int</span> tmp=inf;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=pv[u]) tmp=<span class="built_in">min</span>(tmp,val[pe[u]]);</span><br><span class="line">			flow+=tmp; co+=h[t]*tmp;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t,i;u!=s;u=pv[u]) i=pe[u],val[i]-=tmp,val[i^<span class="number">1</span>]+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,flow,co);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="k短路（可持久化可并堆优化）"><a href="#k短路（可持久化可并堆优化）" class="headerlink" title="k短路（可持久化可并堆优化）"></a>k短路（可持久化可并堆优化）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2.6e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=N*<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">2e7</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> head[N],ne[M],ver[M],tot;</span><br><span class="line">	ll val[M];</span><br><span class="line">	<span class="built_in">Edge</span>()&#123;tot=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;E1,E2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> u;ll d;</span><br><span class="line">	node* <span class="keyword">operator</span>=(node a)&#123;u=a.u,d=a.d; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node A,node B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.d&gt;B.d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> rt[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span>&#123;</span><br><span class="line">	<span class="type">int</span> cnt,lc[K],rc[K],d[K];</span><br><span class="line">	node v[K];</span><br><span class="line">	<span class="built_in">Heap</span>()&#123;d[<span class="number">0</span>]=<span class="number">-1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(node w)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		v[++cnt]=w;</span><br><span class="line">		<span class="keyword">return</span> cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(v[x]&lt;v[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="type">int</span> u=++cnt;</span><br><span class="line">		lc[u]=lc[x];</span><br><span class="line">		v[u]=v[x];</span><br><span class="line">		rc[u]=<span class="built_in">merge</span>(rc[x],y);</span><br><span class="line">		<span class="keyword">if</span>(d[lc[u]]&lt;d[rc[u]]) <span class="built_in">swap</span>(lc[u],rc[u]);</span><br><span class="line">		d[u]=d[rc[u]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;st;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="type">bool</span> bo[N],vis[N],on_tree[M];</span><br><span class="line">ll dis[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bo[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=E2.head[u],v;i;i=E2.ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=E2.ver[i];</span><br><span class="line">		<span class="keyword">if</span>(bo[v]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(dis[v]==dis[u]+E2.val[i])</span><br><span class="line">			fa[v]=u,on_tree[i]=<span class="number">1</span>,<span class="built_in">dfs</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	q.<span class="built_in">push</span>(&#123;s,<span class="number">0</span>&#125;); dis[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> a=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(vis[a.u]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[a.u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=E2.head[a.u],v;i;i=E2.ne[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=E2.ver[i];</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[a.u]+E2.val[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[a.u]+E2.val[i];</span><br><span class="line">				q.<span class="built_in">push</span>(&#123;v,dis[v]&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bo[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(fa[u]) rt[u]=st.<span class="built_in">merge</span>(rt[u],rt[fa[u]]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=E2.head[u],v;i;i=E2.ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=E2.ver[i];</span><br><span class="line">		<span class="keyword">if</span>(!bo[v]&amp;&amp;fa[v]==u) <span class="built_in">dfs2</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	E1.<span class="built_in">add</span>(x,y,z);</span><br><span class="line">	E2.<span class="built_in">add</span>(y,x,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); z=<span class="built_in">read</span>(); <span class="built_in">add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">	s=<span class="number">1</span>; t=n;</span><br><span class="line">	<span class="built_in">dijkstra</span>(t);</span><br><span class="line">	<span class="built_in">dfs</span>(t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dis[s]);</span><br><span class="line">	k--;</span><br><span class="line">	<span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(u,s,t)</span><br><span class="line">		<span class="keyword">if</span>(vis[u])</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=E1.head[u],v;i;i=E1.ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!on_tree[i]&amp;&amp;vis[v=E1.ver[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			rt[u]=st.<span class="built_in">merge</span>(rt[u],st.<span class="built_in">newnode</span>(&#123;v,dis[v]-dis[u]+E1.val[i]&#125;));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,s,t) bo[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(rt[s]) q.<span class="built_in">push</span>((node)&#123;rt[s],dis[s]+st.v[rt[s]].d&#125;);</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> now=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		k--; <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,now.d);</span><br><span class="line">		<span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(st.lc[now.u]) q.<span class="built_in">push</span>((node)&#123;st.lc[now.u],now.d-st.v[now.u].d+st.v[st.lc[now.u]].d&#125;);</span><br><span class="line">		<span class="keyword">if</span>(st.rc[now.u]) q.<span class="built_in">push</span>((node)&#123;st.rc[now.u],now.d-st.v[now.u].d+st.v[st.rc[now.u]].d&#125;);</span><br><span class="line">		<span class="type">int</span> u=rt[st.v[now.u].u];</span><br><span class="line">		<span class="keyword">if</span>(u) q.<span class="built_in">push</span>((node)&#123;u,now.d+st.v[u].d&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="弦图"><a href="#弦图" class="headerlink" title="弦图"></a>弦图</h2><p>$N(x)$，与 $x$ 直接相连的点集。</p>
<p>单纯点：${x}+N(x)$ 的诱导子图为一个团。</p>
<p>完美消除序列：$v_1,v_2,\cdots,v_n$，其中 $v_i$ 在 $\{v_i,v_{i+1},\cdots,v_n\}$ 中为单纯点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//v即为完美消除序列，pos即为点i在完美消除序列上的位置</span></span><br><span class="line"><span class="comment">//判断v是否为完美消除序列，根据定义即可 O(n+m) 判断。</span></span><br><span class="line"><span class="comment">//极大团可通过不存在nxt_y=x且|N(x)|+1&lt;=|N(y)|判断</span></span><br><span class="line"><span class="comment">//完美消除序列从后往前染色=色数=最大团点数</span></span><br><span class="line"><span class="comment">//完美消除序列从后往前选能选的点=最大独立集=最小团覆盖</span></span><br><span class="line"><span class="type">int</span> id[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);&#125;</span><br><span class="line"><span class="type">int</span> head[N],ne[N],ver[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> best,label[N];</span><br><span class="line"><span class="type">bool</span> bo[N];</span><br><span class="line"><span class="type">int</span> pos[N],v[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[i]; head[i]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head[i]=ne[head[i]];</span><br><span class="line">	<span class="keyword">for</span>(;!head[best];best--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">MCS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	best=<span class="number">0</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">add</span>(<span class="number">0</span>,i),label[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=ver[head[best]];</span><br><span class="line">		<span class="keyword">while</span>(bo[x]) <span class="built_in">del</span>(best),x=ver[head[best]];</span><br><span class="line">		bo[x]=<span class="number">1</span>;</span><br><span class="line">		pos[x]=i; v[i]=x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> y:adj[x]) <span class="keyword">if</span>(!bo[y]) <span class="built_in">add</span>(++label[y],y),best=<span class="built_in">max</span>(best,label[y]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=v[i],num=c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> y:adj[x]) <span class="keyword">if</span>(pos[y]&gt;pos[x]) num--;</span><br><span class="line">		ans=ans*num%<span class="number">1000000007ll</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最小树形图（朱-刘算法）"><a href="#最小树形图（朱-刘算法）" class="headerlink" title="最小树形图（朱-刘算法）"></a>最小树形图（朱-刘算法）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> val,v,id;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;<span class="keyword">return</span> A.val&gt;B.val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span>&#123;</span><br><span class="line">	node v[N];</span><br><span class="line">	<span class="type">int</span> dis[N],ls[N],rs[N],tag[N];</span><br><span class="line">	<span class="type">bool</span> del[N];</span><br><span class="line">	<span class="type">int</span> rt[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;<span class="keyword">if</span>(u) tag[u]+=t,v[u].val+=t;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushtag</span>(ls[u],tag[u]);</span><br><span class="line">		<span class="built_in">pushtag</span>(rs[u],tag[u]);</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(v[x].val&gt;v[y].val) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">pushtag</span>(y,-tag[x]);</span><br><span class="line">		rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">		<span class="keyword">if</span>(dis[ls[x]]&lt;dis[rs[x]]) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">		dis[x]=dis[rs[x]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">pushdown</span>(x); <span class="keyword">return</span> <span class="built_in">merge</span>(ls[x],rs[x]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> va,<span class="type">int</span> id,<span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		v[id]=(node)&#123;va,to,id&#125;;</span><br><span class="line">		rt[y]=<span class="built_in">merge</span>(rt[y],id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dec</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> v)</span> </span>&#123;<span class="built_in">pushtag</span>(id,-v);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> node <span class="title">top</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;rt[u]&amp;&amp;<span class="built_in">find</span>(v[rt[u]].v)==u;) rt[u]=<span class="built_in">pop</span>(rt[u]);</span><br><span class="line">		<span class="keyword">if</span>(!rt[u]) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">		v[rt[u]].v=<span class="built_in">find</span>(v[rt[u]].v);</span><br><span class="line">		<span class="keyword">return</span> v[rt[u]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Heap h;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u=<span class="built_in">find</span>(u); v=<span class="built_in">find</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(u==v) <span class="keyword">return</span>;</span><br><span class="line">	h.rt[v]=h.<span class="built_in">merge</span>(h.rt[u],h.rt[v]),fa[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,rt,pre[N],bel[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); rt=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>();</span><br><span class="line">		h.<span class="built_in">ins</span>(y,z,i,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt=n;</span><br><span class="line">	node now;</span><br><span class="line">	bel[rt]=rt;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n&lt;&lt;<span class="number">1</span>) fa[i]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j=i;</span><br><span class="line">		<span class="keyword">for</span>(;!bel[j];)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!bel[j]) bel[j]=i,now=h.<span class="built_in">top</span>(j),ans+=now.val,j=now.v;</span><br><span class="line">			<span class="keyword">if</span>(bel[j]!=i) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(;bel[j]!=<span class="number">-1</span>;) bel[j]=<span class="number">-1</span>,j=pre[j]=(now=h.<span class="built_in">top</span>(j)).v,h.<span class="built_in">dec</span>(now.id,now.val);</span><br><span class="line">			++cnt;</span><br><span class="line">			<span class="keyword">for</span>(;bel[j]!=i;) bel[j]=i,<span class="built_in">Union</span>(j,cnt),j=pre[j];</span><br><span class="line">			j=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="带花树-O-n-3"><a href="#带花树-O-n-3" class="headerlink" title="带花树 $O(n^3)$"></a>带花树 $O(n^3)$</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> n,tim;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> fa[N],t[N],vst[N],pre[N],matc[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		tim++; x=fa[x]; y=fa[y];</span><br><span class="line">		<span class="keyword">for</span>(;vst[x]!=tim;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x)</span><br><span class="line">			&#123;</span><br><span class="line">				vst[x]=tim; x=fa[pre[matc[x]]];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">swap</span>(x,y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">blossom</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> lca)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;fa[x]!=lca;)</span><br><span class="line">		&#123;</span><br><span class="line">			pre[x]=y; y=matc[x];</span><br><span class="line">			<span class="keyword">if</span>(t[y]==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t[y]=<span class="number">0</span>; q.<span class="built_in">push</span>(y);</span><br><span class="line">			&#125;</span><br><span class="line">			fa[x]=fa[y]=fa[lca]; x=pre[y];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Augument</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fa[i]=i;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) t[i]=<span class="number">-1</span>;</span><br><span class="line">		q=<span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">		t[s]=<span class="number">0</span>; q.<span class="built_in">push</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> v:adj[u])</span><br><span class="line">				<span class="keyword">if</span>(t[v]==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					pre[v]=u; t[v]=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(!matc[v])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">for</span>(<span class="type">int</span> to=v,from=u;to;from=pre[to])</span><br><span class="line">						&#123;</span><br><span class="line">							matc[to]=from;</span><br><span class="line">							<span class="built_in">swap</span>(matc[from],to);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					t[matc[v]]=<span class="number">0</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(matc[v]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(t[v]==<span class="number">0</span>&amp;&amp;fa[u]!=fa[v])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> lca=<span class="built_in">LCA</span>(u,v);</span><br><span class="line">					<span class="built_in">blossom</span>(u,v,lca);</span><br><span class="line">					<span class="built_in">blossom</span>(v,u,lca);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> _n,<span class="type">int</span> m,<span class="type">int</span> *x,<span class="type">int</span> *y,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; &amp;vec)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		n=_n;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(x[i],y[i]);</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>) <span class="keyword">if</span>(!matc[i]) ans+=<span class="built_in">Augument</span>(i);</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(matc[i]&amp;&amp;i&lt;matc[i]) vec.<span class="built_in">pb</span>(<span class="built_in">make_pair</span>(i,matc[i]));</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) matc[i]=t[i]=fa[i]=pre[i]=vst[i]=<span class="number">0</span>,adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SCC"><a href="#SCC" class="headerlink" title="SCC"></a>SCC</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	low[u]=dfn[u]=++tim; s.<span class="built_in">push</span>(u); vis[u]=<span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> len=adj[u].<span class="built_in">size</span>(),v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v=adj[u][i]]) <span class="built_in">Tarjan</span>(v),low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(vis[v]) low[u] = <span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">	<span class="keyword">if</span>(dfn[u]!=low[u]) <span class="keyword">return</span>; </span><br><span class="line">	SCC_num++;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		v = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>(); vis[v] = <span class="literal">false</span>;</span><br><span class="line">		SCC[SCC_num].<span class="built_in">push_back</span>(v);</span><br><span class="line">	&#125;<span class="keyword">while</span>(v!=u); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BCC"><a href="#BCC" class="headerlink" title="BCC"></a>BCC</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++tim; st[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v,x;i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v=ver[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v); low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;=dfn[u])<span class="comment">/*if(low[v]&gt;dfn[u])*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                Tree::val[++n]=<span class="number">1</span>; x=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x=st[top--]; Tree::<span class="built_in">add</span>(x,n); Tree::val[n]++;</span><br><span class="line">                &#125;<span class="keyword">while</span>(x!=v);</span><br><span class="line">                Tree::<span class="built_in">add</span>(u,n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">/*if(v!=pre)*/</span> low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="树论"><a href="#树论" class="headerlink" title="树论"></a>树论</h1><h2 id="虚树"><a href="#虚树" class="headerlink" title="虚树"></a>虚树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//虚树清空必须使用dfs清空所有东西。</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; _adj[N];</span><br><span class="line"><span class="type">void</span> _add(<span class="type">int</span> x,<span class="type">int</span> y) &#123;</span><br><span class="line">	_adj[x].<span class="built_in">pb</span>(y); _adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt;</span><br><span class="line"><span class="type">int</span> st[N],top;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	rt=a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:a) rt=<span class="built_in">lca</span>(rt,v);</span><br><span class="line">	a.<span class="built_in">pb</span>(rt);</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(a),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">	a.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(a))-a.<span class="built_in">begin</span>());</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:a) &#123;</span><br><span class="line">		<span class="keyword">if</span>(top) &#123;</span><br><span class="line">			y=<span class="built_in">lca</span>(x,st[top]);</span><br><span class="line">			<span class="keyword">if</span>(y!=st[top]) &#123;</span><br><span class="line">				<span class="keyword">for</span>(;top&gt;=<span class="number">2</span>&amp;&amp;dep[st[top<span class="number">-1</span>]]&gt;=dep[y];top--) _add(st[top],st[top<span class="number">-1</span>]);</span><br><span class="line">				<span class="keyword">if</span>(st[top]!=y) _add(st[top],y),st[top]=y;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(st[top]!=x) st[++top]=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(top) <span class="keyword">for</span>(;--top;) _add(st[top],st[top+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> db eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> db inf=<span class="number">1e20</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(db x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">sqr</span><span class="params">(db x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">Point</span>() &#123;x=y=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="built_in">Point</span>(db _x,db _y) &#123;x=_x,y=_y;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> == (Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(A.x-B.x)==<span class="number">0</span>&amp;&amp;<span class="built_in">sgn</span>(A.y-B.y)==<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(A.x-B.x)==<span class="number">0</span>?<span class="built_in">sgn</span>(A.y-B.y)&lt;<span class="number">0</span>:A.x&lt;B.x;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span> - (Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x-B.x,A.y-B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span> + (Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x+B.x,A.y+B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span> * (Point A,db k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x*k,A.y*k);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span> / (Point A,db k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x/k,A.y/k);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span> ^(Point A,Point B)&#123;<span class="keyword">return</span> A.x*B.y-A.y*B.x;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span> *(Point A,Point B)&#123;<span class="keyword">return</span> A.x*B.x+A.y*B.y;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len2</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> x*x+y*y;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">len2</span>());&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">rad</span><span class="params">(Point A,Point B)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Point P=*<span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>((A-P)^(B-P),(A-P)*(B-P)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Point <span class="title">trunc</span><span class="params">(db r)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db l=<span class="built_in">len</span>(); <span class="keyword">if</span>(!<span class="built_in">sgn</span>(l)) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		r/=l; <span class="keyword">return</span> <span class="built_in">Point</span>(x*r,y*r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Point <span class="title">rotate_left</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(-y,x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Point <span class="title">rotate_right</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(y,-x);&#125;</span><br><span class="line">	<span class="comment">//anticlockwise</span></span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(Point P,db ang)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Point v=(*<span class="keyword">this</span>)-P;</span><br><span class="line">		db c=<span class="built_in">cos</span>(ang),s=<span class="built_in">sin</span>(ang);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point</span>(P.x+v.x*c-v.y*s,P.y+v.x*s+v.y*c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(db ang)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">rotate</span>(<span class="built_in">Point</span>(<span class="number">0</span>,<span class="number">0</span>),ang);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">area</span><span class="params">(Point A,Point B,Point C)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">fabs</span>((A-B)^(C-B))/<span class="number">2</span>;&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>&#123;</span><br><span class="line">	Point s,e;</span><br><span class="line">	<span class="built_in">Line</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">Line</span>(Point _s,Point _e) &#123;s=_s; e=_e;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;s.<span class="built_in">input</span>();e.<span class="built_in">input</span>();&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">adjust</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(e&lt;s) <span class="built_in">swap</span>(e,s);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Line A,Line B)&#123;<span class="keyword">return</span> A.s==B.s&amp;&amp;A.e==B.e;&#125;</span><br><span class="line">	<span class="built_in">Line</span>(Point p,db ang)</span><br><span class="line">	&#123;</span><br><span class="line">		s=p;</span><br><span class="line">		e=p+(<span class="built_in">sgn</span>(ang-pi/<span class="number">2</span>)==<span class="number">0</span>?<span class="built_in">Point</span>(<span class="number">0</span>,<span class="number">1</span>):<span class="built_in">Point</span>(<span class="number">1</span>,<span class="built_in">tan</span>(ang)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Line</span>(db a,db b,db c)<span class="comment">//ax+by+c==0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(a)==<span class="number">0</span>) s=<span class="built_in">Point</span>(<span class="number">0</span>,-c/b),e=<span class="built_in">Point</span>(<span class="number">1</span>,-c/b);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">sgn</span>(b)==<span class="number">0</span>) s=<span class="built_in">Point</span>(-c/a,<span class="number">0</span>),e=<span class="built_in">Point</span>(-c/a,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> s=<span class="built_in">Point</span>(<span class="number">0</span>,-c/b),e=<span class="built_in">Point</span>(<span class="number">1</span>,(-c-a)/b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (e-s).<span class="built_in">len</span>();&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">angle2</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(e.y-s.y,e.x-s.x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">()</span><span class="comment">//angle in [0,pi)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db k=<span class="built_in">angle2</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(k)&lt;<span class="number">0</span>) k+=pi;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(k-pi)==<span class="number">0</span>) k-=pi;</span><br><span class="line">		<span class="keyword">return</span> k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(Point p)</span><span class="comment">//1:p on line&#x27;s left;3:p on line</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> c=<span class="built_in">sgn</span>((p-s)^(e-s));</span><br><span class="line">		<span class="keyword">return</span> !c?<span class="number">3</span>:<span class="number">1</span>+(c&gt;<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">PointOnSegment</span><span class="params">(Point p)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>((p-s)^(e-s))==<span class="number">0</span>&amp;&amp;<span class="built_in">sgn</span>((p-s)*(p-e))&lt;=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>((e-s)^(v.e-v.s))==<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="comment">// 2 规范相交；1 非规范相交；0 不相交</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> d1 = <span class="built_in">sgn</span>((e-s)^(v.s-s));</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">sgn</span>((e-s)^(v.e-s));</span><br><span class="line">        <span class="type">int</span> d3 = <span class="built_in">sgn</span>((v.e-v.s)^(s-v.s));</span><br><span class="line">        <span class="type">int</span> d4 = <span class="built_in">sgn</span>((v.e-v.s)^(e-v.s));</span><br><span class="line">        <span class="keyword">if</span>( (d1^d2)==<span class="number">-2</span> &amp;&amp; (d3^d4)==<span class="number">-2</span> )<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.s-s)*(v.s-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">            (d2==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.e-s)*(v.e-e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">            (d3==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((s-v.s)*(s-v.e))&lt;=<span class="number">0</span>) ||</span><br><span class="line">            (d4==<span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((e-v.s)*(e-v.e))&lt;=<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span><span class="comment">//*this is line</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> d1 = <span class="built_in">sgn</span>((e-s)^(v.s-s));</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">sgn</span>((e-s)^(v.e-s));</span><br><span class="line">        <span class="keyword">if</span>((d1^d2)==<span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1==<span class="number">0</span>||d2==<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span><span class="comment">//0 平行；1 重合；2 相交</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>).<span class="built_in">parallel</span>(v)) <span class="keyword">return</span> v.<span class="built_in">relation</span>(s)==<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Point <span class="title">Intersection</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db a1=(v.e-v.s)^(s-v.s);</span><br><span class="line">        db a2=(v.e-v.s)^(e-v.s);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">db <span class="title">dispointtoline</span><span class="params">(Point p)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">fabs</span>((p-s)^(e-s))/<span class="built_in">len</span>();&#125;<span class="comment">//点到直线的距离</span></span><br><span class="line">    <span class="function">db <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sgn</span>((p-s)*(e-s))&lt;<span class="number">0</span> || <span class="built_in">sgn</span>((p-e)*(s-e))&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>((p-s).<span class="built_in">len</span>(),(p-e).<span class="built_in">len</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dispointtoline</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回线段到线段的距离`</span></span><br><span class="line">    <span class="comment">//`前提是两线段不相交，相交距离就是0了`</span></span><br><span class="line">    <span class="function">db <span class="title">dissegtoseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">dispointtoseg</span>(v.s),<span class="built_in">dispointtoseg</span>(v.e)),<span class="built_in">min</span>(v.<span class="built_in">dispointtoseg</span>(s),v.<span class="built_in">dispointtoseg</span>(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点p在直线上的投影</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + ( ((e-s)*((e-s)*(p-s)))/((e-s).<span class="built_in">len2</span>()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点p关于直线的对称点</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        Point q = <span class="built_in">lineprog</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(<span class="number">2</span>*q.x-p.x,<span class="number">2</span>*q.y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    Point p; db r;</span><br><span class="line">    <span class="built_in">Circle</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Circle</span>(Point p,db r)&#123;<span class="keyword">this</span>-&gt;p=p; <span class="keyword">this</span>-&gt;r=r;&#125;</span><br><span class="line">    <span class="built_in">Circle</span>(db x,db y,db r)&#123;p=<span class="built_in">Point</span>(x,y); <span class="keyword">this</span>-&gt;r=r;&#125;</span><br><span class="line">    <span class="built_in">Circle</span>(Point a,Point b,Point c,<span class="type">bool</span> opt)<span class="comment">//0 外接圆；1 内切圆</span></span><br><span class="line">    &#123;</span><br><span class="line">        Line u,v;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            u=<span class="built_in">Line</span>((a+b)/<span class="number">2</span>,((a+b)/<span class="number">2</span>)+((b-a).<span class="built_in">rotate_left</span>()));</span><br><span class="line">            v=<span class="built_in">Line</span>((b+c)/<span class="number">2</span>,((b+c)/<span class="number">2</span>)+((c-b).<span class="built_in">rotate_left</span>()));</span><br><span class="line">            p=u.<span class="built_in">Intersection</span>(v);</span><br><span class="line">            r=(p-a).<span class="built_in">len</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            db m = <span class="built_in">atan2</span>(b.y-a.y,b.x-a.x), n = <span class="built_in">atan2</span>(c.y-a.y,c.x-a.x);</span><br><span class="line">            u.s = a;</span><br><span class="line">            u.e = u.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n+m)/<span class="number">2</span>),<span class="built_in">sin</span>((n+m)/<span class="number">2</span>));</span><br><span class="line">            v.s = b;</span><br><span class="line">            m = <span class="built_in">atan2</span>(a.y-b.y,a.x-b.x) , n = <span class="built_in">atan2</span>(c.y-b.y,c.x-b.x);</span><br><span class="line">            v.e = v.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n+m)/<span class="number">2</span>),<span class="built_in">sin</span>((n+m)/<span class="number">2</span>));</span><br><span class="line">            p = u.<span class="built_in">Intersection</span>(v);</span><br><span class="line">            r = <span class="built_in">Line</span>(a,b).<span class="built_in">dispointtoseg</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> == (Circle A,Circle B) &#123;<span class="keyword">return</span> A.p==B.p&amp;&amp;<span class="built_in">sgn</span>(A.r-B.r)==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function">db <span class="title">area</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> pi*r*r;&#125;</span><br><span class="line">    <span class="function">db <span class="title">circumference</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">2</span>*pi*r;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(Point b)</span><span class="comment">//0 圆外；1 圆上；2 圆内</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="type">int</span> opt=<span class="built_in">sgn</span>((b-p).<span class="built_in">len</span>()-r);</span><br><span class="line">        <span class="keyword">return</span> opt&lt;<span class="number">0</span>?<span class="number">2</span>:(opt==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relationseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="type">int</span> opt=<span class="built_in">sgn</span>(v.<span class="built_in">dispointtoseg</span>(p)-r);</span><br><span class="line">        <span class="keyword">return</span> opt&lt;<span class="number">0</span>?<span class="number">2</span>:(opt==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relationline</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="type">int</span> opt=<span class="built_in">sgn</span>(v.<span class="built_in">dispointtoline</span>(p)-r);</span><br><span class="line">        <span class="keyword">return</span> opt&lt;<span class="number">0</span>?<span class="number">2</span>:(opt==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 5 相离</span></span><br><span class="line">	<span class="comment">// 4 外切</span></span><br><span class="line">	<span class="comment">// 3 相交</span></span><br><span class="line">	<span class="comment">// 2 内切</span></span><br><span class="line">	<span class="comment">// 1 内含</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">relationcircle</span><span class="params">(Circle A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db d=(p-A.p).<span class="built_in">len</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(d-r-A.r)&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(d-r-A.r)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>+<span class="built_in">sgn</span>(d-<span class="built_in">fabs</span>(r-A.r));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function">vector&lt;Point&gt; <span class="title">pointcrossline</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;Point&gt; vec; vec.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span>(!(*<span class="keyword">this</span>).<span class="built_in">relationline</span>(v)) <span class="keyword">return</span> vec;</span><br><span class="line">        Point a=v.<span class="built_in">lineprog</span>(p);</span><br><span class="line">        db d=v.<span class="built_in">dispointtoline</span>(p);</span><br><span class="line">        d=<span class="built_in">sqrt</span>(r*r-d*d);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sgn</span>(d)==<span class="number">0</span>) vec.<span class="built_in">pb</span>(a);</span><br><span class="line">        <span class="keyword">else</span> vec.<span class="built_in">pb</span>(a+(v.e-v.s).<span class="built_in">trunc</span>(d)),vec.<span class="built_in">pb</span>(a-(v.e-v.s).<span class="built_in">trunc</span>(d));</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function">vector&lt;Point&gt; <span class="title">pointcrosscircle</span><span class="params">(Circle A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		vector&lt;Point&gt; vec; vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="type">int</span> t=<span class="built_in">relationcircle</span>(A);</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">5</span>||t==<span class="number">1</span>) <span class="keyword">return</span> vec;</span><br><span class="line">		db d=(p-A.p).<span class="built_in">len</span>();</span><br><span class="line">		db l=(d*d+r*r-A.r*A.r)/(<span class="number">2.</span>*d);</span><br><span class="line">		db h=<span class="built_in">sqrt</span>(r*r-l*l);</span><br><span class="line">		Point q=p+(A.p-p).<span class="built_in">trunc</span>(l);</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">2</span>||t==<span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			vec.<span class="built_in">pb</span>(q); <span class="keyword">return</span> vec;</span><br><span class="line">		&#125;</span><br><span class="line">		vec.<span class="built_in">pb</span>(q+((A.p-p).<span class="built_in">rotate_left</span>()).<span class="built_in">trunc</span>(h));</span><br><span class="line">		vec.<span class="built_in">pb</span>(q+((A.p-p).<span class="built_in">rotate_right</span>()).<span class="built_in">trunc</span>(h));</span><br><span class="line">		<span class="keyword">return</span> vec;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//最小圆覆盖</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Circle <span class="title">smallestcircle</span><span class="params">(Point *_p,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">vector&lt;Point&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i<span class="number">-1</span>]=_p[i];</span><br><span class="line">	<span class="built_in">random_shuffle</span>(<span class="built_in">all</span>(p));</span><br><span class="line">	Circle C=<span class="built_in">Circle</span>(p[<span class="number">0</span>],<span class="number">0.0</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(C.<span class="built_in">relation</span>(p[i])==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			C=<span class="built_in">Circle</span>(p[i],<span class="number">0.0</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">if</span>(C.<span class="built_in">relation</span>(p[j])==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					C=<span class="built_in">Circle</span>((p[i]+p[j])/<span class="number">2</span>,(p[i]-p[j]).<span class="built_in">len</span>()/<span class="number">2</span>);</span><br><span class="line">					<span class="built_in">fo</span>(k,<span class="number">0</span>,j<span class="number">-1</span>)</span><br><span class="line">						<span class="keyword">if</span>(C.<span class="built_in">relation</span>(p[k])==<span class="number">0</span>)</span><br><span class="line">							C=<span class="built_in">Circle</span>(p[i],p[j],p[k],<span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Polygon</span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	vector&lt;Point&gt; p;</span><br><span class="line">	vector&lt;Line&gt; l;</span><br><span class="line">	<span class="built_in">Polygon</span>(vector&lt;Point&gt; a)</span><br><span class="line">	&#123;</span><br><span class="line">		n=a.<span class="built_in">size</span>(); p=a; l.<span class="built_in">resize</span>(n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) l[i]=<span class="built_in">Line</span>(p[i],p[(i+<span class="number">1</span>)%n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">db <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++) ans+=(p[i]-p[<span class="number">0</span>])^(p[i<span class="number">-1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">fabs</span>(ans)/<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Polygon <span class="title">Convex</span><span class="params">(vector&lt;Point&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;Point&gt; p;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Polygon</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Polygon <span class="title">HalfPlanes</span><span class="params">(vector&lt;Line&gt; l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;Point&gt; p;</span><br><span class="line">	<span class="type">int</span> n=l.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">auto</span> cmp = [](Line A,Line B) &#123;</span><br><span class="line">		db r=A.<span class="built_in">angle2</span>()-B.<span class="built_in">angle2</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(r)!=<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">sgn</span>(r)&lt;<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sgn</span>((A.e-A.s)^(B.e-A.s))&lt;<span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(l),cmp);</span><br><span class="line">	<span class="function">vector&lt;Line&gt; <span class="title">q</span><span class="params">(n+<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">vector&lt;Point&gt; <span class="title">b</span><span class="params">(n+<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="type">int</span> head=<span class="number">0</span>,tail=<span class="number">0</span>;</span><br><span class="line">	q[<span class="number">0</span>]=l[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sgn</span>(l[i].<span class="built_in">angle2</span>()-l[i<span class="number">-1</span>].<span class="built_in">angle2</span>())!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(head&lt;tail&amp;&amp;q[head].<span class="built_in">parallel</span>(q[head+<span class="number">1</span>])) <span class="keyword">return</span> <span class="built_in">Polygon</span>(p);</span><br><span class="line">			<span class="keyword">if</span>(head&lt;tail&amp;&amp;q[tail].<span class="built_in">parallel</span>(q[tail<span class="number">-1</span>])) <span class="keyword">return</span> <span class="built_in">Polygon</span>(p);</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;l[i].<span class="built_in">relation</span>(b[tail<span class="number">-1</span>])==<span class="number">2</span>) tail--;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;l[i].<span class="built_in">relation</span>(b[head])==<span class="number">2</span>) head++;</span><br><span class="line">			q[++tail]=l[i];</span><br><span class="line">			<span class="keyword">if</span>(head&lt;tail) b[tail<span class="number">-1</span>]=q[tail].<span class="built_in">Intersection</span>(q[tail<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">while</span>(head&lt;tail&amp;&amp;l[head].<span class="built_in">relation</span>(b[tail<span class="number">-1</span>])==<span class="number">2</span>) tail--;</span><br><span class="line">	<span class="keyword">while</span>(head&lt;tail&amp;&amp;l[tail].<span class="built_in">relation</span>(b[head])==<span class="number">2</span>) head++;</span><br><span class="line">	<span class="keyword">if</span>(tail-head&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">Polygon</span>(p);</span><br><span class="line">	b[tail]=q[head].<span class="built_in">Intersection</span>(q[tail]);</span><br><span class="line">	p.<span class="built_in">resize</span>(tail-head+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head;i&lt;=tail;i++) p[i-head]=b[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Polygon</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>训练合集</title>
    <url>/2021/10/20/%E8%AE%AD%E7%BB%83%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>XCPC训练合集。</p>
<span id="more"></span>

<h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><ol>
<li>2021ICPC网络赛第二场 :Rank $77$</li>
<li><a href="/2021/10/21/2021CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B-%E9%87%8D%E8%B5%9B/" title="2021CCPC网络赛-重赛">2021CCPC网络赛-重赛</a> :Rank $29$ ,</li>
<li><a href="/2021/11/14/2021-CCPC-%E5%B9%BF%E5%B7%9E%E7%AB%99/" title="2021 CCPC 广州站">2021 CCPC 广州站</a> :Rank $22/224$ ，</li>
<li>2021-CCPC-威海站* :Rank $29/323$ ,</li>
<li><a href="/2021/12/05/2021-ICPC-%E5%8D%97%E4%BA%AC%E7%AB%99/" title="2021 ICPC 南京站">2021 ICPC 南京站</a>:Rank $14/637$ ，</li>
<li>2021-ICPC-澳门站 :Rank $18/153$ ,</li>
<li>2021-ICPC-EC-final :Rank ?</li>
<li>2021-CCPC-final :Rank $26/115$ ,</li>
<li>2022-CCPC-桂林站 :Rank $31/321$ ,</li>
<li>2022-CCPC-威海站* :Rank $5/285$ ,</li>
<li>2022-ICPC-西安站 :Rank？</li>
</ol>
<h2 id="各种营"><a href="#各种营" class="headerlink" title="各种营"></a>各种营</h2><h3 id="2022-Huawei-ICPC-Camp"><a href="#2022-Huawei-ICPC-Camp" class="headerlink" title="2022 Huawei ICPC Camp"></a>2022 Huawei ICPC Camp</h3><a href="/2022/02/09/2022-Huawei-ICPC-Camp/" title="2022 Huawei ICPC Camp">2022 Huawei ICPC Camp</a>

<h3 id="2022-Byte-Camp"><a href="#2022-Byte-Camp" class="headerlink" title="2022 Byte Camp"></a>2022 Byte Camp</h3><ol>
<li><a href="/2022/07/11/Byte-Camp-2022-Day1/" title="Byte Camp 2022 Day1">Byte Camp 2022 Day1</a>，Rank $32/48$，
</li>
<li><a href="/2022/07/11/Byte-Camp-2022-Day2/" title="Byte Camp 2022 Day2">Byte Camp 2022 Day2</a>，Rank $25/46$，
</li>
<li><a href="/2022/07/13/Byte-Camp-2022-Day3/" title="Byte Camp 2022 Day3">Byte Camp 2022 Day3</a>，Rank $15/44$，
</li>
<li><a href="/2022/07/13/Byte-Camp-2022-Day4/" title="Byte Camp 2022 Day4">Byte Camp 2022 Day4</a>，Rank $20/45$,
</li>
<li><p>Byte-Camp-2022-Final-Contest, Rank $21/44$.</p>
</li>
</ol>
<p>前四场情况：</p>
<p>总排名：$21$；中国队伍排名：$8$；学校排名：$7$。</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><ol>
<li><a href="/2021/09/01/2017-2018-ACM-ICPC-Asia-Tsukuba-Regional-Contest/" title="2017-2018 ACM-ICPC, Asia Tsukuba Regional Contest">2017-2018 ACM-ICPC, Asia Tsukuba Regional Contest</a> </li>
<li><a href="/2021/09/18/ICPC-2019-2020-North-Western-Russia-Regional-Contest/" title="ICPC 2019-2020 North-Western Russia Regional Contest">ICPC 2019-2020 North-Western Russia Regional Contest</a></li>
<li><a href="/2021/09/15/2019-2020-ICPC-Asia-Hong-Kong-Regional-Contest/" title="2019-2020 ICPC Asia Hong Kong Regional Contest">2019-2020 ICPC Asia Hong Kong Regional Contest</a>$</li>
<li>2017-2018 ACM-ICPC Latin American Regional Programming Contest</li>
<li><a href="/2021/10/20/The-2020-ICPC-Asia-Macau-Regional-Contest/" title="The 2020 ICPC Asia Macau Regional Contest">The 2020 ICPC Asia Macau Regional Contest</a></li>
<li><a href="/2021/11/11/2021-Jiangxi-Provincial-Collegiate-Programming-Contest/" title="2021 Jiangxi Provincial Collegiate Programming Contest">2021 Jiangxi Provincial Collegiate Programming Contest</a></li>
<li><a href="/2021/11/17/2021-CCPC-%E6%A1%82%E6%9E%97%E7%AB%99/" title="2021 CCPC 桂林站">2021 CCPC 桂林站</a></li>
<li><a href="/2021/12/02/2021-ICPC-%E4%B8%8A%E6%B5%B7%E7%AB%99/" title="2021 ICPC 上海站">2021 ICPC 上海站</a></li>
<li><a href="/2022/02/25/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Krakow/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Krakow">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Krakow</a></li>
<li><a href="/2022/03/06/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Nizhny-Novgorod/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Nizhny Novgorod">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Nizhny Novgorod</a></li>
<li><a href="/2022/03/22/2020-Petrozavodsk-Winter-Camp-Jagiellonian-U-Contest/" title="2020 Petrozavodsk Winter Camp, Jagiellonian U Contest">2020 Petrozavodsk Winter Camp, Jagiellonian U Contest</a></li>
<li><a href="/2022/03/31/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Suwon/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Suwon">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Suwon</a></li>
<li><a href="/2022/03/17/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Belarus/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Belarus">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Belarus</a></li>
<li><a href="/2022/04/07/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Tokyo/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Tokyo">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Tokyo</a></li>
<li><a href="/2022/05/26/2022-Hubei-Provincial-Collegiate-Programming-Contest/" title="2022 Hubei Provincial Collegiate Programming Contest">2022 Hubei Provincial Collegiate Programming Contest</a></li>
<li><a href="/2022/04/07/2021-2022-ACM-ICPC-Latin-American-Regional-Programming-Contest/" title="2021-2022 ACM-ICPC Latin American Regional Programming Contest">2021-2022 ACM-ICPC Latin American Regional Programming Contest</a></li>
<li><a href="/2022/07/05/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Samara/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of Samara">XXI Open Cup named after E.V. Pankratiev. Grand Prix of Samara</a></li>
<li><a href="/2022/07/07/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-NorthBeach/" title="XXI Open Cup named after E.V. Pankratiev. Grand Prix of NorthBeach">XXI Open Cup named after E.V. Pankratiev. Grand Prix of NorthBeach</a></li>
<li><a href="/2022/09/15/Lesnoe-Ozero-2016-BSUIR-Open-2016-Finals/" title="Lesnoe Ozero 2016. BSUIR Open 2016 Finals">Lesnoe Ozero 2016. BSUIR Open 2016 Finals</a>


</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>(2021.11.13) 可能输出-0.000000，输出小数的时候要注意。</li>
<li>(2021.11.16) 分块大小不能为 $0$，可以和 $1$ 取个 <code>max</code>。</li>
<li>(2021.11.17) 计算几何题一定要注意精度。尤其注意三点共线。尽量用 <code>long double</code>。</li>
<li>(2021,11,17) <code>vector</code> 的空间可以理解为普通数组的两倍，因此空间比较紧的时候需要注意使用。</li>
<li>(2021.11.17) 求区间 $[l,r]$ 的和使用前缀和时，注意 $l$ 是否为 $0$。</li>
<li>(2021.12.05) 矩阵乘法尽量优化常数！如果是 $0$ 就不要继续乘了。</li>
<li>初始化最好要连边界的后几位也清了。</li>
<li>注意取模，需要<code>long long</code> 的地方不要写成 <code>int</code>。</li>
<li><code>nth_element</code> 求第 $k$ 小，应为：<code>nth_element(a+1,a+k,a+n+1,cmp);</code>。</li>
<li>清空虚树信息（如<code>vector</code>）时要注意不能只清空原本的节点，需要新开一个<code>vector</code>记录虚树中所有节点，然后再询问后进行清空（因为虚树可能会新加节点）。</li>
<li>树链剖分中，由于我的模板里<code>dfs2(int u,int tp)</code> 有 <code>if(!top[v])</code>，因此多组数据时，<code>top</code>数组和时间戳 <code>tim</code> 需要清空。</li>
<li>注意，带有 <code>A.size()</code> 相关的运算最好写成 <code>((int)A.size())</code>，否则会将表达式转换成无符号数，从而无法实现带负数的运算。</li>
</ol>
]]></content>
      <categories>
        <category>XCPC</category>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>2022 ICPC 沈阳站</title>
    <url>/2022/11/10/2022-ICPC-%E6%B2%88%E9%98%B3%E7%AB%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>2022 CCPC 威海站</title>
    <url>/2022/11/10/2022-CCPC-%E5%A8%81%E6%B5%B7%E7%AB%99/</url>
    <content><![CDATA[<p>成功打星（</p>
<span id="more"></span>

<p>不过还是有不尽人意的地方，赛中B题没有给调出来，比较缺乏写暴力的能力。L题比较简单的线性代数也没能想出来。一直在往比较麻烦的贪心上想。</p>
<p>做不出来需要及时更换另一种思路！</p>
<h2 id="A-Dunai"><a href="#A-Dunai" class="headerlink" title="A. Dunai"></a>A. Dunai</h2><p>一个比较简单的题目，但我没想好直接WA了一发。</p>
<p>显然只有两种限制：每个种类的制约，以及获得过冠军的总数。</p>
<p>两者求 min 就OK了。</p>
<h2 id="B-Recruitment"><a href="#B-Recruitment" class="headerlink" title="B. Recruitment"></a>B. Recruitment</h2><p>可以发现，当 $s_i-1=s_{i+1}$ 时，$x+y-xy=1$。即 $(x-1)(y-1)=0$，$x,y$ 里面至少一个 $1$。</p>
<p>那么只有大于 $1$ 的点是有用的。而 $\prod x_i=s_{n-1}\le 10^9$，那么有用的状态就很少了。</p>
<p>于是直接从开始搜索，用 <code>map&lt;vector&lt;int&gt;,status&gt;</code> 记录所有状态以及前驱就ok了。</p>
<p>需要注意一些细节，及时判掉不合法的状态。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) f|=(ch==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASES int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(random_device&#123;&#125;())</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">divide</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="built_in">sqrt</span>(n))</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span>) &#123;</span><br><span class="line">            vec.<span class="built_in">pb</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(i*i!=n)</span><br><span class="line">                vec.<span class="built_in">pb</span>(n/i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[<span class="number">60</span>];</span><br><span class="line"><span class="type">int</span> bel[<span class="number">60</span>],pos[<span class="number">60</span>],col[<span class="number">60</span>];</span><br><span class="line"><span class="type">int</span> tim;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!adj[u].<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ++tim;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,col[u]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(adj[u].<span class="built_in">size</span>() == <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(adj[u][<span class="number">0</span>]);</span><br><span class="line">    pos[bel[u]] = tim;</span><br><span class="line">    <span class="built_in">dfs</span>(adj[u][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,a[N],cnt;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    map&lt;vector&lt;<span class="type">int</span>&gt;,node&gt;::iterator ite;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map&lt;vector&lt;<span class="type">int</span>&gt;,node&gt; ma[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;<span class="type">int</span>&gt; <span class="title">update</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> z = x*y,i;</span><br><span class="line">    i = <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(a),z)-a.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">ff</span>(j,i,a.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">    a.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    i = <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(a),x)-a.<span class="built_in">begin</span>();</span><br><span class="line">    a.<span class="built_in">pb</span>(x);</span><br><span class="line">    <span class="built_in">fd</span>(j,a.<span class="built_in">size</span>()<span class="number">-2</span>,i)</span><br><span class="line">        <span class="built_in">swap</span>(a[j+<span class="number">1</span>],a[j]);</span><br><span class="line">    </span><br><span class="line">    i = <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(a),y)-a.<span class="built_in">begin</span>();</span><br><span class="line">    a.<span class="built_in">pb</span>(y);</span><br><span class="line">    <span class="built_in">fd</span>(j,a.<span class="built_in">size</span>()<span class="number">-2</span>,i)</span><br><span class="line">        <span class="built_in">swap</span>(a[j+<span class="number">1</span>],a[j]);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = w.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">DEBUG</span>(m);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">    b.<span class="built_in">pb</span>(a[n]);</span><br><span class="line"></span><br><span class="line">    ma[m<span class="number">-1</span>][b] = &#123;ma[<span class="number">0</span>].<span class="built_in">end</span>(),<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t=m<span class="number">-1</span>;t&gt;=<span class="number">0</span>;t--)</span><br><span class="line">        <span class="keyword">if</span>(ma[t].<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t!=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> ma_it = ma[t].<span class="built_in">begin</span>(); ma_it != ma[t].<span class="built_in">end</span>(); ma_it++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> s = ma_it -&gt; fi;</span><br><span class="line">                <span class="built_in">ff</span>(i,<span class="number">0</span>,s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="type">int</span> z = s[i];</span><br><span class="line">                    <span class="built_in">fo</span>(x,<span class="number">2</span>,<span class="built_in">sqrt</span>(z))</span><br><span class="line">                        <span class="keyword">if</span>(z%x==<span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="type">int</span> y = z/x;</span><br><span class="line">                            <span class="keyword">if</span>(z-x-y != w[t<span class="number">-1</span>])</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            ma[t<span class="number">-1</span>][<span class="built_in">update</span>(s,x,y)] = &#123;ma_it,x,y&#125;;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; val;</span><br><span class="line">            <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">auto</span> v = (ma[t].<span class="built_in">begin</span>()) -&gt; fi;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> x:v) &#123;</span><br><span class="line">                ++tot;</span><br><span class="line">                col[tot]=x;</span><br><span class="line">                val.<span class="built_in">insert</span>(&#123;x,tot&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">DEBUG</span>(tot);</span><br><span class="line">            <span class="keyword">auto</span> add = [&amp;](<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = val.<span class="built_in">lower_bound</span>(&#123;x,<span class="number">0</span>&#125;);</span><br><span class="line">                <span class="type">int</span> xx = (*it).se;</span><br><span class="line">                val.<span class="built_in">erase</span>(it);</span><br><span class="line">                it = val.<span class="built_in">lower_bound</span>(&#123;y,<span class="number">0</span>&#125;);</span><br><span class="line">                <span class="type">int</span> yy = (*it).se;</span><br><span class="line">                val.<span class="built_in">erase</span>(it);</span><br><span class="line"></span><br><span class="line">                val.<span class="built_in">insert</span>(&#123;x*y,++tot&#125;);</span><br><span class="line">                bel[tot] = z;</span><br><span class="line">                adj[tot].<span class="built_in">pb</span>(xx);</span><br><span class="line">                adj[tot].<span class="built_in">pb</span>(yy);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">auto</span> it = ma[t].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m<span class="number">-1</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> u = it -&gt; se;</span><br><span class="line">                <span class="built_in">add</span>(u.x,u.y,j);</span><br><span class="line">                it = u.ite;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(tot);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,k=n<span class="number">-1</span>,j=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span>(a[i] - a[i<span class="number">-1</span>] == <span class="number">-1</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,k--);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pos[++j]);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">        <span class="keyword">if</span>(a[i] - a[i<span class="number">-1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] - a[i<span class="number">-1</span>] &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w.<span class="built_in">pb</span>(a[i] - a[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(w.<span class="built_in">size</span>() &gt; <span class="number">30</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d = <span class="built_in">divide</span>(a[n]);</span><br><span class="line">    <span class="comment">//for(auto x:d) printf(&quot;%d\n&quot;,x);</span></span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Grass"><a href="#C-Grass" class="headerlink" title="C. Grass"></a>C. Grass</h2><p>$5$ 个点有解当且仅当这 $5$ 个点不共线。</p>
<p>随便找到五个不共线的点，然后枚举 $A$ 点构造即可。</p>
<h2 id="D-Sternhalma"><a href="#D-Sternhalma" class="headerlink" title="D. Sternhalma"></a>D. Sternhalma</h2><p>一眼状压DP，不过建图非常麻烦。</p>
<p>可以在图的左下角加多一个三角形就方便很多了。</p>
<h2 id="E-Python-Will-be-Faster-than-C"><a href="#E-Python-Will-be-Faster-than-C" class="headerlink" title="E. Python Will be Faster than C++"></a>E. Python Will be Faster than C++</h2><p>签到题。</p>
<h2 id="F-Mooncake-Delivery"><a href="#F-Mooncake-Delivery" class="headerlink" title="F. Mooncake Delivery"></a>F. Mooncake Delivery</h2><p>将一条路径分为若干个极大相同颜色连续段，一条路径的权值等于（连续段权值和+下一个点的点权）的最大值。</p>
<p>对于相同颜色的点，用Floyd求出两两最短路，然后建一个新图，$(u,w)$ 边权为：枚举与 $u$ 相同颜色的点 $v$ 且 $(v,w)\in E$，连边 $(u,w,dis_{u,v} + val_w)$。</p>
<p>在新图上跑最大值的Floyd即可。</p>
<h2 id="G-Grade-2"><a href="#G-Grade-2" class="headerlink" title="G. Grade 2"></a>G. Grade 2</h2><p>发现 $k$ 中大于 $2^{\text{Popcount(x)}}$ 的是没用的，也就是构成一个 $2$ 的次幂的循环节。</p>
<p>然后预处理一下就OK了。</p>
<h2 id="H-Party-Animals"><a href="#H-Party-Animals" class="headerlink" title="H. Party Animals"></a>H. Party Animals</h2><p>留坑。。。</p>
<h2 id="I-Dragon-Bloodline"><a href="#I-Dragon-Bloodline" class="headerlink" title="I. Dragon Bloodline"></a>I. Dragon Bloodline</h2><p>由于每种是 $2^i$，那么贪心就是正确的，因为肯定存在某种最优解是贪心的策略。</p>
<p>于是二分，然后从大到小贪心就ok了。</p>
<h2 id="J-Eat-Sleep-Repeat"><a href="#J-Eat-Sleep-Repeat" class="headerlink" title="J. Eat, Sleep, Repeat"></a>J. Eat, Sleep, Repeat</h2><p>可以发现，所有的数都不能越过 $limit_x=0$。</p>
<p>用 $limit_x=0$ 分段，然后统计次数的奇偶性就ok了。</p>
<h2 id="K-I-Wanna-Maker"><a href="#K-I-Wanna-Maker" class="headerlink" title="K. I Wanna Maker"></a>K. I Wanna Maker</h2><p>对于 $1$ 条件，可以合并成一个。</p>
<p>对于 $2$ 条件，可以枚举左端点的区间，然后右端点的合法方案数是一个分段函数。</p>
<h2 id="L-Novice-Magician"><a href="#L-Novice-Magician" class="headerlink" title="L. Novice Magician"></a>L. Novice Magician</h2><p>首先，若 $\sum b_i$ 不被 $2^{n-1}$ 整除，那么无解。</p>
<p>将 $2,4,6,\cdots$ 这些随便分配到要操作的数中。</p>
<p>那么，每次操作相当于给一半的数加 $x$。</p>
<p>那么相当于要构造一个 $2^n\times 2^n$ 的矩阵 $A$，使得每一行中恰好有一半的是 $1$，一半是 $0$。满足 $xA=b’$ 有整数解，其中 $x,b’ $ 是 $1\times 2^n$ 的矩阵。</p>
<p>若 $A$ 必须有逆，则可以直接求出来。也就是这 $2^n$ 个向量线性无关。</p>
<p>可以如下构造（$n=3$）：</p>
<p>$$<br>A = \begin{bmatrix}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp;  &amp;  &amp;  &amp; \\<br> &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp;  &amp;  &amp; \\<br> &amp;  &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp;  &amp; \\<br> &amp;  &amp;  &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; \\<br>1 &amp; 1 &amp; 1 &amp;  &amp;  &amp;  &amp;  &amp; 1\\<br> &amp; 1 &amp; 1 &amp; 1 &amp;  &amp;  &amp;  &amp; 1\\<br> &amp;  &amp; 1 &amp; 1 &amp; 1 &amp;  &amp;  &amp; 1\\<br> &amp;  &amp;  &amp; 1 &amp; 1 &amp; 1 &amp;  &amp; 1<br>\end{bmatrix}<br>$$</p>
<p>这样就一定有逆元，打表找找逆元的规律就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2050</span>;</span><br><span class="line"><span class="type">int</span> f[N][N],a[N];</span><br><span class="line"><span class="type">bool</span> b[N][N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> m = (<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum % (m/<span class="number">2</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m/<span class="number">2</span>)</span><br><span class="line">            a[i+j] -= <span class="number">2</span>*j,b[i][i+j] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m/<span class="number">2</span><span class="number">-1</span>)</span><br><span class="line">            a[i+j] -= <span class="number">2</span>*j,b[i+(m/<span class="number">2</span>)][i+j] = <span class="number">1</span>;</span><br><span class="line">        a[m<span class="number">-1</span>] -= (m<span class="number">-2</span>);</span><br><span class="line">        b[i+(m/<span class="number">2</span>)][m<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m/<span class="number">2</span><span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==i||j-(m/<span class="number">2</span><span class="number">-1</span>)==i)</span><br><span class="line">                ans[i] += <span class="number">1ll</span> * ((m/<span class="number">2</span>)<span class="number">-1</span>) * a[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[i] -= a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[m/<span class="number">2</span><span class="number">-1</span>] = <span class="number">1ll</span> * (m/<span class="number">2</span>) * a[m<span class="number">-2</span>];</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>==i||j-(m/<span class="number">2</span><span class="number">-1</span>)==i)</span><br><span class="line">                ans[i+(m/<span class="number">2</span>)] -= <span class="number">1ll</span> * ((m/<span class="number">2</span>)<span class="number">-1</span>) * a[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[i+(m/<span class="number">2</span>)] += a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m) ans[i] /= (m/<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;YES\n%d\n&quot;</span>,m);</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans[i]);</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m)</span><br><span class="line">            <span class="keyword">if</span>(b[i][j])</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="M-String-Master"><a href="#M-String-Master" class="headerlink" title="M. String Master"></a>M. String Master</h2><p>为了让字典序最大，我们需要让一尽可能地多。</p>
<p>先去掉一些边边角角的情况。</p>
<p>然后考虑枚举开始时二进制的长度 $i$，枚举从第 $j$ 位开始。贪心，从 $j$ 开始选，为了字典序最大，我们要使得 $j\sim 0$ 位都是 $1$。</p>
<p>然后写一堆比较函数之类的就ok了。</p>
<p>```c++<br>const int M = 59;</p>
<p>struct node{<br>    ll n;<br>    int l,p;<br>    node() {n=p=0; l=1;}<br>    node(ll _n,int _l,int _p) {n=_n,l=_l,p=_p;}<br>    inline bool x() {return (n&gt;&gt;(l-p-1))&1;}<br>    friend inline bool operator&lt;(const node &amp;A,const node &amp;B) {<br>        if(A.n!=B.n)<br>            return A.n&lt;B.n;<br>        return A.p&lt;B.p;<br>    }<br>    friend inline bool operator&gt;(const node &amp;A,const node &amp;B) {<br>        if(A.n!=B.n)<br>            return A.n&gt;B.n;<br>        return A.p&gt;B.p;<br>    }</p>
<pre><code>inline void set(ll x) &#123;
    if(x == 0) &#123;
        return;
    &#125;
    ll sum = 0;
    fo(i,1,M) &#123;
        ll tmp = (1ll&lt;&lt;i) - (1ll&lt;&lt;(i-1));
        if(i==1) tmp++;
        if(sum + tmp * i &gt; x) &#123;
            l = i; break;
        &#125;
        sum += tmp * i;
    &#125;
    sum = x-sum;
    n = ((l==1)?0:(1ll&lt;&lt;(l-1))) + (sum/l);
    p = sum % l;
&#125;
inline ll get() &#123;
    if(l==1)
        return n;
    ll sum = 1;
    ff(i,1,l)
        sum += 1ll * ((1ll&lt;&lt;i) - (1ll&lt;&lt;(i-1))) * i;
    return sum + (n - (1ll&lt;&lt;(l-1))) * l + p;
&#125;
inline void nxt() &#123;
    p++;
    if(p!=l)
        return;
    p = 0; n++;
    if(lowbit(n) == n &amp;&amp; n != 1) &#123;
        l++;
    &#125;
&#125;</code></pre><p>};</p>
<p>inline bool cmp(node A,node B,int n) {<br>    if(A.n &lt; 0)<br>        return 0;<br>    fo(i,1,n) {<br>        if(A.x() != B.x())<br>            return A.x() &gt; B.x();<br>        A.nxt(); B.nxt();<br>    }<br>    return 0;<br>}<br>inline void print(node A,int n) {<br>    ff(i,0,n)<br>        putchar(A.x()+’0’),A.nxt();<br>    putchar(‘\n’);<br>}</p>
<p>inline void work(ll l,ll r,int n) {<br>    node L,R,ans={-1,-1,-1},x;<br>    for(ll i = l;i &lt;= min(10ll,r);i ++) {<br>        x.set(i);<br>        ans = cmp(ans,x,n)?ans:x;<br>    }<br>    for(ll i = max(r-M,l);i &lt;= r; i++) {<br>        x.set(i);<br>        ans = cmp(ans,x,n)?ans:x;<br>    }</p>
<pre><code>l = max(11ll,l);
L.set(l); R.set(r);
fo(i,2,M) &#123;
    node nl = &#123;1ll&lt;&lt;(i-1), i, 0&#125;, nr = &#123;(1ll&lt;&lt;i)-1, i, i-1&#125;;
    if(nl&gt;R || nr&lt;L)
        continue;
    if(nl &lt; L) nl = L;
    if(nr &gt; R) nr = R;
    ff(j,0,i) &#123;
        ll tmp = 1ll&lt;&lt;(j+1);
        x = &#123;nr.n|(tmp-1), i, i-1-j&#125;;
        if(x &gt; nr) x.n -= tmp;
        if(!(x&lt;nl)) ans = cmp(ans,x,n)?ans:x;
    &#125;
&#125;
print(ans,n);</code></pre><p>}</p>
<p>int main() {<br>    CASES {<br>        ll l,r;<br>        int n;<br>        read(l,r,n);<br>        work(l-1,r-n,n);<br>    }<br>    return 0;<br>}</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>贪心</tag>
        <tag>最短路</tag>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>dfs</tag>
        <tag>状压DP</tag>
        <tag>线性代数</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 CCPC 桂林站</title>
    <url>/2022/11/10/2022-CCPC-%E6%A1%82%E6%9E%97%E7%AB%99/</url>
    <content><![CDATA[<p>2022CCPC桂林站。</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>百度之星2022复赛题解</title>
    <url>/2022/09/15/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2022%E5%A4%8D%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>Astar2022 复赛 Solution.</p>
<span id="more"></span>

<h2 id="A-子序列"><a href="#A-子序列" class="headerlink" title="A. 子序列"></a>A. 子序列</h2><p>签到题。</p>
<p>显然，前面的递增条件完全没用。</p>
<p>答案就是所有数加起来。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="B-分组"><a href="#B-分组" class="headerlink" title="B. 分组"></a>B. 分组</h2><p>简单树形DP。</p>
<p>设 $f_{i,j,k}$ 表示以 $i$ 为根的子树中，与 $i$ 相连的连通块中，所有点与 $i$ 的最大距离为 $j$，连通块大小为 $k$ 的方案数。枚举与 $i$ 相连的每个点，选择是否与 $i$ 合并，然后DP即可。</p>
<p>时间复杂度 $O(nkm)$。</p>
<h2 id="C-最大值"><a href="#C-最大值" class="headerlink" title="C. 最大值"></a>C. 最大值</h2><p>本题是本场比赛通过人数第二多的题。</p>
<p>答案即为 $n\times \sum_{i=1}^mi^{n-1}$。</p>
<p>当 $m\le B$ 时，暴力。时间复杂度 $O(m\log n)$。</p>
<p>当 $m&gt;B$ 时，拉格朗日插值，或者求出伯努利数或第二类斯特林数算自然数幂和即可。时间复杂度 $O(n\log n)$。</p>
<p>取 $B=\sqrt{nm}$，时间复杂度 $O(\sqrt{nm}\log n)$。可适当调整块大小。</p>
<h2 id="D-子序列2"><a href="#D-子序列2" class="headerlink" title="D. 子序列2"></a>D. 子序列2</h2><p>将询问按 $k$ 从小到大排序，设 $f_{l,r,0/1,1/1}$ 表示区间 $[l,r]$ 内子序列的开头是否 $&lt;k$ ，结尾是否 $&lt;k$ 的方案数。</p>
<p>动态DP，用线段树维护矩阵转移即可。</p>
<p>时间复杂度 $O((n+m)\log n)$。</p>
<h2 id="E-项链"><a href="#E-项链" class="headerlink" title="E. 项链"></a>E. 项链</h2><p>设字符串总长为 $k$。</p>
<p>由 Polya 定理，答案为 $g(n)=\frac{\sum_{d|n}f(\frac{n}{d})\varphi(d)}{n}$。</p>
<p>其中 $f(m)$ 表示长度为 $m$ 的环，没有循环同构的答案。</p>
<p>可以发现，求出所有的 $f(m)$ 后，预处理欧拉函数</p>
<p>考虑反面，我们算出所有的不是好串的串。</p>
<p>那么建出所有串的Trie树，并构造出AC自动机。那么题目相当于在AC自动机上跳，不经过某个串的结尾的情况。</p>
<p>假设最后AC自动机在节点 $k$ 结束。因为有环，我们可以从一开始直接从节点 $k$ 开始走，然后最后必须在 $k$ 这里结束。</p>
<p>算出这个AC自动机的转移矩阵 $A$，可以发现，对于 $f(m)$，最终就是要求转移矩阵 $A$ 的 $m$ 次方的迹 $\text{tr}(A^m)$，即 $(A^m)<em>{1,1}+(A^m)</em>{2,2}+\cdots $。</p>
<p>直接算，复杂度 $O(n\times k^3)$，不足以通过。</p>
<p>可以使用以下的方法处理：</p>
<ul>
<li>设 $w=\lfloor \sqrt{n} \rfloor$，预处理出：$A^0\sim A^w-1,A^{1\times w}\sim A^{\lceil \frac{n}{w} \rceil}\times w$，即可用 $O(k^2)$ 算出 $A^m$ 的迹。总的时间复杂度 $O(\sqrt{n}k^3+nk^2)$。</li>
</ul>
<p>需要注意，当 $m$ 比较小时，不能将 $&gt; m$ 的字符串扔进AC自动机里。</p>
<p>那么对于 $m\le 50$ 的答案，可以选择暴力重构AC自动机去计算 $f(m)$。</p>
<p>然后狄利克雷卷积算出所有的 $g$ 即可。总的时间复杂度 $O(nk^2+\sqrt{n}k^3+n\log n)$，足以通过本题。</p>
<h2 id="F-字符串"><a href="#F-字符串" class="headerlink" title="F. 字符串"></a>F. 字符串</h2><p>建出SA，将 height数组按 $\geq k$ 的点分成若干<strong>段</strong>。</p>
<p>设 $f(m)=2^m-m-1$。</p>
<p>对于每个区间 $[l,r]$，设区间内的所有后缀在某个<strong>段</strong>里的个数是 $m$，那么其答案为所有这些<strong>段</strong>的 $f(m)$ 值的和。</p>
<p>莫队，维护这些和即可。</p>
<p>时间复杂度 $O(n\log n+n\sqrt{m})$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Lesnoe Ozero 2016. BSUIR Open 2016 Finals</title>
    <url>/2022/09/15/Lesnoe-Ozero-2016-BSUIR-Open-2016-Finals/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7f1849bd4adc171d6df387090e21daf6d5ae611835e6cd8b34330634ca27cf55"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>线性规划</title>
    <url>/2022/08/25/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd5b083ee8751f32b756694fc3a75ed0134d9874797f532051d0523d1b637602">99251fdceb9fe96a1f47814acd3007f0027030bc071d069be4fd818bd2e392c39adcf108948d6a426a3ab95ad599e38e9a8f5eb286f563d9d1fcf73bf5357b5d9ba799183ca07c3e8a90b8332166b131b0b91224a356de1f989f769355b41bfd10bc8845e1f63fcf2f5a086657dfa95ad14d921a0b7fe723cdc81c9a05763503e16b1f3e6d03a77db96e644f5dda16555c4b020c3704ce7e27b24f5718fb6ae4d8b74d5e353129e89b0df99b4292592c7728e2ca8dd616108430225a3b63184d1134c8aa546a4b2bc282c4c6a215851e7e272f1a79b06f0d794cca00ad898e631dc4bcca5323ed7409e6a0c56be8dd981c05c9b22f78aadaaea20c1cca9d4a5a761a5ee75009e13cbd7ba086f9fcb89a6e27544a4a254355a935f30b47986018b1ef26d546b927a611da1f02bfdff254c0365250d0128b5a0bbbc38bec69c0e4eb1ef424e663e3e175411e56115972284769c0bb07c0d39a32fc32a693ab631d0d0e86879d91af6f507fd6d5ffc8d7a65b715c6ccaa6ce487c78be38170a41b1c3c5dec3625fc999d65872170d66639d481cc0211f176a4fd52545a7df7d4028031d95e0d0c7bcba33ba89ec0459935277212763d46de1abbf2295db9dde2e37596c8bb41b9df2225c271457e59253fdb40e3ca3d05fd8ff39b6b6a87034b7665544b40044e5cc3b06137ff4ce5598e7b7375302a355a1e17c2f12389a48aee339f8a45ff67b65e2289390e3b139c70ef94a11b9efeb56a0b1d366ce9a8795600ed34fe484ca6f44b93cb0a6b4c46318f8cbfb5945eaece313817846f21620cfcfad1f1c4fdfe2a652da9656164736bbb821adc7595935dd89ab3daec9439299c872520a7d8b1ee9de5680eb370ee1f7cb1b8226ebf26e073010317937cac7f6bdab1ca3ea36a656f24709e1deb3dec6df0459e63c1f2598b0cef677a1c3dc11f9d484db1a082858eb1f4400e8935f59aa59165a3335bbd5eea2a9deffc08ce4d646b63417e25beb0ba80933cada0b8f2e90e6cf6ae0c30f6bd011791ce879d303acb1a3934e9594501b35aae9814dd3058364e55040db9aadfcb1747f68b882</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Powerful Number</title>
    <url>/2022/08/12/Powerful-Number/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Powerful-Number"><a href="#Powerful-Number" class="headerlink" title="Powerful Number"></a>Powerful Number</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个数 $n$ 满足 $\forall p((p\in \mathbb{P} \wedge p|n )\rightarrow p^2|n )$，则称 $n$ 为Powerful Number（简称PN）。</p>
<p>显然，所有的PN都可表示为 $a^2b^3$ （其中 $(a,b)=1$ ）的形式。</p>
<h3 id="个数"><a href="#个数" class="headerlink" title="个数"></a>个数</h3><ul>
<li>$n$ 以内的PN数是 $O(\sqrt{n})$ 个的。</li>
</ul>
<p>证明：$n$ 以内PN数的个数 $\le \int_{1}^{\sqrt{n}}(\frac{n}{x^2})^{1/3}\text{ d}x=O(\sqrt{n})$。</p>
<p>求出 $n$ 以内的PN数可以暴力搜索质因数。</p>
<h2 id="PN筛"><a href="#PN筛" class="headerlink" title="PN筛"></a>PN筛</h2><p>通过 Powerful Number 可以求出一系列积性函数的前缀和。</p>
<p>假设我们要求 $\sum_{i=1}^nf(i)$，构造两个函数 $g,h$ 使得：</p>
<ul>
<li>$g$ 是积性函数。且 $g$ 的前缀和 $S_g(n)$ 容易求出。</li>
<li>$\forall p\in \mathbb{P},g(p)=f(p)$。</li>
<li>$f=g * h$。</li>
</ul>
<p>那么，将原式变一变：</p>
<p>$$<br>\sum_{i=1}^n f(i) \\ =\sum_ {i=1}^n\sum_{d|i }h(d)  g ( \frac{i}{d}  ) \\ =\sum_{i=1}^n h(i)\sum_{j=1} ^ { \frac{n}{i}  }g(j) \\ =\sum_{i=1}^n h(i)S_g(\left \lfloor \frac{n}{i} \right \rfloor)<br>$$</p>
<p>观察一下 $h$ 的取值：可以发现 $f(p)=g(1)h(p)+g(p)h(1)=h(p)+g(p)$，又因为有 $g(p)=f(p)$，因此 $h(p)=0$。</p>
<p>显然 $h$ 是个积性函数，那么由积性函数的定义，对于 $h$ 的所有非 PN 数下标的取值均为 $0$。</p>
<p>我们只需快速求出所有 PN 数下标的 $h$ ，就可以了。</p>
<p>只需要求出 $h(p^k)$ 就可以了。这个可以通过推式子或者递推等解决。</p>
<p>时间复杂度一般是 $O(\sqrt{n})$ 的。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流相关总结</title>
    <url>/2022/07/28/%E7%BD%91%E7%BB%9C%E6%B5%81%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="50c9d4116eac4dee118f1efb49842877af2c1fdb6b632b9c9746b3efea73a572">99251fdceb9fe96a1f47814acd3007f0584e347b808f4e820e07dbf0d4d9e406cc0c01c3e8fc196c66ac35a60fe23c76673959e54d1f618fadaa0d8e77d4370093ee2551639b01204702bf5ef74847fb4c1220629df15f005a3e3700d893b043ff3b54726476653b94c1cb8f5a7c9a81e2665fe8b57818d84154b2e05d4414de5eb39c6203421fc97cf1a43f59f78a89b48058cc1672a850d3ad6c9d5f0f7c5effd968e97698d93306b9f36b31b7e138f817e46528bfa74a0d341d987df9fbccedae7c8c58d5fbbb4104908fda41c941955c9296e4c175e7f61a594492ec99a5cf13b3870f79e223799bc74c42502fbdc710c3aaeb9565897611fff9b0b95fbecd4d1a7ff6e0ce337e9f88d1f9d17a2b87f119ae5bdbff5c751587df645b2ecea7c7def8383411948f8721e484ab70559fc5ac910380cf8c67d4ad3fbbcd9a7a2c82d02d8a4611bb11cd4afc9e2fef071219ac1b83b15bbab7761805750ff17f196730b93efdfb42d88b0f80e583f0f174dcef829c6b5dc8f45b5613700a85123f90f99ffa4e702bae3d69db7f889c32363f218f4fa648f0410d7536102e0d3bb7699cd0f0acf049c11dd41125abf70b08a040ff9fe584704fffa588c361a25e324c61b7ce29cef7467d0827c9c9411f8d13d265b4c8c54e91cab3a186cf9cb2428e768331fd4cfff45dab1e4c748db3c4def071d05b40c9d6e9d5c75a683ff528af9a7665da59347d388c4a12b1b3c6ab89b804f3d5bbfc2eac8132112a67ea8eb4acf4844cc2358ec8fe9aa887e8791d4348a8dfddd57fee96509839ca9b55b9ff6599f6e1c5f4370f3d44765cb7b955d671f78324dca9d4de0a88471cbb8da92dead401a1d08671d7328af5c78ba0286f63ce595bed385135b572c18ca54175df9ba8d46ad124730bb3bccf6636a9d1a8d5a29a59e69ff8a67b0b89d49dec97a3b55bb5e9d3a0499dfe460e5a8d58a4fae9bf953c4510fd2c9f6739a3e71e70b19c32f2f211ba7ae5cf3719fa56d1cff50182327dedab65776ded2400343a91a98f4ce59df774b4b0bb0db6d4070a817dc615ac5fa0aacf4289d3771a2cf66b7dcb1f6efafe5fa1497053b518b265855927ff1bee0f8dc0043def17e34b47bcc995da34b816242a03bc1babbecca2daec06d3042c6fa730a16b7ba7e02e9fc5599920d5c52d4c74a8d209601788f2df45f86ce7648b6a9ae136fad17200ccee03110bd9c930ac9a71541169b8ab87415db7044c05e7015bd4dee3424a2499c8cee49f2fcd48878ea1f3ff174716c270c72d8d9911aff31d62d83d74b62b20d5367552d5aeb4538f9c2ae8101838c2d71bf214d763faadea0e15ab2b347517d6be6f58d865bb6b31e8e3815fa9bbab86b8ea8496c6b311781413b52156e9128459e79bb1287372ee4409210994639b68a960b74c8df4d92bcf5d7ee612b22473f54999d9dd20f97628a1f99a6eff880e3ebc75d7dbe96934d2c5f79d473e074c489c731ace5efab0b0b0ef48ddf75a0389fa0778e62d226fb1e0c27ff93f0947d79f5e32e2cd95c872979875e529bc61314b3cce95f476301ffafb8e55667358e459aaa71a8836af5112a596ae260deec442b53bbefd85f879fc03e315d325e0985b57b08b0a833ca617a17ae6dca69e060e3d2a83a864d30b30f679498f75d36eb371ff2c12134c430468d19ae50cb76dc36c7ff59137aef1e710c93e61dd9b65c3985de91699df98e4187ceb65dfcce372f83be05bef7c8d71f4e77250793e9994341f2b04d1c983b8db2652cddbd2ddf86ea88b509115127c5f643f688709d51ff1a103dc9c7141eacf6ec646cfd8300e63f76504018c16034dc90f56c51b6764988bc5bb4828e3a7c7b488167c7a5b0f346308908fcf4c1bdb3cdfebac568a9f5cfb0f3b1e56aaa3dc313013fc02937c4260843942f791746dfc5a50df9d8834e5c1d86b76b9316ee8e9df00dd1d95955bdf740c2b0a98f5673c1becb7682df20147dfe54a206465bcea8e5976fa04c41835c46f3e47ff90b0bc81b91b9e5caaec1f01cd334e2692c6ac02a3a62c3bc8f5505882c0786235b1142ac9a7f84d1f0ac543d400d216d54e9f34bb1bd910949b7c6edf30314b24e7842ecdc3e3b2b3c31269c604a531372fd956b928b12ce420c53cf069574c59f7291dba38489c67c55f8e4b3aee6d7150c48bed985afacfe3bcb2ff5be78ef9e3f3f7635936507f187984978aff36600c0c7950d4824fa220043021492a06fded7fac0a7f9448d903fce9162087e8287a5efb41c488d3512f0b3a238844c8ffa655138e9e6ee9207e61ef09e482af97b1562d0342bff84b40c9105a83b563e6e612576dcd77cacf8a0e6f2d6534d9cd8522ade4d2cd74037075ca49694e7fa20c7689727db2c25dc7cca37d1cf55692604cc8367ce991b67a220f53b9bc9eb8ef6d65f4627a64288a2fe7896b023784d663c0e085d2d25145851e1a0d888b22eb168a862a39105b00cb56fbe4906130b4a8a0c8652c92149a88d9e053dd41307a172b710a8f2504592a62dcb36e18c6bbd76db845980ab0d22e3ae6729670f13926572834e79cbc42456cc9f6a2baa28203f5386b10cb14ca4cb2a9c1bf45becf6afc7ef16ee221ad94b8f3d1a67f7578fd03501b66ab0b6ca442f921ccf6ef6930d3739b404612dac6cefa5f86fcb6e2aa42a60a2dff76fb860445880283c46597c56152cc5ec467f47af8912f95cd8037a1c907d529c5572849a857eb52eac89c366ba007ab9ca94e0a14dcf0fa269ce1f7b678306dc3d4ab58bc32a475b64f1a31b45a217c20c9c7c1ffa3a39d0370976b291185948e260f8b808712a4f124943b9e5e3eaa9c2cedd1077918d231e5cfaf2d847c2331302c8e41d165c0d27563d288b434ec9abe7c6753458c4e5dfbd107ae4c54f43e3930920283e57d65501d70d1e31f1c7291933811a6b942dddf779791ba232566ddfa235aad7dc37dcd1cbb71e9fb7ab1d5fa73dfa663675c76bc2deab648a3650e35dabb179e0e75e2011afb50a3ee9b1e4569f752345f0f6d8af0fd9659d7ddc9865707bf06cd78682e46070deaef7b9d167f0e5e98b442b99c174693356e56c7fd9500c7cf61d954c5110ca84bf8cca36125a675b89f117ad97489d34c45d01a99569f5cd8bd6cfe2070965c9bd55e6bfa0eebfde604609fdc32afa829c7f73827d3070d206cdd80fe290aca1f102a554738398e5539a9ec92bea3e8ed920fab109d58939a6db3d76c245439e2284f29b3f49c95a66906ec8df84dcf07ec8692ffeba8e8e97a9156716edf70648b503f7b06dfef7ac8f6ac30a835541fdf5100d22b0c3b6a713ddfa203e89ac14dc3a6d066597ef80f299ab5e8efd3fedaef09205d81070ee19164eca25a7c6f1bfed18296d62a964de9aa14fb99b3208644f14d55597355ceb8eb00048cb78fba973f05e860b2af055611ea8c4ebfa47372c31922d7cb904a0e89ac2e9d21cbea56fe14caa30b6f4969eb5897461a4f02010d37ce149030865feca6b95caa77edad5482e259ac03fc9175e546f40efea325bd99c620c7536749225c2ea94c49be3a261a8b45bb06ce2d9304af7e5cc5cf032e2afef65efc1b85861d8bfc1c6fa486fabe4efef98ff487a8884e47f33574ead62f03c6a8a6ea6cf59e7b26492b6735b2bce481520f1be66d140d3343bd31dd3c7f507094035196caa1fab4854662541d3aec4d20747b169676509927d33e033cbc63537e4dcded58b1c189c18cd0ee7e427d752678f369e556bcaca163c3372aa35d2792d9ef3dd3124e4f07427f2ad448a9a03de4fe53e9b71b9a85da879af6f0e72f5ae7c89bcbfd2fb0e8f6f5d4b21d6cbd639afc668d400c29f1c4a04479d09a699fc6c7ef6402897bfd1163717412f4dd94183f875aab34532a75596b4bafcb18e04c4eb814af3c3cb3b645497d886e3f994a524cd2609610e90c772ea8d50a534ab7950ce7f5c49aa26460b60a8b65cc5e796cf2ddd770cdac3f33f69913ab9411733725f92ecc373bc805a8639fa1bf3957d1fcbae19a4927eaaad22bf03965df78be7da17827ba60a3a2167e960fad57c851c95cc4ef2d51120da04fe36e4ebcfb4bdf32762a3e96062492900afdec90ed36754a595d5a38de9a36fe6479adc82a9f98cfadf0a8d67f4c32c0f676c62e945c0424bb2858b74a6d3ce7a6d6917ec01a14554e8e4ae38250e82a0fb06798a3b6c13f232b9d43778de770e8c58fd664d917ee824f0c177a6f2d532966d170b6b76d9c326f0310b50c7b8d81d59fa4499151c8cb0693a1990fb12cac8a9527f6092a41971c1c2715dbcf7767687e957bc503b8ae7a03f707f769007dbb384f71ddc0d2d980e48dc3678545df50f707ab1fff79c91718b7c682e2cacd4f22fc2d20ec383bd73c547c4ea0d9f488bd963a4e95eb3a01243c371c860d6852fb24ab8297099156b71a64340c5d3d54688054251eed8494cf549035c15551aa5ad259d6563c51b76c2600c30a6e57c18ec2946ac884b8906ff226d3bfa361f09c4bcbc5106ee2b91466b9e04a2d3ad5e1a96a35ba0024f6318aea706141288b8a0c6a7ac0f49165bb9a03c5c8121848e90e462875cd6ddc58c2626cb798646af6fda957923f2f51a7560fdf61fda5307b38d2ab31fc4cead95e4cc5a833af88484393c4823af4492acb90e4e795c24507f6259ed1b63d43fb023bcc5b6650e85281c96cf40ed21f702240b5978bdd29863c8acc91e784c4c01af93d0aec8fa61f1333a65ab328e81c348a02690c307806cf90e007b95b2485171cf35c251f8e15a55c4f34a603676743070bff701c06990c730b25c782b8718ff6e0420a158ac4697d74abc66e4853fbfebf028285b053fb615cd0cbe3d4366d101a71ae6b54310066e09969513fbdd8c595a9725056a2544cc4d74e4c19c554c59f71b8d88161f0946843430127e1e3cfb53168e11c768655a0a6741b81f2190157d8a9071c6ad5369ea705d2a434365877a47672da7aa906dd847e100f47240c6ab5e46b4b7714776b1c75c18e3108e93597a12db5725b901b57c3aae8a0aeac17f078e818569faf045df909919fd64eea36f39a0677b760832e990507cde247681dc431be5ad131f13b7dbfbf00533e45f9e51ed3340cdcaa4e5d64771e12f0f3f75ce549fdda088a11a68953766e8ba05be2ac1cd14e994c327ab1b0f9a0d2e29c193137f87cb4e0e87eef57b9a3ab777a7932232f59e90dd8b3451cea001e3279d755ac5e09b90035778d91cd87967ec51223cb4ef4bb796471abb03493fd8d0d09ff845d9985b3e0cce600adf7a34605ade314e78ecf22933b2ef70840903e7dd5cd8a3f7685af4a373cd86fb7b4c067fae68c9a403836d27cc8008451741dbc5b79424a6d58c9bb5d1423994bff4895ab41caeb98b10fd9ad8636b448d72b7930e5a09a2352c63cb3ec49d709d8c0e37f5f2a40d7490a0076a1a2f5a37a90e406dec3e357786843a13a0239ef4faf4cfa109b2a943b216f361f492016e19ae11702f8d0ba13590a2809fe62ce3ecef4d62ef6207eed2cf1acf43ec031fc1bb2e651b68801641beeda8f25a454d54849e52df31ffaaed3150605c4d802d4a2e3163d29398b5995ad3f1b45fdef68dece3ac9dcd59d68ca789bd334c26fc0710d00119f5ae78db045483fc4679ea2234eee389b7dec79042fabdf58013ccf41d69a7592fbcaf80868057b3ff1538633560ef0f153cdce4078e1c8297eea70117b867d669e214aac9bcc51cb7b0be7ba2200ea6c74dab82cc53177206248509ee1c9e28acdd170a004097f8432b65cf0f43cf5ce846b3adf40cf728620871450dbc23b7695b150afa4a86ef53bb309a958a4f168ab5952713e4cd2704c0ca97eea4e237300cd1be34ffb9f4bfa11d29ac70819b9eb0a87a2272885bf8cae908a452b5eff897ddaf9ff3886ae7c4caf428d7cf7e6dfebdb4fa801d3cf1f2e0120a3fc2b92dea58347cd46e611acc4c9f16bdd6dbabe049decfd0c1b65433f43a389e1f28683e048c6d86ba574e638111cc074f3a33a1e1ffffe98f1fc64726b1d44b56f93141ea9e4db1e37dbed8dc685f3a75936193ce8fd895a579aab7ba745a1d01cce5f2fc81e0f023b4d4b05d47c0b04a2fb51c4d4bb5fc946b3a4a2ed6a2942919e5fe57392b5ced9c2cf5394de10274a81dece960648788118e8e8bfba0cdedf2eabaa782335b35a2dd27fd3c06c99ebb27f1d15a54e4f1dea0f2c77155c2c637bb7054962b23182808a17b5e832d1f137ea16d90d5bc0d7e8ee6bbcbdcfdfb084636ce18b83e7a5f022b32aa82e443539dadbd97b41e49c56ed849560f7242679aec5224fc3744b69b77b6d09e0d4bbf4ad3102d7a9ab1b23379a6cd97dc1b91a67d84c6c036ab97fe5f98e94cd70b285a4fa73c16c206d1d559bcec4e60991dd6dec74fa4282164fcdcc3a3db77c088d8b2e521a3d9f585ba84808f0ef370da2df3dda68e75661643ef4c230495fb51c63066f5f063363f627f2cf2163e9ace23e0b25b173a6d39acc4801b65dcd1a61c9cd87469f11a8e28aa1594ecabe689d7f0ca32d17f86109bebf32f2a0406da900bb5c203eb606edb7e5ab04077e80a515d0809c2e82bbea169c86bd883a6a94615a46cebab3c640b2094869820b909a58e820b79eb74e389d499c3b3909844a7c1afd8f6d1137bb4cd4a4e40b336898a0a9387759443f89b86bff91d17472fd03c0161b05a70e85b2a0a8b8d374199a9e04d1fca4fff9a559119f96fc635ef6953655993064ee76071a2c68f513896fa4895ebf0a56afbbe7c5e489585537f2336630fa43c4cdf0278349339b21cc892183279c39857325bfc465317d3a45abd2b1d0b77c0aba4e7cd4db050449afdf65bff453f5aed7d76fc40b1b9ef1350dd0260643365657ce141d30a11d533e42f270db589d74369ac70c3dcd49ec0e0e49085bf012fcd8e077f25239c9a3137bbbdc93d2331309bf9453053c96698fc2a78f8ca208021fb459369cfe2098952eca0bd8a381ffd2236afefb868d2751782ac86ce62362d044571ee3262cf4bbd6ac5280c027e135131e9772ffc0429d35d20c96cc3ea98e8de8f801ac1e97a3a47468d5700b07cbfd261c18a155c95f06f5e0ec6560e44ed09530a3aee31408e9b7d7a337a93f26542e25d1ac542ae629adfdfb26bdd10ef6ac72e7440c6b78f3fc3ec59d7964082c4a419a4f45bbec7f173fc21e952516c71e199fc8042212e34cc0468f53223660f7d9b41751a8250716bfe677c8e2c13bda03e58bdfb4c3679536861c9ae6ed7f48a1d6ea9cdac99ff33a3f3c6663481afad0fe58285af6a9db15750660527997bd8a5654fa286ed7f492d3bee292fd82bb979778835ac016d50bf0d9e153e2ff046acca5bedd98fc7b44b79b4b780bd32a65</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>2022牛客多校2</title>
    <url>/2022/07/25/2022%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A12/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33187">link</a></p>
<span id="more"></span>

<h2 id="C-Link-with-Nim-Game"><a href="#C-Link-with-Nim-Game" class="headerlink" title="C. Link with Nim Game"></a>C. Link with Nim Game</h2><p>对于 Alice 先手必胜的情况，Alice会取走尽可能多的石子使得最后异或和为零。</p>
<p>对于先手必败的情况，Alice会取走一个 $1$，使得剩下的情况满足大家都必须只能取走一个就可以了。</p>
<h2 id="D-Link-with-Game-Glitch"><a href="#D-Link-with-Game-Glitch" class="headerlink" title="D. Link with Game Glitch"></a>D. Link with Game Glitch</h2><p>二分答案，然后求 <code>ln</code> 后用spfa判正环即可。</p>
<h2 id="E-Falfa-with-Substring"><a href="#E-Falfa-with-Substring" class="headerlink" title="E. Falfa with Substring"></a>E. Falfa with Substring</h2><p>设 $g_m$ 表示选 $m$ 个位置，其他地方任选的方案数。$f_m$ 表示恰好选 $m$ 个位置的方案数。</p>
<p>显然有：$g_m=\binom{n-2m}{m}26^{n-3m}$。</p>
<p>然后二项式反演一下就可以了。</p>
<h2 id="F-NIO-with-String-Game"><a href="#F-NIO-with-String-Game" class="headerlink" title="F. NIO with String Game"></a>F. NIO with String Game</h2><p>离线，将Trie树建出来，然后将 <code>s</code> 在Trie上跑，需要记录当前 $s$ 在哪个位置，延伸出去多少个字母，延伸出去的第一个字母是什么。需要在Trie中快速查找从某个点出发往下 $k$ 步后到达的位置。可以使用 $26$ 次树剖或倍增解决。</p>
<p>之后用数据结构维护一下 <code>dfs</code> 序中的一些东西即可。</p>
<p>很坑的地方是 $k$ 是 <code>long long</code>，然而题意说只有 $10^9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="type">int</span> sum[M&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sum[u]+=x;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(p&lt;=mid) <span class="built_in">add</span>(ls,p,x);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">add</span>(rs,p,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> sum[u];</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) ans+=<span class="built_in">ask</span>(ls,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R) ans+=<span class="built_in">ask</span>(rs,L,R);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">	<span class="type">int</span> opt; ll x; <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; as[M];</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hap[M];</span><br><span class="line"><span class="keyword">namespace</span> Trie&#123;</span><br><span class="line">	<span class="type">int</span> ne[M][S],siz[M],cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">const</span> string &amp;s,<span class="type">int</span> x,<span class="type">int</span> len,<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> c=s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">			<span class="keyword">if</span>(!ne[u][c]) ne[u][c]=++cnt;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;x) hap[v[i-x<span class="number">-1</span>]]=&#123;u,ne[u][c]&#125;;</span><br><span class="line">			u=ne[u][c];</span><br><span class="line">			<span class="keyword">if</span>(i==x) siz[u]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> dd[S][M],_dd[S][M],dw[S][M],tim,now;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dd[now][u]=++tim;_dd[now][tim]=u;</span><br><span class="line">		<span class="type">int</span> v;</span><br><span class="line">		<span class="keyword">if</span>(v=ne[u][now]) <span class="built_in">cal</span>(v),dw[now][u]=dw[now][v]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> dw[now][u]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S<span class="number">-1</span>) <span class="keyword">if</span>(i!=now&amp;&amp;(v=ne[u][i])) <span class="built_in">cal</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> pos; ll k; <span class="type">int</span> c;</span><br><span class="line">		<span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">		<span class="built_in">node</span>(<span class="type">int</span> _p,ll _k,<span class="type">int</span> _c)&#123;pos=_p; k=_k; c=_c;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node2</span>&#123;</span><br><span class="line">		ll k; <span class="type">int</span> c;</span><br><span class="line">	&#125;;</span><br><span class="line">	node f[M];</span><br><span class="line">	node2 st[M];</span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">	<span class="function">node <span class="title">get</span><span class="params">(node x,node2 t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x.k!=<span class="number">0ll</span>) <span class="keyword">return</span> <span class="built_in">node</span>(x.pos,x.k+t.k,x.c);</span><br><span class="line">		ll len=dw[t.c][x.pos];</span><br><span class="line">		<span class="keyword">if</span>(len&gt;=t.k) <span class="keyword">return</span> <span class="built_in">node</span>(_dd[t.c][dd[t.c][x.pos]+t.k],<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">node</span>(_dd[t.c][dd[t.c][x.pos]+len],t.k-len,t.c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">const</span> string &amp;t,vector&lt;query&gt; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S<span class="number">-1</span>) now=i,tim=<span class="number">0</span>,<span class="built_in">cal</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> m=p.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> n=t.<span class="built_in">length</span>();</span><br><span class="line">		<span class="type">int</span> c;</span><br><span class="line">		f[top=<span class="number">0</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			c=t[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">			<span class="keyword">if</span>(!top||st[top].c!=c) st[++top]=&#123;<span class="number">1ll</span>,c&#125;;</span><br><span class="line">			<span class="keyword">else</span> st[top].k++;</span><br><span class="line">			f[top]=<span class="built_in">get</span>(f[top<span class="number">-1</span>],st[top]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(p[i].opt==<span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(;p[i].x;)</span><br><span class="line">				&#123;</span><br><span class="line">					ll d=<span class="built_in">min</span>(st[top].k,p[i].x);</span><br><span class="line">					st[top].k-=d; p[i].x-=d;</span><br><span class="line">					<span class="keyword">if</span>(!st[top].k) top--;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(top) f[top]=<span class="built_in">get</span>(f[top<span class="number">-1</span>],st[top]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p[i].opt==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				c=p[i].c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">				<span class="keyword">if</span>(!top||st[top].c!=c) st[++top]=&#123;p[i].x,c&#125;;</span><br><span class="line">				<span class="keyword">else</span> st[top].k+=p[i].x;</span><br><span class="line">				f[top]=<span class="built_in">get</span>(f[top<span class="number">-1</span>],st[top]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p[i].opt==<span class="number">4</span>)</span><br><span class="line">				as[i]=&#123;f[top].pos,f[top].c&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> dfn[M],ppos[M][S];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[u]=++tim;</span><br><span class="line">		<span class="type">int</span> v;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ppos[u][i]=tim;</span><br><span class="line">			<span class="keyword">if</span>(v=ne[u][i]) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Trie::ins;</span><br><span class="line"><span class="keyword">using</span> Trie::dfs;</span><br><span class="line"><span class="keyword">using</span> Trie::work;</span><br><span class="line"><span class="keyword">using</span> Trie::dfn;</span><br><span class="line"><span class="keyword">using</span> Trie::ppos;</span><br><span class="line"><span class="keyword">using</span> Trie::cnt;</span><br><span class="line">string s[N],t;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"></span><br><span class="line">vector&lt;query&gt; p;</span><br><span class="line"><span class="type">int</span> l[N],len[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q&gt;&gt;t;</span><br><span class="line">	p.<span class="built_in">resize</span>(q+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;s[i];</span><br><span class="line">		l[i]=len[i]=s[i].<span class="built_in">length</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> opt; ll x; string ch;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt!=<span class="number">4</span>) cin&gt;&gt;x; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>||opt==<span class="number">3</span>) cin&gt;&gt;ch;</span><br><span class="line">		<span class="keyword">else</span> ch=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">		p[i]=&#123;opt,x,ch[<span class="number">0</span>]&#125;;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s[x]+=ch;</span><br><span class="line">			v[x].<span class="built_in">pb</span>(i);</span><br><span class="line">			len[x]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">ins</span>(s[i],l[i],len[i],v[i]);</span><br><span class="line">	Trie::<span class="built_in">work</span>(t,p);</span><br><span class="line">	Trie::tim=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,dfn[i],Trie::siz[i]);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> opt=p[i].opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,dfn[hap[i].fi],<span class="number">-1</span>),<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,dfn[hap[i].se],<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,<span class="number">1</span>,as[i].se==<span class="number">-1</span>?dfn[as[i].fi]<span class="number">-1</span>:Trie::ppos[as[i].fi][as[i].se]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-Link-with-Monotonic-Subsequence"><a href="#G-Link-with-Monotonic-Subsequence" class="headerlink" title="G. Link with Monotonic Subsequence"></a>G. Link with Monotonic Subsequence</h2><p>由 Dilworth 定理，将最长上升子序列长度转换为最长不上升子序列的最大划分个数，由于是排列，不上升=下降。</p>
<p>那么答案为 $\lceil \sqrt{n} \rceil$。</p>
<p>随便构造。</p>
<h2 id="H-Take-the-Elevator"><a href="#H-Take-the-Elevator" class="headerlink" title="H. Take the Elevator"></a>H. Take the Elevator</h2><p>对于上升的情况，设有 $a_i$ 个区间跨过了 $[i,i+1]$，那么至少需要 $\lceil \frac{a_i}{m} \rceil$ 次。下降的情况同理。</p>
<p>然后来个后缀最大值统计一下就好了。</p>
<p>需要离散化，离散化需要<code>push_back</code>一个 $1$ 进去。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,fuck;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="type">int</span> f[N],g[N];</span><br><span class="line">VI vec;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n,m,fuck);</span><br><span class="line">	vec.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(a[i],b[i]);</span><br><span class="line">		c[i]=(a[i]&lt;b[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i]&lt;b[i]) b[i]--;</span><br><span class="line">		<span class="keyword">else</span> a[i]--;</span><br><span class="line">		vec.<span class="built_in">pb</span>(a[i]),vec.<span class="built_in">pb</span>(b[i]);</span><br><span class="line">		vec.<span class="built_in">pb</span>(a[i]+<span class="number">1</span>); vec.<span class="built_in">pb</span>(b[i]+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">	vec.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(vec))-vec.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">lower_bound</span>(<span class="built_in">all</span>(vec),a[i])-vec.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=<span class="built_in">lower_bound</span>(<span class="built_in">all</span>(vec),b[i])-vec.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(c[i])</span><br><span class="line">			f[a[i]]++,f[b[i]+<span class="number">1</span>]--;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			g[b[i]]++,g[a[i]+<span class="number">1</span>]--;</span><br><span class="line">	<span class="type">int</span> cnt=vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) g[i]+=g[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) g[i]=<span class="built_in">max</span>((g[i]+m<span class="number">-1</span>)/m,(f[i]+m<span class="number">-1</span>)/m);</span><br><span class="line">	<span class="built_in">fd</span>(i,cnt,<span class="number">1</span>) g[i]=<span class="built_in">max</span>(g[i],g[i+<span class="number">1</span>]);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt<span class="number">-1</span>) ans+=<span class="number">1ll</span>*g[i]*(vec[i]-vec[i<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans*<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-let-fat-tension"><a href="#I-let-fat-tension" class="headerlink" title="I. let fat tension"></a>I. let fat tension</h2><p>矩阵乘法结合律模板题。</p>
<h2 id="J-Link-with-Arithmetic-Progression"><a href="#J-Link-with-Arithmetic-Progression" class="headerlink" title="J. Link with Arithmetic Progression"></a>J. Link with Arithmetic Progression</h2><p>最小二乘法模板题。</p>
<h2 id="K-Link-with-Bracket-Sequence-I"><a href="#K-Link-with-Bracket-Sequence-I" class="headerlink" title="K. Link with Bracket Sequence I"></a>K. Link with Bracket Sequence I</h2><p>设 $f_{i,j,k}$ 表示考虑到第 $i$ 个，匹配到 $j$，左括号-右括号为 $k$ 的方案数。</p>
<p>随便DP。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> f[N][N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> y)</span></span>&#123;x+=y; <span class="keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(n,m);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) <span class="built_in">fo</span>(j,<span class="number">0</span>,n) <span class="built_in">fo</span>(k,<span class="number">0</span>,m) f[i][j][k]=<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> ne;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,n)</span><br><span class="line">				<span class="built_in">fo</span>(k,<span class="number">0</span>,m)</span><br><span class="line">					<span class="keyword">if</span>(f[i<span class="number">-1</span>][j][k])</span><br><span class="line">					&#123;</span><br><span class="line">						ne=(j==n)?n:(s[j+<span class="number">1</span>]==<span class="string">&#x27;(&#x27;</span>?j+<span class="number">1</span>:j);</span><br><span class="line">						<span class="keyword">if</span>(k!=m) <span class="built_in">add</span>(f[i][ne][k+<span class="number">1</span>],f[i<span class="number">-1</span>][j][k]);</span><br><span class="line">						ne=(j==n)?n:(s[j+<span class="number">1</span>]==<span class="string">&#x27;)&#x27;</span>?j+<span class="number">1</span>:j);</span><br><span class="line">						<span class="keyword">if</span>(k) <span class="built_in">add</span>(f[i][ne][k<span class="number">-1</span>],f[i<span class="number">-1</span>][j][k]);</span><br><span class="line">					&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[m][n][<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L-Link-with-Level-Editor-I"><a href="#L-Link-with-Level-Editor-I" class="headerlink" title="L. Link with Level Editor I"></a>L. Link with Level Editor I</h2><p>直接从前往后推就好了。。。</p>
<p>用个滚动数组优化一下即可。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Byte Camp 2022 Day4</title>
    <url>/2022/07/13/Byte-Camp-2022-Day4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dd2d0e157c5fb2567823e06ec18e94d1c2f13d9ab9b34f0faa07512c9b6495e0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Byte Camp 2022 Day3</title>
    <url>/2022/07/13/Byte-Camp-2022-Day3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="86a5fc73129b21abd36805a79d26d03b90e1ed6400a2d2e67e3f5eb808b9edec">99251fdceb9fe96a1f47814acd3007f00b778d863aad3e0abfc36d48fdfacd95122e113c83609d12ecf472ef04b05614ca06d783adff1a794c57a9b73e6c9f9cc6b662321e6a4375d179476985ba732800d306afccec01c40c33ac933e7d82c721d55c9e887f82801612783cb3ede8e80ca170dd934920f0d8eb7e17734334e0c353ddea0860c7b2b4b9440505729381489eaf2bf99571b996ea9d53a4a9ea54c4513e940c20848104193c2588b7df3bcb920e65eb12a1c51bc3d831f8bc969d13a76de4e34fe95cd8bee2bae655dc0dd7cf9883b5ae8f0434172806239b6ffd57abd8f9aa8bab331ff7f527652dfd77ea131c026fe240a237fd4ccf0dbc10bde500a4ff50f00f07c89db82bd7a66095eb3df3a75af215b8b4071400ce14b3d8d7c61a843e154713e4113e8d9c562eb603de522e88b5886ece2e435a4759a88952b01be9872f77d713d6ebeb451e7b9934e919b9e14fe2b54a1ef0cda1b81d6537bc5decfdad2968a1f120ade2cace42169c3da240ac100b4df3c4db062c039bedb379cd2ddfd5d0431300ddc216c4e1bf67b4ef929c525876647babbce21c9798aad56d0faa83cc84bbc3e0188f15125efda02f699f9b9bb48d971fa8412cb2455df908f505da774524a0d9df3c7b96fa46a5c4e6d3e9ab1653c80a4abddd3f2f3c3879c7e5be7bb304f516c431fc897c9b3a099095fed775444f6b6270908d06d59346d64c67bbcb4258fb40631ea6df4546e443a64c4723a18e29b8d38e2ef77913283f1a0923987da4e301c501303a87cbf451b8419d22c223f4ef9337491791b34d377ad8b59a8a7faf9ae6fc5294e30f8fa1deffba2ed0d16208bbd40b3048ebdf0e0683b9b80c1706e45edc013fb15da89eb8a7adeecdd9b4cfee022df3ce2d0083178de36ba656f50c5c2be5a2a3c285b95eda2a97be052c7cb442ab1a74c3e6a08e2e84c3c7cb655a9af0857cc60995970feab70b10a07ae1274eda00d0ba6123e97f48fac0b3fe0a1c792c8802b453c2f240055b7ec6fa8dbc522ba8b08cd0b6336d948d3cbe0eb26ed6dc5b163ef1a336416b7b5550acc18e9ac7c96520ed2c89c6a2b374b22404435e886dd812068d99697655ce3a0f464d68c31583c45720761eb820bff47b961243e06793e095004f0e06ce388a17588826e2b88cc8cdfe7da4538166e0417a65c212f7e08e69d857b05fd4c8d9c0dead1b393c6cc419a83d7c69e119e806c198f82570c539ea7b8e157808fe38b3b7f77c017758180e65d8d5834311fe8a6bc613c8b1a01a3a639b39efd181d5a228786ae7ca7db9488a34e138d565e1d2cec1bf6a7f6549a9e1faf0d5d24cd20cdef55a83a0585cc8e19326e139be7d8cc07dd55783c4ed3341cfebb36f808c0d8a36a88cdbad6eba7953a45804fe800371acb891fca1291b599c940a1759e76dc06c7d724a13546c5ae54820d9b0eb87dd7667ddea68841a03ae6072f3b576a502ca13c302aebc676a7e1c066e9a39bebf34d9576694baeb48fdfe16df2058f6267f5391b286c8c8ab49ec67ae742ae469c1e1ee25e0e7635422f89b736c532765a3d234b19cc0801b65ed5856dfdfcc5402272f73c0e2a1c45f5576f3a38363072eb477a337481622af15620e2057946aa56f47395bbf721e9b59d1a863710b60bd9cbf0869838834b4c054c22cc9c1ad7b4584f28d401d2df86a57be94ce16a847abd9f9acbc69768e2b6f782cb61eb2975babfc2d2ccb3deac49ad4cf79542e16bf9b5ec8e3852443d5b235b5dfc8214a8f1ec7f7cc51e6c3ca129c69be77e5565ef2d419693856ac212774115a9fc1280cf55f15e8c9c26e3121145c392230b683efa411ee341e8c24fbf144717f9067add900e7a9fccd6a25bc5fad785c51f5f5568d1e687f8e334625cb92c845d7425c2722d76bc3fede600a4d9d5720d243de18f69288a395012569709479f2bd434c08510e114b90e778d316e1fd276ea5b3e4668577c8ec85df1915d780a729d3900faf39b36dbd5746a8ea6ec2c5ee371394fec4c6a5b14105f1b191273e8e6f9f282e5998b639e16f76e9c5dcfc52be17a6a4138b49059947ba68c5ad7b66b199757373c87193fe220cbc3f8546cf2f64da576d043d9d570856777745e6528f40bea05bd13838acacb968a957d60f55441bdee3aec1584b9c00013569cacdcc6ee94a4a82af147fcfe39a50bf320a9762c75bf7f3883273f39e5fe5430597f5aa0baf6483f9758e8686f45b02bad5414c36d3a5cb4133c9e19e8d38bae19cf0fe438430a18cb4956893b976dcbdaa4854a179948f6197533efc0845afd71423692cdc380973726c294daa2c0d91c8a7a3155e19e5eb13f5ba7cc54654ef19ca74e0d12a40f90c6774191fd9a516113ff0eaa2fe6dc4c74f2da3e17eb554de7587677db270c0c4b7b54675181316f27a9328fbc10de9d3bedc94a67028d9833ac0a8aab7065967417a94868a660539ea6edd225341fd622d3d3efaf1ea93bfd394255034b1dea4ae4fe43745361287fc988c423107d9eacef989f4eb956864804a03524882c8155f8db6d7f17b844b30fea03e1524aff41c1552e9c76f73f4a55ab4838f21eb26dd811d1a1f67a1f77f8268d71bf4bde7738e38a41da366db89a6c03200b6238de27d0dee0c0dedab80c885f40ebb754c56c1a56339fdf0912d560a583640d28cbaf1381a81395da2c4b2d4231a64934a72cd57e26282b8c4b59707cff29228ac9ec5d5b249cf069901529a7b9d74dd036769131bac4e4f92c728b4a75d6b3efcae45bb2fb325d9a134ff82dccc83ad4fbf8c734da6dbf348ca9026008e61d8797289c7a892803874e257e039eb8f6bc167fcae623d3fe8d992fcff8094788a55e3301ebe80f509963b75defc9990607d9a69bbd35b3ccc75ef2a43edd30496120ce41561372c37f3ac41d1f014b0298d435e4255d7257be6a2e8dc70249094c306f29581f4d545fa0d5cbd8d41971081e197ed41bd34f2f86460db9da3046f6983c2af11c49791124b9edf29f27c4d9cef7c05b42aa838d862a0ac8a8ed1d2ae4d3beea83fdd97e7169f79b1ce761bd54d3db872f2ff3861785646ac6d4e83dedf51bc64aaa3fdeac149142a055f6ec3f54fbafd9e3f1645b482fb73ae00e3ed194b887fcdaf43653d8c1543728195d21c46277dc9a56b61b1c96e17b6ad8390c4bf2ce37d7d7452f7899959de69dce4ed4e70d0b57657e2186c74ae23dc11e6524ec0f91e6066a717ab484cd16edb2342418405f022ad09fc9a12535545757a8f1b7083cf6ff2395ac47e4ac974e84e8cedcbda3b2dc176d79002f84d96d3c2ce5a7ba40f2dc219f6461f64168ecec1fd36ef1b80213f59d0bdb64cb8936d005a10fc60ec636ec87dfb68bfb1c327fc5460d386ee2cdecee881cfcb41bf707eeff18181694806a500d2d2ee23efcf64a574913b838669560e04421463cd4b5ac53152b7638332848c2d97d862aec4983573cc66b604ad013f35f31ac2c56ab8adf1a5dd74edcc4fa9d0c0c7de9aa7a748cd449a5c2b071f440b7d38509227c4ba387b5e947ff899e2282dec44349c272caf6b5102ccb4d6ab7b603aec105d4859263cdd756a6be54f0a2c9db4d09a18baf8bbb5628ab0d93cba5a4bbeb771ad246f58fc7e641455285f57f0ddc2cb07ce6e5393e6328e6b1fc7bb73117768f07b06cdf1a16dde62e2b3e93b0c6ea927e8636a73583e2c2673948c7b871ecee54ad2c846b38ddf0b070f6905d8811c6759e31a16957d717a070aae482949ffab6d936c6d1ca032c4715a4767b7d77dd2034c7cb319686338c129a4811eb2a7d8274e6495abf3b922cb3b5c530a8d9797998d7bb0efbe6bc096ab0652c847287c0f9ebe73fe389b318591385d203abbc9e457b8fd6ee9d76fec3485cd0ccc4d824e69a894d9a12a020d53a7c1a8d72662e8381ce44709ce9d123e80cff2031448b6b95b06e8bde0f4a44a6e4a49121243787c211b27237b68b2b6fd1eb357ef9e23b5d7ab033a6d9dc30c1b4f9d9b225935fece4c771e152ff2a3c5dd0d44d70c7879218c63260e42527b08a8c72a2e5ea5fe9ad3008d4da295993cb3f52ed29f88d859d5238589d76985b46fd53f2f5ca5af2c2e38bee0d5392b20bf19b6d6bb6d68fa33db14f9672006330b8adf2f3b3e5cc8e046701b1f81c294c7b72e43db3cf57b107b7f845bd44cbebd7f1b9aa90a729fb8b2361457536e1cd41e530d5ce3510c02720f79f492da813ae062baf2202528fbdf3ea91ba6796204f557360b8ec3b9ca15881390ac20880895baedd49767cd10e62ca9c1230442beec2c1a00690c1a33229e526e1e2e6613f47351123a5d8348bfac8b1df1fdc7da5b3f31c5ecaabebed8769a386d44124bc20c3d981e0f99b77b7c50cea5814a128fdbf84c89bb113f67fb4a04474eac461c7e28cf9703146ffaa6d073c683a39e096c761971df7b1b03f750d86095a763764dd3707a39657a0a064a5ab76bf34d5e41296b5cd62c5d370cf6312424ff7b42ac0027a8671513476ed0f20d1e7fd3fd572f5986a5633e24a5406dde4a7a28b07a5b107bfc6a35352241cb5c6f615f4f73676df3f80083417d422d10b4803b96d8037146b71befaaa1618b9bb9dbcc872da2d57b7d44a12cd437b9c3cfe6e9b962fa5a09e21174ae3845eea17c01d27ee0482a4597ed7aa5ee9c5762f92b34882a24337348db198601f679574a29561355569efe211b3a6e79b6396b6863ade39b4de21f0857faa1fd389fd2358b4f06ae79cd48428feef5fbfeda1a9ff9df6f40cdde782b4d51084692beb4dee0bc0b601c432b0e7b6871a7e86c8db58a0e8866e652c89621c831ba68c27a7a70b49bc1c3a75cef49c0d90b9aa893d55fddf9337f07c05489f3e8146166a91b311e97fe6fa1268e1c37dd7fe83e4ae8ebd5b5fc03dded7bb4a6c568e227252e6d5edb5e6ac5c8ef5ab5758d4c7f4b001191cab194673b60735910d854ccaae3a59a6fbe1e176dd8984cc07fdadd2f52b438f2cbd0b5895916c545966ee9bdb63e832fa9d0293898d5620a094cd20dfd9b62cab06b03a24c763d9b032668ce2c90ad6a3004fb205c7a2c7cae487fec21f7977688df83e2dd64f6afe09c0ef00b872465a639a8118fe0e28c8d1a5d2ebf7c19b9f5ca9a1922f4950c1769c252f89b98817f7cbc2151ab5a44b67a250343a14db5651094608572a3fcaca94b65ccf392864ce3db6fe62f7aa921142e1a04248d7249d001188868228ffc32169a9ea18f57b769b09f82b45760574d9add9fdf7645340630cc5497426c96d1698351d072149bf3f37baee1e6d4660fddb2b1cf1ffc988484493a289c4c17553f533e0af095720584c608b0541693dbc8c1c76fda08519a6960e859fd01818e5c41b5b6a7b9b9b23819798573a1b4cb9a26e520940c2653142a2801851cf64a18daf960d27bf3c229b4e35dad4c087e3ae359a33cce9854b4972a7836ddd38717b94578510fe0f6ce978d92611ecbcd4c2170417ab8d1311485e6656de31df09bbdbe8d7adc3c9a6c621948bac54e2608d00248da240df5fa1e545a853e716791951ad949ee44f2e419577a17f6ccb175ce971f178e060d3aa99f9f5e0df0dabacd5a0438e9e7e78932b4749c4259a1a041f0dc0e2b8e8e994224db35dc98cad8b1c84bf65e48c6fcca4aa275ecdaa46a957c27634a50d4766203499f0aefdd77715f5187b58cfbadd224aa0d77a43edb1f42fc5e6ee9881a10923b0a9df70d006a20fad9685ba2320058502abb8351a6af3c0b893fa078c1f9f3522839808bd6b646376bd8138ef6baaaff83b7224db3a59b3a3f636f47c8e6e84ab2a3e0ad49cb396c34587cad88e637c07000bddbccc4db75f3a12aa7ce985cca8eaccc9ae60a2ba7559f280357eddf9b5737b7dde9f9ac56a7c3ec8beeb4ac77a55b7e570e0e8f17ffb76f9a03da8ef7721f86ad94cad9b4c0f95942f6e1c1cbf16f00e2230751bcd7216957f623d755cea554e9eb87c82a5288a8c3ba449466b1c29acb6195ab7bb5d3dc217f2cf825a08759fc1022f631b302f57f9e40bd204a1d0124f190713c56cef9b64ad3f5e7764ed33c5a645a18345e8ddd83a9f5731b2fed3468dc8aa4a94c64c5e65fd8f5d9b966ff2b00a069c50894393456d7907718308bbc75b919d42a96ad812ed35028383c2963f9d84092baf4b117b55af9250b9304a0984f312b36285e29616e738ada145c3e541f22e799f97ff9dcb0b86c0f502f8537610d0aaea90272b5b7e51ba29484dcdc9748726bbc0f99ce746cbe4ea3b6c4e98f5321b6ca96468f61ec79538638bcf6669d869634368be2c28dacd6ee94604c6a67148436aeb30b6c862b5e9f15bc9f6e6f71fbeb61c2740d04fad4ad2986743036b429a6815c4346d2b66f9b5615a76c181743552406230fbc470cbaaafa9e0d09ffd6e829336e5a3da398280527181d8e7f6f1e29a08a46650169f7de43aa61855d85c7bd71e8a7dd119cb7fcc503b1abc5b70b9efe79e22e89fb651f616e72db3acd4b283692db792dab48631927fe7aa05a51d81623808fc96d492d63191c62e299b55b1ef372857d879f6a573d3b92735c8b49f9eae6b3da263ae55aefbe1c8f92e8a90b4937204e1cb4ed7e61d0b737eea07c1a97052564393ee3b80bd4d75168cfb602112f4d09a565b52c5d7fee22efd57d4621f403af6980dade3d0e39df16115c2607921f65cdd2f9134c4e6f6988e78f75cb4e2ee816f13808e4581df81637933a4f1d2779b054284fe62e6878f575438539b7d1dbead36a14e62f9eee728557cd4377fa844036f4d978252a2fd987512cb77d30df5b4327516d99382ed07489c55006950b6ac6252df86aeac1263f90c21e4262c0723395846da602d1a6180d415eeb201ea76876608162d61dd00ce246f34d1737911c20aae18db592cdab818d169d7fdbbe8547ff12ba0f51c00e23a7fe3d7706a92466d10856e7252bba64eee9f949242c692482ee0d8ecbabd6bc387909fd859183e00734437581a65bc466026753a29b041e1e1d2a81ed44854e06d423104e13ba3c9ace731f32aa64b0880e7737dc4898176d2017d8b9b1234ca544f8e63c3c44ebf00187ed55334725ffc1a6de53db6f9dfcf0d44b10ed7431c4404b1018ad37491042a35ece596181ebb1333d8a2d030a903b95445b2686cc4ae9968599cc99cdf48f723abf88d885db39f7e264382888263634839d0d98b50d16bd36cf01c0a1f3cb2d7e9726c24acff9a89be3c0eb3a75b57efa5dac313a76ceb360466a9faa8996a2f6bd38410e63a61c02fb8311473e3e2ae1833b6c8066e8b0f78c4687cc19d92586e3b67b56d1a1a9a82c2025f6a344c34ba2e2e6054ba20c1e12304266c7eead38b60ad6f427e10f3beab9525b5e94cd958ed7020ff47a29a4c579673f0e1276aa4a3bfd5a23a020a771b0b714e511e78bb47b11e862200246cac645c1b9633c52c88e5c584f8459d8a518ee0c861aae0a39e4765fb69d9d3b928edf124ba8c769d2c4a56f9bd11a66ab85d981d39913a893cfa0cb893d5c8c1e5d0162f07ade7a8c0955994f3e5a386a81828d413253f41bb260f34395e3ef6904d43ea6bc94bcacaa213ffae6d73450914330c3cbb14c64834624f36fd4a5e1861eb309650f092762feab75f668b7550e14ad7f6711f0bc6b84708e87f6415e30f11939edfc4efd6e4af499ca964111a1550b926932d7f95f3aa9b68cb01b333042439ed7071f0863b39f46bc4b34d83341431cc0c6c06e489eafb4eaf0957d80fdce6af8a69b34934c78a053810f7d2d5b90bff4176b5eb2ad72958c758eddeadce25a560f4b886bef076481eb5a8be449908a1413e6674a1d76939c14ced90be7aca7cc6602b18cb1f2c93574b14d00fdf0e15b956701866038ba25a35dc7c5c8a0453cfceb163ea2f3c772dc4f084aad9816bff6cd7409ecf2cb28a999b65dcebbb567285736839255c81018d350509709666684107eddd5280c4efff582ca8dfee6ed8322b24f321e189463e65fc6c4ccd6bc3b2d49127190c16989134203cc19f775abe6a39c144a2134b6f48c961d0c7f4bb723336349f15c50195778946d104d6171df9cf292915769c1d70de5e11f59e782ff42f89d0cafb28c9204db98a4b12df89899c6cd446056d2676ce161fb1657d28fb43ce23d24f1aab3456284efeec60145d7de3cd0b386651548b0cc983b0cb800c824cf38e30ae78bc6af55d8719c720d81e87e168d153f9f449be0277a2a56ee958f6edd4529819798a43dee6a07381d24549f615871da8e80d30b369eb2260d4447724485603dd905a09663dd975c4b993448e9a3fcf1db299d5551bf7140cf5bc6c03d1de9d734c9e247645550e9c11d92528de7f4b5552a521099633ba928c44cc695ed1ebee1a7f8feb9ae64bb49d416b66774dd9043451551d8fa53494c6699e17c6556acbbeaf0517d5041ffa02e7d6b26366bafa160c314574cd2c4c12ab6608e6e0b0437cdd447c450bb76a8c6817504273337d9def95d2b7f4997b27c9c4e443316fe13ac2afe3df04675dbc0f2d2e4a69a5418eac1ba2db67397d1fcd4bfa297a38f8c16c32f06e90dd0ac9c660d0b03b6fdba70b313dd8802ef0c626dfae714ba2ebf8f2965f692dd495c87e934348b1b86f17e381ae7b0dd213ecd69f55c4dbd0eba19351d6f0da9da207a7efea9e978d9422d641b800bab1597d2e1522e6e4df3dd56fe04149c8dc2e7651aacd98b2bf471df39ced6588020ab3d718dc8cafb0ef889ebc5780a9263d616919cd8d87e74f51ff2a570533f542ce243d18850c41a84f12d0f2fda259d7469967da5583b476381383c22cff84ea7469f28c2a8d81fdaed0509bbb6197d644e7573e41cc09b0a81e80ffc5adfea8e3540fc87616143568212a34a9d8d4284e2f00f617ce9de0f312b6387963f2d49a4c29bd90797fa639536046f41743a3b00c5985a3419a767e7f75f32527980eebad6f0095871263c4b2d1f8ba8b0ee2696eda009be4c2f5e9038959010f476b59aa7ce47a6b2b59b75fe1fe1be1c11d62e3f795063f9115914b78cf6b66cee7abb9fee14bdc2ec1ed24c39a238a1fb42eba64b84b9f948c7b595125219f44f46587b8e5cf287c082c67733380c68986d4261b802bb97b2fc7e73bb7126857572f491a748efc3961966f9f9bae3a8cd393ecd7c2d7e510ac2409ac40ab88c251347811bb1dc6d8d2f3325219a507171d93649890eabe24fa5df08495e4bd7f1dbd56aa84dfc4d136aa7f3cdb9820b50264db7fd299c765bbbf5e693d5fe3e116a37f3a4499e386f834fbf8bb28abf1ceade6b912ad9304c6aaa3313ae79cafdf44f6b8d3a62af9b600dbf2969351c5b921ee64eb57d73fa07b0b17e3f81fb196925ad5bfce72d366aa47653f84f2be77240f24082432e47966c45c1669054aa56241d0dca89539fa25f4bbc08f528a9bb2d5f7d03fe361737d485c4ecaa8796ccaf06ae30fc73dbe5f314f807b5f2e7a2ec45980e3d899450f0269b96ff6e6e9f673bfe3a76bae559170d284de44adf9ec488d2e46e4b7cef71bf0c7448362f6fab191c66d02f6710f1e8076cb07cb75ee2c7290725139a87d3bbad9b21a65644196a793002b49762d16a92d1a93c1760a3c45061c0d9a62cd1bfab70bbc20c799078e5fe0f9cd106cca180329c744411c1a97d292b98dbeee99b5dc9b7fa3fd1f5a3db4660c748dfe2e00213b5dc536b3bd590ffe88bdd93c0f2a472eb17238c77d95e5bf317c26a14db6f3077a11b3235f81a93a1b528516f92142509a83bd5f19d8bc458f8ce79dc26e0f7bfaa6e249b90637a3c37f20aed114a80dc56017c401915a876483c10709179b104bbe9a6ea01ba267fc844f8bca8f9540ee9496d9652e0ca1305e7bfead16e87552522f7f752a07ca23d0b221c27a45ec671ce0259053001b95483a1395741c913e9ea721553e397b3456dc40c62b8bcf7fd39a779261bc356dce2c6e3aaf2934caba05082f7a09a7a0a14647fab0593624156425bdd3ad72c21f30f4d2b8bb0e0e69d209a0ef9da763f289e12f7351977d1980adfc48c4d1cb0f4d661ce2325ac9e00bbc6ecac84a2172ff9692fa8925e780fe146c6081c5bca4b7f6a9321b96cf3836d77332abb7addd7955fee544e18f557e3951b4887c8b1bf3553704841535a19b25a3885b865f21af3cfcedfeb517a99886b3aed7d55a730e7bbe79547828a60785eb1fe7b5098bda129a3249c333b803b457158a8bb9f253d25bfcad4e6fdcc7aad44a606edb4ec4208770549043736327a11697f638b13a3cf2b05774096ff4eb72699c01811bc5e9676f9b52bcfc43e6cea96df789bb3d748096b8df6285308d6a16bee7e6df51424809b322ebc897b794e79354eff25b6d4b20ac4dc0f95d8d932192a2089b8460bb5794dc5b69c8b84de2dce9e3db26c0afe3ac7734c717baa7dbab61c338a315a879ddbd32f2379c65b1a6095c8c1878f1ad0275dbd91c38ea06c1935e5959b51e001ed0fbd39f0b504cf67dec1680edd2e8bf6bcbb7f0f1495c3e3a6d0123f531a872080b50e3cf54304170eb6e31c09cf2fb3774448bee9f4d1584a592b2f1073b54c9b81199451fed6fcd55204ff0803ba87736b40a54f54e0c52a1c6c21c02b52fa8f3ddb3fd1ef6194fadd040e5a62a3afe005b0395e18862f151eb2faa876f46d851ad07500d66a518dd77d965cccb897afe9c4e9d5995fb4daecf0aba36ae7084d057f2ca8c39b5ebeb8be8f7d5e585a7936604ec84cd8df98c002b2610ee587871494a5075a0a7cc67503c0524f6ded8005ec47de83325955ce9a452229053b6de33a5f23f306935e0b388df932e4d16b4193ff7d725a263fe7b2c90a2277dbe6260aa320ff26ee6640d586042a4fd0d7d6b193d64dd77ae9917da0d4b05296c31bfb83d230feeea970339ae05b652666a7a4261c94717a744d9b080e1e3b3a58529cd134c2cc4d7e1781dd167f6bccb59239bdb8445cff4d74bd8fe8d622e0b2641a93a0013a5492a1354784756161fc4050e065b31e0b55f433689eda38066a4c51f6316f873c93ab0f7306460aae32ca156c9b3fdcb2b576f41e75c339dc1317e6380c6774cb556f83e15750b242b598d093b67317a5d86af48214b1c80534202349b3eaf85b02a89b005ab2093f455c30ad05ace0422c7157d4d24ce432c10ea37f040df24dc3b1c81090da008db8098d54cb291ad123506e5f8683aed74cadb4f39b03c989dcb91f34835098d90ca43e6fb40faa0af085ff8526f2e793f28d224686bb01828779cdf42a16a5c4da67fac14405fe0868e59a572aa33d8433356d9f3f9604420a5591afadfdc67f3e1571bd13fda4cf080a4e74ae577a831bbff4ff6697005e6ef6be1e0732756f1cae129be6e378bd3b2cae2d4d0b575a8c0ff8d6dce05d3663e290dfb0ffd0ed91aafcae6ac3bd83345c30531de5ae9680d5e1914cafde25dc275469be458ef45d6d5c5e26327589f3bb69e09ce7167e24cdc440e9f8da8bbda51cfbc564378035797baec245b776820d30bdf11932478378cef7d85a6f07750010b7eb99d26569a52f04078d98f6efe3595a8eece656340e67f0f627d7ab3cdcb20fd470169b99e61d112e207f4fed96c0b2c6d3915591d94b100eb082d29e62f06da8ad5d87c5303adb3596919e0b6a3eed1c5487bf42ad2e988980d56ea6c53a5bc66cf2c028117a7d1769dc283c05b9d7a4109294c4f2994be22ea27e4c64cd7dde2949a1999dd7e9d5182967db2bfb5e2c1d7450acfb09254542a87b20a10713bc12cb1d0e2c0855845a1e1becb19fb0f19e4e786b71d32e5ae0062b9376285f62a4b090ac7f86bf5bd5810f889e21fa4ec13a6e3e499a26be777672e85ce2df07b593eb3de63a7c36f3a852ee43a1411c4187012551ab2f3b133884a2a2fd3a1b85008a531197f940ea62960457c2fd769f3ff7f287612b631647184c081f929146d7d12e56f48c4c55c365bc3df671eb9bcd817845954c77b7f5f513bf8252f2c78918d0d200bd93561bc8495669a8f2830de54626b1c6c7d27a2f4be18e6641442e0edf2b87b89bf20fdf085bdd4317fd2f2cc21d07908b4a57b05f41497f23b6a9603484afd8ff72862e78fd6876d3c14177262fd6a1062b6fd07ad81bb6e282bcd7e40a98869044dfc2766af34da9299a8bd3f35288d26e08f9d6825eee627e8313b1c918334a8936ba2a033a3f2110cf59c1ece33b3d857e2127868b3fde84f94c2d080decc150ec2edd7f075bd726555215a6917ed69c8f298b72d7c8f0de6e71c8c97720436f0f5e58afae6f63bdbad2d0c5131d7bce4ce7c59a1545c7fdefd084df75dc434402934f8feaae143c0f59ce18e536912dee62878c225279e524cc84c7b576a8c994c2991b58c0ff9ed0eba48ea93a2c92e6eca10e439b6151b32c82d36a3f29ff5d810c4e9146b146e3755545ad3f69c2410ae7f0c4e1fa1ab3ef88bf7689b894e50d56b27265fbf36517a0ecc282d286dfd52c05e8238f34b57d5d9956e89bb12d2b23aa1eaeb8987cd031dd603ee1459b2655d6b2fe3d868e9723335f39d7f39f7037be5e31df3a7ae19794ff344dbaea431b5f01e19a51bec62b78b4afeff1af840fc8662ab07f7dbd784ebe4d7e36cd1c75d5d3bd6ec5b99922d486e239d027f9f60e5d86751d68edbd97167e2cbf957c36cc639fa7f6702b58ffa3b56264d2b83ff6e67049db67ceefb19727443279eb43c9bcb4ae667af842c13c5a101ea77d57f7fd10c8a2b63f7ba54c46c2b97f32e7606262b3dbff09e6f33f0356f9c17c4cc8e9292981f59e9f4289d7d965982a8f7dde49781687fbc60baa4d6f70a62a3b24e43e38e15837d7881257919b0a95e84fb680fd988181b91ee4e49261441604a2801acd9d7703ea5db780e8289b4746fc54aff7c7d13d4e1600e251f520cbf8872706d9ecbd7ea5ac3abff8945cd927a2baae50e6c91cc2f64075fb45fe5a52dc0f7c1435ef342d83dd7f5c2845f49d31a52493039fbc45d8f18c7fd65d6e1b16fc4ec96a261b8cda92bf46ef7abf71240de6bf65d859efefff6b9fc052a1410d6b87741ce50e31f701b0b0b50061299b764a504877f743aef4c4c6171e20e99d834df9660287a4714d6cdb5db39ca42fad1a390ceff777edcb1d5accc6eb73376d21577c40c4327fcae608581417f1e8c07963fb20dd1e9bf9aa177c85828e421d2361ec1a44f0c252aadf6456cbf164a2ccc25791f0f07fc0b655e0d91c0156627da5ebebfd0235f18bf551e6f7ed3105c3b8a02fb67b892784a8d1c57a2d62d998a8d437c210a2db29cad488933cd8c2f5b3514f0b062bb3e984f6d1b05deedc8ef8b1b35882ccbb601d9a758cdc80b621d97249c3e13d9a65129ffdc73fd63e52691e9123785889060ea848d09745c3f2763a5b2e33f8bafbed05f6690a68286ee9224fe4f3f4f147c9cd99ed7c5fd7454ddb71668f2f0f125469825fe68e6d0e4a5f78ee7c6f580ca4ac15f59760258f7d99f45d199f07d1efa848647905809d14394670570a6c0aae3a6f9ed331b1cd119f019c60e88c2f779de9f301d4455ec4a72568ae9407337b8f2883239b0a1cbbe35c1f4044da55856ec1e5a1b695d58b73ba17c4073595e59a911dee245314c3f033b2009461e4cfc9b1b42ed60c3af6509a5cb304cd4b5bcd2c3227714fae8326d8c274d14cdde22bc7ae034801586fa46a147af5339fc2302012aa567f1761edd22dddfc55415233fd89535ab1148fd9fbc12e36da72231b93078858b2b9fbabf52b14523f912434fc6c71a5733ec7077d4b321ed4b7fc529c7b3f81055ce05fa082bfd7d44e02185059c2b5765880ae8b7813e548b01e9f05e6573806730dab03144ee6da1dfb73df8b9db578b088b2a0a0675da702da05338e565ac8101d239835c59ec006f37fed18c150ad80cdd52a5e0243c7100e1d25721b250c1d5c472ab14b3bfaf1d3358654b5a5cc7a967017d6f7185d596ac4ad644a1fcaf359f712b262594e08e4c20711abd6b1a73ea083790bd47f2e2669a669b63f9fdb8aad9de2d32007e4112684bb49b52d66ac38cef053719f727d728a3560c69135db6eabf54593090df88bf2f7bbc887ff8c9e0cfb53cc99a7d1fef2033b6e97822a76473b4df831917f255414ce342aecd7cb1415ffc98c8ec5cdd76ad79b7a699f928edca029c86a9b5d2e60bf97614261789e6e7d2246095311b8b4415e29fdde7fc9531fef0a8375d148be8a01d5c29634c34f3da7c33bb0da1a02aba93f37407b34ed15c0f529dc12d4b5b6a587aa5624cd7f64d451d968700f00fa9730342ea8cf2a29865aa5d16feacf79a17288bde03ae7057de561dc19af3ddddf24e9e4a3801f5063b5e35db74e3904b38f138170618b8b03b6a51267aceb51b8d521184ef7f5a40089345895e17532fdd3a6d76cf6645617619ba29a58eceaf7f9ab1f93964caf665dcd34c58c9c752f64c6a886272f6cbdbf5940b6069fe9ebd4de02879487b2d8b491a684052c52eb2513f482cc3aefd12664ed4fb31b497dee01fa1b54c3a8ac84a0bc4eed6f4a4b3fbee2d956820e3a024cf7162065003456fb80af37df603f8997e7d7190c420916fdff546368a31127391af47b99a5c97d0d609cb792b924581662148c76dc84ca813c44686fd5fbb36fea0ffb9d41377c2643df9604e42860f3d26d97fa64208851e88a33fff54288b8cf04b39ba3b7dcf879d1abe7a406c842037bdcf0e119b505ee3fbb96fcd7d10f36d3512cc7a21d989d2fb37ac4fcf6eebd2d5826d186adb2754446b94085fc1a35d0e907676debc0a8789124cadb50a2cd2817d1c3e6242f0b250b7299fc3da7ccd79c8beb0aaac7c519777cbce97276f266dfc76b50468b3eb206b80b921a7711f4afcd2b2deefdd91d57f9b3e490d7aa398dfe4addb116ebfc351483bdeac4f97d4327c740f62c8c85258344981222ebfd622b581e7bc270c55c5d0fd9018a3f5f58bae9bc0ba9fb2ebf600fb1bfcdad40bd4e1c0b98fda99a0e27bed7ce8a890badaeb4966dceffc770ba487ad49a70c01124cacff7423cf79d5b274127dc118cf178b71b23e9a89d9a918c833742a6076c6a5e64b6ebb624fd837e210556d335042c17426ee8e415cc89c728eee95636874b7a89a238219a5e3817eb48f0a6f621e0a8be2dbd5d40f2d5556e91aa2f7c89606b3c714da16079f68e3a9d798d9edfe2b27d1b2fe6e38676b5e48ca8708bdc9011e1c58ad66d603a1255ddad1371acb2a1f3e7436cd05f9ffabf4237837870c10a21a0d1b0a6d66b0cd6f18778eb405d8775f13ae87e6f5e179ac69c33d13145603b2087c2e1bceca2ee018131391bda4de5871ae7a03076c4bc3c5769a9d1250caeab49a75cd911d46186120aecb8c38ce579cfe12532218fc4941fbde2c7ef284ea40f862665f56159f34f0590139cfcd1ab725ae18eb54db9fed6a6b8192c39261daa702473d8aa7dcc5b99d41a78e60349c5c9e4e16f391cecd7ca18dc893bfc417bcf8f4bacbca17a9a3149e8b3287447be564f2ab2b22b4352bf28e7c56cf51262190b992d72a14fa176d18710f8529af101b7b33bda08188b9f59480e9d04e6b85a0dea50ea46e1ceb58c4d1392428fe5f96035a234c798da71843b27eb930f131025c7facdab5da9dfc2515accd005998c4f72ed488e6369997479863048d7054cbec7f6fe84d2845409d07a1ffdb91f14283872a4c8ed5e5acbfbb0e742b7e757345ab3bfbf906c50360304a762d57d4aa2e718731a252d6aaee87637618e165fff309e5da541057247293603c24cd987d2f75b4fc349f2f97903f0891e730bd82b4f755dae92105b712910f953492528783d566e6028d0d71a643966af787fb1bb9fb61c39a96fe7c3478d9494379c4c8b82471333abb91dbacc8444542fced5765b92c6b03215dafbd152b7989edb63d77f6d41b03769ad519ab00e3c2b5c19deb10d20acff194e55c24cba2b6cae8910ad068d2742d81b34d5343a9ffa3f2d5042ddc2d48ee508d637ad49627777241fb85abe75278a2b65d0f98f39720e9df0815b0641365404d60b2d7d1e5b49cf6f3db0afee20cb7937a83e9e3c7cc134ed3da3d558220a3a5e4fa77aa24fb66c388be20a112a8ac0d8ad63ab5948a2bb7abcde80108b363e5fc5f4c7fa6c5afe439bb83517c39707a42b82b24640c79d927beefcbd0e73ea8c254ad814f4cf349995591ce503df1564d049ee5b99e7d808c2c81d31873a08fc01b3ce91d58b7683a9f16388b95a4421930bf2865fdb788dfed1fce5effe5042495358388c7bbe7dcfa82c1e75e80414d04d2babee1fc37336887a7d8cdbf5b5fd2798f034f29d9bb51e989365742ad64485b91f949b56949570c69657de58165e27700bc8b17c1b93108c9c77082452f52ba84dc3f66d962c781df57de1c730d501b01c71ad8473f390f7d19c5db8de593b2433a16c64703c017d36d156d6aa8ba2697abbfc88af507254d9910575a2029fddbc2733996cbb6fe4384bf77d5350169e39c601607a176cb8f6ef3ae2011bfa2ca829f890148c04d28e09a06d5d0a07656f0539b46446f59c5e11bb0cf72994b8ed5ef2e21d434ae28b042d70ec753fef4337be65416019e0631db06455889d097d0c9e6fd0555319d016d2f9a196f127de874d126c78b308245bd842dea3d93561b430aacd3c8654799ffb8a0775ab6048914fbd7d03a568137223c4c49506045e3e9410e997432892995096d41523c98e65f5a43af6732ed4d039a6f1f6fd73758d79eb517647ab730a908ec741e24d6c068b1b4764b742f4504c715b91545a827e41e45993efcea7e8d17a55d5754354aa9654fa268ad570e5464c90284a2dc2f873223a5f370d199f6d6c0ff8c65a25fb891441cff8ea7e770bbc1b43e23f128f653f3a543cf3330371fd55f2f2e7e84b57c7743d432476f5d55c5e88de59d72ef222e2f3a7b5741fe139cb47f68f072cc99923268fbdf00f6185802b6d46441ef0fa26e879d1183c6da410e8719772ab9e7d9afc940e4586e6a3d8cc1add7920644eb0bbcfcd9fbd5c4b3717a902fccc98655816a1daef89427c07aa5866057a0b2d19e8e2f81d216593a95a26b20e70bdc8b28dd07c88f13a421113ae14aaaf7e88aabbe77483e91057ba263dd7c09116da98644abb28898a9030e7324d5c00750870707af5ba132ef6107649fdd8e988ba3b1f53b92cb651b46fd8a2ac1b77692a3cd540edd2b0ce20a7caaa4a7e508bc9aaa6e05d5f2e7bd8a9bb7d6bcb4906f371da02b236f0ae3783e56bcbaa3275a17721af4e34943d0f410eecf4d226e49915a8e8d561969eef7e22cbb9f1a511475f8fecdb81f90636e33cb3077e3456cb23785a8fcc05db0da3fddd93c85a4285393431a3654b56d1b76320a7854f7c22fa5591fe9b6ce4e58fb4341bc4ffd4a691d225057ac42f03b1779f5a9a88006fc24310ec3102f3b7ad1d06e8907dda0e7f567bec36cb6688d1e3938316bc6173d86c85a6106ea19215d128b218b341965aaa3917b1d7ee0b897dd80d4ae21f72bd68d3be063b9d0e38783e638befa84a3c33cd5653c19183e2ceb0e629be5e919ce4ae1c26ce4bedbc1202791929ba9ba4e7e2ecda34a6011a89e3ca17c5676c2e636f61d49b4b00fd3602d8ebfa1ad8e97544649670e7d839b96aa88297770940eff5bc16ce474b711d0ab50b6c55880567cf273331e5e33c8bf1d67858d848ba08bdabf5195b3db09eb731fd43bb7ab19da16ad771b5465bf226f6eb87b5a8b118e68f0d7614222e47b20b69100b6d97e9056936d0d1d8beeb785a1e02a414c9d2ef9017279307609f6e979c00682521dcf5482ed4149fee0a6a58f2344afe7f86a47136ac0f0179db07553eda642a4e956cefc88353a39d9fd52971dcaf91e9b0204d552eff5de1e2c02ceeb8771397d55730c1ec22b683900136cb88ea5277fbb14f651f21fa57d1298abe6ce667657828b639c844832fde7c1a7a4dc015ad64180de1c9fc51235bb4111122cab9b5ae7dd60303b0f47117cf199cef0340287aac539dcbeb4a60ec42a045bda36ab16a0df8c3b5a17272c0c4a7c968f58c66c6db7f11bde420600869ea84b4c1af5257cb93f2c05628b9f54d2507a0b798b5c35210e7803dff8fd3724b4a1867875f6bfb391c765c37d93291cf89115601531b234d428ae1abd40f466d601cb2df0b5d5379729df96d54e1ab971efe934aa6ea93d11f4335f087460bc220065e0da7f3778ffa4be3f1a8bc195b8fd2d5157555d60c0fb90c166a2fa0c8d9861e9eef70179514a56a7c4b09402aac43cbac670e1b303add9f6610db8da5f019d6222b11d98a357397f68d8fa61329343ef42650af684313d628f964d910f58564dc3d635888272342d2bf1ab68a8c3891ea7874ae34c7f5f61063668dc8642affc03f883c42cc3ef0225ede4dccc332f9a1ad785fc80fa353fb8ba8fe7bd82598dfbb97465d1255013519526f60df783d6205287b00d43625b1ed03435c87b0cb2a6099ff89a0ef77e063b4f5bbf06ebdf5591792b890fe667756f939de2fb69f5826e213591ae181226e05928e8c7e3267a88114a7a83a5137cb29f60c6beba2d7839478a9815fb63c083b99f757eb6f06b97cb18e4864b78855dd7557267f91d78801e2e88a612bbb0037235a7ca16c45fbd246ed978233cebe00bd2dbd50c639a1c5114183cba677e9b711b408cb4933c48e156013d251727764baad4678a630af1e160bc9aa4bb79a50ed79b1d42e203db3064ebb3530eeb5ca155aef75933cea0428dd76a69d8d8ce4ca0738a7a92bbf3b173118a63b5e25c079052b606a9d32a50ef7f903990fe2a016f226c88590de1666ef07248e5c654580a164cfd18beaec52ad2b48a0e5cb794585f074f8296ab68e67c0b9e504bb914631eb7d0aadea075f2206b01821ddf08037bf39e2550df68e15299441f89dd55e3edce65a84999f042a2b48c1f4b9387b4567d69ce9f929bb78e21a7a9cc560070213a77b313414c97b46c8d41b19c5728a8706a40db045924d127dae948024caa3238196fbd5a3cbac69bf3a2add7d60235cb92901ef2a251fa8bf05849f7abd8fdd93939c7f3eb65753c54b8a6e545749c0b6153c608ec9421898be7e4beb6a4fbc6cf8f21bb85cfd665aed4ad7acffc966440af36e3e8656b742dfaab13298e8cb9d4e063c7f4e1c808da6ff8b428644bf124a5a6f8fa6a31b8a2004393d40ea35e12d6efa6b3694742f81c16aa00fe934ef6e5b603b26257f1045bb0bb81afe7f688d4bc75c9202071c0002ae6aa0644b5280317232cde7d31f63b11ea366d97b3ffd19f414cf3eede191075aad8ef20c641827f0586f355b0cd27e191e469b46520cb37df3ee1e295bed36e39e3cd21d5842afe0d17f2c337aedbf80e2300ba119e186a46d5d92d1157c0ebb7df022939f7f04cb0f44940a1087fe1486c19d6cfc3d5054f8f3643ba5386147a1fb1f49ab9757aa5ee85fd89bc5fe981d17f947bb047cda5afec4d37f0347ab34a77b81320e4a6a6b45c4768400b5ccf0e48a41ac6d962775997d144f7da1e7e4983b6e0b7c0b4ac77f3812f4781144ff7f6825f42b03ebf94bb6c81d0827d8a5694cc9cd3697799abf138127c02bae5c73ebc8f31443dc50931bd12894d79b3e3c9fc05f835956dc6ff6f2ed56fe61deef0e45a938ffc1e8505bc16ac9d35990e01d937cce454e8a8c398bde65ffb735f3a0ce81d4dcf8cfc9d037ad4eb96cd1f3e2f61ab0851bc24bd45d8093610fe020347b8477c07ab783fe9e586aa72343e420bce37389e57ce29e5bbce8e9a099a26acf8b881b34c4d3e263ffb70c3c5e201b2bf244dedd47e505b8200ba2fe27d54b047ead23bdedb38a8a53a797841cc00a4bea919c415f654cff378cf60679d822cbc226ffd0fc8ae09d8976ac90120080bd75340f9686d8bc1dece08cfd93c56e05e298bada0c4a99c82a7140ca20bef6a2ac2aa592137e9744019bce1781f2ab567ee1140dcf3dcf0c21622fd9d95ffc9c65ee0252ec3e24c59abf8613dca60d977212616f2d27abd0f9f42fb8515a92f40bed11599fdac2ab42b73f8b768c97ace5a45f0d674a5cb68e38289f51fb596f18a95cd85b0b09c262a468ee60ad3a33ce5db1639338e84992fa4c30605db3463445e3f44bb8b17dc83c467e19d8085ffb8953317860ae97e877a5198515bc91d3d6894bbf4e832bbbce7783c2ae6db1858c7e067b1054481f0d5bc18d3d70b0f83dd7351c7df6cdcbf8be29b5c3caf58fd47936ada9c65b90046c96746b3b9578bc69e5176bb3e4d0cc03f3e2c7f1e7b7ff21b389677cdd9f1323f451c484d904e5c999d001ebdeba0ed660341c180e1311a74b426f53a73a025cb675b1050bb86d5a75e68877c8d6c0ce6ffc600662376453083a83bec89eb8030f7b0b5209f56dbcbf0ea1c78ba0ffba9b9dd368bbc0dd95fcecfa02bf004a824892def6503b0f36e36b88e129e87307710cc24556359b1b062e0ebe330ef5ded791211d7e7fe561f3fdc0e0253bc9e83944efef7d815aaa2fe2aea204c2b4aae7ae4f2e2291b93098adb633f9857a2aa00a62a58da1264659d943690bd68bf8afb342793dbaac1a9310897df64709411d5fcd733d5b182a3682978656ad1da54ecfe77e8599691458b082535a6c3ce36ba61bdd68540f2ad2201cb483ebdbbd9c4fca6526ed2a692c47cedd7a8a5a1ef9e5c8ca96a38e031b12a36f8305f0972beb6fc8251f64125a231014b46016ca81c83ddbfc6b0dcc87b632d485cc1ffaca7bb66cfc2b13cb5da81a546dc7c49b8e12ff5ad3ca5b9aef9ea319a9afc521c308c3518ae98b2f7898f0f9d03b3000ead7102fecacb1cc7ea1ffa612dd4df2af21e4aa4a172d786f29bef5733c9c943f86733958991236d5a80cf723818720a79699c3fa5f8b29c82ebe42f802ad42f20c0cb64f245069094d8451d3bc7257d0a80a28f65c3ef509cabab27a3d3a96cc3490477bb7f85e1c3d58322c7b60fda32cbd5fa1ff8d6f807ece143b90e1289d4d6ee53c07b3ce8a615ec5fb43d2e3dfbc8aeea43c58af5cbafedd0b92bba157cb20c92a16d88ea995edbeb5a9cec5c9b79cd079488be83f7123a6ad92becdfcffe6de03ddec187122ba9a78e793a2ab8227476b1f06cdd33ffe43666f08042b3b17bf51b6e383e3740d83e32aef55cd6dae8c9b2ba364ea46c7092ee5d8c0dce25e78544b4f87869c1f284265d74532e92621374c550fc6ba522c5625ae816f9bcb3eede8de18592dd5f81b005883d94e7e5b88d856b166d8c27ce7cbe33d1fb211997c0b7dcf5fc679b68506104f7c3b0f42ccb5c41eceeb0975abb7ca5481246129f54b32cf90dad6f66ef9304fafd32c29f313b6f9e6baf8ea0b6a8d7b36feef3c26ca02de1dece2cefeca16078be83cb6ace8770e788ea4df4e6d176dc478b62a07a37c290b4b97147d21667a398384d48d7827c9407e6975756d00fd8c860f5fcad507dad5d2e940cf708a1782132a33af710381de0486f935d20bd42ae0fbcaa8f48d638b92d4520577b2be5ac2f451abd05c0ee350f7dd949f37fc87c2bdd569a59bf871eaa0f19909b06b9979a3acca3d3132f8c68c2d63b65be2fc6d96d6f698a9565c6663037428c1861394fe94a78af5a3b3e4e4261da1f9ce327f08789ebb6eb9f6c4665b3f4f3dea22f12ebee8a03ae873bfe029ef1b48de7ea81e55400bf1fbc43fcbd7ce52c158c3a5479cd1ca28d2fa14eb57797ca078405f3c4393bfca89c0a6c67568fca8b6e29fff6982779c6ce96949517c128acc29695a957ab21833696aed55994873fbb453e5effeadb83478517a3970318d674ed2bf5d545c3181e0c388e24782989dc451eb2c41284ad79298a25296bdf9c916efd78956cd2fefe30893a7e0a4aff8f1949a61849bb441aac2664cd7932846288c5eae932219b76dc8d167851eef0ba45cab97eb1074977097e1e40355c73ad49d49dbf13ce9c520aaa93c6adab90cf0b19fa5c8e292b0267aeeabfad892d17138237ef13e024917f02921f72638666663812294896a8020745bace7fbd4eacbe980fba883816c23d8d2acf06dcacff80e9e26f1ca68812c67778a6c9b8c5d921ad4ffc5c26dea5c88e61c5bcd337758bb8c1ca72a120fe58f5c617257106535905fabcd097208f0742976f72b7980e6ec8e4af0a0cb85aa42c08db74cb6bb29ac4fa35f13193409fdcdd3af444040c3dff073217fbc1d703ae625329fecfe81b51268ebfa7e712e5b2a77daa5f7f9c5d5031832d4e7f7cbe362f35b400e9420cff38bbb2afafb02fa6874f1093706710a0b96f3f829ecba2326d854868f6e564dd1fd43355a138df50a42e0bea4fd7468c24fdfe2c24535406b05d1c4c3268c993a81940a3b1d0582a380eae3363be0ad023e499f693fe821fe50ba9e7c953e7f2440765979a5d08a97b8869993c3bc4defeb7e3ab51abb64dac054df181862f9582da2a80d9d6638e6f7a4ec28876776bc3c81314b17fe6bf3712bd3531ec59209ba04059e30f07b235f601e0e8e1c8163798db4cff8398bdabfad361ffa971207095ee9aa63ef68f07d6aa3612dde680041e1efb25e92dcc9d978d7bf8c66d39002ba3d627cfad2556901476b71e8539632277c542034f70676557ecfdc16a0b327c04118710132c37407685d71080191456d20f2d577a3636781738202cb8e6c3b8cf442ce33a0dd96721abfa5a4f898c9de0cff62af4fb533d35e2722040e07a2b7edd8d77dadbb3478d66904c87550f21edeeabe263138042bbcf44507bec3752e66ff4f6bb22f0a2dc66332dd58637efeae75a4dab69cf99862d279d5735b6e3d40663b55e376e3b2cd5d73856c69d34a1f8cf9eb27296da5017a11cacadc41200cb57bef7d3ab4d6343cc3703bd073b0f03e3b48a21fdf19f99ae0095e85cfa14908bc44214b82553e354b8c108b606cb7b13b5a7cf34631b3f82474d05d1bcb6acaaea06a16042caa1ddcbdabb656e1cb1e2fcff90fd4da0c0d276d205b666a9723a3f3cc728e639ab0454c797e7b731838c449bce7e709e6d71f5e5cf096a3f79bc68fb37e33a961f2be2ed572bdfd298589c5be044e2322a0eeb09e083282105a684fc0b73f1dd97da1b75e8a6412afe7f27b526bbe1bc62f4408baa711595aaebc2561b4464cbf5a4cd6aa9ea1739b046214b813801fe8689d7df97b244974ccc71040fd9dcee3f409ed1a8a23f0c6441b58d812b477236bfb88ecf920b216ba5570286d7d8fba18e72dc1a2148e661498e48b68eece33d8a093a4698ced588503031ab59a0c0532d702ba779654547cfb999d1b1ac39166c6c5cea321682b0fbf9519ff4fc218cd04704314bfe590608399cb622dcfe871401d9ce72c68294a35ca32ce5338f6fa5f546b84bf63b44ecd93c4216225c4c1394b481f35f533de8cd5e892823e0ed64b071d51009e1411b3acc3d2e740c4c28c95a77ac07444081a19e6dd12f567d7eb2a8f64efe2cd7929e67c22419d4781121823fa8d1f932db9c4cc98067b691f327db3edc1b987c20d79912c61b8c3d0031d9e5201447ca09c80c795a8e02a76985cc6a6871d309c8c5689e5568550581c8b4932fe274ff691cf30090b7296549510646e5341a0fde5d197e3f5da93325be7a6b19f31a36c981c14d0ad186587f8a039ff1959849a6346ffc769726521c7208eff0af02a5b46dc6729215b7da227e80ded8d3ca2464936a0d48baf2b97429ebbb07119dc3a6f13754a6e319271809d4a3799a8dacc9f3115b40f791b8dcdca2771723b25bfccf333e07bcc57f3a7ef293ff72f8e76bb6e839e5b32314ae3e3ce7f2a4e8b9ce8371c886a787faa4603da44147e4f370c523e03302bff24b9a11317e974cf76d43428be34a26f37c8d28c65730884c52a7aea3e755d45e698e9795122b3136498d01497c8db50026ca12647563036213889a8f0f86a873e608a0fcc6f4a79990c9fd4aee57e0d1a419d7c09807efec84ba5bb422018ee6a98661f1f479fb80d842646d83a700982cfda785ecaea8ed7dd95df41fa7884517e55d32d4117c9a27e18c353b7622b29e90b98096862fb087b126963dc06c0270fd01eb21a3e2844e4159658f07cf00bb77696e36b8235a4307ec6ec203cf9e6230e7629ca68b480975209dc8d2fda28d57b0e9ff04794e120da7877b2aa9413a554861e7bf6fe4ec40d2e22198d61b5128652261480cdd94b68dca1699f14f6429a0449c33e6f148bdda76a7cd44a943f6dd0ce706b6d9d7d95ddd173b355385ab7e60e7ff1d377d0be53e7e091d3347e53eeec0268ba95d935c3a19bf14c7d9a5f9fda3244b3b277fe66864a88803ba35f1de2dd0b40700f20070210de766333ffb018698517f532461de4e5b24b57ed49ff9f70f16820d8d8c448a0a6a1462e4acde99adef31e8c66077023ac4a8b1f703010c508fb4255bcf41c851d3805736c4529bf0935c4b723d1a83142ea117531747252e94782d9914121e192994030fc70cccd09f4bd9a1bdd005d35ad23058cba5b945fd6cfcca69b08f0ae36fba8011439492b776144aedb2d37bde96ccd2e08223234c7c3e9f8fefa65ca1fa1f2ab2b060e2781aa9d362a8e67cc7e40fd826801b677ab65a6c3b0fad57345505bcc8a8f76a0e45419538d756bc68cba63f7d45450d2cca492816493d48da6cee252154d60c4e731c862a839816f24d79b802d81766f9251d4de570548ad9fe3b60359776ce2bcf6b8825024adc1ef3eff4d305a927009bb3691912cad10844676d87fd47ed8b6296cd1a65d145d898f3f3c1e309ceeb2e477de6b260866bded7c689c2a1af679f35bbeb43c2a6005c5b478f5dfac2ccbc04be350a516f51edfb04482a8dfa818e8ab348255ac1e8bd09bd55017279145d9035441c1ec9405643781ded737451bdd4ca231710457b75f5265d05f4823c3c0a0cc209ef188e021fcc38faf58b19b2e73cd65e8a87a3bf6f773c3fb7e1c1d1f080faa2946f61887e685d2357c07b0d35be811439e7959ce2ad666b26a4a7d373b4512375973c6a5d0deabef7b88515a562808da1e72967a83849e0f20e0a77d45e08803dfdd556d5ca7f68c97996715e2b16e614d7c3dfc37407adfb85bd9ad04664781d2f800a0bc5d98d8814508060230e45da0c41c5cbc9264becbe36135f685970461c1917603665aca26b8a53010bc887e7cd0a5ddd9dcc6d7c1e0ee95a1b7d735881fddf8cab94ce5fc8093c59e3936686b5861ea8383fa37e1d386a18997a593fc6aeffb8eb661e3d20d4f0d19b054d1e71258e38476464f450b20e8dd83ff96e6a7accc07a5144bcc24a0f13e71f674ef04575ec33779a8ff61e8ca8f49ebaf8db1047cf9ee61bdff2f820eca754cac843ab3380c96c1816c5b139e0c38b0143ae5784053d29723af0e83c86cec79e693c8334bd1f1caad1a8205482df4dd69525c90372d69ea2b08f4e288bacde0b4bd0425f4879608456582d34548d155f3599c706cb745828b6a08cbc739fe407688cd43777a32d219df60a7214f538c727e373625eec2e7b926020f8b5a6e9a0ed5d956431959a378034e9a377556e3fe92130d3bf177f60621a7db538aaacf0e30fb8476bddb7452c364fbe578ab27e3a7bc6e5a0470449ce3bbd21bbf08e01a6586b954755d9504601011a94f512913c9011c56740365636b53b9aa5275c316566f36b8de38fa5357339712acbd07d664ef3ed971ee55292d212f83620bc8064cda19cbf157ad635baf097099ec8516e242e643581f1c64434da1fe65471205e887dff959ea97dccd3ca5fa026a025360af17338e8fb19df73328893b933aa83a205dc06ca08c4d28915e6fad701806b5bdaa777c20873dd25e0b328c49c5237218620eb488ae45fed52d85462bfb13b900c136572547011cf256e9c2cd591e123abe8da7916deee3104a0e7ceec3e1966a8125c9318bc52e01ffd40e8ea2408b36ba8d3bca09b33db3f35f47f93266fe28a5784467ddddb72ab03ea108a796830a6b9dc8f5916ee57cf094975425d0f0019c9ddcfc059e4bd256e396558e6955135659161f9bccb259774a5ac75b3033246de2d48fbe5345fc20bccd54bde080e2f69859837af0d5eb9c442ce6e9e4eb2bb64b1c7d213c61e1e1b4e4b064073379ebd550975d76f87654585d0c7b26134ff2c1d22e6b157a346dd2f79a2faad5b153ca77764616c76978193cd2d6a2766b0e734717e56da6afa72a4f4223ccb5e334e2a3debc87577064976bee36b4c9d1ae7768f12f9715c9896fdaac2323a9952b1a3ff06bf2cffcb0ea8675fef4d8094e6b775f529b0f104b59a33959527b36c9f4abf9def3281885620295695017f59dd3383f3082a9d2bfb346acc1ea062d018efdd53d0f2b0cc3deccba1e679779d2e8f2e3a77c9bc4cd19d7a22dc56c1b36f01a88564704aeb82efb32858ad48a740658bece093e6f25d4dc6495c65f7c1a0f0db1915d6b84d08d4219208c7c866c7dd9d0485a019f008b86f963cf57a188c58083843a9dc19ea909d639bbf4756aa791798c555796cbefba5bac9d4d0eb833defda72693af0180bb358a5a5ddb380f96ece447b99ec7fe6a0c1e13ad20eb9cec189cad66c0d14fdeb47e6c25aa8604933bb8612d8710c61f619a2b56f89801bbb8643015f400f7d9808bdf52e61a5265600cfcc8e9d69e90921b936f05d4977cd93d817bbeddeb36e7c9ffcfda8a67ce0a433a5849fa37ea98bff6cb92bade10a70ced7a102e9991c2d25b898174c261a1a82297866108e502a8ac83bf2e19d7d0742486239c8e290f46b99cd365484feaf9b2582f435d0da6acdecbd91e7839173db4531b6781a4784fe20e59d3a92ddef1af172f7b2038c28e05d6328099f18fa62be4a3bfa3e202bfd84e346f48ce504635b399bfb61fb6bab00d9a768483f61188ad5e22569e9f4671bf23e224ebed362ffd0398199c1e2dae1914e1aff7f3cc9d5053abec5df76e2700c4784186640e1d98e1e1ef74488a9d6b5e82d48ac9576d8910ac7ee29aefc9869d4db53c71b9c25bccae488ba0d8cc26bec2211927baba4320fb54246ceabc773a5b007962df89cfb152380fbab966bdbd0604cc46dd4c927888093c2b21ab100c6f5b59a8d2e413733ccd4183d0d1c496dd7b05665a078329cbecb63f40d178e63ee4199353f91440806564d76ba18a8a14b24ee85b255685f4b59de604caf331db88793b1627c224b34b9cc0552b8acedf5da3b9b711258f025d85329ad4543666a71d1971ea4046be6ae7e3f195d2c984abb8999ffc6b12740d322c8ec1a88903512c20198a084186ab6a521b1ba7be1cdfd47f00527295929ac327fc3cb77b2d2f92ec11e12949cfafb2baa1ce75bc70dfa3749d28f6d01e941b539e0e854bc4a9c478c2654cd6ad96c7b0cd725a0c5bfaebd49982e00a98c5347d79b612284b62dc3e93a13a832fb1a9ffb1029da8595120a00ca3a6fce3426dd32cc48ec732e251959497d64accdceb9ccbbf579525a73c4480a42e121bae703de9e326adaf9dcc77b5f2f787f0646fe881d55e1901cdd484911f314da671d8be210ad82c40f7126518793637518d99d10b39a576ca33ddec48f19a9a41dded19d43afc47d3052bd1fd83e468629332568629777f71fa5b1483b214ee41f990da706ce8e1e41bb59dafcb7219fca74f822276660e2025856501f1155c51bfd92c46317dcd3237e99f6c2c260243201de7b0653ce1f322b251478d73b27402b29a9678238f62a5286afad76f3513eea82104027fd97ff88d1428111584cbe0d91aa8f4904f4706b4fda1572485842c9d80a8e1cf12a26c2455736de09f5cf7107167f75b1b8e63d142cae6f22a64fc236afcb194b94b240e57dc2f45e1c480d86820b5edea88d8c0ed7fb875161697ae8b36d7ba023d90f0d5eefac22b667a054d927cd24dbee95d3d7aa5c8876d6bafe9b59ac5237bc6b1990fc17cfd0c46803503ca36ed1a93743ffcf883b9cf2ab74a505cd6b77a4049febc603fdd5d97a80f322552339583dc5690289774df32bb419882032aebbe7f1cf80ea514f2a2dc154a1eeb56a712b611ccf005419dc972b1dc69f7c602df3e322ffd3c25a23fa55b1e35956d6432d61972559ff1ee6efeff5bf4ec70ffb1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Byte Camp 2022 Day2</title>
    <url>/2022/07/11/Byte-Camp-2022-Day2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b74cfcf92f0415f403bbb04bbca960c7ec586917a66e9a27859f8b5cf841f1fd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Byte Camp 2022 Day1</title>
    <url>/2022/07/11/Byte-Camp-2022-Day1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8bdfb3fab763dd99690fbf117fe104497349625eafd332f67cd90d5805c864bc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the password.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of NorthBeach</title>
    <url>/2022/07/07/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-NorthBeach/</url>
    <content><![CDATA[<p>最后1h过了两题。不过最后是双开，不然应该过不了这么多。</p>
<p>想得还是太慢了。代码实现能力也差了一点。</p>
<span id="more"></span>

<h2 id="A-Arrange-and-Count"><a href="#A-Arrange-and-Count" class="headerlink" title="A. Arrange and Count!"></a>A. Arrange and Count!</h2><p><strong>以后都给我写双哈希！！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line">ll Mod[<span class="number">2</span>]=&#123;<span class="number">998244853</span>,<span class="number">1004535809</span>&#125;;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line">ll base=<span class="number">1e5</span>+<span class="number">19</span>;</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,<span class="type">int</span>&gt; ma;</span><br><span class="line">ll pw[N],f[N],a[N],g[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Dec</span>(f[r],f[l<span class="number">-1</span>]*pw[r-l+<span class="number">1</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);)</span><br><span class="line">	&#123;</span><br><span class="line">		ma.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">		mod=Mod[<span class="number">0</span>];</span><br><span class="line">		pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">2</span>*n) pw[i]=pw[i<span class="number">-1</span>]*base%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i+n]=a[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) f[i]=(f[i<span class="number">-1</span>]*base+a[i])%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) g[i][<span class="number">0</span>]=<span class="built_in">get</span>(i,i+n<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) f[i]=(f[i<span class="number">-1</span>]*base+a[i])%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) g[i][<span class="number">1</span>]=<span class="built_in">get</span>(i,i+n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n+n+<span class="number">1</span>);</span><br><span class="line">		mod=Mod[<span class="number">1</span>];</span><br><span class="line">		pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">2</span>*n) pw[i]=pw[i<span class="number">-1</span>]*base%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) f[i]=(f[i<span class="number">-1</span>]*base+a[i])%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ma[&#123;<span class="built_in">get</span>(i,i+n<span class="number">-1</span>),g[i][<span class="number">0</span>]&#125;]++;</span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) f[i]=(f[i<span class="number">-1</span>]*base+a[i])%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ma[&#123;<span class="built_in">get</span>(i,i+n<span class="number">-1</span>),g[i][<span class="number">1</span>]&#125;]++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ma.<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Build-More-2020’s"><a href="#B-Build-More-2020’s" class="headerlink" title="B. Build More 2020’s!"></a>B. Build More 2020’s!</h2><p>不太会啊。。。</p>
<p>二分答案 $x$，维护 $x$ 个栈表示当前填的情况。</p>
<p>遇到 $0$ 优先填 $2$，遇到 $2$ 优先开一个。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h2 id="C-Choose-Two-Subsequences"><a href="#C-Choose-Two-Subsequences" class="headerlink" title="C. Choose Two Subsequences"></a>C. Choose Two Subsequences</h2><h2 id="D-Determinant-Strikes-Back"><a href="#D-Determinant-Strikes-Back" class="headerlink" title="D. Determinant Strikes Back"></a>D. Determinant Strikes Back</h2><p>线性代数基础题or找规律。</p>
<p>找规律/结论就不说了。</p>
<p>显然一个方阵 $A$ 的特征值为 $0$ 的数量为 $n-rank(A)$。因为特征值相当于沿着某个特征向量的放大倍数。</p>
<p>矩阵 $A_{ij}=a_ib_j$ 的秩显然为 $1$，因此原式一定为 $x^n+x^{n-1}\times K$ 的形式。然后就简单了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,x;</span><br><span class="line">	<span class="keyword">for</span>(;~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);)</span><br><span class="line">	&#123;</span><br><span class="line">		ll ans=x%mod;</span><br><span class="line">		<span class="function">VI <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">b</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(b[i]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans=<span class="built_in">Add</span>(ans,<span class="number">1ll</span>*a[i]*b[i]%mod);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Pow</span>(x,n<span class="number">-1</span>)*ans%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-Efficient-Data-Structure"><a href="#E-Efficient-Data-Structure" class="headerlink" title="E. Efficient Data Structure"></a>E. Efficient Data Structure</h2><p>$c_i=\max_j\{a_j+b_{j+1}+b_{j+2}+\cdots+b_i\}=s_i+\max_j\{a_j-s_j\}$，其中 $s_i=\sum_{j\le i} b_j$。</p>
<p>随便维护。</p>
<h2 id="H-Hamming-Distance"><a href="#H-Hamming-Distance" class="headerlink" title="H. Hamming Distance"></a>H. Hamming Distance</h2><p>性质：$i$ 这个数的所有出现位置为 $2^{i-1}+k\cdot 2^{i},k\geq 0$。</p>
<p>距离和比较简单，枚举一下每个 $a_i$，算出其一左一右的位置就好了。</p>
<p>对于最小值，我们找到最小的 $k$ 使得 $2^k-1\geq n$。</p>
<p>那么 $n$ 个数不会跨越两个以上的 $S_k$ （注意这里需要稍微特判一下 $m$ 比较小的情况），而整个串必然是 $S_k+x_1+S_k+x_2+S_k+\cdots$ 这样的形式。</p>
<p>那么直接将大于 $k$ 的都看成 $k+1$，整个 $S_m$ 看成 $S_{k+1}$ 即可。</p>
<p>剩下的利用等差数列的性质，从 $1$ 到 $k+1$ 枚举每个数字，类似统计距离和的方法，使用个前缀和即可 $O(n\log n)$ 完成。</p>
<p>有一点细节。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=(<span class="number">1</span>&lt;&lt;<span class="number">19</span>)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">ll pw[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">22</span>][N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">	<span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>&lt;=n;k++);</span><br><span class="line">	k++;</span><br><span class="line">	ll ans2=<span class="built_in">Dec</span>(pw[m],n)*n%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=a[i],k1=<span class="number">0</span>,k2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(x&lt;=<span class="number">20</span>)</span><br><span class="line">			k1=(i+(<span class="number">1</span>&lt;&lt;(x<span class="number">-1</span>))<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;x),</span><br><span class="line">			k2=((n-i+<span class="number">1</span>)+(<span class="number">1</span>&lt;&lt;(x<span class="number">-1</span>))<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;x);</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">20</span>||(x&lt;=<span class="number">20</span>&amp;&amp;pw[m-x]&gt;=k1+k2))</span><br><span class="line">			ans2=<span class="built_in">Dec</span>(ans2,<span class="built_in">Dec</span>(pw[m-x],k1+k2));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(n==pw[m]<span class="number">-1</span>&amp;&amp;m&lt;=<span class="number">20</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ans2,ans2);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i]&gt;=k) a[i]=k;</span><br><span class="line">	<span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> x,<span class="type">int</span> t)&#123;<span class="built_in">return</span> (x*<span class="number">2</span>+<span class="number">1</span>)*(<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>));&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=a[i],k1=<span class="number">0</span>,k2=<span class="number">0</span>;</span><br><span class="line">		k1=(i+(<span class="number">1</span>&lt;&lt;(x<span class="number">-1</span>))<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;x),</span><br><span class="line">		k2=((n-i+<span class="number">1</span>)+(<span class="number">1</span>&lt;&lt;(x<span class="number">-1</span>))<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;x);</span><br><span class="line">		<span class="keyword">if</span>(pw[m-x]&gt;=k1+k2)</span><br><span class="line">		&#123;</span><br><span class="line">			f[x][<span class="built_in">get</span>(k1,x)-i]++;</span><br><span class="line">			<span class="type">int</span> pos=<span class="built_in">get</span>(pw[k-x]-k2,x)-i;</span><br><span class="line">			<span class="keyword">if</span>(pos&lt;=pw[k]<span class="number">-1</span>) f[x][pos]--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(x,<span class="number">1</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(j,(<span class="number">1</span>&lt;&lt;x),(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>) f[x][j]+=f[x][j-(<span class="number">1</span>&lt;&lt;x)];</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>) g[j]+=f[x][j],f[x][j]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;<span class="built_in">min</span>(k,m))-n) ans=<span class="built_in">max</span>(ans,g[j]);</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>) g[j]=<span class="number">0</span>;</span><br><span class="line">	ans=n-ans;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>,ans,ans2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">200000</span>) pw[i]=pw[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> n,m;~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);) <span class="built_in">solve</span>(n,m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-Integers-and-Ranges"><a href="#I-Integers-and-Ranges" class="headerlink" title="I. Integers and Ranges"></a>I. Integers and Ranges</h2><p>根据套路，删掉重合的线段，然后区间具有单调性。</p>
<p>将 $0\sim 9$ 分为 $\{0,9\},\{3,6\},\{1,2,4,5,7,8\}$ 三类。</p>
<p>一个区间里面只要有 $2$ 个或以上 $3$ 的因子就可以满足条件了。</p>
<p>那么设 $f_{i,j}$ 表示考虑到 $i$ 且第 $1$ 个 $3$ 的因子在 $i$ 这，第 $2$ 个 $3$ 的因子在 $j$ 这，$l\le j$ 的区间全部满足条件的方案数。</p>
<p>转移分两类即可：</p>
<ul>
<li><p>放 $3$ 或 $6$：$f_{i,j}=\sum <em>{k} f</em>{j,k}\times 2\times 6^{j-i-1}\times [\forall r\in[j,i-1],l\le k]$ </p>
</li>
<li><p>放 $0$ 或 $9$：$f_{i,i}=\sum_{j,k} f_{j,k}\times 2\times 6^{j-i-1}\times [\forall r\in[j,i-1],l\le k]$</p>
</li>
</ul>
<p>后缀和优化一下即可。</p>
<p>时间复杂度 $O(n^2)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N][N],h[N][N],pw[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) a[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y; <span class="built_in">read</span>(x,y);</span><br><span class="line">		a[y]=<span class="built_in">max</span>(a[y],x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	<span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">	h[<span class="number">0</span>][<span class="number">0</span>]=f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fd</span>(j,i<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			k=<span class="built_in">max</span>(k,a[j]);</span><br><span class="line">			<span class="keyword">if</span>(k&gt;j) <span class="keyword">break</span>;</span><br><span class="line">			f[i][j]=h[j][k]*pw[i-j<span class="number">-1</span>]%mod*<span class="number">2</span>%mod;</span><br><span class="line">			f[i][i]=<span class="built_in">Add</span>(f[i][i],h[j][k]*pw[i-j<span class="number">-1</span>]%mod*<span class="number">2</span>%mod);</span><br><span class="line">		&#125;</span><br><span class="line">		h[i][i]=f[i][i];</span><br><span class="line">		<span class="built_in">fd</span>(j,i<span class="number">-1</span>,<span class="number">0</span>) h[i][j]=<span class="built_in">Add</span>(h[i][j+<span class="number">1</span>],f[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) k=<span class="built_in">max</span>(k,a[i]);</span><br><span class="line">	<span class="built_in">fo</span>(i,k,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,i,n)</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,f[j][i]*pw[n-j]%mod);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">1000</span>) pw[i]=pw[i<span class="number">-1</span>]*<span class="number">6</span>%mod;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> n,m;~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);) <span class="built_in">solve</span>(n,m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Samara</title>
    <url>/2022/07/05/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Samara/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/102916">CF</a></p>
<p>最后20min过了两题代码量超小的题。。。</p>
<span id="more"></span>

<h2 id="B-Fakes-and-Shidget"><a href="#B-Fakes-and-Shidget" class="headerlink" title="B. Fakes and Shidget"></a>B. Fakes and Shidget</h2><p>由题意，我们要求的是，在每一对 $(a,b),(c,d)$ 选择一个，求 $\max\{\frac{\sum_{i=1}^n b_i}{\sum_{i=1}^na_i}\}$。</p>
<p>直接01分数规划即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],c[N],d[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">read</span>(a[i],b[i],c[i],d[i]);</span><br><span class="line">	db l=<span class="number">0</span>,r=<span class="number">1e9</span>,mid;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2.</span>;</span><br><span class="line">		db ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			ans+=<span class="built_in">max</span>(b[i]-a[i]*mid,d[i]-c[i]*mid);</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;=<span class="number">0</span>) l=mid;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,mid);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Cyclically-Shifted-Maze"><a href="#C-Cyclically-Shifted-Maze" class="headerlink" title="C. Cyclically Shifted Maze"></a>C. Cyclically Shifted Maze</h2><p>meaningiess直接把这题秒了。。</p>
<h2 id="D-Two-Pirates-2"><a href="#D-Two-Pirates-2" class="headerlink" title="D. Two Pirates - 2"></a>D. Two Pirates - 2</h2><p>清醒的人一定先拿走最大的那个。然后就不知道怎么做了。</p>
<p>可以发现，排好序后，选到某一堆的概率与其本身无关，因此可以使用DP。</p>
<p>设 $f_{n,i}$ 表示 $n$ 堆的时候，从小到大排名第 $i$ 被选到的概率。</p>
<p>分两种情况讨论即可。时间复杂度 $O(n^2)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5005</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">db f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> opt=(n-i+<span class="number">1</span>)&amp;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(opt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,i)</span><br><span class="line">				f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">			f[i][i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,i)</span><br><span class="line">				f[i][j]=(f[i<span class="number">-1</span>][j<span class="number">-1</span>]*(j<span class="number">-1</span>)+f[i<span class="number">-1</span>][j]*(i-j))/i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	db sum=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=a[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans+=f[n][i]*a[i];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.12lf %.12lf\n&quot;</span>,ans,sum-ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-Powerless-Mage"><a href="#E-Powerless-Mage" class="headerlink" title="E. Powerless Mage"></a>E. Powerless Mage</h2><h2 id="F-Exactly-One-Point"><a href="#F-Exactly-One-Point" class="headerlink" title="F. Exactly One Point"></a>F. Exactly One Point</h2><p>假设我们从后往前选择点。</p>
<p>若选择了点 $i$，则该点必须覆盖至少一条线段。设 $mx_i$ 表示所有 $l\le i$ 的线段的 $r$ 的最大值；$mn_i$ 表示所有 $l\geq i$ 的线段的 $r$ 的最小值。那么后面点的合法范围是 $[mx_i+1,mn_{i+1}]$。那么在里面随便选一个就可以了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> mi[N],mx[N],l[N],r[N],n,is[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="type">int</span> m=n*<span class="number">4</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m) mi[i]=inf;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(l[i],r[i]);</span><br><span class="line">		l[i]++; r[i]++;</span><br><span class="line">		is[l[i]]++; is[r[i]+<span class="number">1</span>]--;</span><br><span class="line">		mx[l[i]]=<span class="built_in">max</span>(mx[l[i]],r[i]);</span><br><span class="line">		mi[l[i]]=<span class="built_in">min</span>(mi[l[i]],r[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) mx[i]=<span class="built_in">max</span>(mx[i],mx[i<span class="number">-1</span>]),is[i]+=is[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fd</span>(i,m<span class="number">-1</span>,<span class="number">1</span>) mi[i]=<span class="built_in">min</span>(mi[i],mi[i+<span class="number">1</span>]);</span><br><span class="line">	VI ans;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	s.<span class="built_in">insert</span>(m);</span><br><span class="line">	<span class="built_in">fd</span>(i,m<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">if</span>(mx[i]+<span class="number">1</span>&lt;=mi[i+<span class="number">1</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> it=s.<span class="built_in">upper_bound</span>(mx[i]);</span><br><span class="line">		<span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()&amp;&amp;(*it)&lt;=mi[i+<span class="number">1</span>])</span><br><span class="line">			fa[i]=*it,s.<span class="built_in">insert</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(*s.<span class="built_in">begin</span>()&gt;mi[<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> u=*s.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span>(;u;u=fa[u])	<span class="keyword">if</span>(is[u]) ans.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x:ans) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="G-Lexicographically-Minimal-Subsequence"><a href="#G-Lexicographically-Minimal-Subsequence" class="headerlink" title="G. Lexicographically Minimal Subsequence"></a>G. Lexicographically Minimal Subsequence</h2><p>贪心一个一个往后看是否能选。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> now[<span class="number">26</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s\n%d&quot;</span>,s+<span class="number">1</span>,&amp;k);</span><br><span class="line">	n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) vec[s[i]-<span class="string">&#x27;a&#x27;</span>].<span class="built_in">pb</span>(i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> pos;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">25</span>)</span><br><span class="line">			<span class="keyword">if</span>(now[j]&lt;vec[j].<span class="built_in">size</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(n-vec[j][now[j]]&gt;=k-i)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">putchar</span>(j+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">					pos=vec[j][now[j]];</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">25</span>)</span><br><span class="line">			<span class="keyword">for</span>(;now[j]&lt;vec[j].<span class="built_in">size</span>()&amp;&amp;vec[j][now[j]]&lt;=pos;now[j]++);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="H-Video-Reviews-2"><a href="#H-Video-Reviews-2" class="headerlink" title="H. Video Reviews - 2"></a>H. Video Reviews - 2</h2><p>考虑最后一个人 $a_n$，如果 $a_n&lt;m$，那么一定不选。转换为 $(n-1,m-1)$ 的子问题。</p>
<p>如果 $a_n\geq m$，且 $n=m$，则这个一定会被选；如果 $n&gt;m$，则这个可能被选，但实际上选前面的一定不会更差，因此这个一定不会选。<br>那么就可以直接从 $a_n$ 开始倒退至 $a_1$ 即可。</p>
<p>由于 $z_j$ 有逆元，同一段内可以由 $a_{i+1}$ 直接推出 $a_i$，不同段的边界处需要预处理顺推一遍进行计算。</p>
<p>时间复杂度 $O(n)$，空间复杂度 $O(m)$。</p>
<h2 id="J-Lost-Island"><a href="#J-Lost-Island" class="headerlink" title="J. Lost Island"></a>J. Lost Island</h2><p>第三次见到这种题了。</p>
<p>我们记一个颜色的状态为 $(a_i,b_i)$。设某个人的颜色为 $i$。</p>
<p>若 $a_i=b_i&gt;0$，则这人看到外面只有 $b_{i}-1$ 个，不合理。因此这个知道自己就是 $i$，将在第 $1$ 天自杀。</p>
<p>若 $a_i=b_i+1$，则这人假设自己不是 $i$，那么外面这些颜色 $i$ 的人看到的状态应为 $(a_i-1,b_i)$，将在第 $1$ 天自杀，但他们并没有，于是这人在第 $2$ 天知道自己是颜色 $i$。</p>
<p>以此类推，在 $x+1$ 天，某人假设自己不是 $i$，那么外面的人将在第 $x$ 天自杀，但是并没有，于是这人在 $x+1$ 这天自杀。</p>
<p>因此，对于 $b_i&gt;0$，颜色为 $i$ 的人将在 $a_i-b_i+1$ 天自杀。</p>
<ul>
<li>若不存在 $b_i=0$，则 $a_i-b_i+1$ 最大的那些人将在次大的 $a_j-b_j+1$ 之后一天自杀，因为其他人都死光了。</li>
<li>若只存在一个 $b_i=0$，则 $i$ 颜色的人在 $a_i-b_i+1$ 最大的下一天自杀。</li>
<li>若存在两个或以上 $b_i=0$，则所有 $b_i=0$ 的人将活下来。</li>
</ul>
<p>时间复杂度 $O(n)$。</p>
<h2 id="K-Bloodseeker"><a href="#K-Bloodseeker" class="headerlink" title="K. Bloodseeker"></a>K. Bloodseeker</h2><p>首先我们把这些怪分为两类：$h_i\geq t_i$ 和 $h_i&lt;t_i$。</p>
<p>第一类是可以帮助我们回血的，第二类是要我们掉血的。</p>
<p>显然可以在恰当时间去打第一类从而充分运用其回血，一共能回 $\sum h_i-t_i$ 滴血。</p>
<p>对于第二类，假设有两个怪 $(h_i,t_i),(h_j,t_j)$，当且有 $k$ 滴血量。</p>
<p>先打 $i$ 需要满足： $m+h_i-t_i\geq t_j$。</p>
<p>先打 $j$ 需要满足：$m+h_j-t_j\geq t_i$。</p>
<p>其他不等式一样。因此我们直接按照 $h$ 从打到小依次消掉即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll x,y;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n,m,x,y;</span><br><span class="line">	ll now=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">read</span>(n,m);</span><br><span class="line">	vector&lt;node&gt; a;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(x,y);</span><br><span class="line">		y=<span class="built_in">min</span>(y,m);</span><br><span class="line">		<span class="keyword">if</span>(x&lt;=y) now+=y-x;</span><br><span class="line">		<span class="keyword">else</span> a.<span class="built_in">pb</span>(&#123;y,x-y&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	now+=m;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(a),[&amp;](<span class="keyword">auto</span> x,<span class="keyword">auto</span> y)&#123;<span class="keyword">return</span> x.x&gt;y.x;&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x+y&gt;now) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> now-=y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">CASET <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L-Not-the-Longest-Increasing-Subsequence"><a href="#L-Not-the-Longest-Increasing-Subsequence" class="headerlink" title="L. Not the Longest Increasing Subsequence"></a>L. Not the Longest Increasing Subsequence</h2><p>值域也为 $k$，那么直接DP一下就好了。输出方案可以倒着推一遍。</p>
<h2 id="M-Binary-Search-Tree"><a href="#M-Binary-Search-Tree" class="headerlink" title="M. Binary Search Tree"></a>M. Binary Search Tree</h2><p>树形DP一波即可。opentrains卡我常数，使用 $O(n)$ 的方法才过了。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>2022 Hubei Provincial Collegiate Programming Contest</title>
    <url>/2022/05/26/2022-Hubei-Provincial-Collegiate-Programming-Contest/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/103729">link</a></p>
<span id="more"></span>

<h2 id="A-Nucleic-Acid-Test"><a href="#A-Nucleic-Acid-Test" class="headerlink" title="A. Nucleic Acid Test"></a>A. Nucleic Acid Test</h2><p>Floyd，非核酸点贡献为到最近核酸点的两倍，核酸点间的贡献为所有核酸点用最短路径做边权的完全图的最小生成树的边权最大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">305</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m,k,t;</span><br><span class="line">	<span class="built_in">read</span>(n,m,k,t);</span><br><span class="line">	<span class="keyword">if</span>(!t) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y,z; <span class="built_in">read</span>(x,y,z);</span><br><span class="line">		f[x][y]=f[y][x]=z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">1</span>,n) <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(f[i][j]&gt;f[i][k]+f[k][j]) f[i][j]=f[i][k]+f[k][j];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(f[i][j]==inf) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	VI p;</span><br><span class="line">	<span class="keyword">for</span>(;k--;) &#123;<span class="type">int</span> x; <span class="built_in">read</span>(x); p.<span class="built_in">pb</span>(x);&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		ll sum=inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> x:p) sum=<span class="built_in">min</span>(sum,f[x][i]);</span><br><span class="line">		<span class="keyword">if</span>(sum==inf) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,sum*<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">DEBUG</span>(ans);</span><br><span class="line">	vector&lt;array&lt;ll,3&gt;&gt; edges;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x:p)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> y:p)</span><br><span class="line">			<span class="keyword">if</span>(x&lt;y&amp;&amp;f[x][y]!=inf)</span><br><span class="line">				edges.<span class="built_in">pb</span>(&#123;f[x][y],x,y&#125;);</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(edges));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fa[i]=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> [z,x,y]:edges)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(x!=y) fa[x]=y,ans=<span class="built_in">max</span>(ans,z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x:p) <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(p[<span class="number">0</span>])) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans+t<span class="number">-1</span>)/t);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Transition"><a href="#D-Transition" class="headerlink" title="D. Transition"></a>D. Transition</h2><p>性质：</p>
<ul>
<li>不会有 $j-i\geq 3$ 的点。</li>
<li>一个 $j-i=2$ 的点可以被两个翻转代替。</li>
<li>两个交换操作不会重叠。</li>
</ul>
<p>DP，设 $f_i$ 表示考虑前 $i$ 个时的（最小操作数，方案数）。从 $f_{i-1,i-2,i-3}$ 转移过来即可。</p>
<p>时间复杂度 $O(n)$，常数巨大。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> cnt;</span><br><span class="line">	ll sum;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.cnt==B.cnt)</span><br><span class="line">			<span class="keyword">return</span> &#123;A.cnt,<span class="built_in">Add</span>(A.sum,B.sum)&#125;;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(A.cnt&lt;B.cnt)</span><br><span class="line">			<span class="keyword">return</span> A;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(node A,<span class="type">int</span> k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;A.cnt+k,A.sum&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">char</span> s[N],t[N];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d\n%s\n%s&quot;</span>,&amp;n,s+<span class="number">1</span>,t+<span class="number">1</span>);</span><br><span class="line">	<span class="function">VI <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">b</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="function">vector&lt;node&gt; <span class="title">f</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=s[i]-<span class="string">&#x27;0&#x27;</span>,b[i]=t[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	f[<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">	f[<span class="number">1</span>]=&#123;a[<span class="number">1</span>]^b[<span class="number">1</span>],<span class="number">1</span>&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=&#123;n+n,<span class="number">0</span>&#125;;</span><br><span class="line">		f[i]=f[i]+(f[i<span class="number">-1</span>]+(a[i]^b[i]));</span><br><span class="line">		f[i]=f[i]+(f[i<span class="number">-2</span>]+<span class="number">1</span>+(a[i]^b[i<span class="number">-1</span>])+(a[i<span class="number">-1</span>]^b[i]));</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=<span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i]=f[i]+(f[i<span class="number">-3</span>]+<span class="number">2</span>+(a[i]^b[i<span class="number">-2</span>])+(a[i<span class="number">-1</span>]^b[i<span class="number">-1</span>])+(a[i<span class="number">-2</span>]^b[i]));</span><br><span class="line">			f[i]=f[i]+(f[i<span class="number">-3</span>]+<span class="number">2</span>+(a[i<span class="number">-1</span>]^b[i<span class="number">-2</span>])+(a[i]^b[i<span class="number">-1</span>])+(a[i<span class="number">-2</span>]^b[i]));</span><br><span class="line">			f[i]=f[i]+(f[i<span class="number">-3</span>]+<span class="number">2</span>+(a[i]^b[i<span class="number">-2</span>])+(a[i<span class="number">-2</span>]^b[i<span class="number">-1</span>])+(a[i<span class="number">-1</span>]^b[i]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">DEBUG</span>(f[n].cnt);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[n].sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-Multigate"><a href="#E-Multigate" class="headerlink" title="E. Multigate"></a>E. Multigate</h2><p>对于某一位，要想最后有 $1$，那么就要让后面不出现 $\text{and  0}$ 的情况，于是修改操作都要尽量往后靠，也就是修改最后面 $k$ 个 $\text{and}$ 。</p>
<p>时间复杂度 $O((q+n)\log a)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> s[<span class="number">30</span>][N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">29</span>)</span><br><span class="line">		ans|=s[i][p][(x&gt;&gt;i)&amp;<span class="number">1</span>]&lt;&lt;i;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	<span class="built_in">read</span>(n,m);</span><br><span class="line">	<span class="function">VI <span class="title">a</span><span class="params">(n+<span class="number">2</span>)</span>,<span class="title">t</span><span class="params">(n+<span class="number">2</span>)</span>,vec,<span class="title">b</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(b[i]);</span><br><span class="line">		<span class="keyword">if</span>(!b[i]) vec.<span class="built_in">pb</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">29</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s[j][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		s[j][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			<span class="keyword">if</span>(b[i])</span><br><span class="line">			&#123;</span><br><span class="line">				s[j][i][<span class="number">0</span>]=s[j][i<span class="number">-1</span>][<span class="number">0</span>]|((a[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">				s[j][i][<span class="number">1</span>]=s[j][i<span class="number">-1</span>][<span class="number">1</span>]|((a[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				s[j][i][<span class="number">0</span>]=s[j][i<span class="number">-1</span>][<span class="number">0</span>]&amp;((a[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">				s[j][i][<span class="number">1</span>]=s[j][i<span class="number">-1</span>][<span class="number">1</span>]&amp;((a[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) t[i]=t[i+<span class="number">1</span>]|a[i];</span><br><span class="line">	<span class="type">int</span> k=vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x,y;m--;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(y,x);</span><br><span class="line">		<span class="keyword">if</span>(x&gt;=k) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,y|t[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get</span>(y,vec[k-x<span class="number">-1</span>])|t[vec[k-x<span class="number">-1</span>]+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-Angel"><a href="#F-Angel" class="headerlink" title="F. Angel"></a>F. Angel</h2><p>签到，答案为 $2,3,\cdots,n-1,n-1,n-2\cdots,3,2$。</p>
<h2 id="H-Hamster-and-Multiplication"><a href="#H-Hamster-and-Multiplication" class="headerlink" title="H. Hamster and Multiplication"></a>H. Hamster and Multiplication</h2><p>显然 $2^a3^b5^c7^d\le 10^{18}$ 不会很多，大概在几万的水平。</p>
<p>于是用个map记录一下，然后数位DP就好了。</p>
<h2 id="J-Palindrome-Reversion"><a href="#J-Palindrome-Reversion" class="headerlink" title="J. Palindrome Reversion"></a>J. Palindrome Reversion</h2><p>显然，我们先找到第一个 $s_i\neq s_{n-i+1}$ 的点。</p>
<p>那么只会翻转这里面的区间。要使得翻转以后是一个回文串，当且仅当这个串是 $AAB,ABA,BAA$ 类型，其中 $A$ 为任意串，$B$ 为回文串。</p>
<p>哈希判断一下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1004535809</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll base=<span class="number">31</span>;</span><br><span class="line">ll sf[N],sg[N],pw[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_f</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Dec</span>(sf[r],sf[l<span class="number">-1</span>]*pw[r-l+<span class="number">1</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_g</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Dec</span>(sg[l],sg[r+<span class="number">1</span>]*pw[r-l+<span class="number">1</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check_palindrome</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">assert</span>(l&lt;=r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">get_f</span>(l,r)==<span class="built_in">get_g</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">solve</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pw[i]=pw[i<span class="number">-1</span>]*base%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sf[i]=<span class="built_in">Add</span>(sf[i<span class="number">-1</span>]*base%mod,s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	sg[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) sg[i]=<span class="built_in">Add</span>(sg[i+<span class="number">1</span>]*base%mod,s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">2</span>) <span class="keyword">if</span>(<span class="built_in">get_f</span>(<span class="number">1</span>,i)==<span class="built_in">get_f</span>(i+<span class="number">1</span>,i+i)&amp;&amp;<span class="built_in">check_palindrome</span>(i+i+<span class="number">1</span>,n)) <span class="keyword">return</span> &#123;i+<span class="number">1</span>,n&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">2</span>) <span class="keyword">if</span>(<span class="built_in">get_f</span>(<span class="number">1</span>,i)==<span class="built_in">get_f</span>(n-i+<span class="number">1</span>,n)&amp;&amp;<span class="built_in">check_palindrome</span>(i+<span class="number">1</span>,n-i)) <span class="keyword">return</span> &#123;<span class="number">1</span>,i&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">2</span>) <span class="keyword">if</span>(<span class="built_in">get_f</span>(n-i-i+<span class="number">1</span>,n-i)==<span class="built_in">get_f</span>(n-i+<span class="number">1</span>,n)&amp;&amp;<span class="built_in">check_palindrome</span>(<span class="number">1</span>,n-i-i)) <span class="keyword">return</span> &#123;<span class="number">1</span>,n-i&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> s[N];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">if</span>(s[i]!=s[n-i+<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span> ans=<span class="built_in">solve</span>(s+i<span class="number">-1</span>,n-(i<span class="number">-1</span>)*<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span>(ans.fi!=<span class="number">-1</span>) ans.fi+=(i<span class="number">-1</span>),ans.se+=(i<span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans.fi,ans.se);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1 1\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="K-PTT"><a href="#K-PTT" class="headerlink" title="K. PTT"></a>K. PTT</h2><p>按题意照做即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calc</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;=<span class="number">10000000</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(n&lt;=<span class="number">9800000</span>) <span class="built_in">return</span> (<span class="number">0.0</span>+n<span class="number">-9500000</span>)/<span class="number">300000</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1.0</span>+(<span class="number">0.0</span>+n<span class="number">-9800000</span>)/<span class="number">200000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>,&amp;n,&amp;c);</span><br><span class="line">		c+=<span class="built_in">calc</span>(n);</span><br><span class="line">		<span class="keyword">if</span>(c&lt;<span class="number">0</span>) c=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.8lf\n&quot;</span>,c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L-Chtholly-and-the-Broken-Chronograph"><a href="#L-Chtholly-and-the-Broken-Chronograph" class="headerlink" title="L. Chtholly and the Broken Chronograph"></a>L. Chtholly and the Broken Chronograph</h2><p>无聊写了个分块。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b[N],s[N],L[N],R[N];</span><br><span class="line">ll su[N],a[N],tag[N];</span><br><span class="line"><span class="type">int</span> siz[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	su[i]+=x*siz[i];</span><br><span class="line">	tag[i]+=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	su[x]=<span class="number">0</span>; siz[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,L[x],R[x])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]) a[i]+=tag[x];</span><br><span class="line">		<span class="keyword">if</span>(s[i]) siz[x]++;</span><br><span class="line">		su[x]+=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	tag[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,q;</span><br><span class="line">	<span class="built_in">read</span>(n,q);</span><br><span class="line">	<span class="type">int</span> blo_siz=<span class="number">314</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(a[i]);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=i/blo_siz+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">read</span>(s[i]);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!L[b[i]]) L[b[i]]=i;</span><br><span class="line">		R[b[i]]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,b[n]) <span class="built_in">update</span>(i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt,l,r,x;q--;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">read</span>(opt);</span><br><span class="line">		<span class="keyword">if</span>(opt&lt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(x);</span><br><span class="line">			<span class="built_in">update</span>(b[x]);</span><br><span class="line">			s[x]^=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">update</span>(b[x]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(l,r,x);</span><br><span class="line">			<span class="keyword">if</span>(b[l]==b[r])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(i,l,r) <span class="keyword">if</span>(s[i]) a[i]+=x;</span><br><span class="line">				<span class="built_in">update</span>(b[l]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(i,b[l]+<span class="number">1</span>,b[r]<span class="number">-1</span>) <span class="built_in">add</span>(i,x);</span><br><span class="line">				<span class="built_in">fo</span>(i,l,R[b[l]]) <span class="keyword">if</span>(s[i]) a[i]+=x;</span><br><span class="line">				<span class="built_in">fo</span>(i,L[b[r]],r) <span class="keyword">if</span>(s[i]) a[i]+=x;</span><br><span class="line">				<span class="built_in">update</span>(b[l]); <span class="built_in">update</span>(b[r]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(l,r);</span><br><span class="line">			ll sum=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(b[l]==b[r])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(i,l,r) sum+=a[i]+(s[i]?tag[b[i]]:<span class="number">0ll</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(i,b[l]+<span class="number">1</span>,b[r]<span class="number">-1</span>) sum+=su[i];</span><br><span class="line">				<span class="built_in">fo</span>(i,l,R[b[l]]) sum+=a[i]+(s[i]?tag[b[i]]:<span class="number">0ll</span>);</span><br><span class="line">				<span class="built_in">fo</span>(i,L[b[r]],r) sum+=a[i]+(s[i]?tag[b[i]]:<span class="number">0ll</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="M-Super-Star-Spectacle"><a href="#M-Super-Star-Spectacle" class="headerlink" title="M. Super Star Spectacle"></a>M. Super Star Spectacle</h2><p>这题假了。是个论文题，不太会。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="type">int</span> mx[N],mx2[N],cnt[N],f[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mx[u]=<span class="number">0</span>,mx2[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(v!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			<span class="keyword">if</span>(f[v]&gt;=mx[u])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(mx2[u]==mx[u]) cnt[u]++;</span><br><span class="line">				<span class="keyword">else</span> cnt[u]=<span class="number">1</span>;</span><br><span class="line">				mx2[u]=mx[u],mx[u]=f[v];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(f[v]&gt;mx2[u]) mx2[u]=f[v],cnt[u]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(f[v]==mx2[u]) cnt[u]++;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(mx[u]==<span class="number">0</span>) f[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> f[u]=mx[u]+(mx[u]==mx2[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(v!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=mx[u]==f[v]?mx2[u]:mx[u];</span><br><span class="line">			<span class="keyword">if</span>(mx[u]==f[v])</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=<span class="built_in">max</span>(g,mx2[u]);</span><br><span class="line">				<span class="built_in">dfs2</span>(v,u,tmp+(g==mx2[u]||(cnt[u]&gt;<span class="number">1</span>&amp;&amp;g&lt;mx2[u])));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(g&gt;mx[u]) <span class="built_in">dfs2</span>(v,u,g);</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(g==mx[u]) <span class="built_in">dfs2</span>(v,u,g+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(mx2[u]==f[v]) <span class="built_in">dfs2</span>(v,u,mx[u]+(mx[u]==mx2[u]&amp;&amp;cnt[u]&gt;<span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(g&gt;=mx[u]) mx2[u]=mx[u],mx[u]=g;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(g&gt;mx2[u]) mx2[u]=g;</span><br><span class="line">	ans=<span class="built_in">min</span>(ans,mx[u]+(mx[u]==mx2[u]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y; <span class="built_in">read</span>(x,y);</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	ans=<span class="number">1e9</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>$w=p_u^{a_u\times b_{x_1}\times b_{x_2}\times \cdots \times b_{x_k}}$</p>
<p>如果 $w\bmod p_{x_k}^{a_{x_k}}=0$，那么 $p_u=p_{x_k}$ 且 $a_u\times b_{x_1}\times b_{x_2}\times \cdots \times b_{x_k}\geq a_{x_k}$。</p>
<p>dfs，对于第 $i$ 个点，在 </p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round #783 (Div. 1)</title>
    <url>/2022/04/20/Codeforces-Round-783-Div-1/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1667/problems">problems</a></p>
<span id="more"></span>

<h2 id="A-Make-it-Increasing"><a href="#A-Make-it-Increasing" class="headerlink" title="A. Make it Increasing"></a>A. Make it Increasing</h2><p>暴力枚举 $0$ 所在位置，然后贪心。时间复杂度 $O(n^2)$。</p>
<h2 id="B-Optimal-Partition"><a href="#B-Optimal-Partition" class="headerlink" title="B. Optimal Partition"></a>B. Optimal Partition</h2><p>设 $f_i$ 表示前 $i$ 个的最大值。则有 $f_i=\min\{f_j+g(j,i)\}$，其中 $g(j,i)$ 为区间 $[j,i]$ 的价值。</p>
<p>分三种情况，大力线段树即可。时间复杂度 $O(n\log n)$。</p>
<h2 id="C-Half-Queen-Cover"><a href="#C-Half-Queen-Cover" class="headerlink" title="C. Half Queen Cover"></a>C. Half Queen Cover</h2><p><del>永远几乎不会构造题。</del></p>
<p>首先对于一个 $k\times k$ 的矩阵，可以用一条斜线去构造它。如图所示：</p>
<p><img src="Codeforces-Round-783-Div-1%5CC1.png" alt="C1"></p>
<p>之后剩下的没被覆盖的点，再用一条斜线即可覆盖。如图：</p>
<p><img src="Codeforces-Round-783-Div-1%5CC2.png" alt="C2"></p>
<p>于是大概需要 $\frac{2n+1}{3}$ 个就可以了。</p>
<h2 id="D-Edge-Elimination"><a href="#D-Edge-Elimination" class="headerlink" title="D. Edge Elimination"></a>D. Edge Elimination</h2><p>树形DP，设 $f_u$ 表示节点 $u$ 与其父亲的边，需要在父亲节点的度数模 $2$ 的结果为 $f_u$ 时才可以消去。</p>
<p>那么一个节点的所有儿子的 $f_v$ 值的 $0,1$ 个数不能超过一个很小的数。</p>
<p>那么就有对于所有的叶子 $v$，$f_v=1$ （需要父亲的度数为奇数，这样这条边相邻的边就是父亲度数减一了。</p>
<p>根节点特殊，讨论一下即可。其他的点，根据度数奇偶性以及 $f_v$ 的 $0,1$ 个数共四种情况讨论，其他情况则无解。</p>
<p>判断完无解后，构造方案就很容易了，相当于 $0,1,0,1\cdots$ 或 $1,0,1,0\cdots$ 依次弄。</p>
<p>时间复杂度 $O(n)$。</p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Tokyo</title>
    <url>/2022/04/07/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Tokyo/</url>
    <content><![CDATA[<p><del>Grand Prix of 998244353</del></p>
<p><a href="https://codeforces.com/gym/102978/problems">cf</a></p>
<span id="more"></span>

<h2 id="A-Ascending-Matrix"><a href="#A-Ascending-Matrix" class="headerlink" title="A. Ascending Matrix"></a>A. Ascending Matrix</h2><p>先不考虑 $a_{r,c}=v$ 的限制。</p>
<p>我们将 $\le i$ 和 $&gt;i$ 的数用一个折线分开，那么这条折线就是一个从 $(m,0)$ 到 $(0,n)$ 的折线，需要使得这 $k-1$ 条折线不互相穿过。</p>
<p>将第 $i$ 条折线向右上平移 $i-1$ 格后，使用LGV引理解决。</p>
<p>考虑原来的问题， $a_{r,c}=v$ 相当于有 $v-1$ 条折线恰好从 $p$ 的左下方（不包含p）经过。</p>
<p>对于第 $v$ 条折线，他最多只能恰好经过 $p$，而在平移后，就是不经过 $p$ 点。</p>
<p>那么新开一个 $x$，表示经过的是下方，而常数表示从 $p$ 的上方经过。</p>
<p>那么LGV引理中的每一项就是一个多项式。答案为这个多项式的 $x^{v-1}$ 的系数。</p>
<p>由于这个矩阵大小为 $k-1$ ，因此行列式最多为 $k-1$ 次的多项式。</p>
<p>拉格朗日插值，插 $k$ 次即可。</p>
<p>时间复杂度 $O(k^4+k^2(n+m))$。</p>
<h2 id="B-Bit-Operation"><a href="#B-Bit-Operation" class="headerlink" title="B. Bit Operation"></a>B. Bit Operation</h2><p>可以将操作变为：每次选择一个数，然后删掉左/右其中一个。</p>
<p>剩下的就很好统计了，时间复杂度 $O(n)$。</p>
<h2 id="D-Do-Use-FFT"><a href="#D-Do-Use-FFT" class="headerlink" title="D. Do Use FFT"></a>D. Do Use FFT</h2><p>设 $F_k(x)=\prod_{i=1}^k(x+B_i)$。</p>
<p>$\forall k\in[1,n]$，需要求 $\sum_{i=1}^nC_iF_k(A_i)$。</p>
<p>我们设 $F_k(x)=f_0+f_1x^1+\cdots+f_kx^k$。</p>
<p>那么答案就是 $\sum_{j=0}^kf_j\sum_{i=1}^nC_iA_i^j$</p>
<p>设 $G(x)=\sum_{i=1}^nC_iA_i^jx^j=\sum_{i=1}^n\frac{C_i}{1-A_ix}$，答案就是 $[x^0]G(x)F_k(\frac{1}{x})$。</p>
<p>$G(x)$ 可通过简单的分治FFT，暴力通分后求出分母和分子，然后对分母求逆即可。</p>
<p>对于 $F_{l,r}(\frac{1}{x})=\prod_{i=l}^r\frac{1+B_ix}{x}$，我们仅需要求出 $[x^{r-l}]G(x)\prod_{i=l}^r(1+B_ix)$。</p>
<p>分治，先求 $[l,mid]$，对于 $[mid+1,r]$ 的答案，可以先求出 $G(x)\prod_{i=l}^{mid}(1+B_ix)$，然后去掉前面 $mid-l+1$ 位，当做除了一个 $x^{mid-l+1}$，然后传参递归处理右边即可。</p>
<p>时间复杂度 $T(n)=2T(\frac{n}{2})+O(n\log n)=O(n\log ^2n)$。</p>
<h2 id="E-Edge-Subsets"><a href="#E-Edge-Subsets" class="headerlink" title="E. Edge Subsets"></a>E. Edge Subsets</h2><p>神仙题。</p>
<p>首先，显然有一个 $n\times 2^B$ 的状压DP做法。</p>
<p>考虑将 $V_i-U_i=A$ 或 $V_i-U_i=B$ 简化。</p>
<p>不妨设 $(A,B)=1$ 且 $A&lt;B$（否则分成 $\gcd(A,B)$ 个图进行处理，然后乘法原理乘起来）。</p>
<p>那么将 $V_i-U_i=B$ 的排成一行。严格地说，将点 $v$ 排在一个网格内，其坐标 $(x,y)$ 满足 $x=\lfloor \frac{v}{B} \rfloor,yA\equiv v\pmod B$。</p>
<p>那么每一行的点都会互相连。$(x,i)$ 连向 $(x,i+1)$ 或 $(x+1,i+1)$，特别地，$(x,B-1)$ 会连向 $(x+1,0)$。</p>
<p>考虑从下往上进行状压DP。与 $O(n\times 2^B)$ 普通状压不同的是，我们需要记录最下面一层的情况。DP的时候看起来需要枚举两层的节点。但实际上可以做一个高维前缀和后就不需要了。时间复杂度是 $O(n\times 4^{\frac{n}{B}})$。</p>
<p>当 $B\le 20$ 时，选择第一种，否则选择第二种，即可得到 $O(n2^{\sqrt{2n}})$ 复杂度的算法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,k) (((x)&gt;&gt;(k))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(f) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span>... V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a,V&amp;... b)</span></span>&#123;<span class="built_in">read</span>(a); <span class="built_in">read</span>(b...);&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET int ___;for(read(___);___--;)</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x+=y; (x&lt;mod)?<span class="number">0</span>:x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1030</span>;</span><br><span class="line"><span class="type">int</span> n,m,A,B;</span><br><span class="line">ll f[M*M],g[M*M];</span><br><span class="line">ll h[M*M];</span><br><span class="line"><span class="type">int</span> up[N][N],ri[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span>&#123;</span><br><span class="line">	<span class="type">bool</span> a[N],b[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(y-x==A) a[y]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> b[y]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve1</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> S=<span class="number">1</span>&lt;&lt;B;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,S) f[i]=g[i]=<span class="number">0</span>;</span><br><span class="line">		f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,S)</span><br><span class="line">				<span class="keyword">if</span>(f[s])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">Add</span>(g[(s&lt;&lt;<span class="number">1</span>)&amp;(S<span class="number">-1</span>)],f[s]);</span><br><span class="line">					<span class="keyword">if</span>(a[i]&amp;&amp;!<span class="built_in">bit</span>(s,A<span class="number">-1</span>)) <span class="built_in">Add</span>(g[((s&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;A)|<span class="number">1</span>)&amp;(S<span class="number">-1</span>)],f[s]);</span><br><span class="line">					<span class="keyword">if</span>(b[i]&amp;&amp;!<span class="built_in">bit</span>(s,B<span class="number">-1</span>)) <span class="built_in">Add</span>(g[(s&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&amp;(S<span class="number">-1</span>)],f[s]);</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,S) f[s]=g[s],g[s]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">ff</span>(s,<span class="number">0</span>,S) <span class="built_in">Add</span>(ans,f[s]);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve2</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> C=(n+B<span class="number">-1</span>)/B;</span><br><span class="line">		<span class="built_in">memset</span>(up,<span class="number">-1</span>,<span class="built_in">sizeof</span>(up));</span><br><span class="line">		<span class="built_in">memset</span>(ri,<span class="number">-1</span>,<span class="built_in">sizeof</span>(ri));</span><br><span class="line">		<span class="built_in">ff</span>(y,<span class="number">0</span>,B)</span><br><span class="line">			<span class="built_in">ff</span>(x,<span class="number">0</span>,C)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> xx=y*A%B,z=x*B+xx;</span><br><span class="line">				up[y][x]=ri[y][x]=<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">if</span>(z+A&lt;n&amp;&amp;a[z+A]) up[y][x]=x+(xx+A&gt;=B);</span><br><span class="line">				<span class="keyword">if</span>(z+B&lt;n&amp;&amp;b[z+B]) ri[y][x]=x+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">auto</span> work = [&amp;](ll *a,<span class="type">int</span> *r) &#123;</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,C<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">if</span>(r[i]!=<span class="number">-1</span>)</span><br><span class="line">					<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">						<span class="keyword">if</span>(!<span class="built_in">bit</span>(s,i)&amp;&amp;!<span class="built_in">bit</span>(s,i+<span class="number">1</span>))</span><br><span class="line">							<span class="built_in">Add</span>(a[s|(<span class="number">3</span>&lt;&lt;i)],a[s]);</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C) h[s]=<span class="number">0</span>;</span><br><span class="line">		h[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">work</span>(h,ri[<span class="number">0</span>]);</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">ff</span>(tt,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C) f[s]=g[s]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">				<span class="keyword">if</span>(h[s]&amp;&amp;((s&amp;tt)==s))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> tmp=tt^s;</span><br><span class="line">					<span class="built_in">ff</span>(i,<span class="number">0</span>,C)</span><br><span class="line">						<span class="keyword">if</span>(<span class="built_in">bit</span>(tmp,i))</span><br><span class="line">							<span class="keyword">if</span>(up[<span class="number">0</span>][i]==<span class="number">-1</span>) &#123;tmp=<span class="number">-1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">					<span class="keyword">if</span>(tmp!=<span class="number">-1</span>) <span class="built_in">Add</span>(f[tmp],h[s]);</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">work</span>(f,ri[<span class="number">1</span>]);</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">1</span>,B<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C) g[s]=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">ff</span>(j,<span class="number">0</span>,C)</span><br><span class="line">					<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">						<span class="keyword">if</span>(!<span class="built_in">bit</span>(s,j))</span><br><span class="line">							<span class="built_in">Add</span>(f[s|(<span class="number">1</span>&lt;&lt;j)],f[s]);</span><br><span class="line">				<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">					<span class="keyword">if</span>(f[s])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">						<span class="built_in">ff</span>(j,<span class="number">0</span>,C)</span><br><span class="line">						<span class="keyword">if</span>(!<span class="built_in">bit</span>(s,j))</span><br><span class="line">							<span class="keyword">if</span>(up[i][j]==<span class="number">-1</span>||<span class="built_in">bit</span>(tmp,up[i][j])) &#123;tmp=<span class="number">-1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">							<span class="keyword">else</span> tmp|=(<span class="number">1</span>&lt;&lt;up[i][j]);</span><br><span class="line">						<span class="keyword">if</span>(tmp!=<span class="number">-1</span>) <span class="built_in">Add</span>(g[tmp],f[s]);</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="built_in">work</span>(g,ri[i+<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C) f[s]=g[s],g[s]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,C<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">if</span>(up[B<span class="number">-1</span>][i]!=<span class="number">-1</span>&amp;&amp;!<span class="built_in">bit</span>(tt,i+<span class="number">1</span>))</span><br><span class="line">					<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C)</span><br><span class="line">						<span class="keyword">if</span>(!<span class="built_in">bit</span>(s,i))</span><br><span class="line">							<span class="built_in">Add</span>(f[s|(<span class="number">1</span>&lt;&lt;i)],f[s]);</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;C) <span class="built_in">Add</span>(ans,f[s]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> B&lt;=<span class="number">20</span>?<span class="built_in">solve1</span>(n):<span class="built_in">solve2</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Graph G[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(n,m,A,B);</span><br><span class="line">	<span class="keyword">if</span>(A&gt;B) <span class="built_in">swap</span>(A,B);</span><br><span class="line">	<span class="type">int</span> d=__gcd(A,B);</span><br><span class="line">	A/=d; B/=d;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y; <span class="built_in">read</span>(x,y); x--; y--;</span><br><span class="line">		G[x%d].<span class="built_in">add</span>(x/d,y/d);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,d<span class="number">-1</span>) (ans*=G[i].<span class="built_in">solve</span>((n-i<span class="number">-1</span>)/d+<span class="number">1</span>))%=mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-Find-the-LCA"><a href="#F-Find-the-LCA" class="headerlink" title="F. Find the LCA"></a>F. Find the LCA</h2><h2 id="G-Games"><a href="#G-Games" class="headerlink" title="G. Games"></a>G. Games</h2><p>取石子问题的变种。先手必败当且仅当把 $a_i$ 转换成二进制后，二进制每一位相加为 $7$ 的倍数。</p>
<p>也就是在 $n$ 个数里面可重复选择 $k$ 个，看有多少符合上述情况。</p>
<p>定义七进制不进位加法，那么答案相当于求 $[x^0]F^k(x)$。</p>
<p>使用七进制FWT即可，刚好 $7$ 的原根在模 $998244353$ 意义下存在。</p>
<h2 id="H-Harsh-Comments"><a href="#H-Harsh-Comments" class="headerlink" title="H. Harsh Comments"></a>H. Harsh Comments</h2><p>注意到 $a_i$ 很小，也就是总和不超过 $10000$。</p>
<p>最大值不好算，最小值好算。使用Min-Max容斥，有：$E(max(S))=\sum_{T\subseteq S,T\neq \varnothing}(-1)^{|T|-1}E(min(T))$。</p>
<p>计算 $min(T)$，也就是一堆石子里第一次取出 $T$ 内任意一个的概率。这是，$T$ 内的石子就可以合并成一个，总和记为 $sum$。</p>
<p>根据期望的线性性，有 $min(T)=\sum_{i\in B\or i\in {\complement_ST}}\frac{sum}{sum+i}+1$。</p>
<p>这个 $+1$ 在容斥以后就没啥用了。$i\in B$ 的情况也比较容易，在背包里面计算容斥系数即可。对于 $i\in \complement_ST$，此时可以枚举每个 $i$，然后强制 $i$ 不在 $T$ 内时，剩下的 $n-1$ 个点的方案数，这相当于一个回退的背包。</p>
<p>时间复杂度 $O(n^3\log mod)$。假设 $n,m,a$ 同阶。可以通过一些简单的方法优化掉求逆的 $\log mod$。</p>
<h2 id="I-Inverse-Problem"><a href="#I-Inverse-Problem" class="headerlink" title="I. Inverse Problem"></a>I. Inverse Problem</h2><p>注意到，我们只需要考虑 $p$ 的最长递增前缀，后面的不需要管它。</p>
<p>对于该前缀，$(p_i,p_{i+1})$ 内还没确定的数只能放在 $p_i$ 前面，那么一个个放，一直乘起来即可。</p>
<p>时间复杂度 $O(n)$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>2021-2022 ACM-ICPC Latin American Regional Programming Contest</title>
    <url>/2022/04/07/2021-2022-ACM-ICPC-Latin-American-Regional-Programming-Contest/</url>
    <content><![CDATA[<p>[cf]</p>
<span id="more"></span>

<h2 id="A-Ancient-Towers"><a href="#A-Ancient-Towers" class="headerlink" title="A. Ancient Towers"></a>A. Ancient Towers</h2><h2 id="B-Because-Art"><a href="#B-Because-Art" class="headerlink" title="B. Because, Art!"></a>B. Because, Art!</h2><p>考虑最大值如何计算，最小值相当于取负号。</p>
<p>排序后，找到同正同负的下标，按照乘积的大小从大到小排序，假设有 $k$ 对这样的数，那么前 $k$ 个的选法一定是按照顺序来的。剩下 $n-k$ 对一正一负，使用FFT计算即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h2 id="F-Fields-Division"><a href="#F-Fields-Division" class="headerlink" title="F. Fields Division"></a>F. Fields Division</h2><p>删掉 $n$ 个点后，$n-1$ 所在连通块形成的集合即为其中一个集合。</p>
<h2 id="G-Generator-Tree"><a href="#G-Generator-Tree" class="headerlink" title="G. Generator Tree"></a>G. Generator Tree</h2><p>树哈希：$f_u=1+\sum_{v\in son_u}f_v\times prime[siz_v]$。</p>
<p>每棵树，枚举它节点个数的因数 $d$，判断是否能被分解为 $\frac{n}{d}$ 棵同构的树。</p>
<p>若能，那么肯定存在一个大小为 $d$ 的子树，算出其哈希值后，用一个数组标记表示已经算过了，模拟将这个大小为 $d$ 的子树删去，然后继续做即可。</p>
<h2 id="H-Hamilton-The-Musical"><a href="#H-Hamilton-The-Musical" class="headerlink" title="H. Hamilton - The Musical"></a>H. Hamilton - The Musical</h2><p>二分图带权匹配模板。</p>
<h2 id="I-Invested-Money"><a href="#I-Invested-Money" class="headerlink" title="I. Invested Money"></a>I. Invested Money</h2><p>模拟题，找到一个周期即可。</p>
<h2 id="J-Joining-Pairs"><a href="#J-Joining-Pairs" class="headerlink" title="J. Joining Pairs"></a>J. Joining Pairs</h2><p>输出 <code>N</code> 当且仅当存在两对点都在边界上，且交叉。</p>
<h2 id="K-KIARA-is-a-Recursive-Acronym"><a href="#K-KIARA-is-a-Recursive-Acronym" class="headerlink" title="K. KIARA is a Recursive Acronym"></a>K. KIARA is a Recursive Acronym</h2><p>签到题。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Suwon</title>
    <url>/2022/03/31/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Suwon/</url>
    <content><![CDATA[<p>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Suwon 题解。</p>
<span id="more"></span>

<h2 id="A-Another-Tree-Queries-Problem"><a href="#A-Another-Tree-Queries-Problem" class="headerlink" title="A. Another Tree Queries Problem"></a>A. Another Tree Queries Problem</h2><p>以 $1$ 为根，考虑询问中每条边对答案的贡献。</p>
<p>分两种情况：子树和，总和-子树和。</p>
<p>总和-子树和的点出现在 $u$ 到 $1$ 的路径中。</p>
<p>因此答案为 $dep_u\times \sum a_i +\sum sum_u-2\times \sum_{v\in(u,1)}sum_v$，其中 $sum_u$ 表示 $u$ 子树的节点的 $a_i$ 的和。</p>
<p>树剖，用线段树维护 $sum_u$。</p>
<p>对于子树 $u$ 内加 $x$，子树内的点的 $sum$ 各自加上其子树大小 $\times x$，$fa_u$ 到 $1$ 的节点，$sum$ 加上 $siz_u\times x$。</p>
<p>对于链 $(u,v)$ 内加 $x$，链上的点的 $sum$ 加一个公差为 $1$ 的等差数列。可用 $+dep_w$ 维护。$lca_{u,v}$ 到 $1$ 的节点，$sum$ 加上 $(u,v)$ 间点的个数乘以 $x$。</p>
<p>于是用线段树维护，区间加，区间加 $siz_u$，区间加 $dep_u$ 即可。</p>
<p>一堆细节，极其容易写错。。。</p>
<h2 id="B-Best-Meeting-Places"><a href="#B-Best-Meeting-Places" class="headerlink" title="B. Best Meeting Places"></a>B. Best Meeting Places</h2><p>从小到大排序，用并查集维护即可。</p>
<h2 id="C-Colorful-Squares"><a href="#C-Colorful-Squares" class="headerlink" title="C. Colorful Squares"></a>C. Colorful Squares</h2><p>二分答案，扫描线，用线段树维护当前覆盖某个节点的颜色数。</p>
<p>唯一麻烦的是修改，需要确定哪些点需要被修改。</p>
<p>显然，需要修改的是一段区间，对于每个颜色，开一个set记录当前的点，然后通过查找前驱后继找到这个区间。</p>
<p>时间复杂度 $O(n\log^2n)$。</p>
<h2 id="E-Expected-Distance"><a href="#E-Expected-Distance" class="headerlink" title="E. Expected Distance"></a>E. Expected Distance</h2><p>两点距离为 $dis_{1,u}+dis_{1,v}-2\times dis_{1,lca(u,v)}$。</p>
<p>由期望线性性，我们将上面拆成三部分，前两部分的 $dis_{1,i}$ 的期望值可以通过递推计算，设为 $f_i$。</p>
<p>而对于 $u,v(u&lt;v)$ 而言，我们需要求出 $dis_{1,lca(u,v)}$ 的期望值：</p>
<ul>
<li>对于 $v$，选择 $v$ 的一个父亲 $i$，概率为 $\frac{a_i}{\sum_{j=1}^{i-1}a_j}$。</li>
<li>如果 $i=u$，则表示找到了 $lca$，返回 $f_u$。</li>
<li>如果 $i&gt;u$，则令 $u’=u,v’=i$，继续递归。</li>
<li>否则 $i&lt;u$，则令 $u’=i,v’=u$，继续递归。</li>
</ul>
<p>可以发现，$lca(u,v)$ 必须 $\le u$。因此， $dis_{1,lca(u,v)}$ 的期望和 $v$ 没有任何关系。设 $g_u$ 为此时的期望值，则有：$g_u=\frac{a_uf_u+\sum_{j=1}^{u-1}a_jg_j}{\sum_{j=1}^ua_j}$，也可以递推求出。</p>
<p>时间复杂度 $O(n+q)$。</p>
<h2 id="F-Find-the-XOR"><a href="#F-Find-the-XOR" class="headerlink" title="F. Find the XOR"></a>F. Find the XOR</h2><p>首先根据经典结论，两点间的异或和可以看成随便一棵生成树中两点走树边的异或和再异或上若干个环的值。</p>
<p>环的异或值一共有 $m-n+1$ 个，将这些数扔进线性基 $Base$ 里。</p>
<p>设 $f(x),g(x)$ 为 $x$ 经过 $Base$ 后的最小值，最大值。</p>
<p>那么答案就是 $\oplus_{l\le i&lt;j\le r}g(d_i\oplus d_j)$。 我们要想办法将这个 $d_i,d_j$ 拆到外面去，否则就无法快速算了。最大值 $g(x)$ 比较难拆开，那么来看看 $f(x)$。</p>
<p>运用了线性基的若干重要性质：</p>
<ul>
<li>首先，$f(x)\oplus g(x)$ 等于 $Base$ 中能异或出的最大值。考虑用归纳证明即可。那么可以将 $g(x)$ 转换成 $f(x)$ 了。</li>
<li>对于 $f(x)$，有 ：$f(x)\oplus f(y)=f(x\oplus y)$。</li>
</ul>
<p>那么，经过这些转化后就比较简单了。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>2020 Petrozavodsk Winter Camp, Jagiellonian U Contest</title>
    <url>/2022/03/22/2020-Petrozavodsk-Winter-Camp-Jagiellonian-U-Contest/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Belarus</title>
    <url>/2022/03/17/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Belarus/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/102956">gym</a></p>
<span id="more"></span>

<h2 id="A-Belarusian-State-University"><a href="#A-Belarusian-State-University" class="headerlink" title="A. Belarusian State University"></a>A. Belarusian State University</h2><p>需要深入理解FWT的本质。</p>
<p>FWT的分治中，是拆开某一位去分治的。</p>
<p>对于每一位的处理，实际上就是相当于处理一种运算关系。</p>
<p>而我们的目标是处理 $2^4=16$ 种二元0/1运算，我们会的只有 $or,and,xor$ 三种。</p>
<p>而我们可以将这个运算转换成取反，固定某个变量的值，以及上面三种常规操作的若干种，从而解决某一位的问题。</p>
<p>分类讨论 $16$ 种情况即可。。</p>
<p>时间复杂度 $O(2^nn)$。</p>
<h2 id="B-Beautiful-Sequence-Unraveling"><a href="#B-Beautiful-Sequence-Unraveling" class="headerlink" title="B. Beautiful Sequence Unraveling"></a>B. Beautiful Sequence Unraveling</h2><h2 id="C-Brave-Seekers-of-Unicorns"><a href="#C-Brave-Seekers-of-Unicorns" class="headerlink" title="C. Brave Seekers of Unicorns"></a>C. Brave Seekers of Unicorns</h2><p>DP，设 $f_i$ 表示序列最后一位为 $i$ 的总方案数。设 $s_i$ 为其前缀和，最终答案为 $s_n$。考虑用所有的方案数减去不合法的，也就是：</p>
<p>$f_i=s_{i-1}-\sum_{k&lt;k\oplus i&lt;i}f_k$。</p>
<p>而对于所有的 $k&lt;k\oplus i&lt;i$，$k$ 的规律是 $k$ 的最高位比 $i$ 小，且该最高位中 $i$ 这一位为 $1$。</p>
<p>然后就是 $O(\log n)$ 个区间和了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h2 id="D-Bank-Security-Unification"><a href="#D-Bank-Security-Unification" class="headerlink" title="D. Bank Security Unification"></a>D. Bank Security Unification</h2><p>设 $f_i$ 表示考虑前 $i$ 个，其中第 $i$ 个必选的最大值，有 $f_i=\max \{f_j+a_j&amp; a_i\}$。</p>
<p>优化，我们只需要对于每一位考虑前边的出现过这一位为 $1$ 的最大下标即可。</p>
<ul>
<li>证明： 设 $a_i&amp;a_j$ 的最大位为 $k$，对于任一更小的 $j’$，且满足 $a_i&amp; a_{j’}$ 最大位为第 $k$ 位，那么显然有 $a_{j’}&amp; a_{i}&lt;2^{k+1}\le a_{j’}&amp; a_j+a_j&amp; a_i$。说明 $i,j’$ 中间多选一个 $j$ 会比较优。</li>
</ul>
<p>时间复杂度 $O(n\log C)$。</p>
<h2 id="E-Brief-Statements-Union"><a href="#E-Brief-Statements-Union" class="headerlink" title="E. Brief Statements Union"></a>E. Brief Statements Union</h2><p>拆位后，变成 $01$ 序列。$and=1$ 的限制相当于表示 $[l_i,r_i]$ 全是 $1$；$and=0$ 的限制表示 $[l_i,r_i]$ 不全为 $1$。</p>
<p>假设 $and=1$ 的都选，差分后，求出有多少个 $and=0$ 的区间全是 $1$。</p>
<p>如果是 $0$ 个，随便删哪个线段均可；</p>
<p>如果是 $1$ 个，可以删掉这个 $and=0$ 的区间；</p>
<p>如果 $&gt;1$ 个，则不能删掉 $and=0$ 的区间；</p>
<p>下面考虑删掉任意一个 $and=1$ 的区间后合法的情况。那么删掉这个区间后合法当且仅当删掉后能满足所有 $and=0$ 的区间的限制。</p>
<p>还是利用每个点被 $and=1$ 的线段覆盖次数的数组，找到所有的只被一条线段覆盖过的点就可以了。</p>
<p>时间复杂度 $O(n\log C)$。</p>
<h2 id="F-Border-Similarity-Undertaking"><a href="#F-Border-Similarity-Undertaking" class="headerlink" title="F. Border Similarity Undertaking"></a>F. Border Similarity Undertaking</h2><p>分治，然后预处理出左右两边的最远距离，以及能遇到的一些最大值。暴力枚举，时间复杂度 $O(nm\log nm)$。</p>
<h2 id="G-Biological-Software-Utilities"><a href="#G-Biological-Software-Utilities" class="headerlink" title="G. Biological Software Utilities"></a>G. Biological Software Utilities</h2><p>不妨设有 $2n$ 个点，如何求有完美匹配的树的个数？</p>
<p>首先枚举 $2n$ 个点的不同的匹配情况，答案是 $\prod_{i=1}^n(2i-1)$。</p>
<p>然后对于每种匹配间进行连边，每次连边有 $4$ 种情况，且需要连成一个 $n$ 个点的树，答案是 $4^{n-1}\times n^{n-2}$。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="H-Bytelandia-States-Union"><a href="#H-Bytelandia-States-Union" class="headerlink" title="H. Bytelandia States Union"></a>H. Bytelandia States Union</h2><p>对于一条路径 $(x_1,y_1),(x_2,y_2),\cdots,(x_n,y_n)$，它的权值总和为 $x_n^2y_n^2-x_1^2y_1^2+\sum_{i=1}^{n-1}(x_i^2+y_i^2)$。</p>
<p>那么，相当于算 $\sum_{i=1}^n(x_i^2+y_i^2)$ 的最小值。</p>
<p>考虑每次移动，$(x^2+y^2)$ 的变化是 $\pm 2x/2y+1$ 的。</p>
<p>先不妨设 $x_1\le x_n$。</p>
<p>如果 $y_1\geq y_n$，那么显然先一直往下走，然后再往右走最优。</p>
<p>如果 $y_1\le y_n$，那么就从 $(x_1,y_1)$ 一直移动 $x$ 或 $y$ 中的较小值，直到他们相等，$(x_n,y_n)$ 也是如此。经过这样的操作以后，就变成从 $(x_1,x_1)$ 移动到 $(x_n,x_n)$ 了，这个很容易算出最小值。</p>
<p>分类讨论，$O(1)$ 计算，时间复杂度 $O(n)$。</p>
<h2 id="I-Binary-Supersonic-Utahraptors"><a href="#I-Binary-Supersonic-Utahraptors" class="headerlink" title="I. Binary Supersonic Utahraptors"></a>I. Binary Supersonic Utahraptors</h2><p>欺诈题，无论怎么操作，答案不会改变。</p>
<h2 id="J-Burnished-Security-Updates"><a href="#J-Burnished-Security-Updates" class="headerlink" title="J. Burnished Security Updates"></a>J. Burnished Security Updates</h2><p>判断是否是若干连通二分图。</p>
<h2 id="M-Brilliant-Sequence-of-Umbrellas"><a href="#M-Brilliant-Sequence-of-Umbrellas" class="headerlink" title="M. Brilliant Sequence of Umbrellas"></a>M. Brilliant Sequence of Umbrellas</h2><p>我们若构造 $1,1\times 2,2\times 3,3\times 4\cdots$，唯一不满足的是有可能出现隔着两个不互质，比如 $2\times 3,3\times 4$。为了解决这个问题，我们暴力规定隔着两个是互质的。</p>
<p>于是有：$1,2,3,5,7,8,9,11,13,\cdots$，第 $i$ 个数大概是 $\frac{3}{2}i$，这样就可以了。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="N-Best-Solution-Unknown"><a href="#N-Best-Solution-Unknown" class="headerlink" title="N. Best Solution Unknown"></a>N. Best Solution Unknown</h2><p>找到区间的最大值。然后向左右两边递归，记录当前需要到达的最低分即可。</p>
<p>使用单调栈建立笛卡尔树，时间复杂度 $O(n)$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Nizhny Novgorod</title>
    <url>/2022/03/06/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Nizhny-Novgorod/</url>
    <content><![CDATA[<p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010531">opentrain</a></p>
<span id="more"></span>

<h2 id="A-Assignment-Problem"><a href="#A-Assignment-Problem" class="headerlink" title="A. Assignment Problem"></a>A. Assignment Problem</h2><p>暴力 $m!$ 枚举先后顺序，用 dfs 枚举，即可 $O(m)$ 判断新加的那个是谁。</p>
<p>时间复杂度 $O(m!\times m)$。</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h2 id="C-Multiple"><a href="#C-Multiple" class="headerlink" title="C. Multiple?"></a>C. Multiple?</h2><p>答案为 $\varphi(n)\binom{n-1}{k-1}$。</p>
<p>计算组合数数可以直接暴力。</p>
<h2 id="D-Output-Limit-Exceeded"><a href="#D-Output-Limit-Exceeded" class="headerlink" title="D. Output Limit Exceeded"></a>D. Output Limit Exceeded</h2><p>当 $i\leq \frac{n}{2}$，且 $[n-i+1,n]$ 内出现了两个或以上的质数时，答案一定为 $0$。</p>
<p>而当 $i&gt;\frac{n}{2}$ 时，中间会有些重复的部分。我们完全可以让重复的部分一一对应匹配，因为若 $x\rightarrow y,y\rightarrow z$，那么可以变成 $x\rightarrow z,y\rightarrow y$。那么，此时 $i$ 的答案与 $n-i$ 完全相同。</p>
<p>在 $10^{18}$ 内，两个质数相隔的距离不多，那么直接KM或者网络流暴力求出 $0\sim k$ 的答案，其中 $[n-k+1,n]$ 内出现了两个质数，且 $k$ 最小。</p>
<p>使用网络流，时间复杂度 $O(k^{2.5}\log k)$。</p>
<h2 id="E-Smol-Vertex-Cover"><a href="#E-Smol-Vertex-Cover" class="headerlink" title="E. Smol Vertex Cover"></a>E. Smol Vertex Cover</h2><p>先用带花树求出一个一般图最大匹配 $M$。设最小点覆盖所需点数为 $C$。</p>
<p>显然有，$M\le C$，而题目要求 $C\le M+1$。</p>
<ul>
<li>$C=M$</li>
</ul>
<p>对于每条在最大匹配内的边，都有且仅有一个点是选的；对于不在最大匹配内的边的点，两个至少选一个。</p>
<p>有且仅有相当于 $i\oplus j=1$，至少选一个相当于 $i\text{ or }j=1$。2-SAT。</p>
<ul>
<li>$C=M+1$</li>
</ul>
<p>枚举哪个点是必须选择的，然后和 $C=M$ 的情况类似，判断的时候也做一遍 2-SAT即可。</p>
<p>总的时间复杂度 $O(n^3)$。</p>
<h2 id="G-Remove-the-Prime"><a href="#G-Remove-the-Prime" class="headerlink" title="G. Remove the Prime"></a>G. Remove the Prime</h2><p>因式分解后，变成简单的取石子游戏。</p>
<p>Pollard-rho分解即可。</p>
<h2 id="H-Excluded-Min"><a href="#H-Excluded-Min" class="headerlink" title="H. Excluded Min"></a>H. Excluded Min</h2><h2 id="I-Trade"><a href="#I-Trade" class="headerlink" title="I. Trade"></a>I. Trade</h2><p>重要性质：$p_i$ 均不一样。</p>
<p>假设要选某些纪念品，那么一定是将这些纪念品的 $p$ 从大到小排序后依次选择。</p>
<p>那么总的和即为 $\sum_{i=1}^kc_i+(i-1)p_i\le k+\sum_{i=1}^k(i-1)(k-i+1)\le O(\frac{k^3}{6})$，那么最多就选 $O((6S)^{\frac{1}{3}})$ 个物品。</p>
<p>排序，暴力DP。</p>
<h2 id="J-Increasing-or-Decreasing"><a href="#J-Increasing-or-Decreasing" class="headerlink" title="J. Increasing or Decreasing"></a>J. Increasing or Decreasing</h2><p>先对整个序列进行一遍从小到大的排序，然后假设前 $i-1$ 个已经找到，找到 $b_i$ 所在位置，然后看是最大值还是最小值。使用 $n-1$ 次，剩下最后一个不用管它。加上先前的整个排序，刚好使用 $n$ 次。</p>
<p>时间复杂度 $O(n^2\log n)$。</p>
<h2 id="L-Extreme-Wealth"><a href="#L-Extreme-Wealth" class="headerlink" title="L. Extreme Wealth"></a>L. Extreme Wealth</h2><p>答案为 $\frac{2^{a+b}}{\binom{a+b}{a}}$，即 $\frac{2^{a+b}a!b!}{(a+b)!}$。</p>
<p>$a,b$ 小的时候随便算，我们只考虑 $a,b$ 很大的情况。</p>
<p>考虑 $a=b$ ，此时阶乘用斯特林公式近似算。得到 $\frac{2^{a+a}a!a!}{(a+a)!}=\sqrt{\pi a}$。</p>
<p>设答案为 $S(a,b)$，考虑从 $S(a,b-1)$ 推导出 $S(a,b)$，其中 $a&lt;b$，有：</p>
<p>$S(a,b)=\frac{2b}{a+b}S(a,b-1)$。</p>
<p>随着 $b$ 越来越大，$\frac{2b}{a+b}$ 越来越接近 $2$，这样很快就可以超出 $10^9$了，暴力模拟即可。</p>
<h2 id="M-Discrete-Logarithm-is-a-Joke"><a href="#M-Discrete-Logarithm-is-a-Joke" class="headerlink" title="M. Discrete Logarithm is a Joke"></a>M. Discrete Logarithm is a Joke</h2><p>签到题。知道了 $a_{10^6}$ 后，倒推即可。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>一些杂题</title>
    <url>/2022/03/04/%E4%B8%80%E4%BA%9B%E6%9D%82%E9%A2%98/</url>
    <content><![CDATA[<p>一些杂题的题解。</p>
<span id="more"></span>



<h2 id="bzoj3457-Ring"><a href="#bzoj3457-Ring" class="headerlink" title="bzoj3457 Ring"></a>bzoj3457 Ring</h2><p>由Polya定理，答案为 $\frac{\sum_{i=1}^nF(\gcd(n,i))}{n}=\frac{\sum_{d|n}\varphi(d)F(\frac{n}{d})}{n}$。其中 $F(m)$ 为长度为 $m$ 的循环项链上含该字符串 $S$ 的方案数。</p>
<p>$F(m)$ 的计算使用容斥，用 $2^m$ 减去不含 $S$ 的方案。设 $f_{i,j}$ 为当前长度为 $i$，匹配到第 $j$ 位的方案数。</p>
<p>假设最后一位填完后，匹配到字符串第 $i$ 位，那么初始条件为 $f_{0,j}=[i==j]$。答案为 $f_{n,i}$。</p>
<p>$f_i$ 转移到 $f_{i+1}$ 相当于乘以一个矩阵 $A$，其系数可用KMP算出。</p>
<p>先算出 $A^m$，然后枚举 $i$，暴力计算即可。</p>
<p>可以通过预处理 $A^{\sqrt{n}i},A^i$ 降低算 $A^m$ 的复杂度。</p>
<p>时间复杂度 $O(d(n)k^3)$。</p>
<h2 id="bzoj2353-矩形压缩"><a href="#bzoj2353-矩形压缩" class="headerlink" title="bzoj2353 矩形压缩"></a>bzoj2353 矩形压缩</h2><p>先离散化。</p>
<p>显然，这些矩形要越小越好，如果 $A$ 包含 $B$，那么选 $B$ 一定更优。</p>
<p>于是只需要考虑如何找到所有的极小的长方形。</p>
<p>哈希，对每个原来的长方形随机一个值，对长方形内部的整点的权值异或上该值。</p>
<p>对于每个点找到四联通内所有权值相同的点，如果形成的形状是个矩形，则说明找到一个。</p>
<p>剩下的是裸的二分图带权匹配。</p>
]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
  </entry>
  <entry>
    <title>USACO 2022 February Contest</title>
    <url>/2022/03/01/USACO-2022-February-Contest/</url>
    <content><![CDATA[<p>USACO 2022 February Contest Silver and Gold.</p>
<span id="more"></span>

<h1 id="Silver"><a href="#Silver" class="headerlink" title="Silver"></a>Silver</h1><h2 id="Problem-1-Redistributing-Gifts"><a href="#Problem-1-Redistributing-Gifts" class="headerlink" title="Problem 1. Redistributing Gifts"></a>Problem 1. Redistributing Gifts</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>Farmer John有 $n$ 只奶牛，$n$ 个礼物，编号均为 $1\sim n$。现在要给每只奶牛分配一个礼物。</p>
<p>每只奶牛都有一个长度为 $n$ 的排列，表示她的愿望清单。其中第 $i$ 个值表示这只奶牛第 $i$ 想要的礼物。</p>
<p>Farmer John很懒，将第 $i$ 个礼物给了第 $i$ 只奶牛。现在奶牛聚在一起重新分配礼物。一个合法的分配当且仅当对于所有的 $i$，第 $i$ 只奶牛有且仅有一个礼物，且这个礼物的在这个奶牛心目中的排名需不低于这只奶牛原来的礼物（即编号为 $i$ 的礼物）的排名。</p>
<p>你需要对于所有的 $i$，求出所有可能的合法分配中，第 $i$ 只奶牛可能分配到的最想要的礼物。</p>
<p>$n\le 500$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们先假设第 $i$ 个礼物给第 $i$ 只奶牛。</p>
<p>暴力枚举 $i,j$，假设第 $i$ 只奶牛想要第 $j$ 个礼物，如何判断是否可行呢？</p>
<p>我们将第 $j$ 个礼物给了 $i$，那么第 $j$ 只奶牛就没礼物了，他需要找另一个合法的礼物 $x_1$；</p>
<p>我们将第 $x_1$ 个礼物给了 $j$，那么第 $x_1$ 只奶牛就没礼物了，他需要找另一个合法的礼物 $x_2$；</p>
<p>这样一直下去，直到某一只奶牛拿回了礼物 $i$。这样就找到了一个满足条件的合法匹配了。</p>
<p>那么我们新建一个图，若奶牛 $i$ 的愿望清单中礼物 $j$ 的排名比礼物 $i$ 优，则 $i$ 向 $j$ 连一条有向边。</p>
<p> 判断奶牛 $i$ 是否能要礼物 $j$ 相当于判断是否存在一条从 $j$ 到 $i$ 的路径。</p>
<p>Floyd传递闭包，时间复杂度 $O(n^3)$。</p>
<p>可以用bitset继续优化，但是没有必要。</p>
<h2 id="Problem-2-Robot-Instructions"><a href="#Problem-2-Robot-Instructions" class="headerlink" title="Problem 2. Robot Instructions"></a>Problem 2. Robot Instructions</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个向量 $(x_i,y_i)$。对于每个 $k$，问你有多少种从 $n$ 个向量中选出 $k$ 个向量的不同方案，使得这 $k$ 的向量的横纵坐标之和等于 $(x_g,y_g)$。</p>
<p>$n\le 40,|x_i|,|y_i|\le 10^9$。</p>
<p>时限4s，空间512MB。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>$n\le 40$，启发我们将向量尽量平均分成两部分。设分为 $[1,t],[t+1,n]$。</p>
<p>对于前面一半，设 $f_{i,P}$ 表示选择 $i$ 个向量后，坐标之和为 $(x_P,y_P)$ 的方案数。</p>
<p>$P$ 最后只有 $2^t$ 种不同的情况，将 $P$ 哈希即可。</p>
<p>对于后面一半，暴力枚举每个向量选择的情况，假设选了 $j$ 个向量，最终前半部分的坐标应为 $Q$（$Q$ 可以通过用终点坐标减去这 $j$ 个向量求出），那么枚举 $i$，将 $i+j$ 的答案加上 $f_{i,Q}$ 即可。</p>
<p>时间复杂度 $O(2^t+2^{n-t}t)$。</p>
<p>取 $t=\frac{n}{2}$ 就可以过了。</p>
<h2 id="Problem-3-Email-Filing"><a href="#Problem-3-Email-Filing" class="headerlink" title="Problem 3. Email Filing"></a>Problem 3. Email Filing</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>Farmer John 要处理邮件。屏幕左侧是 $m$ 个文件夹，他需要将位于屏幕右侧的 $n$ 封邮件归类进左侧的文件夹中，其中，从上往下第 $i$ 封邮件需要进入左侧从上往下第 $f_i$ 个文件夹中。</p>
<p>由于屏幕大小有限，每次只能看到最多 $k$ 个文件夹，$k$ 封邮件。其中 $k\le \min\{n,m\}$。刚开始时，他看到的是编号为 $1\sim k$ 的文件夹和邮件。他需要上下滚动鼠标滚轮，每次滚动会将位于屏幕最上方的文件夹（或邮件）移出屏幕，而屏幕下方的下面第一个文件夹（或邮件）将出现在屏幕最下方。每个邮件移动完后，邮件的图标将消失，同时下一个（如果有的话）标号的邮件将出现在屏幕上。</p>
<p>不幸的是，这个鼠标的滚轮只能往下滚动。唯一能看到还未处理的邮件的方法是滚到最下面后整理完某个屏幕中的邮件，这时上面第一个未处理的将出现在屏幕中。</p>
<p>你需要告诉Farmer John 能否处理完这批邮件。</p>
<p>$n\le 10^5,m\le 10^4$。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>考虑贪心。设 $mx$ 表示 $f_i$ 的最大值，设当前文件夹的区间为 $[now,now+k-1]$。</p>
<p>首先，需要搞清楚的是，$now$ 是不能减小的，也就是左侧只能一直往下。</p>
<p>设当前在屏幕上方的第一个邮件为 $j$，如果 $f_j\in[mx-k+1,mx]$，则可以跳过 $j$，等最后搞。</p>
<p>否则，对于当前的情况，能整理则整理，也就是处理完当前所有满足 $f_k\in[now,now+k-1]$ 的邮件。</p>
<p>若当前没有一个能整理的，设当前显示的邮件中 $f$ 最小的为 $u$，则有三种情况：</p>
<ul>
<li><p>若 $f_u&lt;now$，那就别想了，永远都搞不了这个 $u$。</p>
</li>
<li><p>移动左侧文件夹，直至 $now+k-1=f_u$；如果这时移动，则必须满足剩下的还未处理的邮件的 $f$ 都必须大于新的 $now$（即 $f_u+1-k$），否则：</p>
</li>
<li><p>先不处理，看看后面的情况，也就是将当前最上方的先去掉。</p>
</li>
</ul>
<p>上述过程可以开若干个set去模拟，并用一个vector顺序记录上方还未处理的邮件。</p>
<p>当右侧到达底部时，只需类似上面的方法，判断能否消完即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h1 id="Gold"><a href="#Gold" class="headerlink" title="Gold"></a>Gold</h1><h2 id="Problem-1-Redistributing-Gifts-1"><a href="#Problem-1-Redistributing-Gifts-1" class="headerlink" title="Problem 1. Redistributing Gifts"></a>Problem 1. Redistributing Gifts</h2><p>设 $g(S)$ 表示在 $S$ 中形成一个合法环的方案数。</p>
<p>设 $f(S)$ 表示在 $S$ 中形成若干个合法环的方案数。</p>
<p>答案为 $f(S)\times f(\complement_US)$。</p>
<p>时间复杂度 $O(2^nn^2)$ 或 $O(3^n)$。</p>
<h2 id="Problem-2-Cow-Camp"><a href="#Problem-2-Cow-Camp" class="headerlink" title="Problem 2. Cow Camp"></a>Problem 2. Cow Camp</h2><p>每次出现恰好 $i$ 个的概率 $P(i)=\frac{\binom{n}{i}}{2^n}$。</p>
<p>考虑递推，设 $f_i$ 表示用 $i$ 次的最大期望，</p>
<p>则有：$f_k=\sum_{i=0}^nP(i)\times \max\{i,f_{k-1}\}$。初始条件 $f_0=0$。</p>
<p>记录 $P(i)$ 前缀和 $s_i$，$iP(i)$ 后缀和 $t_i$ 即可 $O(k)$ 解决。</p>
<p>可以发现，这个东西相当于 $f=s_if+t_{i+1}$ 迭代若干遍，其中 $i=\lfloor f\rfloor$。</p>
<p>而 $i$ 最多是 $n$，那么可以二分出最少迭代次数，使得迭代后 $i$ 将会变化。</p>
<p>迭代 $k$ 次后的 $f$ 为 $s^k\times f+\frac{1-s^k}{1-s}\times t$。</p>
<p>二分+快速幂即可。</p>
<p>时间复杂度 $O(n\log^2 k)$。</p>
<h2 id="Problem-3-Moo-Network"><a href="#Problem-3-Moo-Network" class="headerlink" title="Problem 3. Moo Network"></a>Problem 3. Moo Network</h2><p>贪心可知，对于每个纵坐标，一个点只可能往左/右边第一个连边。</p>
<p>剩下的是最小生成树模板。</p>
<p>时间复杂度 $O(m\log m)$，其中 $m=20n$。</p>
]]></content>
  </entry>
  <entry>
    <title>XXI Open Cup named after E.V. Pankratiev. Grand Prix of Krakow</title>
    <url>/2022/02/25/XXI-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Krakow/</url>
    <content><![CDATA[<p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010530">比赛链接</a></p>
<span id="more"></span>

<h3 id="B-Almost-Fair-Cake-Cutting"><a href="#B-Almost-Fair-Cake-Cutting" class="headerlink" title="B. (Almost) Fair Cake-Cutting"></a>B. (Almost) Fair Cake-Cutting</h3><p>当 $n\ge 3$ 时，一定是 $100\%$。</p>
<p>接下来只需解决 $n=1$ 和 $n=2$。</p>
<p>可用半平面交或者大力分类讨论解决。</p>
<h3 id="C-Jellyfish"><a href="#C-Jellyfish" class="headerlink" title="C. Jellyfish"></a>C. Jellyfish</h3><p>要使得对于每个集合满足条件，则在两点的所有简单路径中至少有一条中间没选点。</p>
<ul>
<li><p>贪心，选全部数的叶子结点。</p>
</li>
<li><p>或者在环上选一个点，然后选其余树的叶子结点。</p>
</li>
<li><p>或者在环上选两个点，然后选一边的叶子结点。</p>
</li>
<li><p>或者在环上选三个点。</p>
</li>
</ul>
<p>第二种情况会出现当且仅当存在某个环上节点没子树。</p>
<p>第三种情况会出现当且仅当环上存在某相邻两节点均没子树。</p>
<p>这样就好判断多了。</p>
<h3 id="D-Flat-Organization"><a href="#D-Flat-Organization" class="headerlink" title="D. Flat Organization"></a>D. Flat Organization</h3><p>将竞赛图缩点，然后DP即可。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h3 id="E-Archer-Vlad"><a href="#E-Archer-Vlad" class="headerlink" title="E. Archer Vlad"></a>E. Archer Vlad</h3><p>设 $v_x=v\cos \alpha,v_y=v\sin \alpha$，</p>
<p>则有：$t=\frac{x}{v_x}$。</p>
<p>而：$v_yt-\frac{1}{2}gt^2\geq y$，即 $x\tan \alpha-\frac{g}{2}\frac{x^2}{v^2\cos^2\alpha}\geq y$。</p>
<p>而 $\frac{1}{\cos ^2\alpha}=1+\tan^2 \alpha$。</p>
<p>变成关于 $\tan \alpha$ 的二次不等式。</p>
<p>解 $n$ 个这样的不等式即可。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="F-A-Very-Different-Word"><a href="#F-A-Very-Different-Word" class="headerlink" title="F. A Very Different Word"></a>F. A Very Different Word</h3><p>每次字典序加一，加 $26$ 次之后一定出现过 $a\sim z$。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="G-Cactus"><a href="#G-Cactus" class="headerlink" title="G. Cactus"></a>G. Cactus</h3><p>每个点最多在一个环上。那么对于每个环，就只有dfs树中最上的那一个点是确定的。</p>
<p>很容易算出一个长度为 $m$ 的环的方案数。</p>
<p>时间复杂度 $O(n+m)$。</p>
<h3 id="I-GCD-vs-XOR"><a href="#I-GCD-vs-XOR" class="headerlink" title="I. GCD vs. XOR"></a>I. GCD vs. XOR</h3><p>不妨设 $a\geq b$，有：$(a,b)=(a,a-b)\le a-b\le a\oplus b$。</p>
<p>若 $(a,b)=a\oplus b$，则 $(a,a-b)=a-b=a\oplus b$。</p>
<p>那么 $a$ 为 $a-b$ 的倍数，$a&amp;b=b$。</p>
<p>设 $a=k(a-b)$，则 $b=\frac{k-1}{k}a$，那么对于每个 $a$，符合条件的 $b$ 的和一定不超过 $n\log n$。</p>
<p>预处理即可。</p>
<h3 id="J-Civilizations"><a href="#J-Civilizations" class="headerlink" title="J. Civilizations"></a>J. Civilizations</h3><p>这样的 $Ax_i+By_i+Cx_iy_i$ 最大值没办法求。</p>
<p>考虑固定一个，发现周长最多是 $O(n^2)$ 级别的。</p>
<p>也就是最多会有 $\sqrt{O(n^2)}=O(n)$ 种不同的周长。</p>
<p>固定其中一个数后，要求 $(B+Cy_i)x_i$ 的最大值。</p>
<p>用set存，分两种情况讨论。</p>
<p>然后存在当前不同的 $l_p$ ，也可以用set存。</p>
<p>枚举即可。</p>
<p>时间复杂度 $O(n^2+qn)$。</p>
<h3 id="K-We-apologize-for-any-inconvenience"><a href="#K-We-apologize-for-any-inconvenience" class="headerlink" title="K. We apologize for any inconvenience"></a>K. We apologize for any inconvenience</h3><p>离线，将删除变成增加。</p>
<p>考虑增加一个点，以这个点为中介点Floyd一遍即可。</p>
<p>时间复杂度 $O((n+k)^3)$。</p>
<h3 id="M-Social-Justice"><a href="#M-Social-Justice" class="headerlink" title="M. Social Justice"></a>M. Social Justice</h3><p>首先求出最大能留下的人数 $mx$。</p>
<p>可以发现，对于一个集合，删掉最小的那个不会更差。</p>
<p>那么枚举最大值后，二分找到最小值。</p>
<p>对于所有的长度为 $mx$ 的合法区间内的人，都是可以留下的。</p>
<p>剩下的需要判断不在这些区间内的人是否可以，那么就是对于前面的每个区间，都去掉最后一个人并加上当前需要判断的那个，然后看是否可行。</p>
<p>但这样时间复杂度高达 $O(n^2)$。</p>
<p>那么只需对于每个区间计算出删掉最后一个人后加进去的那个人的最小权值，然后求后缀最大值即可。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>最短路</tag>
        <tag>数学</tag>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>强联通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 Huawei ICPC Camp</title>
    <url>/2022/02/09/2022-Huawei-ICPC-Camp/</url>
    <content><![CDATA[<p><a href="https://official.contest.yandex.com/icpc-ptz-shanghai-2022/">链接</a></p>
<span id="more"></span>

<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="C-Survey"><a href="#C-Survey" class="headerlink" title="C. Survey"></a>C. Survey</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定 $m$ 块钱，$n$ 个工人，每个工人需要至少给 $x_i$ 块才会工作。</p>
<p>现需要你将 $m$ 块钱分成 $n$ 份，每份可以是实数，然后随机一个排列使钱与工人配对，问最大的期望会工作的工人数。</p>
<p>$n\le 10^3,m\le 5\times 10^3,0\le x_i\le m$，</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>假设这 $n$ 份钱为 $a_1,a_2,\cdots,a_n$，设 $f(a)$ 表示 $x_i\le a$ 的个数。那么期望工作的工人数为 $\sum_{i=1}^n\frac{f(a_i)}{n}=\frac{\sum_{i=1}^nf(a_i)}{n}$。</p>
<p>DP，设 $f_{j,k}$ 表示已经将钱分了 $j$ 份，总钱数为 $k$ 的最大期望。</p>
<p>暴力转移，时间复杂度 $O(nm^2)$。</p>
<p>考虑优化转移。去掉转移时对 $f$ 没有影响的 $a_i$。考虑将 $a_i$ 从大到小排序，我们现在是将钱分了 $j$ 份，总钱数为 $k$ ，也就是说，对于 $j$ 而言，$k=\sum_{l=1}^ja_l\geq j a_j$，即 $a_j\le \frac{k}{j}$。这样就可以有一个天然的调和级数 $\log$ 了。</p>
<p>时间复杂度 $O(nm\log m)$。</p>
<p>比赛的时候想到了要用调和级数，可是脑子短路了觉得不对，最后乱搞才过掉这题。。。</p>
<h3 id="G-Trans"><a href="#G-Trans" class="headerlink" title="G. Trans"></a>G. Trans</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一个数组 $a_0,a_1,\cdots,a_{2^n-1}$，对于每个 $j\in[0,2^n)$，求 $\sum_{i=0}^{2^n-1}(\text{popcount}(i\text{ and }j)\bmod 2)a_i$。</p>
<p>$n\le 20$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>签到题…FWT的意义是 $FWT_a(j)=\sum_{i=0}^{2^{n}-1}(-1)^{\text{popcount}(i\text{ and }j)}a_i$</p>
<p>那么稍作变换就可以了。</p>
<p>时间复杂度 $O(2^nn)$。</p>
<h3 id="H-Blind-Box"><a href="#H-Blind-Box" class="headerlink" title="H. Blind Box"></a>H. Blind Box</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>求 $\frac{\sum_{1\le x_1\le x_2 \le \cdots\le x_n\le m}\prod x_i}{\sum_{1\le x_1\le x_2 \le \cdots\le x_n\le m}1}$。</p>
<p>$n,m\le 10^5$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>分母简单。</p>
<p>打表发现这东西就是第二类斯特林数。。</p>
<p>考虑第二类斯特林数的意义，将 $a$ 个不同的球分到 $b$ 个相同盒子，每个盒子至少一个的方案数。</p>
<p>考虑依次将 $a$ 个小球放进盒子，那么一共有 $a-b$ 个小球放进去的时候是可以选盒子的，第 $i$ 个这样的小球选的盒子个数是当前已经放过小球的盒子个数，记为 $x_i$，那么总方案数就是 $\sum \prod_{i=1}^{a-b} x_i$。</p>
<p>取 $a-b=n,b=m$，答案为 $S_2(n+m,m)$。</p>
<h3 id="I-EIP1559"><a href="#I-EIP1559" class="headerlink" title="I. EIP1559"></a>I. EIP1559</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>对于数对 $(a,b)$，设 $d=\min(a,b+x)$。</p>
<p>$t$ 次操作，每次增加或删除一个数对，或给你一个 $x$，询问当前数对中的 $d$ 的最大值。</p>
<p>$t,a,b,x\le 10^6$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>设 $f(x)=\min(a,b+x)$，则 $f(x)$ 为一个斜向上45度然后平整的分段函数。</p>
<p>将其分成两段处理，一段是平整的，一段最终要 $+x$ 的。然后线段树找前后缀最大值即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="J-Three-Countries"><a href="#J-Three-Countries" class="headerlink" title="J. Three Countries"></a>J. Three Countries</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给定三个圆，求这三个圆所形成的凸包。</p>
<p>$T\le 10^4,1\le x,y,r\le 100$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>先求出所有圆圆的切线的切点，对这些切点求凸包后，逆时针统计凸包上相邻的点是否在同一个圆上，如果是，则轮廓为圆；否则轮廓为直线。</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="A-Attack-Order"><a href="#A-Attack-Order" class="headerlink" title="A. Attack Order"></a>A. Attack Order</h3><p>排序后贪心即可，签到题。</p>
<h3 id="B-Browsing-The-Collection"><a href="#B-Browsing-The-Collection" class="headerlink" title="B. Browsing The Collection"></a>B. Browsing The Collection</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>$n$ 个长度为 $m$ 的数组排成一个环。</p>
<p>你可以增添或删除一个限制条件，形如数组第 $i$ 个数必须为 $v$。</p>
<p>对于当前位置，你有一个限制条件集合，当前位置的数组满足该条件。</p>
<p>每一步，你可以：</p>
<ul>
<li>向环的顺时针方向走到下一个满足当前所有限制的位置上。</li>
<li>向环的逆时针方向走到下一个满足当前所有限制的位置上。</li>
<li>增加一个限制条件。如果增加完后，当前位置满足限制条件集合，则不动，否则移动到顺时针方向第一个满足所有限制的位置上。</li>
<li>删除一个限制条件，不移动。</li>
</ul>
<p>对于所有的数对 $(i,j)$，求出从 $i$ 出发，初始限制条件为空，到 $j$ 的最少步数。</p>
<p>$n\le 500,m\le 5$。</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>$m$ 很少，考虑对于每个位置，开 $2^m$ 个点，第 $i$ 个点表示在该位置上且当前限制条件状态为 $i$ 的最优步数。</p>
<p>$1,2,4$ 很好表示，最麻烦的是 $3$。</p>
<p>没想那么多，直接暴力连边，从每个位置的 $0$ 号点出发 bfs，然后就过了。</p>
<h3 id="C-Casual-Dancers"><a href="#C-Casual-Dancers" class="headerlink" title="C. Casual Dancers"></a>C. Casual Dancers</h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>三个人，初始位置为 $x_1,x_2,x_3$。</p>
<p>$k$ 次移动，每次随机选一个人，$p$ 的概率向右，$1-p$ 的概率向左一步。</p>
<p>问 $k$ 次移动后三人中选两人的距离最大值。</p>
<p>$|x_i|\le 10^5,k\le 2\times 10^5$。</p>
<h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>三个人比较难处理，如果换成两个人那就很简单了。</p>
<p>而三个人的距离可以表示为 $\frac{|x_1-x_2|+|x_1-x_3|+|x_2-x_3|}{2}$。</p>
<p>由期望线性性，即可转为两个人。</p>
<p>那么 $p$ 是多少就没有关系了。</p>
<p>假设开始两人距离为 $0$，预处理计算一下走 $k$ 步后两人距离即可。</p>
<h3 id="D-Diameter-Two"><a href="#D-Diameter-Two" class="headerlink" title="D. Diameter Two"></a>D. Diameter Two</h3><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>构造一个 $n$ 个点的无重边连通图，其中前 $k$ 个点度数为 $1$，后 $n-k$ 个点度数 $\geq 2$，边数最少，且两点最远距离不超过 $2$。</p>
<h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><p>首先，$n=k,n=k-2$ 不行。</p>
<ul>
<li>$k\neq 0$</li>
</ul>
<p>贪心，可知这 $k$ 个点一定都与一个点相连，不妨设为 $k+1$。</p>
<p>那之后为了满足直径不超过 $2$，剩下的点都要和 $k+1$ 连。</p>
<p>为了满足度数 $\geq 2$，剩下的点两两连一条边。</p>
<ul>
<li>$k=0$</li>
</ul>
<p>类似 $k\neq 0$ 的构造，但是 $n=4,5,6$ 时需要特判。</p>
<p>（不会证明为什么 $n&gt;6$ 之后就可以）</p>
<h3 id="G-Gross-LCS"><a href="#G-Gross-LCS" class="headerlink" title="G. Gross LCS"></a>G. Gross LCS</h3><h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>给定序列 $a,b$。定义 $a+x$ 为序列 $a$ 整体加上 $x$。</p>
<p>问 $\sum_{x=-10^{100}}^{10^{100}}LCS(a+x,b)$。</p>
<p>$n,m\le 3000$。</p>
<p>空间限制32MB，时限10s。</p>
<h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><p>首先，有一个奇怪的LCS转成LIS的算法：</p>
<p>将 $a_i$ 一个数换成 $a_i$ 在数组 $b$ 中出现的位置从大到小形成的数组，形成一个新的数列 $c$。对这个数列求LIS就是LCS的长度。</p>
<p>这个算法的复杂度是 $O(m\log n)$ 的，其中 $m=\sum_{x} (\sum[a_i=x])(\sum [b_i=x])$。</p>
<p>回到题目中，假设枚举 $a_i$ 与 $b_j$ 是相配对的，那么 $x=b_j-a_i$。如果能对于每个 $x$，知道哪些 $a_i,b_j$ 是有用的，求这些有用的LCS，用上面的做法，即可做到 $O(n^2\log n)$ 的复杂度。</p>
<p>剩下的问题是，如何做到 $O(n)$ 的空间复杂度。</p>
<p>将 $b$ 数组从小到大排序的数组称为 $b’$。考虑 $x$ 从小到大变化，对于每个 $a_i$，与之配对过的 $b_j$ 在 $b’$ 中是一段前缀。对于每个 $a_i$ ，记录在 $b’$ 中这段前缀的终点，用一个堆来求出当前有用的 $x$ 的最小值即可。</p>
<p>时间复杂度 $O(n^2\log n)$。</p>
<h3 id="H-Junk-or-Joy"><a href="#H-Junk-or-Joy" class="headerlink" title="H. Junk or Joy"></a>H. Junk or Joy</h3><h4 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h4><p>$T$ 组询问，每次给定 $k$，问满足 $n^2-k\times p^m=1$ 的 $(n,p,m)$ 三元组的方案数。其中 $p$ 为质数。</p>
<p>$T\le 100,k\le 10^9$</p>
<h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><p>移项，因式分解得：$(n-1)(n+1)=k\times p^m$，</p>
<ul>
<li>$p\neq 2$，设 $k=k_0\times p^t$，则 $n-1,n+1$ 中最多有一个是 $p$ 的倍数。不妨设是 $n-1$，则 $n-1=x\times p^{t+m},n+1=\frac{k_0}{x}$，随便做。</li>
<li>$p\geq 2$，则 $(n-1),(n+1)$ 中的一个的 $2$ 次幂至多为 $1$。设 $k=k_0\times 2^t$，不妨设 $(n-1)=2\times x$，其中 $x$ 为奇数，则 $n+1=2(x+1)$，即 $x(x+1)=k\times 2^{m-2}=k_0\times 2^{t+m-2}$。分解 $k_0$ 质因数即可。 </li>
</ul>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Global Round 14[CF1515]</title>
    <url>/2021/12/19/Codeforces-Global-Round-14-CF1515/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/1515/problems">CF</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Phoenix-and-Gold"><a href="#A-Phoenix-and-Gold" class="headerlink" title="A. Phoenix and Gold"></a>A. Phoenix and Gold</h3><p>因为每个数不相等，从小到大排序，遇到相等的，看是否能和后面的交换。不能交换则一定不行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> n,x,a[<span class="number">29349</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=a[i];</span><br><span class="line">		<span class="keyword">if</span>(sum==x) &#123;<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp+=a[i];</span><br><span class="line">				<span class="keyword">if</span>(tmp==x) &#123;<span class="built_in">swap</span>(a[i],a[i+<span class="number">1</span>]); <span class="keyword">break</span>;&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B-Phoenix-and-Puzzle"><a href="#B-Phoenix-and-Puzzle" class="headerlink" title="B. Phoenix and Puzzle"></a>B. Phoenix and Puzzle</h3><p>考虑直角边和斜边形成的正方形，即假设其直角边长为 $1$，则正方形个数 $n$ 要满足：</p>
<p>$\frac{n}{2}=x^2$ 或 $\frac{n}{2}=(\sqrt{2}x)^2$。</p>
<p>随便判断。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=<span class="built_in">sqrt</span>(x);</span><br><span class="line">	<span class="keyword">return</span> y*y==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;<span class="built_in">check</span>(n/<span class="number">2</span>)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;<span class="built_in">check</span>(n/<span class="number">4</span>)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Phoenix-and-Towers"><a href="#C-Phoenix-and-Towers" class="headerlink" title="C. Phoenix and Towers"></a>C. Phoenix and Towers</h3><p>由于 $1\le h_i\le x$，那么每次选当前最小的塔就可以保证他们的差不超过 $x$ 了。</p>
<p>用一个堆维护即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> id; ll x;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.x==B.x?A.id&lt;B.id:A.x&gt;B.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="type">int</span> n,m,x,ans[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) q.<span class="built_in">push</span>((node)&#123;i,<span class="number">0</span>&#125;);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			node now=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			ans[i]=now.id;</span><br><span class="line">			now.x+=x;</span><br><span class="line">			q.<span class="built_in">push</span>(now);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Phoenix-and-Socks"><a href="#D-Phoenix-and-Socks" class="headerlink" title="D. Phoenix and Socks"></a>D. Phoenix and Socks</h3><p>显然，相同颜色的先进行配对。</p>
<p>接下来，不妨设配对完后剩下的左袜子比较多。</p>
<p>那么就先用左袜子变成右袜子与相同颜色的配对。注意不能使左袜子比右袜子少了。</p>
<p>剩下的随便做。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,l,r;</span><br><span class="line"><span class="type">int</span> le[N],ri[N],a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); l=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) le[i]=ri[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,l) le[a[i]=<span class="built_in">read</span>()]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,r) ri[a[i+l]=<span class="built_in">read</span>()]++;</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=<span class="built_in">min</span>(le[i],ri[i]);</span><br><span class="line">			le[i]-=tmp; ri[i]-=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t1+=le[i],t2+=ri[i];</span><br><span class="line">		<span class="keyword">if</span>(t1&gt;=t2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,l)</span><br><span class="line">				<span class="keyword">if</span>(le[a[i]]&gt;=<span class="number">2</span>&amp;&amp;t1&gt;t2)</span><br><span class="line">				&#123;</span><br><span class="line">					le[a[i]]-=<span class="number">2</span>;</span><br><span class="line">					ans++;</span><br><span class="line">					t1-=<span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			ans+=(t1-t2)/<span class="number">2</span>+(t1+t2)/<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(i,l+<span class="number">1</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(ri[a[i]]&gt;=<span class="number">2</span>&amp;&amp;t2&gt;t1)</span><br><span class="line">				&#123;</span><br><span class="line">					ri[a[i]]-=<span class="number">2</span>;</span><br><span class="line">					ans++;</span><br><span class="line">					t2-=<span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			ans+=(t2-t1)/<span class="number">2</span>+(t1+t2)/<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E-Phoenix-and-Computers"><a href="#E-Phoenix-and-Computers" class="headerlink" title="E. Phoenix and Computers"></a>E. Phoenix and Computers</h3><p>这个连续段DP的思路有点妙。</p>
<p>我们设 $f_{i,j}$ 表示已经填了 $i$ 个数，且共有 $j$ 段距离&gt;1的连续段，<strong>每相邻两段的距离不确定</strong>时的方案数。</p>
<p>转移分5种情况讨论即可。很好写。</p>
<p>时间复杂度 $O(n^2)$。</p>
<p>也可以像题解那样，算出不自动打开的方案数，然后设 $f_{i,j}$ 为打开前 $i$ 个数，且自动打开 $j$ 个的方案数。但这样的复杂度就是 $O(n^3)$ 的了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x+=y; x=(x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"></span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); mod=<span class="built_in">read</span>();</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	ll tmp;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp=f[i][j];</span><br><span class="line">			<span class="keyword">if</span>(i+<span class="number">1</span>+<span class="number">2</span>*j&lt;=n) <span class="built_in">add</span>(f[i+<span class="number">1</span>][j+<span class="number">1</span>],tmp*(j+<span class="number">1</span>)%mod);</span><br><span class="line">			<span class="keyword">if</span>(i+<span class="number">1</span>+<span class="number">2</span>*(j<span class="number">-1</span>)&lt;=n) <span class="built_in">add</span>(f[i+<span class="number">1</span>][j],tmp*<span class="number">2</span>*j%mod);</span><br><span class="line">			<span class="keyword">if</span>(i+<span class="number">2</span>+<span class="number">2</span>*(j<span class="number">-1</span>)&lt;=n) <span class="built_in">add</span>(f[i+<span class="number">2</span>][j],tmp*<span class="number">2</span>*j%mod);</span><br><span class="line">			<span class="keyword">if</span>(j&gt;=<span class="number">2</span>&amp;&amp;i+<span class="number">2</span>+<span class="number">2</span>*(j<span class="number">-2</span>)&lt;=n) <span class="built_in">add</span>(f[i+<span class="number">2</span>][j<span class="number">-1</span>],tmp*<span class="number">2</span>*(j<span class="number">-1</span>)%mod);</span><br><span class="line">			<span class="keyword">if</span>(j&gt;=<span class="number">2</span>&amp;&amp;i+<span class="number">3</span>+<span class="number">2</span>*(j<span class="number">-2</span>)&lt;=n) <span class="built_in">add</span>(f[i+<span class="number">3</span>][j<span class="number">-1</span>],tmp*(j<span class="number">-1</span>)%mod);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[n][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F-Phoenix-and-Earthquake"><a href="#F-Phoenix-and-Earthquake" class="headerlink" title="F. Phoenix and Earthquake"></a>F. Phoenix and Earthquake</h3><p>有一个十分牛逼的性质：任意一棵生成树，若 $\sum_{i=1}^na_i\geq (n-1)x$，那么一定可以。</p>
<p>考虑构造，对于某个子树 $u$ 以及其儿子 $v$，如果 $a_u+a_v&gt;x$，那么直接操作。否则等后面再操作。若 $a_u+a_v\le x$，那么 $a_v\le x$，那么 $\sum_{i=1}^na_i-a_v\geq (n-2)x$，据归纳法可知，删掉 $v$ 以后还存在一个解。</p>
<p>然后一个dfs就好了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">6e5</span>+<span class="number">5</span>;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="type">int</span> n,m,x,ans[N],l,r;</span><br><span class="line"><span class="type">int</span> ver[N],head[N],val[N],ne[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		<span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u,val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!pre) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[u]&gt;=x)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[++l]=now;</span><br><span class="line">		a[pre]+=a[u]-x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		ans[r--]=now;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">	sum=<span class="number">-1ll</span>*(n<span class="number">-1</span>)*x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),sum+=a[i];</span><br><span class="line">	<span class="keyword">if</span>(sum&lt;<span class="number">0</span>) &#123;<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>(),i);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">	l=<span class="number">0</span>; r=n<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="G-Phoenix-and-Odometers"><a href="#G-Phoenix-and-Odometers" class="headerlink" title="G. Phoenix and Odometers"></a>G. Phoenix and Odometers</h3><p>显然，$a$ 能走的点必在 $a$ 在内的强联通分量里。</p>
<p>而如果存在从 $u$ 走到 $v$ 的距离为 $l\pmod p$ 的路径，那么必存在 $v$ 到 $u$ 的距离为 $-l\pmod p$ 的路径，因为存在经过 $u,v$ 的环，从 $v$ 开始走这个环 $p-1$ 次，再走到 $u$ ，就可以了。</p>
<p>而显然，如果有两个环，环长分别为 $a,b$，那么 $\gcd(a,b)$ 能走出来。</p>
<p>那么算出来 $a$ 所在强联通分量所有环的环长的 $\gcd$ 即可。</p>
<p>在Kosaraju过程中，记录点到根节点距离，可以算出来。</p>
<p>时间复杂度 $O(n\log m)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> y,v;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; adj[N],adk[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; dfn;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">ll f[N],g[N];</span><br><span class="line"><span class="type">int</span> bel[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> e:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[e.y])</span><br><span class="line">			<span class="built_in">dfs1</span>(e.y,u);</span><br><span class="line">	dfn.<span class="built_in">pb</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> e:adk[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[e.y])</span><br><span class="line">		&#123;</span><br><span class="line">			f[e.y]=f[u]+e.v;</span><br><span class="line">			bel[e.y]=bel[u];</span><br><span class="line">			<span class="built_in">dfs2</span>(e.y,u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(bel[e.y]==bel[u])</span><br><span class="line">			g[bel[u]]=__gcd(g[bel[u]],f[u]+e.v-f[e.y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y,z;</span><br><span class="line">		x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); z=<span class="built_in">read</span>();</span><br><span class="line">		adj[x].<span class="built_in">pb</span>((edge)&#123;y,z&#125;);</span><br><span class="line">		adk[y].<span class="built_in">pb</span>((edge)&#123;x,z&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!vis[i]) <span class="built_in">dfs1</span>(i,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) vis[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(dfn));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i:dfn)</span><br><span class="line">	<span class="keyword">if</span>(!vis[i])</span><br><span class="line">	&#123;</span><br><span class="line">		bel[i]=++cnt;</span><br><span class="line">		<span class="built_in">dfs2</span>(i,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	ll a,s,x;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		a=bel[<span class="built_in">read</span>()]; s=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">		s=(x-s)%x;</span><br><span class="line">		x=__gcd(x,g[a]);</span><br><span class="line">		<span class="built_in">puts</span>((s%x==<span class="number">0</span>)?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="H-Phoenix-and-Bits"><a href="#H-Phoenix-and-Bits" class="headerlink" title="H. Phoenix and Bits"></a>H. Phoenix and Bits</h3><p>And操作可以看做是Xor和Or操作的结合。于是我们只需要考虑Xor和Or操作即可。</p>
<p>Xor操作直接在Trie里打标记。</p>
<p>Or操作发现有时候会合并一些节点的左右儿子，有时候相当于打Xor标记。并且，合并左右儿子的时间复杂度不超过 $log^2n$ 。</p>
<p>如何判断什么时候打Xor标记呢？当且仅当Or操作中的数只存在某些位置为 $1$，且该节点中的数在这一位上均为 $0$。</p>
<p>那么记一下节点内所有值的Or，以及取反后的Or就好了。</p>
<p>对于区间操作，我们可以类似平衡树和线段树分裂的操作就可以了。</p>
<p>时间复杂度 $O(n\log^2m)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1.3e7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> W=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> ch[M][<span class="number">2</span>],s[M],ta[M],to[M],tx[M],rt,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	s[u]=s[ch[u][<span class="number">0</span>]]+s[ch[u][<span class="number">1</span>]];</span><br><span class="line">	ta[u]=ta[ch[u][<span class="number">0</span>]]|ta[ch[u][<span class="number">1</span>]];</span><br><span class="line">	to[u]=to[ch[u][<span class="number">0</span>]]|to[ch[u][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushxor</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> dep,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>((t&gt;&gt;dep)&amp;<span class="number">1</span>) <span class="built_in">swap</span>(ch[u][<span class="number">0</span>],ch[u][<span class="number">1</span>]);</span><br><span class="line">	tx[u]^=t;</span><br><span class="line">	<span class="type">int</span> tta=ta[u],tto=to[u];</span><br><span class="line">	to[u]=(tto&amp;(W^t))|(tta&amp;t);</span><br><span class="line">	ta[u]=(tta&amp;(W^t))|(tto&amp;t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u||!tx[u]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">pushxor</span>(ch[u][<span class="number">0</span>],dep<span class="number">-1</span>,tx[u]);</span><br><span class="line">	<span class="built_in">pushxor</span>(ch[u][<span class="number">1</span>],dep<span class="number">-1</span>,tx[u]);</span><br><span class="line">	tx[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> dep,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) u=++cnt;</span><br><span class="line">	<span class="keyword">if</span>(dep&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s[u]=<span class="number">1</span>;</span><br><span class="line">		tx[u]=<span class="number">0</span>;</span><br><span class="line">		to[u]=t;</span><br><span class="line">		ta[u]=W^t;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> c=(t&gt;&gt;dep)&amp;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">ins</span>(ch[u][c],dep<span class="number">-1</span>,t);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y,<span class="type">int</span> dep,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||R&lt;l||r&lt;L) &#123;y=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;y=x; x=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">pushdown</span>(x,dep);</span><br><span class="line">	y=++cnt;</span><br><span class="line">	<span class="built_in">split</span>(ch[x][<span class="number">0</span>],ch[y][<span class="number">0</span>],dep<span class="number">-1</span>,l,mid,L,R);</span><br><span class="line">	<span class="built_in">split</span>(ch[x][<span class="number">1</span>],ch[y][<span class="number">1</span>],dep<span class="number">-1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">	<span class="built_in">pushup</span>(x); <span class="built_in">pushup</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	<span class="built_in">pushdown</span>(x,dep);<span class="built_in">pushdown</span>(y,dep);</span><br><span class="line">	ch[x][<span class="number">0</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">0</span>],ch[y][<span class="number">0</span>],dep<span class="number">-1</span>);</span><br><span class="line">	ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],ch[y][<span class="number">1</span>],dep<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">pushup</span>(x);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> dep,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> tmp=t&amp;ta[u];</span><br><span class="line">	<span class="keyword">if</span>((tmp&amp;to[u])==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">pushxor</span>(u,dep,tmp);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(u,dep);</span><br><span class="line">	<span class="keyword">if</span>((t&gt;&gt;dep)&amp;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">pushxor</span>(ch[u][<span class="number">0</span>],dep<span class="number">-1</span>,(<span class="number">1</span>&lt;&lt;dep));</span><br><span class="line">		ch[u][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[u][<span class="number">0</span>],ch[u][<span class="number">1</span>],dep<span class="number">-1</span>);</span><br><span class="line">		ch[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">update</span>(ch[u][<span class="number">0</span>],dep<span class="number">-1</span>,t);</span><br><span class="line">	<span class="built_in">update</span>(ch[u][<span class="number">1</span>],dep<span class="number">-1</span>,t);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">ins</span>(rt,<span class="number">19</span>,<span class="built_in">read</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt,l,r,x,k;q--;)</span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>(); l=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">		k=<span class="number">0</span>; <span class="built_in">split</span>(rt,k,<span class="number">19</span>,<span class="number">0</span>,W,l,r);</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[k]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">pushxor</span>(k,<span class="number">19</span>,x);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">update</span>(k,<span class="number">19</span>,x);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				x^=W;</span><br><span class="line">				<span class="built_in">pushxor</span>(k,<span class="number">19</span>,W);</span><br><span class="line">				<span class="built_in">update</span>(k,<span class="number">19</span>,x);</span><br><span class="line">				<span class="built_in">pushxor</span>(k,<span class="number">19</span>,W);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		rt=<span class="built_in">merge</span>(rt,k,<span class="number">19</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>Trie</tag>
        <tag>数论</tag>
        <tag>堆</tag>
        <tag>连续段DP</tag>
        <tag>强联通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 ICPC 南京站</title>
    <url>/2021/12/05/2021-ICPC-%E5%8D%97%E4%BA%AC%E7%AB%99/</url>
    <content><![CDATA[<p>2021ICPC<del>南京</del>难金站。</p>
<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><span id="more"></span>

<h2 id="游记？"><a href="#游记？" class="headerlink" title="游记？"></a>游记？</h2><p>能在难金站拿金还是很满意啦。</p>
<h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>看了眼知乎，发现原来自己碰上了诸神黄昏。。</p>
<p>考了习思想，啥都不会。</p>
<p>睡不着。</p>
<h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>两点钟才睡着，然后一直半睡半醒的状态到7点半。</p>
<p>起来后，室内体测，胖了好多，坐位体前屈都压不下去了。。</p>
<p>回宿舍瘫到9点45，然后去吃早餐。</p>
<p>11点比赛。</p>
<p>meaningful上来就发现A是签到，然后靠着巨快的手速拿到一血。</p>
<p>接着我简单告诉了meaningful M题题意，然后去看其他题。CRH380BL-2339一直在想D。期间发现J看来十分好做。</p>
<p>然后meaningful就会M了，我想了想后也会了。15min的时候交了1发然后WA。然后我突然想到 $n=1$ 要特判，加了以后就过了。</p>
<p>然后meaningful就把C秒了，我写了个线性最大子段和顺利的1A了。</p>
<p>接着开始写J，我天真的写了个dfs，结果十分显然的T了。</p>
<p>接着换CRH380BL-2339上，但是有点想错了，导致一直WA。而我在旁边想了好一会儿四元环计数发现不太会容斥，然后跃跃欲试想要把J加一个记忆化，以及和他们一起思考D题，结果发现完全帮不上忙。</p>
<p>最终J加了个记忆化立刻就过了，然后meaningful写了个H也1A了。</p>
<p>然后他们继续想D，我去退了一下E题的式子。</p>
<p>很快发现E题只需要维护前缀平方和的历史和，前缀平方和，前缀和等等的值就可以了，然后分类讨论画了三种情况，写了三个 $5\times 5$ 的矩阵就会了。</p>
<p>在我边打E的时候，D题也快有结果了。打到一半，D题改了一个位置就过了。E连着MLE两发，发现是5e4给我写成了5e5。。改了之后发现TLE了。</p>
<p>然后就疯狂的卡常时间，卡了好久，在meaningful的强烈建议下造了个极限数据，发现本地要跑8s…并不是很会优化复杂度。结果CRH380BL-2339一语惊醒梦中人，将矩阵乘法里遇到0就不乘法的优化加了上去就A了。</p>
<p>在全队的注视下meaningful很快写完了I，调了一会儿直接1A。</p>
<p>此时是286分钟，发现我们已经稳Au了，然后就再次开始了愉快的评价题目环节。</p>
<p>出来以后发现是Rank14，本赛季打得最好的一次。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>分四种情况讨论即可。</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>设 $s_{l,r}(x)$ 表示 $x$ 在 $[l,r]$ 的出现次数。那么就是枚举 $x$，然后选择一段区间，使得 $s_{1,n}(x)+(s_{l,r}(x-k)-s_{l,r}(x))$ 最大。</p>
<p>记 $s_i=[a_i=x-k]-[a_i=x]$，然后分开跑最大子段和。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>考虑进行完第 $i$ 轮操作之后，前面 $[1,i]$ 已经有序了。那么几乎所有的位置的贡献就是前面比他大的数有多少个，剩下的贡献有两次，最大的一次。</p>
<p>按照这个情况分类讨论就好了，有亿点细节。时间复杂度 $O(n\log n)$。</p>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>比赛时做法：维护前缀平方和的历史和，前缀平方和，前缀和等等的值就可以了，然后分类讨论，写三个 $5\times 5$ 的矩阵。</p>
<p>不用前缀和去做会方便很多，矩阵非常好看，还只用 $4\times 4$ 的矩阵。</p>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>简单树形DP，维护一下两种转移。</p>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>队友做的，回去了看一下，真的好简单啊，这榜也太歪了。。</p>
<p>从后往前DP一下，遇到一个转折点分两种情况都取其最大值就好了。</p>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>发现只用前两种操作，那么 $a-b$ 的值不变；用第三种的话，$a-b$ 除以一个质数 $p$。</p>
<p>那么最后 $a-b$ 变到 $1$，答案就出来了。因此，直接记 $f(a,b)$ 表示 $(a,b)$ 到最终结果的最小步数。</p>
<p><strong>有这么一个性质：对于一个数 $x$，有若干整数 $a_1,a_2,\cdots,a_n$，用不同的顺序，不管上取整还是下取整去除 $x$，最终结果最多只有两种。</strong></p>
<p>那这样对于某个特定的 $a-b$ 的因子 $d$ 而言，满足条件的 $(a,b)$ 最多只有几种，因此有用的 $f(a,b)$ 的个数为 $O(d(a-b))$。直接上记忆化就好了。</p>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>当 $n\geq 2$ 时，相当于给每个数选一个加还是减，至少有一个减，一个加。</p>
<p>当 $n=1$ 时，特判一下。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>线段树</tag>
        <tag>思维题</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 ICPC 上海站</title>
    <url>/2021/12/02/2021-ICPC-%E4%B8%8A%E6%B5%B7%E7%AB%99/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/103446/problems">链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="B-Strange-Permutations"><a href="#B-Strange-Permutations" class="headerlink" title="B. Strange Permutations"></a>B. Strange Permutations</h3><p>一个长度为 $n$ 的置换形成了若干个有向环，那么在上面填排列后，环中边上相邻的点的数不能为 $i-&gt;i+1$。</p>
<p>直接枚举比较难，考虑容斥，记 $f(k)$ 表示选择了 $k$ 条边，使得每条边都满足 $i-&gt;i+1$ 的方案数，那么剩下 $n-k$ 个可以随便选，也就是 $(n-k)!$，答案就是 $\sum_{i=0}^n(-1)^if(i)(n-i)!$。</p>
<p>考虑 $f(i)$ 的求法，注意到一个整环不可能把所有边都选上以外，其他都可以。那么答案就是 $[x^i]\sum ((x+1)^{k_i}-x^{k_i})$。</p>
<p>分治FFT即可。</p>
<h3 id="C-Strange-Matrices"><a href="#C-Strange-Matrices" class="headerlink" title="C. Strange Matrices"></a>C. Strange Matrices</h3><p>$n,m\le 8$，考虑轮廓线DP，对于每个点，会有三种状态：什么事都没有的，需要这一行给它的，需要同一列中的下面点给它的。那么DP时记录一下本行当前的状态，以及当前 $m$ 个数的状态就可以了。</p>
<p>时间复杂度 $O(nm3^{10})$。</p>
<h3 id="D-Strange-Fractions"><a href="#D-Strange-Fractions" class="headerlink" title="D. Strange Fractions"></a>D. Strange Fractions</h3><p>可以发现，若 $(a,b)=1$，则 $(a^2+b^2,ab)=1$。那么 $p=a^2+b^2,q=ab$。随便做。</p>
<p>证明：$(a,b)=1$，则 $(a+b,a)=(a+b,b)=1$，则 $(a+b,ab)=1$，则 $(a^2+b^2,ab)=((a+b)^2,ab)=1$。</p>
<h3 id="E-Strange-Integers"><a href="#E-Strange-Integers" class="headerlink" title="E. Strange Integers"></a>E. Strange Integers</h3><p>排序以后贪心即可。</p>
<h3 id="G-Edge-Groups"><a href="#G-Edge-Groups" class="headerlink" title="G. Edge Groups"></a>G. Edge Groups</h3><p>简单树形DP。</p>
<h3 id="H-Life-is-a-Game"><a href="#H-Life-is-a-Game" class="headerlink" title="H. Life is a Game"></a>H. Life is a Game</h3><p>Kruskal重构树+树上倍增。</p>
<h3 id="I-Steadily-Growing-Steam"><a href="#I-Steadily-Growing-Steam" class="headerlink" title="I. Steadily Growing Steam"></a>I. Steadily Growing Steam</h3><p>简单DP，设 $f_{i,j,k}$ 表示处理到第 $i$ 个时，用了 $j$ 次，差值为 $k$ 的最大值。</p>
<h3 id="J-Two-Binary-Strings-Problem"><a href="#J-Two-Binary-Strings-Problem" class="headerlink" title="J. Two Binary Strings Problem"></a>J. Two Binary Strings Problem</h3><p>记 $s_i$ 表示前缀和，$f(l,r)=1$ 当且仅当 $2s_r-r&gt;2s_{l-1}-(l-1)$。</p>
<p>记 $t_i=2s_i-i$，按照 $t_i$ 排序，从小到大枚举，每次用bitset处理一下即可。</p>
<p>注意 $t_i=0$ 时的特判。</p>
<h3 id="K-Circle-of-Life"><a href="#K-Circle-of-Life" class="headerlink" title="K. Circle of Life"></a>K. Circle of Life</h3><p>打表找规律题。</p>
<h3 id="M-Harmony-in-Harmony"><a href="#M-Harmony-in-Harmony" class="headerlink" title="M. Harmony in Harmony"></a>M. Harmony in Harmony</h3><p>神仙结论题，不太会…</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>容斥原理</tag>
        <tag>数论</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 ICPC 沈阳站</title>
    <url>/2021/11/27/2021-ICPC-%E6%B2%88%E9%98%B3%E7%AB%99/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/103427/problems">题目链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>枚举每一个位，枚举每个连通块对应选的是什么时最优，求个和即可。在枚举时可判断是否合法。</p>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>签到题。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>暴力即可。</p>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>线图上的图匹配相当于原图中相邻两边的匹配。</p>
<p>性质一：一个有偶数条边的树可以匹配完。</p>
<p>证明：从最深叶子结点选择两条边，变成一个子问题。</p>
<p>性质二：一个有偶数条边的连通图可以完全匹配。</p>
<p>证明：相当于dfs树中加上若干条返祖边，在叶子结点选边匹配的时候优先选返祖边即可。</p>
<p>那么只剩下边为奇数的情况。显然如果删掉某条边后不改变图连通性，那么就可以删掉该边，否则该边为割边，删掉后需要满足两边边数均为偶数即可。这些均可在求割边时找出。</p>
<p>时间复杂度 $O(n+m)$。</p>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>将 $a,b,c,d$ 视为未知数。四个 $az_i+b=w_i(cz_i+d)$ 转换为线性齐次方程组。</p>
<p>由克拉默法则： $a,b,c,d$ 有非零解当且仅当：</p>
<p>$$\begin{vmatrix}<br>z_1 &amp; 1 &amp; w_1z_1 &amp; w_1\\<br>z_2 &amp; 1 &amp; w_2z_2 &amp; w_2\\<br>z_3 &amp; 1 &amp; w_3z_3 &amp; w_3\\<br>z_0 &amp; 1 &amp; f(z_0)z_0 &amp; f(z_0)<br>\end{vmatrix}= 0$$</p>
<p>直接解出 $f(z_0)$ 即可。</p>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>将询问的两个数的每一位的差算出来，组成一个新的数 $x$。</p>
<p>然后预处理出 $0$ 到 $x$ 的距离即可。</p>
<h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>设假设树上至少有 $i$ 对节点选择了的方案数为 $f(i)$，那么答案为 $\sum_{i=0}^n(-1)^if(i)\frac{(2(n-i))!}{(n-i)!2^{n-i}}$。 </p>
<p>求 $f(i)$ 用树形背包即可。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>对反串建立SAM，对parent-tree中每个节点的边按字典序进行排序以后，相当于求一个前缀最大值。</p>
<p>时间复杂度 $O(n\sum)$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>容斥原理</tag>
        <tag>双连通分量</tag>
        <tag>SAM</tag>
        <tag>模拟</tag>
        <tag>状压DP</tag>
        <tag>线性代数</tag>
        <tag>bfs</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 CCPC 威海站</title>
    <url>/2021/11/21/2021-CCPC-%E5%A8%81%E6%B5%B7%E7%AB%99/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/103428/problems">链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Goodbye-Ziyin"><a href="#A-Goodbye-Ziyin" class="headerlink" title="A. Goodbye, Ziyin!"></a>A. Goodbye, Ziyin!</h3><p>签到题，二叉树必须满足每个点的度数 $\le 3$，且根节点度数 $\le 2$，判断一下即可。</p>
<h3 id="C-Assign-or-Multiply"><a href="#C-Assign-or-Multiply" class="headerlink" title="C. Assign or Multiply"></a>C. Assign or Multiply</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定 $m$ 个操作，每个操作形如给 $x$ 赋值给 $a_i$，或给 $x$ 乘上 $a_i$。</p>
<p>任意安排这些操作的顺序，问有多少个 $i$ 满足 $i\in[0,p-1]$ 使得不存在某种操作顺序，使 $x\bmod p$ 最终值为 $i$。</p>
<p>$x$ 的初始值为 $1$。</p>
<p>$m\le10^6,3\le p\le 2\times 10^5,p\in \mathbb{P}$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>因为有赋值操作，那么相当于在赋值操作中选择一个，然后在乘法操作中选择若干个，问最后的值可以是多少。（注意，如果没有赋值操作，那么直接输出 $p-1$。）</p>
<p>由于 $p$ 为奇质数，我们求出它的原根 $g$，将乘法转化为加法。</p>
<p>考场中想到用bitset，但是应该是过不了的。</p>
<p>考虑每次操作，相当于找到所有 $bit_i=1,bit_{(i+x)\bmod p}=0$ 的 $i$，并把 $bit_{(i+x)\bmod p}$ 设为 $1$。</p>
<p>考虑 $i$ 向 $(i+x)\bmod p$ 连边，这样就形成了若干个环，环中 $1-&gt;0$ 和 $0-&gt;1$ 的个数显然是相等的。也就是说，如果能快速找到所有的 $bit_i\neq bit_{(i+x)\bmod p}$ 就可以了。</p>
<p>从小到大枚举，二分+树状数组找到第一个 $i$ 即可，此处可以用哈希判断一下。</p>
<p>时间复杂度 $O(n\log ^2q)$。</p>
<h3 id="D-Period"><a href="#D-Period" class="headerlink" title="D. Period"></a>D. Period</h3><p>周期与border是等价的，枚举原串的border，假设长度为 $i$，那么 $[i+1,n-i]$ 中都可以产生 $1$ 的贡献。</p>
<p>kmp，然后差分一下即可。</p>
<h3 id="E-CHASE"><a href="#E-CHASE" class="headerlink" title="E. CHASE!"></a>E. CHASE!</h3><p>设 $f_i$ 表示最多选择  $i$ 次的期望。</p>
<p>设当且选出来的和为 $X$，若 $X\geq f_{i-1}$ 时不重新选，否则重新选。</p>
<p>则有：$f_i=E(X&gt;\lfloor f_{i-1}\rfloor)+f_{i-1}P(X\le \lfloor f_{i-1}\rfloor )$</p>
<p>计算 $E,P$ 可用ntt预处理，也可暴力two-pointer计算。</p>
<h3 id="F-Stone"><a href="#F-Stone" class="headerlink" title="F. Stone"></a>F. Stone</h3><p>神仙题。</p>
<p>考虑如果出现了奇数，那么先手将 $s$ 取奇数，将所有的奇数变成偶数。这样就赢了，且赢的方案数为(最小的奇数+1)/2。</p>
<p>否则，如果全是偶数，且 $s$ 为奇数，那么先手必败。因此 $s$ 必须为偶数，那么 $a_i$ 全都除去 $2$，就又变回来原来的问题了。</p>
<h3 id="G-Desserts"><a href="#G-Desserts" class="headerlink" title="G. Desserts"></a>G. Desserts</h3><p>就因为在这道题上自己的失误错失Au…</p>
<p>给定 $n$ 个数 $a_i$，满足 $\sum_{i=1}^na_i\le 10^5$。记 $f(x)=\prod_{i=1}^n\binom{a_i}{x}$，对于 $i\in [1,m]$，求 $f(i)$。</p>
<p>一开始就直接开始莽多点求值，结果发现旁边的人过了才反应过来。</p>
<p>分块，对于小于等于 $\sqrt{10^5}$ 的记录有多少个，对于大于 $\sqrt{10^5}$ 的直接暴力枚举即可。</p>
<p>时间复杂度 $O(n\sqrt{n})$。</p>
<h3 id="H-city-safety"><a href="#H-city-safety" class="headerlink" title="H. city safety"></a>H. city safety</h3><p>套用最大权闭合子图的套路，先全选，然后建出图求最小割即可。</p>
<p>用前缀和的思想，可以将边数优化到 $O(n^2)$ 级别。</p>
<h3 id="I-Distance"><a href="#I-Distance" class="headerlink" title="I. Distance"></a>I. Distance</h3><p>显然可以对每个质数分开来统计：</p>
<p>我们枚举质数 $p$，其贡献为：$2\times p\sum_{p^c\le n}\lfloor \frac{n}{p^c}\rfloor(n-\lfloor \frac{n}{p^c}\rfloor)$。乘 $2$ 是因为不妨假设的 $i$ 中 $p$ 的次数比 $j$ 小。</p>
<p>对于 $c\geq 2$ 的情况，显然有 $p\le \sqrt{n}$，暴力枚举 $\sqrt{n}$ 以内质数即可。</p>
<p>对于 $c=1$，其对答案贡献经过整除分块后，需要计算 $\frac{n}{i}$ 以内的质数的和。这显然是Min25筛的前一部分。</p>
<p>时间复杂度 $O(\frac{n^{\frac{3}{4}}}{\log n})$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line">ll n;</span><br><span class="line"><span class="type">int</span> sqr;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> id1[N],id2[N]; ll w[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> cnt,pri[N];</span><br><span class="line">ll s1[N],s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;pri[++cnt]=i;s1[cnt]=<span class="built_in">Add</span>(s1[cnt<span class="number">-1</span>],i);&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;(ll)i*pri[j]&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(ll _n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (_n&lt;=sqr)?id1[_n]:id2[n/_n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	sqr=<span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="built_in">init_prime</span>(sqr);</span><br><span class="line">	ll l=<span class="number">1</span>,r;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		r=n/(n/l);</span><br><span class="line">		w[++m]=n/l;</span><br><span class="line">		s[m]=<span class="built_in">Mul</span>((w[m]+<span class="number">1</span>)%mod,w[m]%mod)*inv2%mod<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(w[m]&lt;=sqr) id1[w[m]]=m;</span><br><span class="line">		<span class="keyword">else</span> id2[r]=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">	&#123;</span><br><span class="line">		ll k=<span class="number">1ll</span>*pri[i]*pri[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;k&lt;=w[j];j++)</span><br><span class="line">			s[j]=<span class="built_in">Dec</span>(s[j],<span class="built_in">Mul</span>(pri[i],<span class="built_in">Dec</span>(s[<span class="built_in">id</span>(w[j]/pri[i])],s1[i<span class="number">-1</span>])));</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>,now,sum;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">	&#123;</span><br><span class="line">		now=<span class="number">1ll</span>*pri[i]*pri[i]; sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;now&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum=<span class="built_in">Add</span>(sum,(n/now)%mod*((n-(n/now))%mod)%mod);</span><br><span class="line">			now=now*pri[i];</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,sum*pri[i]%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(l=<span class="number">1</span>;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		r=n/(n/l);</span><br><span class="line">		sum=(n/l)%mod*((n-(n/l))%mod)%mod;</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="built_in">Dec</span>(s[<span class="built_in">id</span>(r)],s[<span class="built_in">id</span>(l<span class="number">-1</span>)])*sum%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans*<span class="number">2</span>%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="J-Circular-Billiard-Table"><a href="#J-Circular-Billiard-Table" class="headerlink" title="J. Circular Billiard Table"></a>J. Circular Billiard Table</h3><p>签到题，算一算gcd即可。</p>
<h3 id="K-Tiny-Stars"><a href="#K-Tiny-Stars" class="headerlink" title="K. Tiny Stars"></a>K. Tiny Stars</h3><p>考虑 $i-&gt;\frac{a}{i}-&gt;i$，但是这样的花费是 $16n$ 的，行不通。</p>
<p>考虑减少一点 $i-&gt;\frac{a}{i}$，可以发现：$i-&gt;\frac{a}{i}-&gt;\frac{1}{i}-&gt;ai-&gt;i$。</p>
<p>此时的花费为 $4n+\frac{(14+1)n}{2}=11.5n$，可以通过。</p>
<p>那么怎么能在不知道 $a$ 的情况下顺利连成上述情况呢？</p>
<p>考虑原根，将乘除转化为加减，设 $g^t=a$，有 $g^i-&gt;g^{t-i}-&gt;g^{n-1-i}$。</p>
<p>易知 $i,n-1-i$ 同奇偶，那么只要 $i$ 与 $t-i$ 不同奇偶性就可以了。</p>
<p>即 $t$ 为奇数，显然有 $\frac{1}{2}$ 的概率可以成功。</p>
<h3 id="M-810975"><a href="#M-810975" class="headerlink" title="M. 810975"></a>M. 810975</h3><p>容斥，考虑算出 $\le k$ 的答案即可。</p>
<p> 考虑 $n-m$ 个 $0$ 将线段分成 $n-m+1$ 段，每一段的长度不超过 $k$。总和为 $m$，那么相当于求 $x_1+x_2+\cdots+x_{n-m+1}=m,x_i\in [0,k]$ 的方案数。</p>
<p>两种办法：</p>
<ul>
<li>考虑生成函数，即求 $<a href="1+x+\cdots+x^k">x^m</a>^{n-m+1}$。用快速幂或者等比数列求和。</li>
<li>容斥，考虑至少 $i$ 个 $x$ 违反了 $[0,k]$ 的限制即可。</li>
</ul>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>生成函数</tag>
        <tag>数论</tag>
        <tag>树状数组</tag>
        <tag>概率</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 CCPC 桂林站</title>
    <url>/2021/11/17/2021-CCPC-%E6%A1%82%E6%9E%97%E7%AB%99/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/103409/">gym</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Hero-Named-Magnus"><a href="#A-Hero-Named-Magnus" class="headerlink" title="A. Hero Named Magnus"></a>A. <a href="https://codeforces.com/gym/103409/problem/A">Hero Named Magnus</a></h3><p>输出 $2x-1$。</p>
<h3 id="B-A-Plus-B-Problem"><a href="#B-A-Plus-B-Problem" class="headerlink" title="B. A Plus B Problem"></a>B. <a href="https://codeforces.com/gym/103409/problem/B">A Plus B Problem</a></h3><p>直接模拟加法即可。</p>
<p>使用线段树二分或者二分+线段树找到第一个 $9$ 或者 $0$ 即可。</p>
<p>使用线段树二分，时间复杂度 $O(n\log n)$。</p>
<h3 id="C-AC-Automaton"><a href="#C-AC-Automaton" class="headerlink" title="C. AC Automaton"></a>C. <a href="https://codeforces.com/gym/103409/problem/C">AC Automaton</a></h3><p>好毒瘤啊，不会。</p>
<h3 id="D-Assumption-is-All-You-Need"><a href="#D-Assumption-is-All-You-Need" class="headerlink" title="D. Assumption is All You Need"></a>D. <a href="https://codeforces.com/gym/103409/problem/D">Assumption is All You Need</a></h3><p>注意到，从小到大将数移到原来的位置后，就可以当做这个数字消失，也就是不再管它的位置。</p>
<p>大概是因为按照从小到大，没有归位的数都可以跨过去。</p>
<p>那么直接模拟即可。时间复杂度 $O(n^2)$。</p>
<h3 id="E-Buy-and-Delete"><a href="#E-Buy-and-Delete" class="headerlink" title="E. Buy and Delete"></a>E. <a href="https://codeforces.com/gym/103409/problem/E">Buy and Delete</a></h3><p>最多只可能删除两次。</p>
<p>一次删掉 $x&lt;y$ 的，另一次删掉 $x&gt;y$ 的。</p>
<p>那么找到最小环即可。</p>
<p>时间复杂度 $O(nm\log n)$。</p>
<h3 id="F-Illuminations-II"><a href="#F-Illuminations-II" class="headerlink" title="F. Illuminations II"></a>F. <a href="https://codeforces.com/gym/103409/problem/F">Illuminations II</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>大凸包里包着小凸包，从大凸包的周长上任意选择一点作为光源，问小凸包期望被照亮的长度。</p>
<p>$n,m\le 2\times 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>考虑反面，枚举小凸包的每一条边，看大凸包中有多长的线中的点能照到这条边。</p>
<p>这相当于求一条直线切一个凸包，问切成两部分后在直线右侧的长度和。</p>
<p>扫描线，维护直线切到凸包中的两条线段即可。</p>
<p>注意几乎平行的线段可能会有精度问题，判断点关于线的位置时需要注意。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="type">const</span> db inf=<span class="number">1e20</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(db x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">sqr</span><span class="params">(db x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">Point</span>()&#123;x=y=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="built_in">Point</span>(db _x,db _y)&#123;x=_x,y=_y;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">&quot;%Lf%Lf&quot;</span>,&amp;x,&amp;y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(A.x-B.x)==<span class="number">0</span>&amp;&amp;<span class="built_in">sgn</span>(A.y-B.y)==<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>(A.x-B.x)==<span class="number">0</span>?<span class="built_in">sgn</span>(A.y-B.y)&lt;<span class="number">0</span>:A.x&lt;B.x;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span>+(Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x+B.x,A.y+B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span>-(Point A,Point B)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x-B.x,A.y-B.y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span>*(Point A,db k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x*k,A.y*k);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Point <span class="keyword">operator</span>/(Point A,db k)&#123;<span class="keyword">return</span> <span class="built_in">Point</span>(A.x/k,A.y/k);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span>^(Point A,Point B)&#123;<span class="keyword">return</span> A.x*B.y-A.y*B.x;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span>*(Point A,Point B)&#123;<span class="keyword">return</span> A.x*B.x+A.y*B.y;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len2</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqr</span>(x)+<span class="built_in">sqr</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">len2</span>());&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>&#123;</span><br><span class="line">	Point s,e;</span><br><span class="line">	<span class="built_in">Line</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">Line</span>(Point _s,Point _e)&#123;s=_s,e=_e;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">adjust</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(e&lt;s) <span class="built_in">swap</span>(e,s);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Line A,Line B)&#123;<span class="keyword">return</span> A.s==B.s&amp;&amp;A.e==B.e;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">len</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (e-s).<span class="built_in">len</span>();&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(Point p)</span><span class="comment">//1-&gt;left,2-&gt;right,3-&gt;on it.</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> c=<span class="built_in">sgn</span>((p-s)^(e-s));</span><br><span class="line">		<span class="keyword">return</span> !c?<span class="number">3</span>:(<span class="number">1</span>+(c&gt;<span class="number">0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sgn</span>((e-s)^(v.e-v.s))==<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span><span class="comment">//0 parallel,1 same,2 inter</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>).<span class="built_in">parallel</span>(v)) <span class="keyword">return</span> v.<span class="built_in">relation</span>(s)==<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Point <span class="title">Intersection</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		db a1=(v.e-v.s)^(s-v.s);</span><br><span class="line">		db a2=(v.e-v.s)^(e-v.s);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point</span>((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">Point a[N],b[N];</span><br><span class="line">db sum,s[N];</span><br><span class="line">Line li[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;r) <span class="keyword">return</span> s[r<span class="number">-1</span>]-s[l];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> s[n<span class="number">-1</span>]-s[l]+(r?s[r<span class="number">-1</span>]:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) a[i].<span class="built_in">input</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m) b[i].<span class="built_in">input</span>();</span><br><span class="line">	Line now=<span class="built_in">Line</span>(b[<span class="number">0</span>],b[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) li[i]=<span class="built_in">Line</span>(a[i],a[(i+<span class="number">1</span>)%n]),sum+=li[i].<span class="built_in">len</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) s[i]=li[i].<span class="built_in">len</span>()+(i?s[i<span class="number">-1</span>]:<span class="number">0.0</span>);</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(now.<span class="built_in">relation</span>(a[i])==<span class="number">1</span>&amp;&amp;now.<span class="built_in">relation</span>(a[(i+<span class="number">1</span>)%n])!=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			l=i; <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(now.<span class="built_in">relation</span>(a[i])==<span class="number">2</span>&amp;&amp;now.<span class="built_in">relation</span>(a[(i+<span class="number">1</span>)%n])!=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			r=i; <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	db ans=(<span class="built_in">ask</span>(l,r)+(now.<span class="built_in">Intersection</span>(li[l])-a[(l+<span class="number">1</span>)%n]).<span class="built_in">len</span>()+(now.<span class="built_in">Intersection</span>(li[r])-a[r]).<span class="built_in">len</span>())/sum*now.<span class="built_in">len</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		now=<span class="built_in">Line</span>(b[i],b[(i+<span class="number">1</span>)%m]);</span><br><span class="line">		<span class="keyword">for</span>(;;)</span><br><span class="line">			<span class="keyword">if</span>(now.<span class="built_in">relation</span>(a[l])!=<span class="number">2</span>&amp;&amp;now.<span class="built_in">relation</span>(a[(l+<span class="number">1</span>)%n])!=<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				l=(l+<span class="number">1</span>)%n;</span><br><span class="line">		<span class="keyword">for</span>(;;)</span><br><span class="line">			<span class="keyword">if</span>(now.<span class="built_in">relation</span>(a[r])!=<span class="number">1</span>&amp;&amp;now.<span class="built_in">relation</span>(a[(r+<span class="number">1</span>)%n])!=<span class="number">2</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				r=(r+<span class="number">1</span>)%n;</span><br><span class="line">		ans+=(<span class="built_in">ask</span>(l,r)+(now.<span class="built_in">Intersection</span>(li[l])-a[(l+<span class="number">1</span>)%n]).<span class="built_in">len</span>()+(now.<span class="built_in">Intersection</span>(li[r])-a[r]).<span class="built_in">len</span>())/sum*now.<span class="built_in">len</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.12Lf&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="G-Occupy-the-Cities"><a href="#G-Occupy-the-Cities" class="headerlink" title="G. Occupy the Cities"></a>G. <a href="https://codeforces.com/gym/103409/problem/G">Occupy the Cities</a></h3><p>一个比较好写的方法是：二分，然后贪心判断是否可行。</p>
<h3 id="I-PTSD"><a href="#I-PTSD" class="headerlink" title="I. PTSD"></a>I. <a href="https://codeforces.com/gym/103409/problem/I">PTSD</a></h3><p>从后往前贪心，看能否找到一个更大的去匹配即可。</p>
<h3 id="J-Suffix-Automaton"><a href="#J-Suffix-Automaton" class="headerlink" title="J. Suffix Automaton"></a>J. <a href="https://codeforces.com/gym/103409/problem/J">Suffix Automaton</a></h3><h4 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h4><p>对反串建立SAM，每个节点的贡献是 $[len_{fa_x}+1,len_x]$。</p>
<p>为了满足字典序，我们找出每个点相对于父节点第一个多出来的字符，这个就相当于是原串的某个前缀再加一个字符。对于树中每个点，按照这个字符进行排序，就能按照字典序的要求来了。</p>
<p>找原串中第一个出现的字符串相当于找反串最后一次出现的字符串，在parent-tree中进行一遍dfs就可以找到right集合中最大的那个数。</p>
<h4 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h4><p>每个点的贡献是 $[height_x+1,n-sa_x+1]$。</p>
<p>SA本身就满足字典序。</p>
<p>找原串中第一个出现的字符串可以通过倍增找到。</p>
<p>对于以上两个算法，剩下的就是找到答案。</p>
<p>对询问离线，然后对若干条线段在数轴上从左到右扫描线，变成若干次单点修改，查找第 $k$ 小的值。用线段树维护即可。</p>
<p>时间复杂度 $O(n\sum+n\log n)$ 或 $O(n\log n)$。</p>
<h3 id="K-Tax"><a href="#K-Tax" class="headerlink" title="K.Tax"></a>K.<a href="https://codeforces.com/gym/103409/problem/K">Tax</a></h3><p>建出最短路图后，直接dfs即可。</p>
<p>时间复杂度 $O(x^{\frac{n}{x}})$。</p>
<p>设 $f(x)=x^{\frac{n}{x}}$，则 $\ln f(x)=\frac{n}{x}\ln x$，$\frac{f’(x)}{f(x)}=n\times \frac{1-\ln x}{x^2}$。</p>
<p>易知 $x$ 取 $e$ 时，$f(x)$ 取得最大值。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>最短路</tag>
        <tag>线段树</tag>
        <tag>二分</tag>
        <tag>SAM</tag>
        <tag>计算几何</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 CCPC 广州站</title>
    <url>/2021/11/14/2021-CCPC-%E5%B9%BF%E5%B7%9E%E7%AB%99/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/103415/problems">gym</a></p>
<span id="more"></span>

<h2 id="一些记录"><a href="#一些记录" class="headerlink" title="一些记录"></a>一些记录</h2><p>第一次参加CCPC~</p>
<h3 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h3><p>热身赛。</p>
<p>T1是ICPC网络赛第二场原题。</p>
<p>T2简单模拟。</p>
<p>T3是个奇怪（没给数据范围）的计算几何。</p>
<p>第14min的时候切完了前两题。然后听到队友说了个三分套三分，就上去写了。很快写完交了一发，TLE，发现是三分次数太多，调小三分次数后变成了WA。</p>
<p>想着精度有可能不够，然后把第二个三分变成了 $O(1)$，并改了一个错误后，结果还是WA。</p>
<p>然后一直想办法调，造了几组极限数据，发现会被几乎平行的情况给卡掉。</p>
<p>一直到比赛结束也没有过，发现鸿蒙队交了将近50发，也没过。</p>
<p>晚上困得要死，10点没到就去睡觉啦。</p>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><p>7点15起了床。突然想起昨天忘记给机器调Python了。</p>
<p>于是随便吃了三个包子，就去到小机房，把Python给下载了。</p>
<p>比赛开始前手机的前置摄像头突然用不了了，但是电脑里面的二维码也已经没了，没有办法拍照。</p>
<p>于是采用了手机拍手机的策略，在开始前4min搞定了。</p>
<p>先开了H，发现是个构造，然后复杂地分了好多类，WA了三发之后在39min过了。</p>
<p>然后看完了K题，觉得挺可做的。接着看到队友在讨论I，突然觉得是个找规律题，于是我花了2min敲了个暴力，发现输出 $6\times 2^{n-3}$ 就好了，然后在49min的时候过了I。</p>
<p>接下来的C一直WA，WA了三发之后发现读错题了。。原来项链是个环状的结构。。然后改了之后也一直WA。</p>
<p>于是我去想有点思路的K。发现只要先容斥一下，把大于等于改成小于，这样就可以枚举lcm，从而枚举gcd了，然后之后就变成选定 $[1,m]$ 内的 $n$ 个数，问gcd=i,lcm=j的方案数了。这个也可以容斥做。</p>
<p>在封榜前大概0.5h开始写，写着写着发现第二个容斥复杂度太大过不去，想了想发现这个容斥可以分开做。</p>
<p>然后再随便想了想第一个容斥，发现用个莫反就可以做了。</p>
<p>于是在封榜前写完，交了一发，发现又T了。</p>
<p>试了一个极限数据，发现大概要用4s。将n的快速幂预处理后，WA了一发，在237min过了K。</p>
<p>接着去推F，搞来搞去完全不知道 $\sum_{i=1}^n \prod_{i\neq j}\frac{1+f_i-f_if_j}{f_i-f_j}$ 有何意义的时候，抬头一看，发现C被队友改了以后过了。。。通过手算F发现，$n=3$ 的答案竟然是 $2$，然后打了个表发现，这个式子竟然与 $f$ 没有关系。。。于是在280min的时候把F也过了。</p>
<p>封榜结束后的40min连过3题，直接让我们队从铁牌区飞到了金牌区。。。</p>
<p>23个Au，5题末尾，排在第22，倒数第二个Au。</p>
<p>颁奖Ag的时候看到没有我们，还是挺激动的哈哈哈。</p>
<p>这题出的太奇怪了。尤其是F这种逆推回去然后出成题的。。。还有0.5s时限的C，都不知在卡些什么。所以说总体体验一般。</p>
<p>Anyway，大学的第一场XCPC就还算圆满啦。</p>
<p>下星期的威海加油~</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Math-Ball"><a href="#A-Math-Ball" class="headerlink" title="A. Math Ball"></a>A. Math Ball</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个多项式 $F_j(x)=\sum_{i=0}i^{c_j}x_i$。</p>
<p>求 $\prod_{j=1}^n F_j(x)$ 的前 $W$ 项系数和。</p>
<p>$W\le 10^{18},n,\sum c_j\le 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>对于幂次比较小的，可以考虑将幂用第二类斯特林数展开转成下降幂：</p>
<p>$i^c=\sum_{j=1}^c\begin{Bmatrix}<br>c\\<br>j<br>\end{Bmatrix}i^{\underline{j}}$，</p>
<p>那么有：</p>
<p>$$F_j(x)=\sum_{i=0}\sum_{j=1}^{c}\begin{Bmatrix}<br>c\\<br>j<br>\end{Bmatrix}j!\binom{i}{j}x^i=\sum_{j=1}^c\begin{Bmatrix}<br>c\\<br>j<br>\end{Bmatrix}j!\sum_{i=0}\binom{i}{j}x^i\=\sum_{j=1}^c\begin{Bmatrix}<br>c\\<br>j<br>\end{Bmatrix}j!\frac{(1-x)^{c-j}x^j}{(1-x)^{c+1}}$$</p>
<p>答案就是 $[x^W]\frac{\prod_{k=1}^n(\sum_{j=1}^{c_k}S_2(c_k,j)j!(1-x)^{c_k-j}x^j)}{(1-x)^{\sum (c_k+1)}+1}$</p>
<p>对于分子中连乘的每一项，是一个 $c_k$ 次多项式，将 $(1-x)^{c_k-j}$ 通过二项式定理暴力展开，并预处理一行第二类斯特林数后，使用一次卷积即可算出。</p>
<p>设分子为 $F(x)$，$s=\sum_{k=1}^n(c_k+1)$。</p>
<p>则答案为 ：$[x^W]\frac{F}{(1-x)^{s+1}}$，根据 $\frac{1}{(1-x)^{s+1}}$ 的组合意义，答案相当于 $F$ 的某个系数乘上组合数之和。</p>
<p>将组合数转成下降幂除以一个阶乘的形式计算即可。</p>
<p>时间复杂度 $O(n\log ^2n)$。</p>
<h3 id="C-Necklace"><a href="#C-Necklace" class="headerlink" title="C. Necklace"></a>C. Necklace</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一个长度为 $n$ 的环形的项链，上面有 $m$ 个特殊点，现在用 $m$ 段区间恰好覆盖这个项链，使得每个区间中有且只有一个项链。问这些区间的长度的最大值最小是多少。</p>
<p>$m\le 10^6,n\le 10^{18}$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>显然二分，重点在判断上。</p>
<p>找到长度最小的那个区间的右端点，考虑转一圈后是否可行，如果是无法覆盖到最后一个，那么一定不行；如果是无法覆盖整个 $n$，那么将起点改为由此时到达最右的端点+1开始，再转一圈，如果此时不行，那么就一定不行。</p>
<p>时间复杂度 $O(m\log n)$。</p>
<h3 id="F-Cactus"><a href="#F-Cactus" class="headerlink" title="F. Cactus"></a>F. Cactus</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>设 $f_n$ 表示总点数为 $n$ 的，允许重边的，有标号的连通仙人掌的个数。</p>
<p>求 $\sum_{i=1}^n \prod_{i\neq j}\frac{1+f_i-f_if_j}{f_i-f_j}$ 对 $998244353$ 取模后的结果。</p>
<p>$n\le 3\times 10^5$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>这玩意儿竟然跟 $f_i$ 无关。。。</p>
<p>答案即为 $fib_n$。</p>
<p>关于证明，它鸽了。</p>
<h3 id="G-Slope"><a href="#G-Slope" class="headerlink" title="G. Slope"></a>G. Slope</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个点 $(x_i,y_i)$，横坐标互不相同。</p>
<p>$m$ 次询问一个二维平面中平行于坐标轴的矩形，问在矩形内的点中 $\frac{|x_i-x_j|}{|y_i-y_j|}$ 的最小值。</p>
<p>$n\le 7000,m\le 7\times 10^5$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>其实这题并不难啊。。</p>
<p>只考虑横坐标，那么就是一个简单的莫队。</p>
<p>再考虑纵坐标，最小值只有可能在相邻的纵坐标中取得，那么用线段树维护最小值，合并的时候记录临界的点即可。</p>
<p>莫队分块大小取 $\frac{n^2}{m}$，时间复杂度 $O(n\sqrt{m}\log n)$。</p>
<h3 id="H-Three-Integers"><a href="#H-Three-Integers" class="headerlink" title="H. Three Integers"></a>H. Three Integers</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给定 $a,b,c$，求出一组 $x,y,z$，满足 $x\bmod y=a,y\bmod z=b,z\bmod x=c$，或判定无解。</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>不妨设 $a\geq b\geq c$。</p>
<p>当 $abc\neq 0$ 时，若 $a=b=c$ 则无解，否则， $(x,y,z)=(a,a+c+b,a+c)$ 为一组可行解。</p>
<p>当 $abc=0$ 时，若 $a=b=c=0$，则 $(1,1,1)$ 为一组解；若 $b=c=0$，则 $(a,2a,2a)$ 为一组解；若 $c=0$，则 $(a,2a+b,2a)$ 为一组解。</p>
<p>时间复杂度 $O(1)$。</p>
<h3 id="I-Pudding-Store"><a href="#I-Pudding-Store" class="headerlink" title="I. Pudding Store"></a>I. Pudding Store</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>多次询问有多少个长度为 $n$ 的排列的前缀和的两倍均为为 $i$ 的倍数。</p>
<p>$n\le 10^9$。</p>
<h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>打表可知，当 $n\le 2$ 时答案为 $n$，否则为 $6\times 2^{n-3}$ 。</p>
<h3 id="K-Magus-Night"><a href="#K-Magus-Night" class="headerlink" title="K. Magus Night"></a>K. Magus Night</h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>问所有长度为 $n$ 的数组 $a$ 的 $\prod_{i=1}^n a_i$ 的和，满足 $1\le a_i \le m$ 且 $a_i$ 为整数，$\gcd(a_1,a_2,\cdots,a_n)\le q$，且 $\text{lcm}(a_1,a_2,\cdots,a_n)\geq p$。</p>
<p>$1\le n \le 10^9,1\le p,q\le m\le 2\times 10^5$。</p>
<h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><p>$\text{lcm}$ 一定为 $\gcd$ 的倍数。因此，我们可以枚举 $\text{lcm}$ 后，枚举其因数作为 $\gcd$。</p>
<p>但是题目里是 $\text{lcm}(a_1,a_2,\cdots,a_n)\geq p$，不好枚举，于是容斥一下，撇开 $\text{lcm}$ 的限制后，统计出 $\gcd(a_1,a_2,\cdots,a_n)\le q$ 的答案，那么就可以转换为枚举一个较小的 $\text{lcm}$ 了。</p>
<p>枚举lcm,gcd是 $O(m\log m)$ 的，然后根据乘法分配律，分开质因子去统计答案。对于每个质因子的答案，也可以容斥去做。</p>
<p>需要预处理某些数的 $n$ 次幂。</p>
<p>第一个容斥中，统计 $\gcd(a_1,a_2,\cdots,a_n)\le q$ 的答案使用简单莫反即可。</p>
<p>时间复杂度应该是两个 log 的。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>分治</tag>
        <tag>容斥原理</tag>
        <tag>生成函数</tag>
        <tag>FFT</tag>
        <tag>组合数学</tag>
        <tag>找规律</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 Jiangxi Provincial Collegiate Programming Contest</title>
    <url>/2021/11/11/2021-Jiangxi-Provincial-Collegiate-Programming-Contest/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/103366/problems">题目链接</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="A-Mio-visits-ACGN-Exhibition"><a href="#A-Mio-visits-ACGN-Exhibition" class="headerlink" title="A. Mio visits ACGN Exhibition"></a>A. Mio visits ACGN Exhibition</h3><p>设 $f_{i,j,k}$ 表示到达 $(i,j)$ 时用了 $k$ 个 $0$ 的方案数，最终将结果就是 $\sum_i f_{n,m,i}$。</p>
<p>滚动数组优化空间即可。</p>
<p>时间复杂度 $O(n^3)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y;<span class="keyword">return</span> x&gt;=mod?x-mod:x;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">503</span>;</span><br><span class="line"><span class="type">int</span> n,m,p,q;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line">ll f[<span class="number">2</span>][N][N+N];</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); p=<span class="built_in">read</span>(); q=n+m<span class="number">-1</span>-<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">			a[i][j]=<span class="built_in">read</span>();</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	d=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		d=<span class="number">1</span>-d;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m) <span class="built_in">fo</span>(k,<span class="number">0</span>,n+m) f[d][j][k]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m) <span class="built_in">fo</span>(k,<span class="number">0</span>,n+m) f[d][j][k+(!a[i][j])]=<span class="built_in">Add</span>(f[d][j<span class="number">-1</span>][k],f[<span class="number">1</span>-d][j][k]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,p,q) ans=<span class="built_in">Add</span>(ans,f[d][m][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B-Continued-Fraction"><a href="#B-Continued-Fraction" class="headerlink" title="B. Continued Fraction"></a>B. Continued Fraction</h3><p>直接模拟欧几里得过程即可。</p>
<p>写到一半才看到 $\gcd(x,y)=1$ 的条件。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>();</span><br><span class="line">		vec.<span class="built_in">clear</span>(); vec.<span class="built_in">pb</span>(x/y);</span><br><span class="line">		x%=y; <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="keyword">for</span>(;y;)</span><br><span class="line">		&#123;</span><br><span class="line">			vec.<span class="built_in">pb</span>(x/y);</span><br><span class="line">			x%=y;</span><br><span class="line">			<span class="built_in">swap</span>(x,y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,vec.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v:vec) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Crystal-Caves"><a href="#C-Crystal-Caves" class="headerlink" title="C. Crystal Caves"></a>C. Crystal Caves</h3><p>有一个重要的性质：每一层只会选择它的两个端点中的一个。</p>
<p>从后往前进行DP，设 $f_{i,j}$ 表示考虑到第 $i$ 层时，$[i,n]$ 层中有 $j$ 个用了左边时，第 $i\sim n$ 层对答案的贡献的最小值。</p>
<p>那么只需要算第 $i$ 层的贡献即可。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h3 id="D-Character-Distance"><a href="#D-Character-Distance" class="headerlink" title="D. Character Distance"></a>D. Character Distance</h3><p><del>构造题好麻烦。。。</del></p>
<p>首先特判掉存在只出现一次的数，这时候只需要排序后输出就好了。</p>
<p>显然最优的方案只有可能是选出一种数，然后剩下的排序。</p>
<p>假设选择了 $x$，那么就会有两种情况：</p>
<ol>
<li><p>从 $x$ 的开头 $i$ 开始选，后面的数足够多，能选上，也就是 $i+(num-1)\times d\le n$。</p>
</li>
<li><p>不满足第一种的条件时，只能让 $x$ 的开头往后延。</p>
</li>
</ol>
<p>对于两种情况，我们贪心的从后面开始选，显然开头的位置是越大越好的。</p>
<p>对两种方法，取字典序最小的就可以了。</p>
<h3 id="E-The-Legend-of-God-Flukehn-in-Eastern"><a href="#E-The-Legend-of-God-Flukehn-in-Eastern" class="headerlink" title="E. The Legend of God Flukehn in Eastern"></a>E. The Legend of God Flukehn in Eastern</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>在一二维平面上 $n$ 个卒子，每次你能且仅能选择一个往下走一步。</p>
<p>将军初始在 $(0,0)$ 上，每次必须选择上左下右，上左，上右六个方向中的一个走一格。</p>
<p>任意时刻将军与卒子在同一格，则卒子被吃掉。你和将军轮流走，你先走。</p>
<p>问走最优策略时，将军最多能吃多少个卒子。</p>
<p>$n\le 10^6$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>大毒瘤题。</p>
<p>三人用了差不多1h分析性质：</p>
<ol>
<li>设卒子相对于将军形成的向量为 $(x,y)$，则当且仅当 $y&lt;|x|$ 时卒子能走掉。</li>
</ol>
<p>证明：显然。</p>
<ol start="2">
<li>最多只能保留一个卒子。</li>
</ol>
<p>证明：当只剩下两个卒子时，先走到其中一个卒子的列中，如果此时该卒子在将军上方，那么能吃掉其中一个，否则一直追着这个卒子，直到第二个卒子满足性质1的条件为止。</p>
<ol start="3">
<li>如果能吃完所有卒子，那么一定是按 $y$ 从小到大的顺序吃的。</li>
</ol>
<p>证明：显然。</p>
<ol start="4">
<li>对于某个时刻，如果有任何一个卒子满足性质一，那么它就能走掉。</li>
</ol>
<p>证明：显然。</p>
<ol start="5">
<li>对于两个卒子 $i,j$ （不妨设 $y_i\le y_j$），若存在某个时刻使得 $y_j-y_i&lt;|x_j-x_i|$，且 $|x_j-x_i|&gt;1$，那么其中一个可以走掉。</li>
</ol>
<p>证明：根据性质3，将军要先去吃 $y$ 比较小的卒子，再它吃掉这个卒子后，另外一个卒子一定满足性质 $1$。</p>
<ol start="6">
<li>对于两个卒子 $i,j$ （不妨设 $y_i\le y_j$），若在初始时刻使得 $y_j-y_i-y_i&lt;|x_j-x_i|$，且 $|x_j-x_i|&gt;1$，那么其中一个可以走掉。</li>
</ol>
<p>根据性质5，任何两个 $|x_j-x_i|&gt;1$ 的卒子，如果想要保住卒子 $j$，那么就需要在将军吃掉 $i$ 之前，$j$ 一直往下，直到 $i,j$ 满足性质5为止。而将军吃掉卒子 $i$ <strong>大概</strong>需要花费 $y_i$ 步，也就是 $j$ 能走 $y_i$ 步向下。（这里的大概是因为需要下方的点不满足性质7才可以）</p>
<ol start="7">
<li>对于两个卒子 $i,j$ 满足 $|x_j-x_i|=1$ ， $y_j-y_i-y_i\le 0$ 且存在第三者 $k$ 使得 $x_i\neq x_k,x_j\neq x_k$，且 $y_k\geq y_i$， 那么这三个的其中一个可以走掉。</li>
</ol>
<p>如果没有第三者，这两个卒子一定走不掉，因为可以先吃完 $k$ 再去吃 $i,j$（这里 $k,i$ 或 $k,j$ 均不满足性质6，否则可以溜掉）。否则显然可以走掉。</p>
<p>综上，根据如上性质，我们只需要判断：</p>
<ol>
<li><p>是否存在一个卒子 $i$，使得 $y_i&lt;|x_i|$。</p>
</li>
<li><p>是否存在两个卒子 $i,j$，使得 $y_i\le y_j,y_j-2y_i &lt; |x_j-x_i|,1 &lt; |x_j-x_i|$。</p>
</li>
<li><p>是否存在三个卒子 $i,j,k$，使得 $y_i\le y_j,y_i\le y_k,y_j-2y_i &lt; 1 = |x_j-x_i|,x_i\neq x_k,x_j\neq x_k$。</p>
</li>
</ol>
<p>代码过于丑陋就不放了。。。</p>
<h3 id="F-Four-Column-Hanoi-Tower"><a href="#F-Four-Column-Hanoi-Tower" class="headerlink" title="F. Four Column Hanoi Tower"></a>F. Four Column Hanoi Tower</h3><p>设 $f_i$ 表示4座塔的答案，$g_i$ 表示3座塔的答案。</p>
<p>那么就有：$f_i=\min(2f_k+g_{n-k}),f_1=1$ 以及 $g_i=2g_{i-1}+1,g_1=1$。</p>
<p>然后打个表，发现前几项为 $1,3,5,9,13,17,25,33,41,49,\cdots$。一阶差分为 $2,2,4,4,4,8,8,8,8,\cdots$。</p>
<p>直接上 Python 即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">now = cnt = <span class="number">2</span></span><br><span class="line">las = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10001</span>):</span><br><span class="line">	las = las+<span class="number">1</span></span><br><span class="line">	a.append(a[-<span class="number">1</span>]+now)</span><br><span class="line">	<span class="keyword">if</span> las == cnt:</span><br><span class="line">		cnt = cnt+<span class="number">1</span></span><br><span class="line">		las = <span class="number">0</span></span><br><span class="line">		now = now+now</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">	<span class="built_in">print</span>(a[<span class="built_in">int</span>(<span class="built_in">input</span>())])</span><br></pre></td></tr></table></figure>

<h3 id="G-Magic-Number-Group"><a href="#G-Magic-Number-Group" class="headerlink" title="G. Magic Number Group"></a>G. Magic Number Group</h3><p>对每个数分解质因数后，剩下的是区间众数。每个位置最多挂上 $7$ 个数。</p>
<p>直接使用莫队即可。时间复杂度 $O(7n\sqrt{n})$。</p>
<p>有点小卡常。</p>
<h3 id="H-Hearthstone-So-Easy"><a href="#H-Hearthstone-So-Easy" class="headerlink" title="H. Hearthstone So Easy"></a>H. Hearthstone So Easy</h3><p>只有三种情况：</p>
<ol>
<li>$n=1$，A直接死了。</li>
<li>A能在第一次干剩B到最多一滴血，A赢。</li>
<li>否则B赢。</li>
</ol>
<h3 id="I-Homework"><a href="#I-Homework" class="headerlink" title="I. Homework"></a>I. Homework</h3><p>换根DP即可。</p>
<h3 id="J-LRU"><a href="#J-LRU" class="headerlink" title="J. LRU"></a>J. LRU</h3><p>显然满足二分性，于是二分后，然后随便判断。可以做到 $O(n\log n)$。</p>
<h3 id="K-Many-Littles-Make-a-Mickle"><a href="#K-Many-Littles-Make-a-Mickle" class="headerlink" title="K. Many Littles Make a Mickle"></a>K. Many Littles Make a Mickle</h3><p>输出 $m\sum_{i=1}^ni^2$。</p>
<h3 id="L-It-Rains-Again"><a href="#L-It-Rains-Again" class="headerlink" title="L. It Rains Again"></a>L. It Rains Again</h3><p>线段投影到 $x$ 轴，然后随便做。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>数学</tag>
        <tag>思维题</tag>
        <tag>二分</tag>
        <tag>找规律</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>代数余子式的求法</title>
    <url>/2021/11/05/%E4%BB%A3%E6%95%B0%E4%BD%99%E5%AD%90%E5%BC%8F%E7%9A%84%E6%B1%82%E6%B3%95/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个 $n$ 阶方阵 $A$:</p>
<p>$A=\begin{bmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\<br>a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n}\\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>a_{n,1} &amp; a_{n,2} &amp; \cdots &amp; a_{n,n}<br>\end{bmatrix}$</p>
<p>记 $M_{i,j}$ 为矩阵 $A$ 去掉第 $i$ 行和第 $j$ 列后的矩阵或其行列式，$A_{i,j}=(-1)^{i+j}M_{i,j}$，即代数余子式。</p>
<p>求所有的代数余子式 $A_{i,j}$。</p>
<p>$n\le 500$。</p>
<span id="more"></span>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>记 $r(A)$ 表示矩阵 $A$ 的秩。</p>
<h3 id="一些思路"><a href="#一些思路" class="headerlink" title="一些思路"></a>一些思路</h3><p><del>一个显然的做法，暴力计算每个代数余子式，时间复杂度 $O(n^5)$。</del></p>
<p>考虑线性代数里的知识：若 $r(A)=n$，则有 $A ^ {-1} = \frac { A^* }{|A|} $，其中： $A^*=\begin{bmatrix}<br>A_{1,1} &amp; A_{2,1} &amp; \cdots &amp; A_{n,1} \\<br>A_{1,2} &amp; A_{2,2} &amp; \cdots &amp; A_{n,2}\\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>A_{1,n} &amp; A_{2,n} &amp; \cdots &amp; A_{n,n}<br>\end{bmatrix}$ ，即 $A$ 的伴随矩阵。</p>
<p>那么当矩阵行列式不为 $0$ 时，通过一次求逆和求行列式即可求出所有的代数余子式。</p>
<p>若 $r(A)\neq n$ 呢？</p>
<p>如果 $r(A)\le n-2$，则说明，任何一个 $n-1$ 阶余子式均为 $0$，于是 $A^*$ 为 $0$ 矩阵。</p>
<p>因此，剩下的只需考虑 $r(A)=n-1$ 时的情况。</p>
<h3 id="r-A-n-1-时"><a href="#r-A-n-1-时" class="headerlink" title="$r(A)=n-1$ 时"></a>$r(A)=n-1$ 时</h3><p>因 $A$ 不为满秩矩阵，因此行向量是线性相关的。</p>
<p>即对于向量 $v_i=(a_{i,1},a_{i,2},\cdots,a_{i,n})$，存在不全为 $0$ 的数 $p_i$ ，使得 $\sum_{i=1}^mp_iv_i=0$。找到一个不为 $0$ 的 $p_r$。</p>
<p>考虑矩阵：$M_{i,c}$ 和 $M_{r,c}$。其中 $i&lt;r$。</p>
<p>我们将 $M_{i,c}$ 中第 $r-1$ 行插到第 $i-1$ 行的后面去后的矩阵称为 $M ‘ <em>{i,c}$，那么 $|M ‘ _{i,c}|=(-1)^{r-i-1}|M</em>{i,c}|$。</p>
<p>显然，这个 $M’_ {i,c }$ 与 $M_{r,c}$ 只有在第 $i$ 行上是不同的。</p>
<p>设矩阵 $M’$ 为 $M ‘ <em>{i,c}$ 和 $M</em>{r,c}$ 的矩阵中第 $i$ 行的数分别乘上 $p_r$ 或 $p_i$ 相加后，其他行不变的结果。</p>
<p>由行列式性质：$|M ‘ |=p_r(-1)^{r-i-1}|M_{i,c}|+p_i|M_{r,c}|$。</p>
<p>将 $M’$ 中其他行 $j$ 乘上 $p_j$ 后，加到第 $i$ 行中去，则根据 $\sum p_iv_i=0$，第 $i$ 行的结果全为 $0$。因此，$|M’|=0$。</p>
<p>因此：$p_r(-1)^{r-i}|M_{i,c}|=p_i|M_{r,c}|$。</p>
<p>化简可得：$(-1)^{i+c}|M_{i,c}|=\frac{p_i}{p_r}(-1)^{r+c}|M_{r,c}|$。</p>
<p>即：$A_{i,c}=\frac{p_i}{p_r}A_{r,c}$。</p>
<p>当 $i&gt;r$ 时，同理可得上述结果。</p>
<p>当为列向量时，设 $\sum q_{i}v_i=0$。那么同理有：$A_{r,j}=\frac{q_j}{q_c}A_{r,c}$。</p>
<p>在第一个式子中取 $c=j$，联立两式可得：$A_{i,j}=\frac{p_iq_j}{p_rq_c} A_{r,c}$。</p>
<p>于是，只需求出 $p,q$ 和一个 $A_{r,c}$ ，即可求出所有的代数余子式了。</p>
<p>求 $p,q$ 相当于求解齐次线性方程组，$A_{r,c}$ 相当于求一代数余子式。时间复杂度均为 $O(n^3)$。</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">502</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	ll a[N][N];</span><br><span class="line">	<span class="built_in">matrix</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> Mat&#123;</span><br><span class="line">	<span class="type">static</span> ll a[N][N],b[N][N+N],c[N][N],d[N][N];</span><br><span class="line">	<span class="type">static</span> matrix B,C;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">det</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		ll d=<span class="number">1</span>,iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=i;</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(a[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) &#123;<span class="built_in">fo</span>(j,i,n) <span class="built_in">swap</span>(a[k][j],a[i][j]); d=(mod-d)%mod;&#125;</span><br><span class="line">			<span class="keyword">if</span>(!a[i][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			iv=<span class="built_in">Pow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=a[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n) a[j][k]=<span class="built_in">Dec</span>(a[j][k],a[i][k]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">			d=d*a[i][i]%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> matrix <span class="title">inv</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) b[i][j+n]=<span class="number">0</span>,b[i][j]=A.a[i][j];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i][i+n]=<span class="number">1</span>;</span><br><span class="line">		ll iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=n+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n) <span class="keyword">if</span>(b[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) <span class="built_in">fo</span>(j,<span class="number">1</span>,n+n) <span class="built_in">swap</span>(b[i][j],b[k][j]);</span><br><span class="line">			iv=<span class="built_in">Pow</span>(b[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=b[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n+n) b[j][k]=<span class="built_in">Dec</span>(b[j][k],b[i][k]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			iv=<span class="built_in">Pow</span>(b[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n+n) b[i][j]=b[i][j]*iv%mod;</span><br><span class="line">			<span class="built_in">fd</span>(j,i<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">if</span>(b[j][i])</span><br><span class="line">				&#123;</span><br><span class="line">					tmp=b[j][i];</span><br><span class="line">					<span class="built_in">fo</span>(k,i,n+n) b[j][k]=<span class="built_in">Dec</span>(b[j][k],b[i][k]*tmp%mod);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		B.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) B.a[i][j]=b[i][j+n];</span><br><span class="line">		<span class="keyword">return</span> B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">r</span><span class="params">(<span class="type">const</span> matrix A,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		<span class="type">int</span> d=<span class="number">0</span>;</span><br><span class="line">		ll iv,tmp;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=n+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,i,n) <span class="keyword">if</span>(a[j][i]) &#123;k=j; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(k==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			d++;</span><br><span class="line">			<span class="keyword">if</span>(k!=i) <span class="built_in">fo</span>(j,i,n) <span class="built_in">swap</span>(a[i][j],a[k][j]);</span><br><span class="line">			iv=<span class="built_in">Pow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp=a[j][i]*iv%mod;</span><br><span class="line">				<span class="built_in">fo</span>(k,i,n) a[j][k]=<span class="built_in">Dec</span>(a[j][k],tmp*a[i][k]%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">static</span> ll v[N],w[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ins</span><span class="params">(ll *v,<span class="type">int</span> n,<span class="type">int</span> id,ll *ans)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) w[i]=<span class="number">0</span>;</span><br><span class="line">		w[id]=<span class="number">1</span>;</span><br><span class="line">		ll tmp;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">if</span>(v[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(!c[i][i])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">fd</span>(j,i,<span class="number">1</span>) c[i][j]=v[j];</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">1</span>,n) d[i][j]=w[j];</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				tmp=<span class="built_in">Pow</span>(c[i][i],mod<span class="number">-2</span>)*v[i]%mod;</span><br><span class="line">				<span class="built_in">fd</span>(j,i,<span class="number">1</span>) v[j]=<span class="built_in">Dec</span>(v[j],c[i][j]*tmp%mod);</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">1</span>,n) w[j]=<span class="built_in">Dec</span>(w[j],d[i][j]*tmp%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans[i]=w[i];</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_G</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n,ll *p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=A.a[i][j];</span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c)); <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,n) v[j]=a[j][i];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ins</span>(v,n,i,p)) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> matrix <span class="title">solve</span><span class="params">(<span class="type">const</span> matrix &amp;A,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> rank=<span class="built_in">r</span>(A,n);</span><br><span class="line">		<span class="keyword">if</span>(rank == n)</span><br><span class="line">		&#123;</span><br><span class="line">			ll d=<span class="built_in">det</span>(A,n);</span><br><span class="line">			B=<span class="built_in">inv</span>(A,n);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) C.a[i][j]=B.a[j][i]*d%mod;</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(rank &lt;= n<span class="number">-2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			C.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">static</span> ll p[N],q[N];</span><br><span class="line">			<span class="built_in">get_G</span>(A,n,q);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) B.a[j][i]=A.a[i][j];</span><br><span class="line">			<span class="built_in">get_G</span>(B,n,p);</span><br><span class="line">			<span class="type">int</span> c=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(q[i]) &#123;c=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(p[i]) &#123;r=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(i!=r)</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">						<span class="keyword">if</span>(j!=c)</span><br><span class="line">							B.a[i-(i&gt;r)][j-(j&gt;c)]=A.a[i][j];</span><br><span class="line">			ll d=<span class="built_in">det</span>(B,n<span class="number">-1</span>);</span><br><span class="line">			C.a[r][c]=((r+c)%<span class="number">2</span>==<span class="number">1</span>)?(mod-d)%mod:d;</span><br><span class="line">			ll iv=<span class="built_in">Pow</span>(q[c]*p[r]%mod,mod<span class="number">-2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">					C.a[i][j]=C.a[r][c]*iv%mod*p[i]%mod*q[j]%mod;</span><br><span class="line">			<span class="keyword">return</span> C;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Mat::solve;</span><br><span class="line"></span><br><span class="line">matrix A,B;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) A.a[i][j]=<span class="built_in">read</span>();</span><br><span class="line">		B=<span class="built_in">solve</span>(A,n);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,((i+j)%<span class="number">2</span>==<span class="number">1</span>)?(mod-B.a[i][j])%mod:B.a[i][j]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>行列式</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 ICPC Shanghai Site</title>
    <url>/2021/10/27/2020-ICPC-Shanghai-Site/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/102900/problems">题目链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="B-Mine-Sweeper-II"><a href="#B-Mine-Sweeper-II" class="headerlink" title="B. Mine Sweeper II"></a>B. Mine Sweeper II</h3><p>$\frac{nm}{2}$ 这个限制启发我们，如果将原图所有的点的情况反转，那么可以发现总和是一样的。</p>
<p>那么就可以了。</p>
<h3 id="C-Sum-of-Log"><a href="#C-Sum-of-Log" class="headerlink" title="C. Sum of Log"></a>C. Sum of Log</h3><p>考虑数位DP，设 $f_{i,j_1,j_2,k}$ 表示考虑到第 $i$ 位，第一，二个数是否打破限制，前面是否都还为 $0$ 的总和。</p>
<p>时间复杂度 $O(T\log n)$。</p>
<h3 id="D-Walker"><a href="#D-Walker" class="headerlink" title="D. Walker"></a>D. Walker</h3><p>二分，算出左，右两边的人在 $mid$ 时间内最远能到哪个位置。</p>
<p>注意，当两个人位置一样的时候，你不知道哪个人在左边，所以需要两边都算。（否则会得到一发罚时）</p>
<h3 id="E-The-Journey-of-Geor-Autumn"><a href="#E-The-Journey-of-Geor-Autumn" class="headerlink" title="E. The Journey of Geor Autumn"></a>E. The Journey of Geor Autumn</h3><p>要使得 $a_i&gt;\min(a_{i-k},a_{i-k+1},\cdots,a_{i-1})$，最难处理的是 $1$。</p>
<p>显然，$1$ 要放在前 $k$ 个位置中的一个，假设为 $i$，那么变成 $n-i$ 的一个子问题。</p>
<p>设总方案数为 $f_n$，有DP式：$f_n=\sum_{i=1}^{\min(n,k)}\frac{n-1}{i-1}\times (i-1)!\times f_{n-i}$</p>
<p>化简后，前缀和优化即可。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="G-Fibonacci"><a href="#G-Fibonacci" class="headerlink" title="G. Fibonacci"></a>G. Fibonacci</h3><p>除了前两个，以后都是奇偶相间。签到题。</p>
<h3 id="H-Rice-Arrangement"><a href="#H-Rice-Arrangement" class="headerlink" title="H. Rice Arrangement"></a>H. Rice Arrangement</h3><p>显然第 $i$ 个人一定对应着第 $(i+j)\bmod m$ 个菜。</p>
<p>暴力枚举 $j$，设往左转了 $x$ 个，那么往右转的度数 $y$ 也能算出来，用 $x+y+\min(x,y)$ 对答案去最小值。</p>
<p>排序即可。</p>
<p>时间复杂度 $O(m^2\log m)$。</p>
<h3 id="I-Sky-Garden"><a href="#I-Sky-Garden" class="headerlink" title="I. Sky Garden"></a>I. Sky Garden</h3><p>这题花的时间有点多，需要静下时间来写写式子才行。</p>
<p>主要看圆上两个点 $(\cos\frac{2\pi i}{2m},\sin\frac{2\pi i}{2m})$ 和 $(\cos\frac{2\pi j}{2m},\sin\frac{2\pi j}{2m})$ 间的弦长与 $2$ 谁大。</p>
<p>算出来之后，理论上就可以 $O(1)$ 计算了。</p>
<h3 id="K-Traveling-Merchant"><a href="#K-Traveling-Merchant" class="headerlink" title="K. Traveling Merchant"></a>K. Traveling Merchant</h3><p>如果找到一条颜色相间的<strong>简单</strong>路径，再找到一条边，使得该边的端点为该路径终点和路径上的一条边，那么就一直走这个环，就找到答案了。</p>
<p>将同色边拿出来，将异色边建出一个图。</p>
<p>每次询问一个同色边 $(u,v)$，问异色图中是否存在依次经过 $0,u,v$ 或 $9,v,u$ 的简单路径。</p>
<p>建出异色图的 dfs 树。</p>
<p>分三种情况：</p>
<ol>
<li><p>$u=0$ 或 $v=0$，则两点在异色图中连通即可。</p>
</li>
<li><p>$\text{lca}(u,v)=u$ 或 $v$，那么与 $0$ 连通即可。</p>
</li>
<li><p>当不满足上述情况时，设 $w=\text{lca}(u,v)$，我们要不经过 $w$ ，到达其中一个点（不妨为 $u$），然后从这个点回去 $w$，再去走到另外一个点 $v$。</p>
</li>
</ol>
<p>这相当于从 $fa_w$ 到 $u$ 有两条点不重复的路径，即在同一个点双上。</p>
<p>时间复杂度 $O(n\log n)$，主要在lca上。</p>
<p><del>过了之后发现自己写的是边双。。。这都能过</del></p>
<h3 id="L-Traveling-in-the-Grid-World"><a href="#L-Traveling-in-the-Grid-World" class="headerlink" title="L. Traveling in the Grid World"></a>L. Traveling in the Grid World</h3><p>首先，一个非常显然的结论是，最多只可能选择一个中转点。</p>
<p>当 $\gcd(n,m)=1$ 时，不需要选中转点。</p>
<p>否则这个中转点一定在 $y=\frac{m}{n}x$ 附近，且不在上面。</p>
<p>枚举即可。</p>
<h3 id="M-Gitignore"><a href="#M-Gitignore" class="headerlink" title="M. Gitignore"></a>M. Gitignore</h3><p>签到题，用map维护字符串建出树，树形DP即可。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
        <tag>贪心</tag>
        <tag>思维题</tag>
        <tag>二分</tag>
        <tag>双连通分量</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>2021CCPC网络赛-重赛</title>
    <url>/2021/10/21/2021CCPC%E7%BD%91%E7%BB%9C%E8%B5%9B-%E9%87%8D%E8%B5%9B/</url>
    <content><![CDATA[<p>这次CCPC重赛总算打得好一点了。</p>
<p>可惜最后差一题1012没能做出来。</p>
<p>以后无论何时（尤其是WA的时候）还是要仔细分析队友的做法有没有细节上的问题。</p>
<span id="more"></span>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://acm.hdu.edu.cn/contest/problems?cid=1038">比赛链接</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h3><p>直接暴力判断即可。</p>
<p>注意一些边界条件。</p>
<h3 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h3><p>队友写了个Miller-Rabin结果T了。</p>
<p>然后我让他打了个表，发现大于等于 $2$ 后都是 $0$。</p>
<p>赛后发现十分显然，两个相邻奇质数的平均数一定不是质数。</p>
<h3 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h3><p>走一圈之后，$x$ 所加的值是固定的，设为 $s$。</p>
<p>根据 $\text{sgn}(n)$，分三种情况讨论即可。</p>
<h3 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h3><p>直接DP即可，然后乘上后面2的 $a$ 的个数次幂。</p>
<h3 id="1007"><a href="#1007" class="headerlink" title="1007"></a>1007</h3><p>假题。。。</p>
<h3 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h3>]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>最短路</tag>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>The 2020 ICPC Asia Macau Regional Contest</title>
    <url>/2021/10/20/The-2020-ICPC-Asia-Macau-Regional-Contest/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/103119">题目链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-Accelerator"><a href="#A-Accelerator" class="headerlink" title="A.Accelerator"></a>A.Accelerator</h3><p>对于一个长度为 $k$ 的数组，方案数是确定的，为 $k!(n-k)!$。问题转换成对于每个 $k$，从 $n$ 个数里选择 $k$ 个的乘积之和。</p>
<p>显然为 $[x^k]\prod_{i=1}^n(a_ix+1)$。</p>
<p>分治FFT即可。</p>
<p>15min从开始想到写完，速度还行。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">ll W[M];</span><br><span class="line"><span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				w=W[i+k]*a[i+j+k]%mod;</span><br><span class="line">				a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w);</span><br><span class="line">				a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">	w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=a[i]*w%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line"><span class="function">Poly <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		Poly B; B.<span class="built_in">clear</span>();</span><br><span class="line">		B.<span class="built_in">pb</span>(<span class="number">1</span>); B.<span class="built_in">pb</span>(a[l]);</span><br><span class="line">		<span class="keyword">return</span> B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">solve</span>(l,mid)*<span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">ll inv[N],fac[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line">Poly A;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">100000</span>);</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">		A=<span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,A[i]*fac[i]%mod*fac[n-i]%mod);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans*inv[n]%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B-Boring-Problem"><a href="#B-Boring-Problem" class="headerlink" title="B.Boring Problem"></a>B.Boring Problem</h3><p>一个显然的做法是：建出AC自动机以后在上面dp，由于有后效性，需要使用高斯消元，时间复杂度 $O((nm)^3)$，没有办法通过。</p>
<p>考虑使用主元法。设 $dep_u$ 表示节点 $u$ 在Trie中的深度。设 $F(x)=0$ 为节点 $x$ 的一个方程。那么有：</p>
<p>$F(x)=1+\sum_{i=1}^kp_iF(ne_{x,i})$。</p>
<p>对于每个方程，可以发现，有些 $ne_{x,i}$ 的深度是大于 $x$ 的，此时 $ne_{x,i}$ 必为 $x$ 在原 Trie中的儿子。</p>
<p>考虑从上往下bfs，每遇到一个 $x$ 时，$ne_{x,i}$ 的深度小于等于 $x$ 的点的方程已经知道了。记 $ne_{x,i}$ 深度大于 $x$ 的个数为 $k$，我们新增 $k-1$ 个未知数，用这 $k-1$ 个未知数和 $F(x)$ 表示出剩下的那一个，这样就刚好有叶子结点个数+1个未知数和方程，就可以解出来了。</p>
<p>时间复杂度 $O(n^3+nm^2k)$。</p>
<h3 id="C-Club-Assignment"><a href="#C-Club-Assignment" class="headerlink" title="C.Club Assignment"></a>C.Club Assignment</h3><p>建出Trie，在Trie上dfs，看什么时候能取到答案。</p>
<p>设 $siz_i$ 表示节点 $i$ 的子树中有多少个数，$dep_i$ 表示$i$ 子树的高度。如果 $siz_{i}\geq 3$，则说明这里面当中一定有两个数在一个集合里，则说明答案至多为 $2^{dep-1}-1$。</p>
<p>于是，如果两个儿子的其中一个的 $siz\geq 3$，那么答案一定在子树内出现，而不用考虑当前子树。</p>
<p>剩下的就是两个子树的 $siz\le 2$，总个数不超过 $4$ 个，暴力枚举集合即可。</p>
<h3 id="D-Artifacts"><a href="#D-Artifacts" class="headerlink" title="D.Artifacts"></a>D.Artifacts</h3><p>简单模拟。</p>
<h3 id="E-Mountain"><a href="#E-Mountain" class="headerlink" title="E.Mountain"></a>E.Mountain</h3><p>大毒瘤计算几何+DP。</p>
<p>或许是自己的实现太拉胯了。。。</p>
<p>对于 $[i,i+1]$ 部分，能覆盖这一段的只有在 $[i-w+1,i+w]$ 区间当中的点。</p>
<p>设 $f_{i,j,s}$ 表示考虑到前 $i$ 点，选了 $j$ 个，前 $2w$ 个点（包括自己）选择的情况为 $s$，只统计到 $[i-w,i-w+1]$ 段的最大值。</p>
<p>那么转移就是枚举上一种的情况，枚举第 $i$ 个点的选择情况，然后得到新的状态 $s_1$，统计出在 $s_1$ 状态下，$[i-w,i-w+1]$ 有多少被覆盖到，设为 $g_{i-w,s_1}$，然后转移就比较简单了。</p>
<p>很容易出错的是这个 $g_{i,j}$ 的计算。训练时没有考虑到覆盖部分并不是一个连续的段，而有可能会分成若干段。那么对于每个选择的点，会有一个覆盖区间，将这些区间的左右端点排序后，扫描线维护一下这个括号序列，然后对于一段覆盖的 $[l,r]$，用基础计算几何知识算出覆盖的面积即可。</p>
<p>时间复杂度 $O(n\times(n+w\log w)\times 2^{2w})$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">205</span>;</span><br><span class="line">db f[N+<span class="number">20</span>][N][(<span class="number">1</span>&lt;&lt;<span class="number">10</span>)+<span class="number">5</span>];</span><br><span class="line">db g[N+<span class="number">20</span>][<span class="number">1</span>&lt;&lt;<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> n,w,h,m,a[N+<span class="number">20</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x&gt;=<span class="number">2</span>*w+<span class="number">1</span>)&amp;&amp;(x&lt;=n+<span class="number">2</span>*w);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&gt;=<span class="number">2</span>*w&amp;&amp;x&lt;=n+<span class="number">2</span>*w;&#125;</span><br><span class="line"><span class="type">int</span> mx,mi;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;<span class="number">0</span>) l=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=mx) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mi)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&lt;=mi)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0.0</span>+r-l;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span>(r&gt;=mx)</span><br><span class="line">				<span class="built_in">return</span> (<span class="number">0.0</span>+mx-l+mi-l)/<span class="number">2.</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				x=(<span class="number">0.0</span>+mx-r)/(<span class="number">0.0</span>+mx-mi);</span><br><span class="line">				<span class="keyword">return</span> (<span class="number">0.0</span>+mx-l+mi-l)/<span class="number">2.</span>-x*(mx-r)/<span class="number">2.</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&gt;=mx)</span><br><span class="line">		&#123;</span><br><span class="line">			x=(<span class="number">0.0</span>+mx-l)/(<span class="number">0.0</span>+mx-mi);</span><br><span class="line">			<span class="keyword">return</span> x*(mx-l)/<span class="number">2.</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			x=(<span class="number">0.0</span>+mx-r)/(mx-mi);</span><br><span class="line">			y=(<span class="number">0.0</span>+mx-l)/(mx-mi);</span><br><span class="line">			<span class="keyword">return</span> (x+y)*(r-l)/<span class="number">2.</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,id;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (A.x!=B.x)?A.x&lt;B.x:A.id&lt;B.id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node st[<span class="number">23</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,now=<span class="number">0</span>;</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>*w,n+<span class="number">2</span>*w)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(s,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			mx=<span class="built_in">max</span>(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line">			mi=<span class="built_in">min</span>(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line">			<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">			top=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">ff</span>(j,<span class="number">0</span>,w&lt;&lt;<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;s)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">check</span>(i+w-j))</span><br><span class="line">					&#123;</span><br><span class="line">						st[++top]=(node)&#123;a[i+w-j]-h,<span class="number">0</span>&#125;;</span><br><span class="line">						st[++top]=(node)&#123;a[i+w-j]+h,<span class="number">1</span>&#125;;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;flag=<span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag||s==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				g[i][s]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">sort</span>(st+<span class="number">1</span>,st+top+<span class="number">1</span>);</span><br><span class="line">			<span class="type">int</span> pre=<span class="number">0</span>;</span><br><span class="line">			now=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">1</span>,top)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(st[k].id==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					now++;</span><br><span class="line">					<span class="keyword">if</span>(now==<span class="number">1</span>) pre=st[k].x;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> now--;</span><br><span class="line">				<span class="keyword">if</span>(!now)</span><br><span class="line">					g[i][s]+=<span class="built_in">calc</span>(pre,st[k].x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> t=(<span class="number">1</span>&lt;&lt;(<span class="number">2</span>*w<span class="number">-1</span>))<span class="number">-1</span>,s1;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n+<span class="number">2</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,m)</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,tot)</span><br><span class="line">				f[i][j][s]=<span class="number">-100000000000.00</span>;</span><br><span class="line">	f[<span class="number">2</span>*w][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>*w+<span class="number">1</span>,n+<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,m)</span><br><span class="line">			<span class="built_in">ff</span>(s,<span class="number">0</span>,tot)</span><br><span class="line">			&#123;</span><br><span class="line">				s1=((s&amp;t)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span>(f[i<span class="number">-1</span>][j][s]&gt;=<span class="number">0</span>)</span><br><span class="line">					f[i][j][s1]=<span class="built_in">max</span>(f[i][j][s1],f[i<span class="number">-1</span>][j][s]+g[i-w][s1]);</span><br><span class="line">				s1++;</span><br><span class="line">				<span class="keyword">if</span>(j&amp;&amp;f[i<span class="number">-1</span>][j<span class="number">-1</span>][s]&gt;=<span class="number">0</span>&amp;&amp;i&lt;=m+(w&lt;&lt;<span class="number">1</span>))</span><br><span class="line">					f[i][j][s1]=<span class="built_in">max</span>(f[i][j][s1],f[i<span class="number">-1</span>][j<span class="number">-1</span>][s]+g[i-w][s1]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%.12lf\n&quot;</span>,f[n+<span class="number">2</span>][i][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); w=<span class="built_in">read</span>(); h=<span class="built_in">read</span>();</span><br><span class="line">	tot=<span class="number">1</span>&lt;&lt;(<span class="number">2</span>*w);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i+<span class="number">2</span>*w]=<span class="built_in">read</span>();</span><br><span class="line">	m=n+<span class="number">4</span>*w;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">solve</span>(m,n,w);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F-Fixing-Networks"><a href="#F-Fixing-Networks" class="headerlink" title="F.Fixing Networks"></a>F.Fixing Networks</h3><p>构造题。</p>
<p>除去特殊情况后，剩下的每次用 $d+1$ 个点形成的完全图去用掉一个颜色。最后剩下 $m=n-(d+1)(c-1)$ 个点，需要每个点的度数为 $d$，且图连通。</p>
<p>那么对于 $d$ 为偶数的情况，每个点 $i$ 向 $(i+j)\bmod m(j\le \frac{d}{2})$ 连边。</p>
<p>$d$ 为奇数也同理，每个点多连一条边即可。</p>
<h3 id="G-Game-on-Sequence"><a href="#G-Game-on-Sequence" class="headerlink" title="G.Game on Sequence"></a>G.Game on Sequence</h3><p>设 $f_i$ 表示从 $i$ 开始是否必胜。</p>
<p>那么对于所有的 $j$ 满足题意，只要有一个 $f_j=0$，那么 $f_i=1$，否则 $f_i=0$。</p>
<p>对于一个 $i,j$，满足 $i&lt;j$ 且 $a_i=a_j$，那么 $f_i$ 必定为 $1$：</p>
<ol>
<li><p>若 $f_j=0$，显然 $f_i=1$。</p>
</li>
<li><p>若 $f_j=1$，那么存在一个 $k$，使得 $j$ 能到 $k$ 且 $f_k=0$，那么这个 $i$ 也能到 $k$，因此 $f_i=1$。</p>
</li>
</ol>
<p>于是设 $las_i$ 表示 $a_j=i$ 的最大的下标 $j$，若 $i\neq las_{a_i}$，那么 $f_i=1$，</p>
<p>否则暴力枚举剩下的情况。</p>
<p>时间复杂度 $O(na\log a)$。</p>
<h3 id="H-Fly-Me-To-The-Moon"><a href="#H-Fly-Me-To-The-Moon" class="headerlink" title="H.Fly Me To The Moon"></a>H.Fly Me To The Moon</h3><p>留坑…</p>
<h3 id="I-Nim-Cheater"><a href="#I-Nim-Cheater" class="headerlink" title="I.Nim Cheater"></a>I.Nim Cheater</h3><p>设 $f_{u,i}$ 表示点 $u$ 的路径中，异或和为 $i$ 的最大值。</p>
<p>方程为 $f_{u,i}=f_{fa_u,i\bigoplus a_u}+val_u$。</p>
<p>为了使空间比较小，可以用如下性质：</p>
<p>重链剖分后，每个点到根节点的路径中，遇到到轻链的个数不超过 $\log_2 n$。</p>
<p>于是，设 $f’_{dep,i}$ 表示当前点到树上路径中，遇到轻链个数为 $dep$ 时的DP值。</p>
<p>类似于树上启发式合并，我们先走轻链，走完后全部清空。然后走重链，走重链时 $dep$ 不更新。</p>
<p>这样就能保证空间复杂度为 $O(n+a\log n)$ 了。</p>
<h3 id="J-Jewel-Grab"><a href="#J-Jewel-Grab" class="headerlink" title="J.Jewel Grab"></a>J.Jewel Grab</h3><p>设 $pre_x$ 表示 $x$ 前第一个颜色相同的下标。</p>
<p>那也就是找到最大的 $r$，使得 $\sum_{i=l}^r [pre_i\geq l]\le k$。</p>
<p>由于 $k\le 10$ 的限制，考虑每次暴力找到最大的下标 $r$ 满足大于等于当前的下标 $now$ 且 $[now,r]$ 间的 $pre$ 均小于 $l$。</p>
<p>线段树二分找到这个 $r$。</p>
<p>然后还需动态维护 $pre$ 数组，以及需要对每个颜色维护最大值，以确定需要跳过哪些数。</p>
<p>时间复杂度 $O(nk\log n)$。</p>
<p>代码巨长。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s[N];</span><br><span class="line"><span class="type">int</span> n,m,pre[N],val[N],col[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="type">int</span> mi[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll sum[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sum[u]=sum[lc]+sum[rc];</span><br><span class="line">	mi[u]=<span class="built_in">max</span>(mi[lc],mi[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		mi[u]=pre[l]; sum[u]=val[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		mi[u]=pre[l]; sum[u]=val[l]; <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(p&lt;=mid) <span class="built_in">update</span>(ls,p);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">update</span>(rs,p);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> sum[u];</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) ans+=<span class="built_in">ask</span>(ls,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  ans+=<span class="built_in">ask</span>(rs,L,R);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mi[lc]&gt;=s&amp;&amp;p&lt;=mid) ans=<span class="built_in">query</span>(ls,p,s);</span><br><span class="line">	<span class="keyword">if</span>(ans!=<span class="number">-1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">	<span class="keyword">if</span>(mi[rc]&gt;=s) ans=<span class="built_in">query</span>(rs,p,s);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	val[x]=v;</span><br><span class="line">	<span class="keyword">auto</span> it=s[col[x]].<span class="built_in">lower_bound</span>(x);</span><br><span class="line">	<span class="keyword">auto</span> it2=it;</span><br><span class="line">	it--;</span><br><span class="line">	it2++;</span><br><span class="line">	<span class="keyword">if</span>(it2!=s[col[x]].<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		y=(*it2); pre[y]=(*it);</span><br><span class="line">		<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,y);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	s[col[x]].<span class="built_in">erase</span>(x);</span><br><span class="line">	col[x]=c;</span><br><span class="line">	s[col[x]].<span class="built_in">insert</span>(x);</span><br><span class="line">	it2=it=s[col[x]].<span class="built_in">lower_bound</span>(x);</span><br><span class="line">	it2--;</span><br><span class="line">	pre[x]=(*it2);</span><br><span class="line">	<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,x);</span><br><span class="line">	it++;</span><br><span class="line">	<span class="keyword">if</span>(it!=s[col[x]].<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		y=(*it); pre[y]=x;</span><br><span class="line">		<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tag[N],bel[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(tag,<span class="number">-1</span>,<span class="built_in">sizeof</span>(tag));</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) s[i].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		col[i]=<span class="built_in">read</span>(),val[i]=<span class="built_in">read</span>();</span><br><span class="line">		pre[i]=*(--s[col[i]].<span class="built_in">end</span>());</span><br><span class="line">		s[col[i]].<span class="built_in">insert</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt,l,x,k,y,c,v;m--;)</span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); c=<span class="built_in">read</span>(); v=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">change</span>(x,c,v);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			l=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">			<span class="type">int</span> now=l,r;</span><br><span class="line">			<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">			ll ans=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(;k&gt;=<span class="number">0</span>&amp;&amp;now&lt;=n;k--)</span><br><span class="line">			&#123;</span><br><span class="line">				r=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,now,l);</span><br><span class="line">				<span class="built_in">assert</span>(r&lt;=n);</span><br><span class="line">				<span class="keyword">if</span>(r==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ans+=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,now,n);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(now&lt;r) ans+=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,now,r<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">				c=col[r];</span><br><span class="line">				<span class="keyword">if</span>(tag[c]!=m)</span><br><span class="line">				&#123;</span><br><span class="line">					tag[c]=m;</span><br><span class="line">					bel[c]=pre[r];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(val[r]&gt;val[bel[c]])</span><br><span class="line">				&#123;</span><br><span class="line">					ans-=val[bel[c]];</span><br><span class="line">					ans+=val[r];</span><br><span class="line">					bel[c]=r;</span><br><span class="line">				&#125;</span><br><span class="line">				now=r+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="K-Candy-Ads"><a href="#K-Candy-Ads" class="headerlink" title="K.Candy Ads"></a>K.Candy Ads</h3><p>大毒瘤题。</p>
<p>2-SAT模型，关键是如何建图。</p>
<p>用bitset存下哪两个广告间有可能重复。</p>
<p>用Kosaraju算法跑出SCC，关键是如何快速跳过已选过的点。</p>
<p>再开两个bitset，存下 $2n$ 个点中哪些点已经遍历过了。</p>
<p>超级无敌卡空间，只能开得下 $50000\times 50000$ 的bitset。</p>
<p>过于毒瘤，并不想写代码。。。</p>
<h3 id="L-Random-Permutation"><a href="#L-Random-Permutation" class="headerlink" title="L.Random Permutation"></a>L.Random Permutation</h3><p>简单数学题，答案为 $\frac{(n!)^2}{n^n}$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>分治</tag>
        <tag>FFT</tag>
        <tag>计算几何</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>最小树形图</title>
    <url>/2021/09/23/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/</url>
    <content><![CDATA[<p>最小树形图的一些总结。</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个 $n$ 个点 $m$ 条边的带边权的有向图，给定一个根 $rt$，问一棵以 $rt$ 为根的外向生成树的边权和的最小值。</p>
<p>$n\le 100,m\le 10^4$。</p>
<p>$n\le 10^5,m\le 5\times 10^5$。</p>
<h2 id="朱-刘算法"><a href="#朱-刘算法" class="headerlink" title="朱-刘算法"></a>朱-刘算法</h2><p>除根节点 $rt$ 外，对于其他所有的点 $u$，记 $in[u]$ 连向 $u$ 的边中最短的边的权值，$pre[u]$ 为这条边的入点。</p>
<p>如果这些边不构成环，那么直接选这些边就是答案了。</p>
<p>如果构成环，考虑将一个环缩成一个点，变成一个子问题。</p>
<p>用反悔贪心，对于环内的点形成的边全部删掉，新建一个节点 $w$，对于环上的每个点 $v$，对于原图所有的边 $(u,v,z)$，其中 $u$ 不在环上，将这条边改成 $(u,w,z-in[v])$。</p>
<p>然后将环中所有的 $in[v]$ 都加进答案 $ans$ 里。然后考虑新图的答案。</p>
<p>如果遇到某个 $rt$ 外的点没有入边，则无解。</p>
<p>每次图至少减少一个点，每次的时间复杂度为 $O(n+m)=O(m)$。时间复杂度 $O(nm)$。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>这个优化是Tarjan提出的，能将算法优化到 $O(n+m\log m)$。</p>
<p>考虑将朱-刘算法的步骤改一下，变成每次加一条边进去，答案加上这条边的权值，这条边的出点为上一次加进去的入点。直到碰到已加入的点为止。如果成环则处理这个环，否则不处理。</p>
<p>重复上面的过程，直到所有点都被标记过，用并查集维护每个点在新图中被合并成哪个点。</p>
<p>考虑处理一个环会发生什么，将所有边扔进去出点中形成一个集合，相当于删掉这个集合中的一个，剩下的同时减去一个值，然后合并，且会查询最小值。</p>
<p>这个显然可以用带懒惰删除的和整体加标记的可并小根堆维护。</p>
<p>时间复杂度 $O(m\log m)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>需要注意的是，处理完环后，可并堆中维护的节点信息会改变，查询最小值时需要用并查集更新找到当前连着的真正的点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> val,v,id;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.val&gt;B.val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span>&#123;</span><br><span class="line">	node v[N];</span><br><span class="line">	<span class="type">int</span> dis[N],ls[N],rs[N],tag[N];</span><br><span class="line">	<span class="type">bool</span> del[N];</span><br><span class="line">	<span class="type">int</span> rt[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u) tag[u]+=t,v[u].val+=t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushtag</span>(ls[u],tag[u]);</span><br><span class="line">		<span class="built_in">pushtag</span>(rs[u],tag[u]);</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(v[x].val&gt;v[y].val) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">pushtag</span>(y,-tag[x]);</span><br><span class="line">		rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">		<span class="keyword">if</span>(dis[ls[x]]&lt;dis[rs[x]]) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">		dis[x]=dis[rs[x]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">pushdown</span>(x);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">merge</span>(ls[x],rs[x]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> va,<span class="type">int</span> id,<span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		v[id]=(node)&#123;va,to,id&#125;;</span><br><span class="line">		rt[y]=<span class="built_in">merge</span>(rt[y],id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dec</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> v)</span> </span>&#123;<span class="built_in">pushtag</span>(id,-v);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> node <span class="title">top</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;rt[u]&amp;&amp;<span class="built_in">find</span>(v[rt[u]].v)==u;) rt[u]=<span class="built_in">pop</span>(rt[u]);</span><br><span class="line">		<span class="keyword">if</span>(!rt[u]) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">		v[rt[u]].v=<span class="built_in">find</span>(v[rt[u]].v);</span><br><span class="line">		<span class="keyword">return</span> v[rt[u]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Heap h;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u=<span class="built_in">find</span>(u); v=<span class="built_in">find</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(u==v) <span class="keyword">return</span>;</span><br><span class="line">	h.rt[v]=h.<span class="built_in">merge</span>(h.rt[u],h.rt[v]),fa[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,rt,pre[N],bel[N];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); rt=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>();</span><br><span class="line">		h.<span class="built_in">ins</span>(y,z,i,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt=n;</span><br><span class="line">	node now;</span><br><span class="line">	bel[rt]=rt;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n&lt;&lt;<span class="number">1</span>) fa[i]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j=i;</span><br><span class="line">		<span class="keyword">for</span>(;!bel[j];)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!bel[j]) bel[j]=i,now=h.<span class="built_in">top</span>(j),ans+=now.val,j=now.v;</span><br><span class="line">			<span class="keyword">if</span>(bel[j]!=i) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(;bel[j]!=<span class="number">-1</span>;) bel[j]=<span class="number">-1</span>,j=pre[j]=(now=h.<span class="built_in">top</span>(j)).v,h.<span class="built_in">dec</span>(now.id,now.val);</span><br><span class="line">			++cnt;</span><br><span class="line">			<span class="keyword">for</span>(;bel[j]!=i;) bel[j]=i,<span class="built_in">Union</span>(j,cnt),j=pre[j];</span><br><span class="line">			j=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>最小树形图</tag>
      </tags>
  </entry>
  <entry>
    <title>ICPC 2019-2020 North-Western Russia Regional Contest</title>
    <url>/2021/09/18/ICPC-2019-2020-North-Western-Russia-Regional-Contest/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/102411/attachments/download/9664/statements.pdf">题目链接</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="A-Accurate-Movement"><a href="#A-Accurate-Movement" class="headerlink" title="A. Accurate Movement"></a>A. Accurate Movement</h3><p>模拟即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> a,b,n,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">read</span>(); b=<span class="built_in">read</span>(); n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> d=b-a;</span><br><span class="line">	<span class="keyword">for</span>(;b&lt;n;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a&lt;n) a=b,ans++;</span><br><span class="line">		b+=d,ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a&lt;n) a=b,ans++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B-Bad-Treap"><a href="#B-Bad-Treap" class="headerlink" title="B. Bad Treap"></a>B. Bad Treap</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>找出 $n$ 个在 <code>int</code> 范围内的整数，满足</p>
<p>$a_i&lt;a_{i+1}$ 且 $\sin(a_i)&lt;\sin(a_{i+1})$。</p>
<p>$n\le 50000$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>设 $a_i=k(i+b)$，那也就是要找一个整数 $k$，使得 $k&gt;2\omega \pi$ 且 $k-2\omega \pi$ 的值尽量小。</p>
<p>打表发现，$k=710$ 效果很好。</p>
<h3 id="C-Cross-Stitch"><a href="#C-Cross-Stitch" class="headerlink" title="C. Cross-Stitch"></a>C. Cross-Stitch</h3><p>答案下界显然是 $4n-1$，其中 $n$ 为 <code>X</code> 的个数。</p>
<p>可以发现，每个 <code>X</code> 中距离为 $1$ 的情况只需要用到竖着的两条。因为只用竖着的两条，最终可以回到本身这个节点，也可以去到原节点同一列的节点上。</p>
<p>建出图后，跑个有限制的欧拉回路就可以了。</p>
<p>比赛的时候忘在dfs里加限制了。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">600000</span>;</span><br><span class="line"><span class="type">int</span> n,m,st[N],top;</span><br><span class="line"><span class="type">int</span> ver[N],ne[N],head[N],tot=<span class="number">1</span>,n1,n2;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x+y*n1+z*n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> las)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> &amp;i=head[u];i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]&amp;&amp;(las==<span class="number">-1</span>||((u/n2)!=(ver[i]/n2)||(las!=ver[i]/n2))))</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(ver[i],(u/n2)==(ver[i]/n2)?ver[i]/n2:<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	st[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pr</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x%=n2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x/n1,x%n1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">print</span>(k<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(st[k]-st[k<span class="number">-1</span>])!=n2)</span><br><span class="line">		<span class="built_in">pr</span>(st[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">swap</span>(n,m);</span><br><span class="line">	n1=(<span class="built_in">max</span>(n,m)+<span class="number">5</span>); n2=(<span class="built_in">max</span>(n,m)+<span class="number">5</span>)*(<span class="built_in">max</span>(n,m)+<span class="number">5</span>);</span><br><span class="line">	<span class="type">int</span> xx=<span class="number">-1</span>,yy=<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">			<span class="keyword">if</span>(s[j]==<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">					<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">						<span class="built_in">add</span>(<span class="built_in">id</span>(i-a,j-b,<span class="number">0</span>),<span class="built_in">id</span>(i-a,j-b,<span class="number">1</span>));</span><br><span class="line">				<span class="built_in">add</span>(<span class="built_in">id</span>(i<span class="number">-1</span>,j,<span class="number">1</span>),<span class="built_in">id</span>(i,j,<span class="number">1</span>));</span><br><span class="line">				<span class="built_in">add</span>(<span class="built_in">id</span>(i<span class="number">-1</span>,j<span class="number">-1</span>,<span class="number">1</span>),<span class="built_in">id</span>(i,j<span class="number">-1</span>,<span class="number">1</span>));</span><br><span class="line">				<span class="built_in">add</span>(<span class="built_in">id</span>(i<span class="number">-1</span>,j<span class="number">-1</span>,<span class="number">0</span>),<span class="built_in">id</span>(i,j,<span class="number">0</span>));</span><br><span class="line">				<span class="built_in">add</span>(<span class="built_in">id</span>(i<span class="number">-1</span>,j,<span class="number">0</span>),<span class="built_in">id</span>(i,j<span class="number">-1</span>,<span class="number">0</span>));</span><br><span class="line">				xx=i; yy=j;</span><br><span class="line">				sum++;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(xx==<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum*<span class="number">4</span><span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="built_in">id</span>(xx,yy,<span class="number">0</span>),<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">print</span>(top);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Double-Palindrome"><a href="#D-Double-Palindrome" class="headerlink" title="D. Double Palindrome"></a>D. Double Palindrome</h3><p>看来长时间没看，Border和回文理论有些忘了，在这写下证明吧QAQ。</p>
<h4 id="一些证明"><a href="#一些证明" class="headerlink" title="一些证明"></a>一些证明</h4><p><strong>引理1(Weak Periodicity Lemma)：对一字符串 $s$，若 $p,q$ 为 $s$ 的周期，且 $p+q\le |s|$，则 $\gcd(p,q)$ 为 $s$ 的周期。</strong></p>
<p>证明：</p>
<p>不妨设 $p\geq q$。设 $d=p-q$。</p>
<p>由 $p,q$ 为 $s$ 的周期，可知：$s_i=s_{i+p}(i\le |s|-p),s_i=s_{i+q}(i\le |s|-q)$。</p>
<p>当 $i&gt; |q|$ 时，$s_i=s_{i-q}=s_{i-q+p}=s_{i+d}$。</p>
<p>当 $i\le |s|-p$ 时，$s_i=s_{i+p}=s_{i+p-q}=s_{i+d}$。</p>
<p>因此 $d=p-q$ 为 $s$ 的一个周期。</p>
<p>由辗转相除法，$\gcd(p,q)$ 为 $s$ 的周期。</p>
<p>证毕。</p>
<p>注意：真正的周期引理的限制条件可改为 $p+q-\gcd(p,q)\le |s|$。</p>
<p><strong>引理2：若一字符串 $s$ 可以表示成至少两种不同的非空双回文划分，则字符串 $s$ 为整周期串。</strong></p>
<p>证明：</p>
<p>记 $s[l,r]$ 表示字符串 $s$ 从第 $l$ 到第 $r$ 位形成的子串。</p>
<p>设 $s$ 的两种非空双回文划分为：$s[1,x]+s[x+1,|s|],s[1,y]+s[y+1,|s|]$，其中 $1\le x &lt; y &lt; |s|$，且 $s[1,x],s[x+1,s],s[1,y],s[y+1,|s|]$ 均为回文串。</p>
<p>可以发现，$y-x$ 和 $|s|-(y-x)$ 均为 $s$ 的周期，</p>
<p>由引理一，$\gcd(y-x,|s|-(y-x))=\gcd(y-x,|s|)$ 也为 $s$ 的周期。</p>
<p>而 $\gcd(y-x,|s|)|s$，证毕。</p>
<h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>用前 $k$ 个小写字符，组成长度至多为 $n$ 的字符串。</p>
<p>问有多少个串是弱双回文划分。</p>
<p>$n\le 10^5$，</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>首先，设一个 $g(n)$ 表示暴力划分的双回文的种类数。</p>
<p>$g(n)=\sum_{i=1}^nk^{\lfloor \frac{i+1}{2}\rfloor}k^{\lfloor \frac{n-i+1}{2}\rfloor}$。</p>
<p>这样统计显然会算重，而多的自然是能被两种及以上划分的字符串。</p>
<p>由引理二，这样的字符串为整周期串。</p>
<p>于是，我们统计字符串的时候只统计只有一种划分的字符串，设长度为 $i$ 的合法字符串个数为 $f(i)$，那么答案就是 $\sum_{i=1}^nf(i)\lfloor \frac{n}{i} \rfloor$。</p>
<p>考虑求出 $f(n)$，用 $g(n)$ 减去不合法的方案，枚举整周期串的最小正周期 $i$，那么复制 $\frac{n}{i}$ 倍后形成的串就在 $g(n)$ 中算了 $\frac{n}{i}$ 次，减去即可。$f(n)=g(n)-\sum_{i\neq n,i|n} f(i)\frac{n}{i}$。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">ll f[<span class="number">100010</span>],g[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		f[i]=g[i]=<span class="built_in">Add</span>(<span class="built_in">Mul</span>(i/<span class="number">2</span>,<span class="built_in">Pow</span>(k,(i+<span class="number">1</span>)/<span class="number">2</span>)),<span class="built_in">Mul</span>((i+<span class="number">1</span>)/<span class="number">2</span>,<span class="built_in">Pow</span>(k,(i+<span class="number">2</span>)/<span class="number">2</span>)));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">2</span>,n/i)</span><br><span class="line">			f[i*j]=<span class="built_in">Dec</span>(f[i*j],f[i]*j%mod);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,f[i]*(n/i)%mod);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E-Equidistant"><a href="#E-Equidistant" class="headerlink" title="E. Equidistant"></a>E. Equidistant</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>一棵树，给定 $m$ 个点，问是否存在一个点，使得该点到另外 $m$ 个点的距离相同。</p>
<p>$n,m\le 2\times 10^5$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>$m$ 个点一起bfs即可。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t[N],vis[N],d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(t[u]==m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;YES\n%d&quot;</span>,u);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!d[v]||d[v]==d[u]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">				t[v]+=t[u];</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])</span><br><span class="line">				&#123;</span><br><span class="line">					vis[v]=<span class="number">1</span>; q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),q.<span class="built_in">push</span>(x),vis[x]=<span class="number">1</span>,d[x]=<span class="number">1</span>,t[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">bfs</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="H-High-Load-Database"><a href="#H-High-Load-Database" class="headerlink" title="H. High Load Database"></a>H. High Load Database</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>一个数组，将数组分为若干段连续的子段，使得每个子段之和不超过 $k$。</p>
<p>$m$ 次询问，每次询问给定 $k$，问最少的段数。</p>
<p>$n\le 2\times 10^5,q\le 10^5,\sum a_i\le 10^6,a_i\geq 1$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>$\sum a_i\le 10^6$，可以发现对于每个 $k$，如果暴力用二分求出答案，时间复杂度大概是 $O(\frac{n}{k}\log n)$。</p>
<p>因此，通过记忆化的方法，$q$ 次询问总的最坏的复杂度就是 $O(n\log q\log n)$。</p>
<h3 id="J-Just-the-Last-Digit"><a href="#J-Just-the-Last-Digit" class="headerlink" title="J. Just the Last Digit"></a>J. Just the Last Digit</h3><p>从小到大枚举 $i$，枚举 $j$，然后判断 $i,j$ 是否有边相连。</p>
<p>判断的方法是算出除 $(i,j)$ 边外 $i$ 到 $j$ 路径条数模 $10$ 后的结果即可。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h3 id="L-Lengths-and-Periods"><a href="#L-Lengths-and-Periods" class="headerlink" title="L. Lengths and Periods"></a>L. Lengths and Periods</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>对一字符串 $|s|$，设 $\alpha$ 为最大的 $\frac{|s|}{|t|}$，使得 $t$ 为 $s$ 的周期。</p>
<p>给定一字符串，问该字符串的子串最大的 $\alpha$ 是多少。</p>
<p>$|s|\le 2\times 10^5$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>题目所求转换为：</p>
<p>选择任意两个后缀 $i,j(i&lt;j)$，求出 $lcp(i,j)$，求 $\frac{lcp(i,j)+(j-i)}{j-i}$ 的最大值。</p>
<p>于是可以建出 SA，求出height数组，然后启发式合并即可。</p>
<p>时间复杂度 $O(n\log ^2n)$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
        <tag>容斥原理</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-2020 ICPC Asia Hong Kong Regional Contest</title>
    <url>/2021/09/15/2019-2020-ICPC-Asia-Hong-Kong-Regional-Contest/</url>
    <content><![CDATA[<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.com/gym/102452/problems">CF链接</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="A-Axis-of-Symmetry"><a href="#A-Axis-of-Symmetry" class="headerlink" title="A. Axis of Symmetry"></a>A. Axis of Symmetry</h3><p>显然，对称轴最多只有4条。且这四条可以很容易算出来。</p>
<p>如何判断是否轴对称？只需要将在重合的边删掉就可以了。</p>
<h3 id="B-Binary-Tree"><a href="#B-Binary-Tree" class="headerlink" title="B. Binary Tree"></a>B. Binary Tree</h3><p>一棵满二叉树的节点个数定为奇数。</p>
<p>因此节点总数为偶数的情况必定会转移至奇数，反之亦然。</p>
<p>于是判断奇偶性即可。</p>
<h3 id="C-Constructing-Ranches"><a href="#C-Constructing-Ranches" class="headerlink" title="C. Constructing Ranches"></a>C. Constructing Ranches</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>一棵树，带点权。求有多少条路径，满足以路径中所有点权作为长度的线段，能在平面内形成一个多边形。</p>
<p>$n\le 2\times 10^5,value_i\le 10^9$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>一堆数能形成多边形的充要条件是 $\sum a_i &gt; 2\max\{a_i\}$。</p>
<p>点分治，用容斥的方法统计答案。</p>
<p>按照最大值从小到大排序，枚举一条路径 $a$，然后看有多少个在这个之前的 $b$ 满足 $len_a+len_b&gt;2max_a$。</p>
<p>这个可以离散化后二分+树状数组查询。</p>
<p>时间复杂度 $O(n\log ^2n)$。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line">	<span class="type">int</span> n,tim;</span><br><span class="line">	<span class="type">int</span> t[N],b[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x++;</span><br><span class="line">		<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x))</span><br><span class="line">			<span class="keyword">if</span>(t[x]!=tim) t[x]=tim,b[x]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> b[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x++;</span><br><span class="line">		<span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line">			<span class="keyword">if</span>(t[x]==tim)</span><br><span class="line">				s+=b[x];</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> BIT::ask;</span><br><span class="line"><span class="keyword">using</span> BIT::add;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> siz[N],mx[N],val[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> S,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; mx[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v]&amp;&amp;v!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">getroot</span>(v,S,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			mx[u]=<span class="built_in">max</span>(mx[u],siz[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[u],S-siz[u]);</span><br><span class="line">	<span class="keyword">if</span>(mx[rt]&gt;mx[u]) rt=u;</span><br><span class="line">&#125;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">	<span class="type">int</span> mx; ll d;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> line &amp;A,<span class="type">const</span> line &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.mx&lt;B.mx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;line&gt; vec;</span><br><span class="line">vector&lt;ll&gt; num;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,ll s,<span class="type">int</span> mx,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vec.<span class="built_in">pb</span>((line)&#123;mx,s&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v]&amp;&amp;v!=pre)</span><br><span class="line">			<span class="built_in">dfs</span>(v,s+val[v],<span class="built_in">max</span>(mx,val[v]),u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,ll s,<span class="type">int</span> mx,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	vec.<span class="built_in">clear</span>(); num.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">dfs</span>(u,val[u],<span class="built_in">max</span>(mx,val[u]),<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec) num.<span class="built_in">pb</span>(v.d);</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(num));</span><br><span class="line">	num.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(num))-num.<span class="built_in">begin</span>());</span><br><span class="line">	BIT::tim++; BIT::n=num.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec)</span><br><span class="line">	&#123;</span><br><span class="line">		sum+=<span class="built_in">ask</span>(<span class="built_in">upper_bound</span>(<span class="built_in">all</span>(num),<span class="number">2ll</span>*v.mx-v.d-s)-num.<span class="built_in">begin</span>());</span><br><span class="line">		<span class="built_in">add</span>(<span class="built_in">lower_bound</span>(<span class="built_in">all</span>(num),v.d)-num.<span class="built_in">begin</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=sum*opt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(u,-val[u],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])</span><br><span class="line">			<span class="built_in">solve</span>(v,val[u],val[u],<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> si=siz[v]&gt;siz[u]?S-siz[u]:siz[v];</span><br><span class="line">			rt=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">getroot</span>(v,si,<span class="number">0</span>);</span><br><span class="line">			<span class="built_in">divide</span>(rt,si);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) vis[i]=siz[i]=mx[i]=<span class="number">0</span>,adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) val[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">		mx[<span class="number">0</span>]=<span class="number">1e9</span>; rt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">getroot</span>(<span class="number">1</span>,n,<span class="number">0</span>); <span class="built_in">divide</span>(rt,n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Defining-Labels"><a href="#D-Defining-Labels" class="headerlink" title="D. Defining Labels"></a>D. Defining Labels</h3><p>签到题。转换进制就可以了。</p>
<h3 id="E-Erasing-Numbers"><a href="#E-Erasing-Numbers" class="headerlink" title="E. Erasing Numbers"></a>E. Erasing Numbers</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一长度为奇数的排列，每次能在相邻三个数中删去三个数中的最大与最小值。</p>
<p>对于每个 $i$，问能否通过某种删除方式使得最后剩下的数在原数组中下标为 $i$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>枚举第 $i$ 个数，将小于 $i$ 的看成 <code>0</code>，大于 $i$ 个的看成 <code>1</code>，自己看成 <code>X</code>。</p>
<p>对于 <code>X</code> 处，不能含有两个 <code>1</code> 或 <code>0</code>。</p>
<p>假设在 <code>X</code> 处删完后，还将剩下若干个 <code>1</code> 或若干个 <code>0</code>。</p>
<p>于是大胆猜测能剩下 <code>X</code> 的当且仅当存在一种方法使得删一些东西后 <code>1</code> 和 <code>0</code> 个数相同。</p>
<p>显然连续三个相同的可以满足。</p>
<p>但可以发现，<code>00100</code> 这样也是可以的。</p>
<p>于是，对于一个连续的序列，|<code>0</code> 的个数 - <code>1</code> 的个数| 大于等于 $3$ 时，可以让差值减少 $2$。</p>
<p>用 <code>X</code> 将序列分成两半，分开处理，用类似求最大子段和的形式去做即可。</p>
<p>时间复杂度 $O(n^2)$。</p>
<p>显然可以做到 $O(n)$。</p>
<h3 id="G-Game-Design"><a href="#G-Game-Design" class="headerlink" title="G. Game Design"></a>G. Game Design</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>对于一棵有根树，每个叶子结点中一个怪物。每个点 $i$ 可以设置一个塔，价格为 $a_i$，覆盖 $i$ 中子树的所有怪物。</p>
<p>一种方案为某种设置塔的方案，使得覆盖所有怪物。方案的价值为塔的价值之和。</p>
<p>构造出一棵树，使得取到最小价值的方案数恰为 $k$。</p>
<p>$k\le 10^9$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>设 $f(T)$ 表示树 $T$ 的最小价值，$g(T)$ 表示树 $T$ 取得最小价值的方案数。</p>
<p>那么将 $T_1,T_2$ 合并，得到一个方案数为 $g(T_1)\times g(T_2)$ 的操作是：建立一个新的根节点，权值为 $f(T_1)+f(T_2)+1$，根节点连向 $T_1,T_2$。</p>
<p>但是，仅有乘法操作是不够的，考虑加法操作：新建一个根节点，权值为 $f(T)$，将根节点与 $T$ 的根节点相连，就得到了一个方案数为 $g(T)+1$ 的树。</p>
<p>记录 $f(T)$  的值，传下当前需要的 $g(T)$ 值，分治处理。</p>
<p>时间复杂度 $O(\log k)$。</p>
<h3 id="I-Incoming-Asteroids"><a href="#I-Incoming-Asteroids" class="headerlink" title="I. Incoming Asteroids"></a>I. Incoming Asteroids</h3><p>鸽巢原理，如果最终要变为 $0$，那么至少有其中一个要得到 $\lceil \frac{y}{k}\rceil$。</p>
<p>开若干个 set 记录当前的值。每次若有成员满足超过了 $\lceil \frac{y}{k}\rceil$，$y$ 至少变成原来的 $\frac{2}{3}$。</p>
<p>时间复杂度 $O(m\log n\log y)$。</p>
<h3 id="J-Junior-Mathematician"><a href="#J-Junior-Mathematician" class="headerlink" title="J. Junior Mathematician"></a>J. Junior Mathematician</h3><p>数位DP模板。。</p>
<h3 id="K-Key-Project"><a href="#K-Key-Project" class="headerlink" title="K. Key Project"></a>K. Key Project</h3><p>贪心，模拟费用流，时间复杂度 $O(nm)$。</p>
]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>数位DP</tag>
        <tag>模拟费用流</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-2019 ACM-ICPC, Asia Shenyang Regional Contest</title>
    <url>/2021/09/08/2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/gym/101955/">比赛</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>一个人可能注册多个账号，一个人的主账号最多能对应 $2$ 个副账号。</p>
<p>副账号名与主账号名能配对当且仅当其最长公共子串之长等于主副账号长度的较小值。</p>
<p>给定 $n$ 个长度上限为 $10$ 的主账号名，$m$ 个长度上限为 $10$ 的副账号名。</p>
<p>问有多少种配对的情况。两种配对方案不同当且仅当存在某个副账号对应的主账号不同。</p>
<p>保证所有账号名均不相同。</p>
<p>$T\le 100,n,m\le 1000$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>建出Trie树以后，配对关系变为祖先关系。</p>
<p>考虑Trie上进行树形DP，设 $f_{u,a,b}$ 表示考虑到子树 $u$ 的时候，子树中有 $a$ 个主账号要与上面的匹配，有 $b$ 个副账号要与上面的主账号匹配的方案数。答案显然为 $f_{root,0,0}$。</p>
<p>显然当 $a\le 10,b\le 20$ 时，$f$ 值才有意义。</p>
<p>考虑 $f$ 的转移，相当于是一个二维的树形背包，然后合并完子树后再单独考虑根节点的贡献。</p>
<p>由于树形背包的性质，时间复杂度 $O(T\times 10\times 10\times 20\times (n+m))$。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ADD</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> y)</span></span>&#123;x+=y; (x&lt;mod)?<span class="number">0</span>:x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> ne[N][S];</span><br><span class="line"><span class="type">int</span> f[N][M][M],g[M][M],tp[N],siz;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,siz)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">25</span>) ne[i][j]=<span class="number">0</span>;</span><br><span class="line">		tp[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	siz=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),u=<span class="number">1</span>,c;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(!ne[u][c]) ne[u][c]=++siz;</span><br><span class="line">		u=ne[u][c];</span><br><span class="line">	&#125;</span><br><span class="line">	tp[u]=opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>) <span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>) f[u][a][b]=<span class="number">0</span>;</span><br><span class="line">	f[u][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(t,<span class="number">0</span>,<span class="number">25</span>)</span><br><span class="line">	<span class="keyword">if</span>(ne[u][t])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=ne[u][t];</span><br><span class="line">		<span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">				<span class="keyword">if</span>(f[u][a][b])</span><br><span class="line">					<span class="built_in">fo</span>(c,<span class="number">0</span>,<span class="number">10</span>-a)</span><br><span class="line">						<span class="built_in">fo</span>(d,<span class="number">0</span>,<span class="number">20</span>-b)</span><br><span class="line">							<span class="keyword">if</span>(f[v][c][d])</span><br><span class="line">								<span class="built_in">ADD</span>(g[a+c][b+d],<span class="built_in">Mul</span>(f[u][a][b],f[v][c][d]));</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>) <span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>) f[u][a][b]=g[a][b],g[a][b]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tp[u]==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">			<span class="keyword">if</span>(f[u][a][b])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ADD</span>(g[a][b],f[u][a][b]);</span><br><span class="line">				<span class="keyword">if</span>(a&lt;=<span class="number">9</span>) <span class="built_in">ADD</span>(g[a+<span class="number">1</span>][b],f[u][a][b]);</span><br><span class="line">				<span class="keyword">if</span>(a&lt;=<span class="number">8</span>) <span class="built_in">ADD</span>(g[a+<span class="number">2</span>][b],<span class="built_in">Mul</span>((mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f[u][a][b]));</span><br><span class="line">				<span class="keyword">if</span>(b&gt;=<span class="number">1</span>) <span class="built_in">ADD</span>(g[a][b<span class="number">-1</span>],<span class="built_in">Mul</span>(b,f[u][a][b]));</span><br><span class="line">				<span class="keyword">if</span>(b&gt;=<span class="number">2</span>) <span class="built_in">ADD</span>(g[a][b<span class="number">-2</span>],<span class="built_in">Mul</span>(b*(b<span class="number">-1</span>)/<span class="number">2</span>,f[u][a][b]));</span><br><span class="line">				<span class="keyword">if</span>(b&gt;=<span class="number">1</span>&amp;&amp;a&lt;=<span class="number">9</span>) <span class="built_in">ADD</span>(g[a+<span class="number">1</span>][b<span class="number">-1</span>],<span class="built_in">Mul</span>(b,f[u][a][b]));</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">				f[u][a][b]=g[a][b],g[a][b]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tp[u]==<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">			<span class="keyword">if</span>(f[u][a][b])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ADD</span>(g[a][b],f[u][a][b]);</span><br><span class="line">				<span class="keyword">if</span>(a&gt;=<span class="number">1</span>) <span class="built_in">ADD</span>(g[a<span class="number">-1</span>][b],<span class="built_in">Mul</span>(a,f[u][a][b]));</span><br><span class="line">				<span class="keyword">if</span>(b&lt;=<span class="number">19</span>) <span class="built_in">ADD</span>(g[a][b+<span class="number">1</span>],f[u][a][b]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(a,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">fo</span>(b,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">				f[u][a][b]=g[a][b],g[a][b]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d: &quot;</span>,___);</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">ins</span>(s,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">ins</span>(s,<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>做过的题，竟然还能调这么久。</p>
<p>到最后发现是一个智障错误，也是十分无语。</p>
<p>每个随机变量中总有一个概率最大的，记这个最大的是 $a_i$，那么选到其他概率都不会超过 $\frac{1}{2}$。</p>
<p>题目要求的精度是 $10^{-9}$，那么进行 $30$ 多次之后就会变成 $0$，也就是失配不会超过 $30$ 次。</p>
<p>发现时间卡得有点紧，不能使用 $O(\log |s|)$ 的Hash+二分。</p>
<p>考虑后缀数组，可以 $O(1)$ 查询。</p>
<p>发现需要查询区间的乘积，然而这是小数，由于精度的原因不能使用前缀积。</p>
<p>两种方法：</p>
<ol start="0">
<li>线段树，应该过不了。</li>
<li>猫树。</li>
<li>先取对数然后再取指数，使用前缀和。</li>
</ol>
<p>时间复杂度 $O(n(\log n+30))$。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>这里写的是猫树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">8.4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	l2[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SuffixArray&#123;</span><br><span class="line">	<span class="type">int</span> base[N],t[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="type">int</span> height[N&lt;&lt;<span class="number">1</span>],sa[N&lt;&lt;<span class="number">1</span>],rk[N&lt;&lt;<span class="number">1</span>],f[N][K],len;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t[x]==t[y]&amp;&amp;t[x+k]==t[y+k];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SA</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		len=n; a[n+<span class="number">1</span>]=m+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=i,rk[i]=a[i];</span><br><span class="line">		<span class="built_in">rsort</span>(n,m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			p=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">			<span class="built_in">rsort</span>(n,p);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">			rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">			<span class="keyword">for</span>(j=sa[rk[i]<span class="number">-1</span>],(k?(k--):<span class="number">0</span>);a[i+k]==a[j+k];k++);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i];</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,K<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) t[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask_sa</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x=rk[x]; y=rk[y];</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		x++;</span><br><span class="line">		<span class="type">int</span> k=l2[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">min</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> SuffixArray::ask_sa;</span><br><span class="line"><span class="type">int</span> a[N],n,m;</span><br><span class="line"><span class="type">int</span> l[N],r[N];</span><br><span class="line">db w[N][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">namespace</span> CatTree&#123;</span><br><span class="line">	db a[N],s[K][N];</span><br><span class="line">	<span class="type">int</span> len,pos[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r)</span><br><span class="line">		&#123;</span><br><span class="line">			pos[l]=u; <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		s[d][mid]=a[mid]; s[d][mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>];</span><br><span class="line">		<span class="built_in">fd</span>(i,mid<span class="number">-1</span>,l) s[d][i]=s[d][i+<span class="number">1</span>]*a[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,mid+<span class="number">2</span>,r) s[d][i]=s[d][i<span class="number">-1</span>]*a[i];</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid,d+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,d+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> *b,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=w[i][b[i]-l[i]];</span><br><span class="line">		len=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;len&lt;n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,n+<span class="number">1</span>,len) a[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,len,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> <span class="number">1.</span>;</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">return</span> a[x];</span><br><span class="line">		<span class="type">int</span> d=l2[pos[x]]-l2[pos[x]^pos[y]];</span><br><span class="line">		<span class="keyword">return</span> s[d][x]*s[d][y];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> CatTree::ask;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">8.4e5</span>);</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,___);</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			l[i]=<span class="built_in">read</span>(),r[i]=<span class="built_in">read</span>();</span><br><span class="line">			id=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,r[i]-l[i])</span><br><span class="line">			&#123;</span><br><span class="line">				w[i][j]=((db)<span class="built_in">read</span>())*(<span class="number">1e-9</span>);</span><br><span class="line">				<span class="keyword">if</span>(w[i][id]&lt;=w[i][j]) id=j;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i]=id+l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		a[n+<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) a[n+<span class="number">1</span>+i]=<span class="built_in">read</span>();</span><br><span class="line">		CatTree::<span class="built_in">build</span>(a,n);</span><br><span class="line">		SuffixArray::<span class="built_in">SA</span>(a,n+m+<span class="number">1</span>,n+<span class="number">2</span>);</span><br><span class="line">		<span class="type">int</span> le,ri,len;</span><br><span class="line">		db ans=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n-m+<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans=<span class="number">1</span>;</span><br><span class="line">			le=i,ri=n+<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">for</span>(;ri&lt;=n+m+<span class="number">1</span>&amp;&amp;ans&gt;<span class="number">1e-10</span>;)</span><br><span class="line">			&#123;</span><br><span class="line">				len=<span class="built_in">ask_sa</span>(le,ri);</span><br><span class="line">				ans*=<span class="built_in">ask</span>(le,le+len<span class="number">-1</span>);</span><br><span class="line">				le=le+len; ri=ri+len;</span><br><span class="line">				<span class="keyword">if</span>(ri&lt;=n+m+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(l[le]&lt;=a[ri]&amp;&amp;a[ri]&lt;=r[le])</span><br><span class="line">						ans*=w[le][a[ri]-l[le]];</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						ans=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				le++,ri++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(ans&lt;=<span class="number">1e-10</span>) ans=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.12lf\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+m+<span class="number">1</span>) a[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>问有多少个 $1\sim n$ 的排列，使得插入排序进行了 $k$ 轮以后，该排列的最长上升子序列至少为 $n-1$。</p>
<p>$n\le 50,k\le 50$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>考虑前 $k$ 个位置是否形成一个 $1\sim k$ 的排列，若不是，则只有一个 $k+1\sim n$ 的数在位置 $1\sim k$ 内。</p>
<p>分两种情况讨论。</p>
<p>答案为 $k!(1+(n-k)\times (n-k-1)+k\times (n-k))=k!((n-k)\times (n-1)+1)$。</p>
<p>时间复杂度 $O(k)$，当然可以优化到 $O(\frac{\sqrt{k}}{\log k})$，不过没有必要。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定一棵带边权的树，$m$ 次询问，问给每条边边权加了 $k$ 后，树的直径长度。</p>
<p>$n,m\le 2\times 10^5$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>这题是CF1019E的弱化版。</p>
<p>考虑1019E的题目：每条边有边权 $a,b$，每次询问边权变为 $ak+b$ 后的直径。</p>
<p>和树的路径有关，考虑分治。</p>
<p>但点分治的不好之处在于分成了大于等于 $2$ 的分治结构，在处理最值等问题而不是方案数的时候会有点复杂。</p>
<p>考虑边分治，为了使得两点间的信息不变，可以这样重构原树：</p>
<p><img src="/2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest/D.png" alt="rebuild"></p>
<p>（之前的边分治重构写得太丑了）</p>
<p>边分治后，假设已经统计出所有的可能的答案，形如 $(a,b)$ 的形式。</p>
<p>我们需要使 $ak+b$ 最大，那就是用一个斜率为 $-k$ 的直线去切这些点集，使得纵截距最大。</p>
<p>于是建一个上凸包即可。</p>
<p>下面考虑，经过边分治后变成了两个子结构，统计经过所选分治中心的 $(a,b)$：</p>
<p>相当于有两个集合，每个集合上为 $(a,b)$，需要算出 $(a,b)+(c,d)$ 的上凸包。</p>
<p>显然就是闵科夫斯基和。</p>
<p>注意归并排序的时候需要注意不能越界！！！（已经死过很多遍了…，记得写全条件）</p>
<p>时间复杂度 $O(n\log ^2n+m\log n\log \log n)$。 </p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,cnt;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; adj[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>],ver[N&lt;&lt;<span class="number">1</span>],a[N&lt;&lt;<span class="number">1</span>],b[N&lt;&lt;<span class="number">1</span>],head[N],tot;</span><br><span class="line"><span class="type">bool</span> vis[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> _a,<span class="type">int</span> _b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; a[tot]=_a; b[tot]=_b; ne[tot]=head[x]; head[x]=tot; vis[tot]=<span class="number">0</span>;</span><br><span class="line">	ver[++tot]=x; a[tot]=_a; b[tot]=_b; ne[tot]=head[y]; head[y]=tot; vis[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">re_dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; vec;</span><br><span class="line">	vec.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(v.fi!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">re_dfs</span>(v.fi,u);</span><br><span class="line">			vec.<span class="built_in">pb</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(vec.<span class="built_in">size</span>()==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">add</span>(u,vec[<span class="number">0</span>].fi,<span class="number">1</span>,vec[<span class="number">0</span>].se);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> las=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec)</span><br><span class="line">	&#123;</span><br><span class="line">		++cnt;</span><br><span class="line">		<span class="built_in">add</span>(las,cnt,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">add</span>(cnt,v.fi,<span class="number">1</span>,v.se);</span><br><span class="line">		las=cnt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> &amp;n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot=<span class="number">1</span>;</span><br><span class="line">	cnt=n;</span><br><span class="line">	<span class="built_in">re_dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	n=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u1,u2,now,mi,id;</span><br><span class="line"><span class="type">int</span> siz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]&amp;&amp;(v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">max</span>(siz[v],now-siz[v])&lt;mi)</span><br><span class="line">			&#123;</span><br><span class="line">				mi=<span class="built_in">max</span>(siz[v],now-siz[v]);</span><br><span class="line">				u1=v; u2=u; id=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	ll a,b;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.a==B.a) <span class="keyword">return</span> A.b&lt;B.b;</span><br><span class="line">		<span class="keyword">return</span> A.a&lt;B.a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span>-(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.a-B.a,A.b-B.b&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span>+(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.a+B.a,A.b+B.b&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.a==B.a&amp;&amp;A.b==B.b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(P A,P B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.a*B.b-B.a*A.b;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;P&gt; v1,v2,s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;P&gt; &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> vector&lt;P&gt; B;</span><br><span class="line">	B.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(A));</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(A))-A.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:A)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(B.<span class="built_in">size</span>()&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">cross</span>(B[B.<span class="built_in">size</span>()<span class="number">-1</span>]-B[B.<span class="built_in">size</span>()<span class="number">-2</span>],x-B[B.<span class="built_in">size</span>()<span class="number">-2</span>])&gt;<span class="number">0</span>) B.<span class="built_in">pop_back</span>();</span><br><span class="line">		B.<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	A=B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;P&gt; &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">DEBUG</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:A) cerr&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;x.a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x.b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;P&gt; &amp;A,vector&lt;P&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">build</span>(A); <span class="built_in">build</span>(B);</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;A.<span class="built_in">size</span>()<span class="number">-1</span>||j&lt;B.<span class="built_in">size</span>()<span class="number">-1</span>;)</span><br><span class="line">	&#123;</span><br><span class="line">		s.<span class="built_in">pb</span>((P)&#123;A[i]+B[j]&#125;);</span><br><span class="line">		<span class="keyword">if</span>(j&lt;B.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;(i==A.<span class="built_in">size</span>()<span class="number">-1</span>||<span class="built_in">cross</span>(B[j+<span class="number">1</span>]-B[j],A[i+<span class="number">1</span>]-A[i])&lt;<span class="number">0</span>))</span><br><span class="line">			j++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			i++;</span><br><span class="line">	&#125;</span><br><span class="line">	s.<span class="built_in">pb</span>(A[i]+B[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,ll aa,ll bb,vector&lt;P&gt; &amp;V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	V.<span class="built_in">pb</span>((P)&#123;aa,bb&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]&amp;&amp;(v=ver[i])!=pre)</span><br><span class="line">			<span class="built_in">dfs2</span>(v,u,aa+a[i],bb+b[i],V);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> si)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(si&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">	now=si; u1=u2=<span class="number">0</span>; mi=<span class="number">1e9</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(u,<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> s1=siz[u1],s2=si-siz[u1],u3=u2;</span><br><span class="line">	vis[id]=vis[id^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	v1.<span class="built_in">clear</span>(); v2.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">dfs2</span>(u1,u2,a[id],b[id],v1);</span><br><span class="line">	<span class="built_in">dfs2</span>(u2,u1,<span class="number">0</span>,<span class="number">0</span>,v2);</span><br><span class="line">	<span class="built_in">merge</span>(v1,v2);</span><br><span class="line">	<span class="built_in">divide</span>(u1,s1);</span><br><span class="line">	<span class="built_in">divide</span>(u3,s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s[x].b-s[x].a*k&gt;s[y].b-s[y].a*k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,___);</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		s.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="type">int</span> x,y,z;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); z=<span class="built_in">read</span>();</span><br><span class="line">			adj[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y,z)); adj[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x,z));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rebuild</span>(n);</span><br><span class="line">		<span class="built_in">divide</span>(<span class="number">1</span>,n);</span><br><span class="line">		<span class="built_in">build</span>(s);</span><br><span class="line">		<span class="type">int</span> l,r,mid;</span><br><span class="line">		ll k;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			k=-<span class="built_in">read</span>();</span><br><span class="line">			l=<span class="number">1</span>,r=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">			&#123;</span><br><span class="line">				mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">check</span>(mid<span class="number">-1</span>,mid,k)) r=mid<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			l--;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,s[l].b-s[l].a*k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) adj[i].<span class="built_in">clear</span>(),head[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定二维平面上 $n$ 个点的坐标及颜色，有以下三种操作：</p>
<ul>
<li>修改一点的坐标。</li>
<li>修改一点的颜色。</li>
<li>询问在编号为 $[l,r]$ 的点中，选择两个颜色不同的点的曼哈顿距离的最大值。</li>
</ul>
<p>$n,m\le 10^5,\sum n,\sum m\le 5\times 10^5$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>先考虑所有颜色相同，如何求一堆点的曼哈顿距离的最大值。</p>
<p>考虑经典的套路，将 $(x,y)$ 变为 $(x+y,x-y)$，转换为切比雪夫距离，即 $\max\{|x_1-x_2|,|y_1-y_2|\}$。</p>
<p>这样做的好处是将曼哈顿距离的二维转换成一维。</p>
<p>那么一堆颜色相同的点的距离的就是 $\max\{|x_{max}-x_{min}|,|y_{max}-y_{min}|\}$。</p>
<p>加入了颜色不相同的限制也十分无聊，记录最值，最值颜色，不同于最值颜色的次值即可。</p>
<p>时间复杂度 $O(n+m\log n)$，有大概12的常数。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>这题的思路有点妙~</p>
<h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给定一个有向无环图，点权，对于任意点均满足后继点的点权比该点小。</p>
<p>从某个点出发，选择三条长度至少为 $1$ 的，互不相同的，点权单调下降的路径，其价值为这三条路径的终点的权值之和。</p>
<p>对于每个 $k$，问有多少个由三条路径形成的集合，使得价值为 $k$。</p>
<p>$T\le 5,n\le 10000,m\le 30000,w\le 400$。</p>
<p>时限 6s。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>三条路径互不相同，可以容斥做。</p>
<p>考虑DP，设生成函数 $F_{i,j}$ 表示从 $i$ 出发，经过的所有点 $v$ 的 $x^{value_v\times j}$ 之和。</p>
<p>看起来答案就是 $[x^k]\frac{\sum_{i=1}^nF_{i,1}^3}{6}$。</p>
<p>但是，有两条路径重复，三条路径都重复的情况会被统计到，需要减去。</p>
<p>算一下容斥系数，发现答案就是 $[x^k]\frac{\sum F_{i,1}^3-3\sum F_{i,2}F_{i,1}+2\sum F_{i,3}}{6}$。</p>
<p>直接爆算，用拆系数FFT暴力，时间复杂度 $O(Tmw\log w)$，常数还巨大，显然过不了。</p>
<p>考虑最终的这个多项式，是一个 $3w$ 次的多项式。次数较小，考虑插值。</p>
<p>将 $0\sim 3w$ 代进多项式的 $x$ 中进行计算，然后再拉格朗日插值，算出最终多项式的系数就可以了。</p>
<p>时间复杂度 $O(T(n+m+w)w)$。</p>
<p>拉格朗日插值时可以将 $\prod_{i=0}^{3w}(x-i)$ 的系数暴力算出，然后暴力除一个 $(x-i)$。</p>
<p>由于有个地方用了快速幂，导致程序是卡着时间过的。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> W=<span class="number">1203</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> value[N],deg[N],id[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> n,m,w,cnt;</span><br><span class="line">ll f[N][<span class="number">3</span>][W],a[W],g[W],h[W],ans[W],inv[W],pw[W][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,W) inv[i]=<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>);</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); w=<span class="built_in">read</span>()*<span class="number">3</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) value[i]=<span class="built_in">read</span>(),adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>();</span><br><span class="line">			adj[x].<span class="built_in">pb</span>(y);</span><br><span class="line">			deg[y]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!deg[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			id[++cnt]=u;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">			&#123;</span><br><span class="line">				deg[v]--;</span><br><span class="line">				<span class="keyword">if</span>(!deg[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> u;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,w) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) pw[i][j]=<span class="built_in">Pow</span>(i,value[j]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,w+<span class="number">1</span>) a[i]=g[i]=ans[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fd</span>(t,n,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			u=id[t];</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">0</span>,w)</span><br><span class="line">					f[u][i<span class="number">-1</span>][j]=<span class="built_in">Pow</span>(pw[j][u],i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">				<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">0</span>,w)</span><br><span class="line">						f[u][i][j]=<span class="built_in">Add</span>(f[u][i][j],f[v][i][j]);</span><br><span class="line">			ll sum;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,w)</span><br><span class="line">			&#123;</span><br><span class="line">				sum=(f[u][<span class="number">0</span>][j]*f[u][<span class="number">0</span>][j]%mod*f[u][<span class="number">0</span>][j]<span class="number">-3ll</span>*f[u][<span class="number">0</span>][j]*f[u][<span class="number">1</span>][j]+<span class="number">2ll</span>*f[u][<span class="number">2</span>][j]);</span><br><span class="line">				a[j]=<span class="built_in">Add</span>(a[j],(sum%mod+mod)%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,w)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i+<span class="number">1</span>) h[j]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i)</span><br><span class="line">				h[j]=<span class="built_in">Add</span>(h[j],(mod-i)*g[j]%mod),</span><br><span class="line">				h[j+<span class="number">1</span>]=<span class="built_in">Add</span>(h[j+<span class="number">1</span>],g[j]);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i+<span class="number">1</span>) g[j]=h[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,w)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,w+<span class="number">1</span>) h[j]=g[j];</span><br><span class="line">			<span class="built_in">fd</span>(j,w,<span class="number">1</span>) h[j]=<span class="built_in">Add</span>(h[j],h[j+<span class="number">1</span>]*i%mod);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>) a[i]=a[i]*inv[i-j]%mod;</span><br><span class="line">			<span class="built_in">fo</span>(j,i+<span class="number">1</span>,w) a[i]=a[i]*(mod-inv[j-i])%mod;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,w) ans[j]=<span class="built_in">Add</span>(ans[j],h[j+<span class="number">1</span>]*a[i]%mod);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d:&quot;</span>,___);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,w) <span class="built_in">printf</span>(<span class="string">&quot; %lld&quot;</span>,inv[<span class="number">6</span>]*ans[i]%mod);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>每次对一个二维平面有四种操作：</p>
<ol>
<li>加入一个点 $(x,y)$ ，权值为 $w$。</li>
<li>删除一个点。</li>
<li>将与 $(x,y)$ 欧几里得距离为 $\sqrt{k}$ 的存在的点的权值加上 $w$。</li>
<li>求与 $(x,y)$ 欧几里得距离为 $\sqrt{k}$ 的存在的点的权值之和。</li>
</ol>
<p>$m\le 2\times 10^5,k\le 10^7$。</p>
<p>时限12s。</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>与一个点欧几里得距离为 $\sqrt{k}$ 的点很少，最多大概是 $48\times 4$ 。</p>
<p>用vector记录，然后暴力。</p>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>不会。。。</p>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>之前做过的一道FWT。</p>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>签到题。定义一些变量或者数组，求用去的MB数向上取整的结果。</p>
<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>给定 $T\le 1000$ 组数据，每组数据三个数 $n,m,k$，求 $n$ 个人的约瑟夫环游戏（每数到第 $k$ 个人，该人出局）中第 $m$ 个出局的人的编号。</p>
<p>$\sum \min\{m,k\}\le 2\times 10^6$</p>
<h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>先来看看最经典的约瑟夫环问题如何解决：</p>
<p><strong>求 $n$ 个人的约瑟夫环游戏（每数到第 $k$ 个人，该人出局）中最后一个出局的人的编号。</strong></p>
<p>设 $f(n)$ 表示有 $n$ 个人时最后出局的编号。考虑第一次走了 $k$ 步后，就变成了 $n-1$ 的子问题，因此有：</p>
<p>$f(n)=(k+f(n-1))\bmod n,f(1)=0$。</p>
<p>那么，类似于上面的定义，设 $f(n,m)$ 表示 $n$ 个人时，第 $m$ 个出局的编号。</p>
<p>类似地，有：</p>
<p>$f(n,m)=(k+f(n-1,m-1))\bmod n,f(n,1)=(k-1)\bmod n$。</p>
<p>于是，如果 $m\le 2\times 10^6$ ，那么直接根据 $f$ 的定义，就可以求出来了。</p>
<p>对于 $k\le 2\times 10^6$，可以发现，$f(n,m)$ 的定义中 $k+f(n-1,m-1)$ 超过 $n$ 的次数大概是 $O(k)$ 次的，那么假设计算到 $f(n’,m’)$，设加了 $t$ 次后，依然小于那时候的 $n$，则有：</p>
<p>$f(n’,m’)+kt&lt;n’+t$；</p>
<p>解得：$t&lt;\frac{n’-f(n’,m’)}{k-1}$。</p>
<p>于是，特判掉 $k=1$，然后就可以计算了。</p>
<p>可以不分类，直接写成第二种形式就可以了。</p>
<p>时间复杂度 $O(\sum\min\{m,k\})$。</p>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>$n$ 个多项式 $F_i(x)=(1+x^{b_i}+x^{2b_i}+\cdots + x^{a_ib_i})$，</p>
<p>$m$ 次询问 $\prod_{i=l}^rF_i(x)$ 的前 $c$ 项和。</p>
<p>强制在线。</p>
<p>$n,m\le 10000,a_i,b_i,c\le 1000$。</p>
<h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><p>$F_i(x)=(1+x^{b_i}+x^{2b_i}+\cdots + x^{a_ib_i})=\frac{1-x^{(a_i+1)b_i}}{1-x}$。</p>
<p>那么 $F_{i}(x)^{-1}=\frac{1-x}{1-x^{(a_i+1)b_i}}$。</p>
<p>于是 $\prod_{i=l}^rF_i(x)=\frac{\prod_{i=1}^rF_i(x)}{\prod_{i=1}^{l-1}F_i(x)}$。</p>
<p>于是只需计算 $F_i(x)$ 的前缀积以及 $F_i(x)$ 的逆的前缀积。</p>
<p>于是变成两种操作：</p>
<ol>
<li><p>对一多项式乘上 $(1-x^w)$。</p>
<p>暴力即可。</p>
</li>
<li><p>对一多项式除去 $(1-x^w)$。</p>
<p>就是相当于 $1$ 的操作倒过来，也可以 $O(c)$ 去做。</p>
</li>
</ol>
<p>算出前缀积后，要算两个前缀积的乘积的前 $c$ 项，这个也可以 $O(c)$ 做。</p>
<p>时间复杂度 $O((n+m)c)$。</p>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ADD</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x+=y; (x&lt;mod)?<span class="number">0</span>:x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">10005</span>;</span><br><span class="line">ll f[M][N],g[M][N],tmp[N];</span><br><span class="line"><span class="type">int</span> n,m,c;</span><br><span class="line"><span class="type">int</span> a[M],b[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); c=<span class="number">1000</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,c) f[<span class="number">0</span>][i]=g[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>]=g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=<span class="built_in">read</span>(); b[i]=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c) tmp[j]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j+(a[i]+<span class="number">1</span>)*b[i]&lt;=c)</span><br><span class="line">					tmp[j+(<span class="number">1</span>+a[i])*b[i]]=<span class="built_in">Dec</span>(tmp[j+(<span class="number">1</span>+a[i])*b[i]],f[i<span class="number">-1</span>][j]);</span><br><span class="line">				<span class="built_in">ADD</span>(tmp[j],f[i<span class="number">-1</span>][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=b[i])	<span class="built_in">ADD</span>(tmp[j],tmp[j-b[i]]);</span><br><span class="line">				f[i][j]=tmp[j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c) tmp[j]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fd</span>(j,c,<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j+b[i]&lt;=c) tmp[j+b[i]]=<span class="built_in">Dec</span>(tmp[j+b[i]],g[i<span class="number">-1</span>][j]);</span><br><span class="line">				tmp[j]=<span class="built_in">Add</span>(tmp[j],g[i<span class="number">-1</span>][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">int</span> w=(a[i]+<span class="number">1</span>)*b[i];</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c-w) <span class="built_in">ADD</span>(tmp[j+w],tmp[j]);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,c) g[i][j]=tmp[j],tmp[j]=<span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		ll ans=<span class="number">0</span>,s,s2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,___);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> l,r;m--;)</span><br><span class="line">		&#123;</span><br><span class="line">			l=(<span class="built_in">read</span>()+ans)%n+<span class="number">1</span>,r=(<span class="built_in">read</span>()+ans)%n+<span class="number">1</span>; c=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">			l--;</span><br><span class="line">			s=s2=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,c) <span class="built_in">ADD</span>(s2,f[r][i]);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,c)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ADD</span>(s,s2*g[l][i]%mod);</span><br><span class="line">				s2=<span class="built_in">Dec</span>(s2,f[r][c-i]);</span><br><span class="line">			&#125;</span><br><span class="line">			ans=s%mod;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Trie</tag>
        <tag>背包</tag>
        <tag>后缀数组</tag>
        <tag>猫树</tag>
        <tag>分治</tag>
        <tag>边分治</tag>
        <tag>闵科夫斯基和</tag>
        <tag>拉格朗日插值</tag>
        <tag>多项式</tag>
        <tag>容斥原理</tag>
        <tag>线段树</tag>
        <tag>数学</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>多点求值</title>
    <url>/2021/09/02/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一 $n$ 次多项式 $f(x)$，$m$ 个值 $x_1,x_2,\cdots,x_m$，求出 $f(x_i)$ 的值对 $998244353$ 取模后的结果。</p>
<p>$n,m\le 64000$。</p>
<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>最经典的多点求值。</p>
<p>设 $P_{l,r}(x)=\prod_{i=l}^r(x-x_i)$。</p>
<p>设 $k=\lfloor \frac{m}{2} \rfloor$，显然有 $\forall i\in [1,k],P_{1,k}(x_i)=0,\forall i\in[k+1,m],P_{m+1,n}(x_i)=0$。</p>
<p>对于 $i\in [1,k]$，考虑多项式 $f(x)$ 表示成 $D(x)P_{1,k}(x)+R(x)$ 的形式（其中 $deg_R&lt;deg_{P_{1,k}}$），那么有 $\forall i\in [1,k],f(x_i)=R(x_i)$。</p>
<p>于是，经过一次多项式取模，将其转换为 $\frac{k}{2}$ 的子问题。</p>
<p>那么先分治，预处理出所有分治结构中的 $P(x)$，然后再来一次分治，每次递归时将当前多项式对 $P_{l,r}$ 取模。</p>
<p>到 $l=r$ 时，$[x^0]P_{l,l}(x)$ 就是答案了。</p>
<p>时间复杂度 $T(n)=2T(\frac{n}{2})+O(n\log n)$，由主定理得，$T(n)=O(n\log ^2n)$。</p>
<p>空间复杂度 $O(n\log n)$。</p>
<p>这样做不仅需要写多项式取模，而且常数较大。</p>
<h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><p>定义差卷积 $\text{Mul}^T(A,B)<em>i=\sum</em>{j}A_{i+j}\times B_j$。</p>
<p>显然有如下性质：</p>
<p>$\text{Mul}^T(A,B\times C)=\text{Mul}^T(\text{Mul}^T(A,B),C)$。</p>
<p>可以发现， $f(x_0)=\sum_{i=0}^nf_ix_0^i=[x^0]\text{Mul}^T(f,\frac{1}{1-x_0x})$。</p>
<p>于是，考虑算出 $P_{l,r}=\prod_{i=l}^r(1-x_ix)$，先计算 $G=\text{Mul}^T(f,\frac{1}{P_{1,m}})$。</p>
<p>然后分治，递归时维护当前的 $G$，下传到 $[l,mid]$ 时，新的 $G$ 则为 $\text{Mul}^T(G,P_{mid+1,r})$。下传到 $[mid+1,r]$ 同理。</p>
<p>于是就做完了，时间复杂度也为 $O(n\log ^2n)$。</p>
<p>但是这个只需要写到多项式求逆，不需要再写多项式取模，常数少了 $\frac{1}{2}$。</p>
<p>发现计算差卷积时可以运用FFT计算循环卷积，这样常数又减少了约 $\frac{1}{3}$。</p>
<p>最后大概的时间是算法一的 $\frac{1}{3}$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line">ll W[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> R[M];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">				a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">				a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">	<span class="keyword">if</span>(t^<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">		w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">	A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">	A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*k%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">	Poly g,h;</span><br><span class="line">	g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">	<span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">		<span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">64005</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ((u&lt;&lt;1)|1)</span></span><br><span class="line">Poly P[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll ans[N],a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">MulT</span><span class="params">(Poly A,Poly B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	B.<span class="built_in">clear</span>();</span><br><span class="line">	len--;</span><br><span class="line">	<span class="built_in">fo</span>(i,m<span class="number">-1</span>,n+m<span class="number">-2</span>) B.<span class="built_in">pb</span>(A[i&amp;len]);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		P[u].<span class="built_in">pb</span>(<span class="number">1</span>); P[u].<span class="built_in">pb</span>(<span class="built_in">Dec</span>(<span class="number">0</span>,a[l]));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">	P[u]=P[lc]*P[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(ans[l]=A[<span class="number">0</span>]);</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid,<span class="built_in">MulT</span>(A,P[rc])); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r,<span class="built_in">MulT</span>(A,P[lc]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">Poly F,G;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">max</span>(n,m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) F.<span class="built_in">pb</span>(<span class="built_in">read</span>());</span><br><span class="line">	F.<span class="built_in">resize</span>(n+k+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k);</span><br><span class="line">	F=<span class="built_in">MulT</span>(F,(~P[<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k,F);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>2017-2018 ACM-ICPC, Asia Tsukuba Regional Contest</title>
    <url>/2021/09/01/2017-2018-ACM-ICPC-Asia-Tsukuba-Regional-Contest/</url>
    <content><![CDATA[<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.com/gym/101986">链接</a></p>
<span id="more"></span>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>设 $f_{i,0/1}$ 表示填满前 $i$ 行时，最上面一行是白/黑的方案数。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>由于 $m\leq 16$，那么总方案数最多为 $\frac{\binom{16}{8}8!}{2^8}=2027025$。</p>
<p>于是直接爆搜，由于时限10s，那么暴力 $O(m^2)$ 判断都可以。</p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>还没看。</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>设 $f_i$ 表示考虑到前 $i$ 个时的最小操作次数。</p>
<p>$f_i=\min\{f_j+g(j+1,i)\}$，其中 $g(l,r)$ 表示 $[l,r]$ 最小需要的操作次数，也就是 $t[l,r]$ 中不同的连续段数+1的一半。单调队列或线段树优化即可。</p>
<p>时间复杂度 $O(n)$ 或 $O(n\log n)$。</p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>从 $1,2$ 分别跑一次原图，反图最短路，建出从 $1$ 开始的，能到 $2$ 的最短路图，边反向后是否令最短路减小很好判断，是否增大则需要根据该边是否为最短路图中从 $1$ 到 $2$ 的必经路。</p>
<p>预处理出这些边即可。</p>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><p>最大值直接跑二分图匹配即可。</p>
<p>最小值的话很像一个最小割的形式，同一时刻，如果选了一个 $X$，那么 $Y$ 那边就不必选。也就是说，若出现了 $X,Y$ 中两个任务的时间重叠，那么就连一条边，然后相当于最小割。</p>
<p>但是时间可能分配不够，于是就相当于每个时间有一个节点容量一，然后 $s$ 连向 $X$，$X$ 连向时间点，时间点连向 $Y$，$Y$ 连向 $t$，就可以做最小割了。</p>
<h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个点 $m$ 条边的无向连通图，求出简单环的个数。</p>
<p>$n-1\le m \le n-15$。</p>
<p>$3 \le n \le 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然先dfs建出一棵树，而非树边是不会出现横叉边的。</p>
<p>最多只有 $m-(n-1)\le 16$ 条非树边。</p>
<p>暴力枚举每条非树边是否进行选择，若选择一条边 $(x,y)$ 则可看做为在树中从 $x$ 走到 $y$。</p>
<p>若能走出一个环，必要条件是每条边都必须经过偶数次。</p>
<p>那么判断是否可行时统计出树中每条边的经过的次数，若出现了奇数次，则该树边一定要选上。</p>
<p>最后形成一个边的集合，判断这个边集是否是个简单环就可以了。</p>
<p>于是写一个虚树即可。</p>
<p>注意最后判断边是否形成简单环时要注意，有些点是没有边出去的，这些也是可以的。</p>
<p>时间复杂度 $O(2^{m-n}\times (m-n)\log n+n\log n)$，也可以优化并去掉一个log，但是会没有必要。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>打了我快1h…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> dep[N],dfn[N],tim;</span><br><span class="line">	<span class="type">int</span> f[N][<span class="number">19</span>];</span><br><span class="line">	<span class="type">int</span> sum;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">	&#125;;</span><br><span class="line">	vector&lt;edge&gt; e;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==y) &#123;sum++; <span class="keyword">return</span>;&#125;</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[u]=++tim; dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">		f[u][<span class="number">0</span>]=pre;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">18</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">		<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==pre)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dfn[v])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(dfn[v]&lt;dfn[u]) e.<span class="built_in">pb</span>((edge)&#123;u,v&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">dfs</span>(v,u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>) <span class="keyword">if</span>(dep[f[y][i]]&gt;=dep[x]) y=f[y][i];</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">		<span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; _adj[N];</span><br><span class="line">	vector&lt;edge&gt; ed;</span><br><span class="line">	<span class="type">void</span> _add(<span class="type">int</span> x,<span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		_adj[x].<span class="built_in">pb</span>(y); _adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> rt;</span><br><span class="line">	<span class="type">int</span> st[N],top,now;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		rt=a[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:a) rt=<span class="built_in">lca</span>(rt,v);</span><br><span class="line">		a.<span class="built_in">pb</span>(rt);</span><br><span class="line">		<span class="built_in">sort</span>(<span class="built_in">all</span>(a),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">		a.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(a))-a.<span class="built_in">begin</span>());</span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> y;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x:a)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(top)</span><br><span class="line">			&#123;</span><br><span class="line">				y=<span class="built_in">lca</span>(x,st[top]);</span><br><span class="line">				<span class="keyword">if</span>(y!=st[top])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(;top&gt;=<span class="number">2</span>&amp;&amp;dep[st[top<span class="number">-1</span>]]&gt;=dep[y];top--) _add(st[top],st[top<span class="number">-1</span>]);</span><br><span class="line">					<span class="keyword">if</span>(st[top]!=y) _add(st[top],y),st[top]=y;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(st[top]!=x) st[++top]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(top) <span class="keyword">for</span>(;--top;) _add(st[top],st[top+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; V;</span><br><span class="line">	<span class="type">int</span> w[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		V.<span class="built_in">pb</span>(u);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:_adj[u])</span><br><span class="line">			<span class="keyword">if</span>(v!=pre)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">				w[u]^=w[v];</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(w[u]&amp;&amp;u!=rt) ed.<span class="built_in">pb</span>((edge)&#123;u,pre&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clr</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:_adj[u]) <span class="keyword">if</span>(v!=pre) <span class="built_in">clr</span>(v,u);</span><br><span class="line">		_adj[u].<span class="built_in">clear</span>(); w[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> vis[N],deg[N];</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">void</span> __add(<span class="type">int</span> x,<span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		_adj[x].<span class="built_in">pb</span>(y); _adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">		deg[x]++; deg[y]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> ans;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs3</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!ans) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(vis[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[u]!=tim) ans=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[u]=tim;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:_adj[u])</span><br><span class="line">			<span class="keyword">if</span>(v!=pre) <span class="built_in">dfs3</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x:ed) __add(x.x,x.y);</span><br><span class="line">		tim=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x:V) <span class="keyword">if</span>(deg[x]&amp;&amp;deg[x]!=<span class="number">2</span>) &#123;ans=<span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:V) vis[x]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:V)</span><br><span class="line">			<span class="keyword">if</span>(deg[x])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(!vis[x]) tim++,<span class="built_in">dfs3</span>(x,<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tim&gt;=<span class="number">2</span>) ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x:V) _adj[x].<span class="built_in">clear</span>(),vis[x]=deg[x]=<span class="number">0</span>;</span><br><span class="line">		V.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="type">int</span> m=e.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,m) <span class="keyword">if</span>(dep[e[i].x]&gt;dep[e[i].y]) <span class="built_in">swap</span>(e[i].x,e[i].y);</span><br><span class="line">		<span class="type">bool</span> flag;</span><br><span class="line">		<span class="built_in">ff</span>(s,<span class="number">1</span>,(<span class="number">1</span>&lt;&lt;m))</span><br><span class="line">		&#123;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			a.<span class="built_in">clear</span>(); ed.<span class="built_in">clear</span>(); V.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,m) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s) a.<span class="built_in">pb</span>(e[i].x),a.<span class="built_in">pb</span>(e[i].y),ed.<span class="built_in">pb</span>((edge)&#123;e[i].x,e[i].y&#125;);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:a) <span class="keyword">if</span>(!dfn[x])</span><br><span class="line">			&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!flag) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">build</span>(a);</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,m) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s) w[e[i].y]^=<span class="number">1</span>,w[e[i].x]^=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs2</span>(rt,<span class="number">0</span>);</span><br><span class="line">			<span class="built_in">clr</span>(rt,<span class="number">0</span>);</span><br><span class="line">			sum+=<span class="built_in">check</span>();</span><br><span class="line">			rt=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) Graph::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Graph::<span class="built_in">solve</span>(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>最短路</tag>
        <tag>网络流</tag>
        <tag>虚树</tag>
      </tags>
  </entry>
  <entry>
    <title>常系数线性齐次递推</title>
    <url>/2021/08/31/%E5%B8%B8%E7%B3%BB%E6%95%B0%E7%BA%BF%E6%80%A7%E9%BD%90%E6%AC%A1%E9%80%92%E6%8E%A8/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>给定一递推式：$f_n=\sum_{i=1}^{k}a_if_{n-i}$，其中 $a_1,a_2,\cdots,a_k$ 为常实数，并给定 $f_0,f_1,\cdots, f_{k-1}$。</p>
<p>求 $f_n$。</p>
<span id="more"></span>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>设 ：</p>
<p>$$V_i=\begin{bmatrix}<br>f_i\\<br>f_{i+1}\\<br>\vdots\\<br>f_{i+k-1}<br>\end{bmatrix},M=\begin{bmatrix}<br>0 &amp; 1 &amp; 0 &amp; \cdots \\<br>0 &amp; 0 &amp; \ddots &amp; \vdots \\<br>0 &amp; 0 &amp; \cdots &amp; 1 \<br>a_k &amp; a_{k-1} &amp; \cdots &amp; a_1<br>\end{bmatrix}$$</p>
<p>，则有：$V_{i+1}=M\times  V_i$。</p>
<p>若要计算 $f_n$，可计算 $V_n=M^n\times V_0$。</p>
<p>利用矩阵乘法，算出 $M^n$，时间复杂度 $O(k^3\log n)$。</p>
<h3 id="利用特征方程与多项式"><a href="#利用特征方程与多项式" class="headerlink" title="利用特征方程与多项式"></a>利用特征方程与多项式</h3><h4 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h4><p>我们现在是要求 $M^n$。</p>
<p>设 $f(x)=x^n$。</p>
<p>若能找到一个多项式 $g$，使得 $g(M)=0$，那么就可以将 $f(x)$ 表示成 $A(x)g(x)+B(x)$ 了，其中 $B(x)$ 的次数小于 $g(x)$ 的次数。然后求 $f(M)$ 就相当于求 $B(M)$。</p>
<p>$g(x)$ 可取矩阵 $M$ 的特征方程 $\Gamma (x)=\text{det}(Ix-M)$，其中 $I$ 为单位矩阵，$\text{det}(A)$ 表示 $A$ 的行列式。</p>
<p>因为根据Cayley-Hamilton定理， $\Gamma (M)=0$。</p>
<p>而 $M$ 矩阵十分特殊，根据归纳等方法可证明：$\Gamma (x)=\text{det}(Ix-M)=x^k-\sum_{i=1}^ka_ix_{k-i}$。</p>
<p>显然有 $x^nV_0=f(x)V_0$，当 $x=M$ 时，</p>
<p>$x^nV_0=f(x)V_0=B(x)V_0=\sum_{i=0}^{k-1}x^ib_iV_0$。</p>
<p>将 $x$ 换成 $M$：</p>
<p>$V_n=M^nV_0=\sum_{i=0}^{k-1}b_iM^iV_0=\sum_{i=0}^{k-1}b_iV_i$。</p>
<p>取出 $V$ 中的第一行，有 ：</p>
<p>$f_n=\sum_{i=0}^{k-1}b_if_i$。</p>
<p>因此，只需求出所有的 $b_i$ 即可，也就是求出 $B(x)$。</p>
<p>由上面的推导，$B(x)=f(x)\bmod \Gamma (x)$。</p>
<p>由于 $f(x)=x^n$，考虑倍增，然后边乘边对 $g$ 取模。</p>
<p>暴力多项式乘法及取模，时间复杂度 $O(k^2\log n)$。</p>
<p>用FFT优化，时间复杂度 $O(k\log k\log n)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>多项式取模：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line">ll W[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> R[M];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">				a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">				a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">	<span class="keyword">if</span>(t^<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">		w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">	A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">	A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*k%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">	Poly g,h;</span><br><span class="line">	g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">	<span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">		<span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Ln</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	A=<span class="built_in">jf</span>((~A)*<span class="built_in">df</span>(A));</span><br><span class="line">	A.<span class="built_in">resize</span>(n); <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Exp</span><span class="params">(<span class="type">const</span> Poly &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>; <span class="keyword">for</span>(;n&lt;A.<span class="built_in">size</span>();n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	Poly B,C,D; B.<span class="built_in">clear</span>(); B.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">2</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=B; C.<span class="built_in">resize</span>(m); D=A; D.<span class="built_in">resize</span>(m);</span><br><span class="line">		C=D-<span class="built_in">Ln</span>(C); C[<span class="number">0</span>]=<span class="built_in">Add</span>(C[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">		B=B*C; B.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ^(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(!A.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	ll tmp=A[<span class="number">0</span>],w=<span class="built_in">Pow</span>(tmp,k);</span><br><span class="line">	tmp=<span class="built_in">Pow</span>(tmp,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*tmp%mod;</span><br><span class="line">	A=<span class="built_in">Exp</span>(<span class="built_in">Ln</span>(A)*k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*w%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Cos</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)+<span class="built_in">Exp</span>(A*(mod-w4)))*((mod+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sin</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)-<span class="built_in">Exp</span>(A*(mod-w4)))*(<span class="built_in">Pow</span>(w4,mod<span class="number">-2</span>)*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sqrt</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly C,D,<span class="built_in">B</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	C.<span class="built_in">clear</span>(); D.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">4</span>;(l&gt;&gt;<span class="number">2</span>)&lt;n;l&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=A; C.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		D=B; D.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>); D=(~D);</span><br><span class="line">		C.<span class="built_in">resize</span>(l); D.<span class="built_in">resize</span>(l);</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">1</span>); <span class="built_in">ntt</span>(D,l,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,l) C[i]=C[i]*D[i]%mod;</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">-1</span>);</span><br><span class="line">		B.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,(l&gt;&gt;<span class="number">1</span>)) B[i]=<span class="built_in">Add</span>(C[i],B[i])*((mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>/(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>,deg=A.<span class="built_in">size</span>()-B.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A)); <span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;=deg;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); B=~B; B.<span class="built_in">resize</span>(deg);</span><br><span class="line">	A=A*B; A.<span class="built_in">resize</span>(deg);</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A));</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>%(<span class="type">const</span> Poly &amp;A,<span class="type">const</span> Poly &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>()&lt;B.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	Poly C=A-(A/B)*B;</span><br><span class="line">	C.<span class="built_in">resize</span>(B.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Pow</span><span class="params">(Poly A,ll n,Poly M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly B=A; n--;</span><br><span class="line">	<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,A=(A*A)%M) <span class="keyword">if</span>(n&amp;<span class="number">1ll</span>) B=(B*A)%M;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a[M],f[M];</span><br><span class="line">Poly A,G;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) G.<span class="built_in">pb</span>((mod+mod-a[k-i+<span class="number">1</span>])%mod);</span><br><span class="line">	G.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">pb</span>(<span class="number">0</span>); A.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	A=<span class="built_in">Pow</span>(A,n,G);</span><br><span class="line">	ll ans=<span class="number">0</span>,x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,k<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=(mod+mod+<span class="built_in">read</span>())%mod;</span><br><span class="line">		ans+=f[i]*A[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h3><p>还有一种时间复杂度也是 $O(k\log k \log n)$ 的做法，不过常数很小。<a href="https://arxiv.org/pdf/2008.08822.pdf">详见</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>线性代数</tag>
        <tag>常系数线性齐次递推</tag>
      </tags>
  </entry>
  <entry>
    <title>Deltix Round, Summer 2021[CF1556]</title>
    <url>/2021/08/30/Deltix-Round-Summer-2021-CF1556/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://codeforces.com/contest/1556">比赛链接</a></p>
<span id="more"></span>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>rating：${\color{Yellow} 2162-&gt;2147}$。</p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>两个初始为 $0$ 的数 $a,b$，可执行以下三种操作：</p>
<ul>
<li>选择一个正整数 $k$，$a+=k,b+=k$；</li>
<li>选择一个正整数 $k$，$a-=k,b+=k$；</li>
<li>选择一个正整数 $k$，$a+=k,b-=k$；</li>
</ul>
<p>问 $(a,b)$ 变成 $(c,d)$ 的最小操作次数。</p>
<p>$c,d\geq 0$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>显然若 $c+d\equiv 1\pmod 2$，那么无论如何也无法变成。</p>
<p>否则，由于 $c,d\geq 0$，若 $c=d$，则只需一次操作，否则需要两次。</p>
<p>注意 $(0,0)$ 的特判。</p>
<p>时间复杂度 $O(1)$。</p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一个序列，每次可以交换相邻的两个数，问最少的操作次数使得两两相邻数奇偶性不同。</p>
<p>$n\le 10^5$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>设 $cnt=\sum_{i=1}^n[a_i\equiv 1\pmod 2]$，若 $cnt&gt; \lceil \frac{n}{2} \rceil$ 或 $cnt &lt; \lfloor \frac{n}{2} \rfloor$，则一定不行。</p>
<p>否则，枚举第一个数的奇偶性，之后依次交替，记录当前向右的第一个奇数与偶数，然后计算。</p>
<p>初始化最值一定要设大一点！！！</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定一个长度为 $n$ 的序列，若 $i$ 为奇数，则表示跟着有 $a_i$ 个左括号；若 $i$ 为偶数，则表示跟着有 $a_i$ 个右括号。</p>
<p>形成一个长度为 $\sum a_i$ 的括号字符串，问有多少 $[l,r]$ 满足 $S[l,r]$ 为合法的括号序列。</p>
<p>$n\le 10^3,a_i\le 10^9$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>枚举 $l$ 所在的位置 $i$，然后从小到大枚举 $r$ 所在的位置 $j$，$O(1)$ 判断是否合法并计算即可。</p>
<p>时间复杂度 $O(n^2)$，应该可以优化到一个log或者线性。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>交互题。</p>
<p>给定 $n,k$，有一个长度为 $n$ 的非负整数数组 $a_1,a_2\cdots a_n$，最多询问一共 $2n$ 次两个不同下标的数的与/或，使得能求出数组 $a$ 的第 $k$ 小。</p>
<p>$n\geq 3$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>显然，因为 $a+b=a &amp; b+a | b$，我们花 $2n-2$ 次，求出 $a_1+a_i(i\geq 2)$。</p>
<p>之后再花 $2$ 次，求出 $a_2+a_3$。然后就可以解得 $a_1$，剩下的 $a_i$ 也全部求出来了。</p>
<p>找第 $k$ 小用 <code>nth_element</code>。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>对于两个数组 $a,b$，每次操作可以选择偶数个不同的下标，从小到大排好序后，排名为奇数的下标的 $a$ 加一，偶数的下标的 $b$ 减一。</p>
<p>给定两个数组，多次询问某个区间 $[l,r]$，问只在该区间进行上述操作，最少的操作次数使得区间内 $a_i=b_i$。</p>
<p>$n,q$ 在 $10^5$ 级别。</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>设 $c_i=a_i-b_i$，如果 $\sum_{i=l}^rc_i\neq 0$ 则无解。</p>
<p>如果出现某个 $j$，使得 $\sum_{i=l}^jc_i &gt; 0$ 也无解。</p>
<p>否则，最少的操作次数就是 $\sum_{i=l}^j c_i$ 的最小值取个相反数。</p>
<p>于是，记录 $c$ 前缀和 $s$，每次相当于询问 $s$ 的某个值，$s$ 的区间最大值，$s$ 的区间最小值。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>对于一个图，如何判断有哪些人赢呢？</p>
<p>强连通分量缩点，又因为是竞赛图，因此只有一个入度为 $0$ 的连通分量，且里面的人会赢。</p>
<p>设 $f_S$ 表示只有集合 $S$ 中的人赢的概率，那么答案就是 $\sum |S|f_S$。</p>
<p>设 $g_S$ 表示 $S$ 中的人两两可达的概率，$h_{S,T}$ 表示集合 $S$ 中的人都赢了 $T$ 中的所有人的概率。</p>
<p>那么 $f_S=g_S\times h_{S,\complement_{U}^{S}}$。</p>
<p>$g_S$ 的计算考虑补集转换，则有 $g_S=1-\sum_{T\subset S,|T|\neq 0}g_T\times h_{T,S-T}$。</p>
<p>枚举子集，暴力 $O(n^2)$ 计算 $h$，时间复杂度 $O({3^n}n^2)$，无法通过。</p>
<p>考虑预处理，优化计算 $h$ 的方法，很容易做到 $O({3^n}n)$。</p>
<p>于是就做完了。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;N;</span><br><span class="line">ll a[N],beat[N][N],w[N][M],f[M];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">G</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;x) ans=<span class="built_in">Mul</span>(ans,w[i][y]);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) <span class="built_in">ff</span>(j,<span class="number">0</span>,n) beat[i][j]=a[i]*<span class="built_in">Pow</span>(a[i]+a[j],mod<span class="number">-2</span>)%mod;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			w[i][j]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">ff</span>(k,<span class="number">0</span>,n)</span><br><span class="line">				<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;k)&amp;j)</span><br><span class="line">					w[i][j]=<span class="built_in">Mul</span>(w[i][j],beat[i][k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ff</span>(s,<span class="number">0</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		f[s]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!s) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> t=s&amp;(s<span class="number">-1</span>);t;t=(t<span class="number">-1</span>)&amp;s)</span><br><span class="line">			f[s]=<span class="built_in">Dec</span>(f[s],f[t]*<span class="built_in">G</span>(t,s^t)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> cnt;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,n) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;i) cnt++;</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="number">1ll</span>*cnt*f[i]%mod*<span class="built_in">G</span>(i,(m<span class="number">-1</span>)^i)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>枚举子集</tag>
      </tags>
  </entry>
  <entry>
    <title>Tournament[2018-2019 ACM-ICPC, Asia Nanjing Regional Contest, B]</title>
    <url>/2021/08/23/Tournament-2018-2019-ACM-ICPC-Asia-Nanjing-Regional-Contest-B/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://codeforces.com/gym/101981/attachments/download/7891/20182019-acmicpc-asia-nanjing-regional-contest-en.pdf">B题</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑DP，设 $f_{i,j}$ 表示考虑到第 $i$ 个点，$1\sim i$ 中一共放了 $j$ 个的最小答案。</p>
<p>$O(n^3)$ 转移，答案即为 $f_{n,k}$。</p>
<p>看到必须放 $k$ 个，可想到wqs二分，打表可知 $f_{n,*}$ 是凸的。</p>
<p>于是二分一个 $x$，让每次放一个则额外加多 $x$ 的贡献，DP时记录去最小值的时候最多放了多少个，找到放 $k$ 个的答案。</p>
<p>这样做的好处是将DP的第二维的限制给去掉了。</p>
<p>但是这个DP还是 $O(n^2)$ 的。</p>
<p>打表发现他有决策单调性，于是写个决策单调性优化DP就可以了。</p>
<p>时间复杂度是两个log的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"></span><br><span class="line">ll a[N],s[N];</span><br><span class="line">ll f[N];</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	l--;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> s[r]+s[l]-s[(l+r)&gt;&gt;<span class="number">1</span>]-s[(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">g</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> f[l]+<span class="built_in">calc</span>(l+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll X=<span class="built_in">g</span>(x,r),Y=<span class="built_in">g</span>(y,r);</span><br><span class="line">	<span class="keyword">if</span>(X!=Y) <span class="keyword">return</span> X&gt;Y;</span><br><span class="line">	<span class="keyword">return</span> h[x]&gt;h[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> le[N],bel[N],top,st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st&gt;top) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="type">int</span> l=le[top],r=n,mid;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(bel[top],i,mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>; h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	le[<span class="number">1</span>]=<span class="number">1</span>; bel[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	st=top=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(st&lt;top&amp;&amp;i==le[st+<span class="number">1</span>]) st++;</span><br><span class="line">		f[i]=<span class="built_in">g</span>(bel[st],i)+x; h[i]=h[bel[st]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;top&gt;=st&amp;&amp;<span class="built_in">check</span>(bel[top],i,le[top]);) top--;</span><br><span class="line">		<span class="type">int</span> tmp=<span class="built_in">find</span>(i);</span><br><span class="line">		<span class="keyword">if</span>(tmp&lt;=n) ++top,le[top]=tmp,bel[top]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">if</span>(n==k) &#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	ll l=<span class="number">0</span>,r=<span class="number">3e15</span>,mid,tmp,ans=<span class="number">9e18</span>;</span><br><span class="line">	<span class="type">int</span> now=n+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;l+<span class="number">1</span>&lt;r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		tmp=<span class="built_in">calc</span>(mid);</span><br><span class="line">		<span class="keyword">if</span>(h[n]&lt;=k) r=mid,ans=tmp<span class="number">-1ll</span>*h[n]*mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	tmp=<span class="built_in">calc</span>(r);</span><br><span class="line">	ans=tmp<span class="number">-1ll</span>*k*r;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>XCPC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>wqs二分</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校8</title>
    <url>/2021/08/13/hdu2021%E5%A4%9A%E6%A0%A18/</url>
    <content><![CDATA[<p><a href="https://acm.hdu.edu.cn/contests/contest_show.php?cid=992">比赛链接</a></p>
<span id="more"></span>

<h2 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h2><p>随便口胡一波。</p>
<p>设 $f_{i,j,k,flag,limit}$ 表示考虑到第 $i$ 位，当前前缀为 $x$ 为 $j$，最后为 $k$ 的方案数，然后dp一下就好了。</p>
<h2 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>暂时还不会其他的又快又好写的做法。</p>
<p><del>自己的垃圾做法写了我快1.5h</del></p>
<p>设 $f_{i,j}$ 表示考虑到第 $i$ 个，一共花了 $j$ 个硬币的方案数。</p>
<p>一行状态只跟前两行状态有关，于是需要记录一下第 $i$ 行和第 $i-1$ 行的答案，并用普通生成函数表示。</p>
<p>考虑倍增，如何从 $n$ 的状态（指记录了 $n$ 和 $n-1$ 行）转移到更小的状态上。</p>
<p>不妨设 $n$ 为偶数（否则 $O(m)$ 推一遍让 $m$ 变成 $m-1$），</p>
<p>考虑将 $n$ 个分成两半，两边各有 $\frac{n}{2}$ 个。考虑左边的最右端如何选择，是自已单独组成一个，是与右边的组合，还是与左边的组合，分成三种情况讨论，设 $\frac{n}{2}-1$ 的生成函数为 $C$， $\frac{n}{2}-2$ 的生成函数为 $D$， 那么 $n$ 的答案就是 $C\times C,C\times D,D\times D$ 乘上一些常多项式后加起来。</p>
<p>$n-1$ 的同理。</p>
<p>于是 $n$ 的状态可以转换成 $\frac{n}{2}-1$ 的状态。</p>
<p>倍增+FFT即可。时间复杂度 $O(m\log m\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line">ll W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">    A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Mul</span>(A[i],k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">    B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,Poly &amp;A,Poly &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(<span class="number">1</span>); A[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		B.<span class="built_in">resize</span>(<span class="number">3</span>); B[<span class="number">0</span>]=<span class="number">1</span>; B[<span class="number">1</span>]=<span class="number">1</span>; B[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(<span class="number">3</span>); A[<span class="number">0</span>]=A[<span class="number">1</span>]=A[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">		B.<span class="built_in">resize</span>(<span class="number">5</span>); B[<span class="number">0</span>]=<span class="number">1</span>; B[<span class="number">1</span>]=<span class="number">3</span>; B[<span class="number">2</span>]=<span class="number">5</span>; B[<span class="number">3</span>]=<span class="number">3</span>; B[<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Poly C,D,E;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>((n<span class="number">-2</span>)/<span class="number">2</span>,C,D);</span><br><span class="line">		E=C*D; C=C*C; D=D*D;</span><br><span class="line">		B.<span class="built_in">clear</span>(); A.<span class="built_in">clear</span>();</span><br><span class="line">		B.<span class="built_in">resize</span>(m+<span class="number">8</span>); A.<span class="built_in">resize</span>(m+<span class="number">8</span>);</span><br><span class="line">		E.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">		C.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">		D.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			B[i]+=D[i];</span><br><span class="line">			B[i+<span class="number">1</span>]+=D[i]*<span class="number">3</span>+E[i]*<span class="number">2</span>;</span><br><span class="line">			B[i+<span class="number">2</span>]+=D[i]*<span class="number">5</span>+E[i]*<span class="number">6</span>+C[i];</span><br><span class="line">			B[i+<span class="number">3</span>]+=D[i]*<span class="number">3</span>+E[i]*<span class="number">8</span>+C[i]*<span class="number">4</span>;</span><br><span class="line">			B[i+<span class="number">4</span>]+=D[i]+E[i]*<span class="number">6</span>+C[i]*<span class="number">6</span>;</span><br><span class="line">			B[i+<span class="number">5</span>]+=E[i]*<span class="number">2</span>+C[i]*<span class="number">4</span>;</span><br><span class="line">			B[i+<span class="number">6</span>]+=C[i];</span><br><span class="line">			A[i]+=D[i];</span><br><span class="line">			A[i+<span class="number">1</span>]+=D[i]+E[i]*<span class="number">2</span>;</span><br><span class="line">			A[i+<span class="number">2</span>]+=D[i]+E[i]*<span class="number">4</span>;</span><br><span class="line">			A[i+<span class="number">3</span>]+=E[i]*<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) A[i]%=mod,B[i]%=mod;</span><br><span class="line">		B.<span class="built_in">resize</span>(m+<span class="number">1</span>); A.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(n<span class="number">-1</span>,C,D);</span><br><span class="line">		B.<span class="built_in">clear</span>();</span><br><span class="line">		B.<span class="built_in">resize</span>(m+<span class="number">5</span>);</span><br><span class="line">		C.<span class="built_in">resize</span>(m+<span class="number">1</span>); D.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			B[i]+=D[i]; B[i+<span class="number">1</span>]+=D[i]; B[i+<span class="number">2</span>]+=D[i];</span><br><span class="line">			B[i+<span class="number">1</span>]+=C[i]; B[i+<span class="number">2</span>]+=(C[i]*<span class="number">2</span>); B[i+<span class="number">3</span>]+=C[i];</span><br><span class="line">		&#125;</span><br><span class="line">		B.<span class="built_in">resize</span>(m+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) B[i]%=mod;</span><br><span class="line">		A=D;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	Poly A[<span class="number">2</span>];</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		A[<span class="number">0</span>].<span class="built_in">clear</span>(); A[<span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">dfs</span>(n,A[<span class="number">0</span>],A[<span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,A[<span class="number">1</span>][i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h2><p>Prim模板题。</p>
<h2 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h2><p>简单博弈论模板题。</p>
<h2 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h2><p>求两圆相交的面积，余弦定理搞一搞即可。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>FFT</tag>
        <tag>计算几何</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校7</title>
    <url>/2021/08/11/hdu2021%E5%A4%9A%E6%A0%A17/</url>
    <content><![CDATA[<p><a href="https://acm.hdu.edu.cn/contests/contest_show.php?cid=990">链接</a></p>
<span id="more"></span>

<h2 id="1011"><a href="#1011" class="headerlink" title="1011"></a>1011</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一序列 $a_1,a_2\cdots a_n$，求子序列的和的乘积对 $998244353$ 取模后的结果。</p>
<p>保证 $\sum a_i\le 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>只需求出有多少个子序列满足子序列和等于 $x$ 的，设为 $b_x$。答案即为 $\prod_{i=1}^{10^5}i^{b_i}$。</p>
<p>而 $b_m$ 显然等于 $[x^m]\prod_{i=1}^n(1+x^{a_i})$。</p>
<p>分治FFT即可。</p>
<p>但是 $b_m$ 是在模 $\varphi(998244353)=998244352$ 意义下的，于是需要使用拆系数FFT。</p>
<p>拆系数FFT详见<a href="https://ouqingliang.gitee.io/FFT/#%E4%BB%BB%E6%84%8F%E6%A8%A1%E6%95%B0FFT">链接</a>。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mo=<span class="number">998244352</span>;</span><br><span class="line"></span><br><span class="line">db pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">P</span>(db _x=<span class="number">0</span>,db _y=<span class="number">0</span>) &#123;x=_x,y=_y;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> +(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x+B.x,A.y+B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> -(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x-B.x,A.y-B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> *(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x*B.x-A.y*B.y,A.x*B.y+A.y*B.x&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> /(<span class="type">const</span> P&amp;A,<span class="type">const</span> db &amp;x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x/x,A.y/x&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">P <span class="title">conj</span><span class="params">(P A)</span> </span>&#123;<span class="keyword">return</span> (P)&#123;A.x,-A.y&#125;;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">P W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">			W[i+j]=(P)&#123;<span class="built_in">cos</span>(pi*j/i),<span class="built_in">sin</span>(pi*j/i)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;P&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(P *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	P w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k],</span><br><span class="line">				a[i+j+k]=a[j+k]-w,</span><br><span class="line">				a[j+k]=a[j+k]+w;</span><br><span class="line">	<span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=a[i]/n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]+B[i];</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Real(A) ((ll)floor(A.x+0.5))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Imag(A) ((ll)floor(A.y+0.5))</span></span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> Poly C,D;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	C.<span class="built_in">resize</span>(len); D.<span class="built_in">resize</span>(len); A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(P)&#123;<span class="built_in">Real</span>(A[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(A[i])&gt;&gt;<span class="number">15</span>&#125;,D[i]=(P)&#123;<span class="built_in">Real</span>(B[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(B[i])&gt;&gt;<span class="number">15</span>&#125;;</span><br><span class="line">	<span class="built_in">ntt</span>(C,len,<span class="number">1</span>); <span class="built_in">ntt</span>(D,len,<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len)</span><br><span class="line">	&#123;</span><br><span class="line">		P d4,d0,d1,d2,d3;</span><br><span class="line">		j=(len-i)&amp;(len<span class="number">-1</span>);</span><br><span class="line">		d4=<span class="built_in">conj</span>(C[j]);</span><br><span class="line">		d0=(d4+C[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">		d1=(d4-C[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">		d4=<span class="built_in">conj</span>(D[j]);</span><br><span class="line">		d2=(d4+D[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">		d3=(d4-D[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">		A[i]=d0*d2+d1*d3*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">		B[i]=d0*d3+d1*d2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(<span class="built_in">Real</span>(A[i]) + (<span class="built_in">Imag</span>(A[i]) % mo &lt;&lt; <span class="number">30</span>) + (<span class="built_in">Real</span>(B[i]) % mo &lt;&lt; <span class="number">15</span>))%mo;</span><br><span class="line">	C.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">Poly A;</span><br><span class="line"><span class="type">int</span> n,sum;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function">Poly <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		Poly B;</span><br><span class="line">		B.<span class="built_in">resize</span>(a[l]+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,a[l]) B[i]=<span class="number">0</span>;</span><br><span class="line">		B[<span class="number">0</span>]=<span class="number">1</span>; B[a[l]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> B;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">solve</span>(l,mid)*<span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=(a[i]=<span class="built_in">read</span>());</span><br><span class="line">		<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i]==<span class="number">0</span>) &#123;flag=<span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		A=<span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">		ll ans=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,sum) ans=ans*<span class="built_in">Pow</span>(i,<span class="built_in">Real</span>(A[i]))%mod;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 BUPT Welcome Wagon 题目集锦</title>
    <url>/2021/08/04/2021-BUPT-Welcome-Wagon-%E9%A2%98%E7%9B%AE%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<p><a href="https://vjudge.ppsucxtt.cn/contest#category=all&running=0&title=bupt%20welcome&owner=">比赛链接</a></p>
<span id="more"></span>

<h2 id="Contest-2"><a href="#Contest-2" class="headerlink" title="Contest 2"></a>Contest 2</h2><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>构造出一个树，使得直径数量恰为 $k$，且节点数最少。</p>
<p>多次询问。</p>
<p>$q,n\le 500$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>考虑树的重心，分类讨论：</p>
<ul>
<li><p>重心在边上，左边挂 $x$ 个点，右边挂 $y$ 个点，此时能构造出 $x\times y$ 的形式，总点数 $x+y+2$。</p>
</li>
<li><p>重心在点上，且为是菊花图的形式，此时能构造出 $x*(x-1)$ 的形式，总点数 $x+1$。</p>
</li>
<li><p>重心在点上，但不为菊花图。可以发现，若以重心为根，最优方案中重心的若干子树一定是一个菊花图的形式（也就是连一个点，然后这个点连出去若干条边）。若对于每个子树中，叶节点个数为 $a_i$，则能构造出 $\sum_{1\le i &lt; j\le m}a_ia_j$。总点数为 $1+m+\sum a_i$。</p>
</li>
</ul>
<p>前两种都非常好求，对于第三种，考虑DP，设 $f_{i,j}$ 表示构造出总数为 $i$ 的方案，且 $\sum a_k=j$ 时的最小点数。初始时 $f_{0,i}=2+i$。</p>
<p>枚举下一个子树选什么，类似背包的转移，并记录从上一个位置方便输出方案。</p>
<p>三种做法取一个最小值。</p>
<p>时间复杂度 $O(n^2\log n+q\log n)$。</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个物品，重量为 $a_i$，价值为 $w_i$。</p>
<p>$m$ 次询问，每次给定一个 $q_i$，求选出若干物品（可重复选）使得物品重量之和为 $q_i$，且价值和最小。</p>
<p>输出价值和对 $10^9+7$ 取模后的结果。</p>
<p>$n\le 100,a_i\le 100,m\le 10^6,q_i\le 10^{18}$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>显然是个完全背包，但是 $q_i$ 极大。</p>
<p>设 $c=\max_{i=1}^n \{a_i\}$。</p>
<p>如果存在某个数组 $b$ 表示每个物品取出的次数，使得 $q=\sum_{i=1}^na_ib_i$。那么对于每个 $j$，都可以通过调整 $b$，使得存在 $\sum_{i=1}^na_ib’<em>i=q$ 且 $\sum</em>{i\neq j}a_ib’_i&lt; n a_j^2$。</p>
<p>证明：若 $b’_i\geq a_j$，则可以将 $b’_i$ 减去 $a_j$。</p>
<p>也就是说，最终的 $b’<em>i$ 都是小于 $a_j$ 的。那么 $\sum</em>{i\neq j}a_ib’<em>i&lt;\sum</em>{i=1,i\neq j}^na_ia_j \leq n c^2$。</p>
<p>可以发现，$nc^2$ 是 $10^6$ 级别的。</p>
<p>当 $q_i$ 大过 $nc^2$ 时，通过贪心，找到 $\frac{w_i}{a_i}$ 的最小值，一直选这个，直到 $q_i&lt;nc^2$，然后通过预处理 $nc^2$ 以内的背包来找到最小值。</p>
<p>时间复杂度 $O(n^2c^2+q)$。</p>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定 $7\times n$ 的网格，你需要在上面填进 $k$ 个L型的网格（共3个格子），以及 $7n-3k$ 个 $1\times 1$ 的格子。</p>
<p>有 $m$ 个格子不能填 $1\times 1$ 的格子进去。问合法的方案数对 $10^9+33$ 取模后结果。</p>
<p>$n\le 100,7n-20\le 3k\le 7n,m\le 7n$。时限4s。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p><del>口胡一下，还没写。</del></p>
<p>设 $f_{i,j,k}$ 表示搞到第 $i$ 列且第 $i$ 列目前的状态（是否填了格子进去）为 $j$，一共用了 $k$ 个 $1\times 1$ 的方案数。</p>
<p>时间复杂度 $O(2^{14}nk’^2)$，其中 $k’=7n-3k$。</p>
<h2 id="Contest-3"><a href="#Contest-3" class="headerlink" title="Contest 3"></a>Contest 3</h2><h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><h4 id="题源"><a href="#题源" class="headerlink" title="题源"></a>题源</h4><p><a href="https://www.codechef.com/problems/F2NDMAX">F2NDMAX</a></p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>首先，对于每个连通块，只有一个入度为 $0$ 的点。只有这个点以及只与这个点相连的点才有可能成为第二大的。</p>
<p>于是其他点可以完全删掉。剩下 $m$ 个类似于菊花图的东西。</p>
<p>而这 $m$ 个连通块至少要通过 $m-1$ 次询问才能确定谁最大，从而确定次大值。</p>
<p>贪心，维护菊花图的大小，从小到大将最小的两个大小为 $x,y$ 的菊花合并为 $y+1$ 即可。</p>
<p>时间复杂度 $O(\sum (n+m))$。</p>
<h3 id="G-1"><a href="#G-1" class="headerlink" title="G"></a>G</h3><h4 id="题源-1"><a href="#题源-1" class="headerlink" title="题源"></a>题源</h4><p><a href="https://www.codechef.com/problems/ANGKILL">Angry Killjee</a></p>
<h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定一个字符串 $|S|$，对于每个 $i(1\le i \le |S|)$，求出其某个长度为 $i$ 的子串的出现次数的最大值。</p>
<p>$|S|\le 2\times 10^5$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p><del>搞完题意发现有点简单，不管了</del></p>
<p>直接建出SAM，拓扑排序后对每个节点算出出现次数，SAM中的一个节点代表的是若干长度连续的字符串。然后求个后缀最大值就可以了。</p>
<p>时间复杂度 $O(|S|\Sigma )$。</p>
<p>SA做法？</p>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给定一个 $n\times m$ 的格子。格子上写着 $0\sim 9$ 的数字，在上面任选起点，上下左右可多次经过同一个格子地走行程一个数字。问最小的无法走出的正整数。</p>
<p>$n,m\le 100$。</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>设这个最小的正整数位数为 $x$，需要满足 $nm\times 4^{x-1}\geq 10^x$，解得 $x\le 8$。</p>
<p>于是只需最多走 $8$ 次，然后判断即可。</p>
<p>时间复杂度 $O(nm\times 4^{7})$。</p>
<h2 id="Contest-4"><a href="#Contest-4" class="headerlink" title="Contest 4"></a>Contest 4</h2><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>定义与两个字符串 $S,T$ 相关的函数 $f(S,T)$ 为它们最长公共子串的长度。</p>
<p>给定 $n$ 个字符串，多次询问两个字符串间的 $f$ 值。</p>
<p>$n\le 50000,q\le 10^5,\sum |s_i|\le 10^5$。</p>
<h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>如何求 $f$ ？</p>
<p>对于某个串建出SAM后，另一个串在上面跑匹配即可。</p>
<p>每次询问都去建出后缀自动机？</p>
<p>显然不可能。</p>
<p>设字符串总长为 $k$ 。考虑设定阈值 $L$，并对询问离线。</p>
<p>对于 $|s_i|$ 都 大于 $ L$ 的询问一共最多只有 $\frac{k^2}{L^2}$ 种。找到匹配时暴力跑SAM，时间复杂度 $O(\frac{k^2}{L})$。</p>
<p>对于存在 $|s_i|&lt;L$ 的询问，用短串在长串的SAM上匹配。这样每个串只用建一次SAM，每次询问都要花短串长度的时间。时间复杂度 $O(mL)$。</p>
<p>取 $L=\sqrt{k}$，时间复杂度 $O(k^{1.5}+mk^{0.5})$。</p>
<h3 id="G-2"><a href="#G-2" class="headerlink" title="G"></a>G</h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>给定 $n(n \le 3\times 10^6)$，问 $\sin(x)+\sin(y)+\sin(z)$ 的最大值，其中 $x,y,z$ 均为正整数且 $x+y+z=n$。</p>
<h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><p>显然先把 $z$ 换了，变成求 $\sin(x)+\sin(y)+\sin(n-(x+y))$ 的最大值。</p>
<p>第三个 $\sin$ 中的 $x+y$ 启发我们对 $\sin(x)+\sin(y)$ 进行和差化积的变换：</p>
<p>$$<br>\sin(x)+\sin(y)=2\sin(\frac{x+y}{2})\cos(\frac{x-y}{2})<br>$$</p>
<p>枚举 $x+y=k$，变成求 $\cos(\frac{k-2y}{2})$ 的最大值。</p>
<p>对 $k$ 的奇偶性分类讨论，作前缀最大值即可。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="Contest-5"><a href="#Contest-5" class="headerlink" title="Contest 5"></a>Contest 5</h2><h3 id="G-3"><a href="#G-3" class="headerlink" title="G"></a>G</h3><h4 id="题源-2"><a href="#题源-2" class="headerlink" title="题源"></a>题源</h4><p>Codeforces570D</p>
<h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>一棵以 $1$ 为根的有根树，每个节点上有一个小写字母。</p>
<p>多次询问某个子树中，将所有深度 $=k$ 的节点的字母，是否能通过随意组合形成回文串？</p>
<p>$n,q\le 5\times 10^5$。</p>
<h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><p>首先一定要解决的问题是：如何判断若干字母是否能形成回文串？</p>
<p>显然，这个问题等价于最多有一个字母的出现次数为奇数。</p>
<p>于是，用二进制的某一位表示每个字母的出现次数模二的结果，变成若干个数异或后，判断是否是 $2^i$ 或 $0$。</p>
<p>对树：算出dfs序，以及每个子树的节点的dfs序区间。</p>
<p>对于每一层，开一个vector，按dfs序存节点进去。</p>
<p>每次询问二分找到相应层数对应的dfs序区间，通过预处理出前缀异或和 $O(1)$ 判断能否组成回文串。</p>
<p>时间复杂度 $O((n+q)\log n)$。</p>
<h3 id="H-1"><a href="#H-1" class="headerlink" title="H"></a>H</h3><h4 id="题源-3"><a href="#题源-3" class="headerlink" title="题源"></a>题源</h4><p>Codeforces704B</p>
<h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>$n$ 个点排成一列，从 $s$ 出发，到 $t$ 结束，每个点必须且只经过一次。</p>
<p>从 $i$ 到 $j$ 的花费为：</p>
<ul>
<li>若 $i&gt;j$ ，则为 $x_j-x_i+d_i+a_i$；</li>
<li>若 $i&lt;j$ ，则为 $x_i-x_j+c_i+b_j$ 。</li>
</ul>
<p>求最小花费。</p>
<p>$n\le 5000$。</p>
<h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><p><del>有一种超级厉害的贪心方法，可是不会啊QAQ。</del></p>
<p>考虑<del>十分经典的</del>DP，设 $f_{i,j}$ 表示考虑前 $i$ 个点时，向右伸出去多少条链时的最小花费。</p>
<p>但这个链是有方向的呀，难道不用处理方向吗？</p>
<p>是的没错，就是不用处理，因为不同方向的链的数量的差不会超过 $2$，且这个差跟起点终点有很大关系。</p>
<p>于是只需要考虑每个点如何转移。</p>
<p>有四种情况：</p>
<ul>
<li>合并一条出去和另一条回来的链。</li>
<li>多出一条出去和回来的两条链。</li>
<li>延伸一条出去的链。</li>
<li>延伸一条回来的链。</li>
</ul>
<p>大力分类讨论，并注意特殊情况即可。</p>
<p>起点终点需要特判。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,s,t;</span><br><span class="line"></span><br><span class="line">ll x[N],a[N],b[N],c[N],d[N],f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">chk</span><span class="params">(ll &amp;x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="built_in">min</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); s=<span class="built_in">read</span>(); t=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) x[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) c[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(j,(i==<span class="number">1</span>)?<span class="number">0</span>:<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">if</span>(f[i<span class="number">-1</span>][j]&lt;inf)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==t)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j+<span class="number">1</span>&lt;=n) <span class="built_in">chk</span>(f[i][j+<span class="number">1</span>],f[i<span class="number">-1</span>][j]+(b[i]-x[i]));</span><br><span class="line">				<span class="keyword">if</span>(j) <span class="built_in">chk</span>(f[i][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j]+(a[i]+x[i]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(i==s)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j) <span class="built_in">chk</span>(f[i][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j]+(c[i]+x[i]));</span><br><span class="line">				<span class="keyword">if</span>(j+<span class="number">1</span>&lt;=n) <span class="built_in">chk</span>(f[i][j+<span class="number">1</span>],f[i<span class="number">-1</span>][j]+(d[i]-x[i]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(i!=s&amp;&amp;i!=t)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j<span class="number">-2</span>&gt;=<span class="number">0</span>) <span class="built_in">chk</span>(f[i][j<span class="number">-2</span>],f[i<span class="number">-1</span>][j]+x[i]+x[i]+a[i]+c[i]);</span><br><span class="line">				<span class="keyword">if</span>(j+<span class="number">2</span>&lt;=n) <span class="built_in">chk</span>(f[i][j+<span class="number">2</span>],f[i<span class="number">-1</span>][j]-x[i]-x[i]+b[i]+d[i]);</span><br><span class="line">				<span class="keyword">if</span>(j<span class="number">-2</span>&gt;=<span class="number">0</span>||i&gt;s) <span class="built_in">chk</span>(f[i][j],f[i<span class="number">-1</span>][j]+d[i]+a[i]);</span><br><span class="line">				<span class="keyword">if</span>(j<span class="number">-2</span>&gt;=<span class="number">0</span>||i&gt;t) <span class="built_in">chk</span>(f[i][j],f[i<span class="number">-1</span>][j]+c[i]+b[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[n][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><h4 id="题源-4"><a href="#题源-4" class="headerlink" title="题源"></a>题源</h4><p>Codeforces286E</p>
<h4 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个数 $a_1,a_2,\cdots a_n$，以及 $m$ 。求一个长度最小的序列 $b_1,b_2,\cdots,b_k$，使得对于每个 $a_i$，都能在序列中找到若干个数（能多次选同一个数）相加等于它；且从 $b$ 中选出若干个加起来不超过 $m$ 的数（能多次选同一个数），这些数的和在 $a_i$ 中。</p>
<p>若无解，输出 $-1$。</p>
<p>$n,m,a_i\le 10^6$。</p>
<h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4><p>将 $a$ 从小到大排序后可以发现，$b$ 中一定要有 $a$ 最小的那个数。</p>
<p>如果有 $a_i$ 等于若干 $b$ 的和，则这里面最小的 $b_i$ 一定是某个 $a$。那么 $a_i-b_{min}$ 也就是其他 $b$ 的和也要是某个 $a_i$，否则就违反了限制。</p>
<p>因此，$b_i$ 中全是 $a$ 序列中的数。显然，将整个 $a$ 序列全选上去最有可能有解。</p>
<p>如何判断无解？也就是存在某两个 $i,j$ 使得 $a_i+a_j$ 不在序列 $a$ 中？</p>
<p>FFT搞一搞即可。</p>
<p>如何找到最优解？</p>
<p>显然，如果对于某个 $a_k$，使得不存在 $a_i+a_j=a_k$ 的，这个 $a_k$ 就要选了。</p>
<p>于是就做完了，只需跑一遍FFT。</p>
<p>时间复杂度 $O(n+m\log m)$。</p>
<h2 id="Contest-6"><a href="#Contest-6" class="headerlink" title="Contest 6"></a>Contest 6</h2><h3 id="I-1"><a href="#I-1" class="headerlink" title="I"></a>I</h3><h4 id="题源-5"><a href="#题源-5" class="headerlink" title="题源"></a>题源</h4><p><a href="https://vjudge.ppsucxtt.cn/problem/CodeForces-908D/origin">CodeForces - 908D</a></p>
<h4 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h4><p>空字符串，每次有 $p$ 概率在后面加一个 <code>a</code>，有 $1-p$ 概率加一个 <code>b</code>，问第一次 <code>ab</code> 出现该字符串的子序列中次数 $\geq k$ 的期望时间，对 $10^9+7$ 取模。</p>
<p>$k\le 1000$。</p>
<h4 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h4><p>设 $f_{i,j}$ 表示字符串中一共 $i$ 个 <code>a</code>，且 <code>ab</code> 出现了 $j$ 次时的概率。</p>
<p>DP一下即可。</p>
<p>边界条件为 $i+j\geq k$，此时再加一个 <code>b</code>就会超过 $k$ 个，于是求个等比数列什么的就可以了。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h2 id="Contest-8"><a href="#Contest-8" class="headerlink" title="Contest 8"></a>Contest 8</h2><h3 id="H-2"><a href="#H-2" class="headerlink" title="H"></a>H</h3><h4 id="题源-6"><a href="#题源-6" class="headerlink" title="题源"></a>题源</h4><p><a href="https://vjudge.ppsucxtt.cn/problem/LibreOJ-6621/origin">LibreOJ - 6621</a></p>
<h4 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h4><p>显然，第一个人只会选一个话题。</p>
<p>枚举选了哪个话题，然后看有哪些话题能被这个话题所到达。</p>
<p>传递闭包。</p>
<p>时间复杂度 $O(\frac{n^3}{w})$。</p>
<h2 id="Contest-9"><a href="#Contest-9" class="headerlink" title="Contest 9"></a>Contest 9</h2><p>2019ICPC南京站。</p>
<h3 id="B-2"><a href="#B-2" class="headerlink" title="B"></a>B</h3><h4 id="题源-7"><a href="#题源-7" class="headerlink" title="题源"></a>题源</h4><p><a href="https://nanti.jisuanke.com/t/42396">Chessboard</a></p>
<h4 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h4><p>显然，最近的距离就是曼哈顿距离。</p>
<p>考虑现在已经走完了一个 $a\times b$ 大小的矩形，且当前位置在矩形的顶点上。</p>
<p>由于题目的限制，可以知道此时如果在当前的位置走出去一个，开出了新的一行或一列，那么之后就一定要马上填完这一行或一列，否则就不合法了。</p>
<p>于是相当于从一个 $1\times 1$ 的矩阵向外扩展到 $n\times m$。每次可以使行数或列数+1，问方案数。</p>
<p>答案即为 $4\times \binom{n+m-2}{n-1}$。乘 $4$ 是因为刚开始有四个方向。</p>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="题源-8"><a href="#题源-8" class="headerlink" title="题源"></a>题源</h4><p><a href="https://nanti.jisuanke.com/t/42404">Spy</a></p>
<h4 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h4><p>KM算法模板题，然而刚开始写了个假的 $O(n^4)$ 的KM，需要用bfs才能保证其正确性。</p>
<h2 id="Contest-10"><a href="#Contest-10" class="headerlink" title="Contest 10"></a>Contest 10</h2><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="题意-11"><a href="#题意-11" class="headerlink" title="题意"></a>题意</h4><p>给出字符串 $s,t$，求满足 $1\le i \le j \le |s|,1\le k \le |t|,j-i+1 &gt; k$，且 $s[i,j]+t[1,k]$ 为为回文串的 $(i,j,k)$ 对数。</p>
<p>$1\le |t| \le |s| \le 10^6$。</p>
<h4 id="题解-15"><a href="#题解-15" class="headerlink" title="题解"></a>题解</h4><p>由于 $j-i+1 &gt; k$，有 $s[i+k,j]$ 是回文串。</p>
<p>于是枚举 $i+k$ 的位置 $l$，变成统计有多少个 $x$ 满足 $s[x,l-1]$ 的反串为 $t$ 的前缀，有多少个 $y$ 满足 $s[l,y]$ 为回文串。</p>
<p>分成两部分，第一部分是扩展KMP模板，也可以二分+hash或SAM或SA；第二部分是manacher模板，也可以二分+hash或PAM。</p>
<p>大概可以有 $4\times 3=12$ 种不同的做法。</p>
<h3 id="F-1"><a href="#F-1" class="headerlink" title="F"></a>F</h3><p>详见：<a href="/2021/08/23/Tournament-2018-2019-ACM-ICPC-Asia-Nanjing-Regional-Contest-B/" title="“Tournament”">“Tournament”</a></p>
<h2 id="Contest-12"><a href="#Contest-12" class="headerlink" title="Contest 12"></a>Contest 12</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="题意-12"><a href="#题意-12" class="headerlink" title="题意"></a>题意</h4><p>给定 $L,R,k$，求最大的 $j-i+1$，使得 $L\le i \le j \le R$，且 $[i,j]$ 间的整数的异或和 $\le k$。</p>
<p>$T\le 5\times 10^5,L,R\le 10^{18}$。</p>
<h4 id="题解-16"><a href="#题解-16" class="headerlink" title="题解"></a>题解</h4><p>显然，$4x,4x+1,4x+2,4x+3$ 的异或和为 $0$。</p>
<p>于是整 $4$ 的倍数段的都可以。剩下的暴力枚举就可以了。</p>
<p>时间复杂度 $O(16T)$。</p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h3><h4 id="题意-13"><a href="#题意-13" class="headerlink" title="题意"></a>题意</h4><p>给定 $[L,R]$，判断是否满足 $\frac{\sum_{i=L}^{R}[i\in \mathbb{P}]}{R-L+1}&lt;\frac{1}{3}$。</p>
<p>$T\le 100,L,R\le 10^9$。</p>
<h4 id="题解-17"><a href="#题解-17" class="headerlink" title="题解"></a>题解</h4><p>$n$ 以内质数个数约为 $\frac{n}{\ln n}$ 级别。当 $[L,R]$ 越大，越难满足。</p>
<p>于是当 $R-L+1\geq K$ 的时候直接输出 <code>No</code>，剩下的用区间筛判断一下就好。</p>
<p>$K$ 取 $10^4$ 就可以了。</p>
<p>或许也可以直接跑Min-25筛？</p>
<h3 id="E-1"><a href="#E-1" class="headerlink" title="E"></a>E</h3><h4 id="题意-14"><a href="#题意-14" class="headerlink" title="题意"></a>题意</h4><p>求最大的 $i$，满足 $X^i\prod_{j=1}^na_j!$ 为 $Y!$ 的约数。</p>
<p>$\sum a_i\le Y \le 10^{18},X\le 10^{18}$。</p>
<h4 id="题解-18"><a href="#题解-18" class="headerlink" title="题解"></a>题解</h4><p>对 $X$ 进行质因数分解后，对每个质因数的项 $p^k$，算出最大的 $x$，满足 $p^x|\frac{Y!}{\prod_{i=1}^n a_i!}$。那么答案就是 $\min(\lfloor \frac{x}{k} \rfloor)$。</p>
<p>$x$ 十分容易算，于是只需要写个Pollard-rho就好了。</p>
<h3 id="F-2"><a href="#F-2" class="headerlink" title="F"></a>F</h3><p>直接打表。</p>
<p>打表时间复杂度 $O(200\times 10^8)$。</p>
<h3 id="H-3"><a href="#H-3" class="headerlink" title="H"></a>H</h3><h4 id="题意-15"><a href="#题意-15" class="headerlink" title="题意"></a>题意</h4><p>给定一序列，支持单点修改，查询区间的子集的mex，即最小的正整数 $x$，使得不存在在某个区间中选出若干个数的和为 $x$。</p>
<p>$n,q\le 2\times 10^5$，数为正整数。</p>
<h4 id="题解-19"><a href="#题解-19" class="headerlink" title="题解"></a>题解</h4><p>假设对于某个区间，如何计算这个mex呢？</p>
<p>显然，看区间的mex能否为 $1$，统计出所有 $\le 1$ 的数的和，假设为 $x$，若 $x\geq 1$，则统计所有 $\le x+1$ 的数的和，然后一直下去。</p>
<p>每次统计，$x$ 至少乘二。于是只需求区间小于等于某个数的和。</p>
<p>由于有单点修改，只需写一个树状数组套线段树。</p>
<p>时间复杂度 $O(n\log ^2n+q\log ^3n)$。</p>
<h3 id="J-1"><a href="#J-1" class="headerlink" title="J"></a>J</h3><h4 id="题意-16"><a href="#题意-16" class="headerlink" title="题意"></a>题意</h4><p>给定一个 $n$ 个点的完全无向图，将所有的边分成 $n-1$ 条路径，每个边恰在一条路径内，第 $i$ 条路径经过的边数为 $i-1$。</p>
<p>$n\le 10^3$。</p>
<h4 id="题解-20"><a href="#题解-20" class="headerlink" title="题解"></a>题解</h4><p>当时人傻掉了，以为 $n$ 个点的完全图都存在欧拉路。</p>
<p>当 $n$ 为奇数时，存在欧拉路。</p>
<p>当 $n$ 为偶数时，不存在欧拉路。</p>
<p>最麻烦的显然是长度最长的那些路径。</p>
<p>观察 $n=4$ 时可以发现，$n-1$ 和 $n-2$ 的路径可以通过 $n,n-1$ 号点及其与其他点相连的边的搞出来，然后变成一个 $n-2$ 的子问题。</p>
<p>发现当 $n&gt;4$ 时，$n,n-1$ 号点相连的边一共有 $2(n-2)+1=2n-3$ 条，恰好就是 $(n-1)+(n-2)$，而且也能构造出来。</p>
<p>于是就做完了。</p>
<h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>Trie上建SAM模板，然后来个parent-tree上倍增定位字符串。注意建SAM一定要bfs建，不然会被卡成 $O(n^2)$。</p>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h4 id="题意-17"><a href="#题意-17" class="headerlink" title="题意"></a>题意</h4><p>给定一棵有根树，求每棵子树的所有重心。</p>
<p>$n\le 2\times 10^5$。</p>
<h4 id="题解-21"><a href="#题解-21" class="headerlink" title="题解"></a>题解</h4><p>重心的若干性质：</p>
<ul>
<li>将两棵树拼起来，新树的重心必然是两棵原来的树的重心的最短路径上。</li>
<li>对于一棵树，其重心一定是自己，或在其重儿子中。</li>
<li>若割掉某个点后，剩下的子树中存在一个大小超过原树的一半，则该点一定不是重心。</li>
</ul>
<p>于是树剖，考虑重儿子的重心往上跳，直到成为子树的重心。是否继续往上则根据第三条性质。</p>
<p>时间复杂度 $O(n)$。注意可能有多个重心，需要特判。</p>
<p>一棵树存在多个重心当且仅当删掉某条边后树分裂成两棵且大小一样。</p>
<h2 id="Contest-15"><a href="#Contest-15" class="headerlink" title="Contest 15"></a>Contest 15</h2><h3 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h3><h4 id="题意-18"><a href="#题意-18" class="headerlink" title="题意"></a>题意</h4><p>将 $1\sim n^2$ 填进 $n\times n$ 的矩阵内，记 $|S|=|\{a_1,a_2,\cdots,a_n\}\or \{1,2,\cdots,n\}|$，其中 $a_i$ 为矩阵第 $i$ 行的最小值。求所有矩阵的 $|S|$ 的和。</p>
<p>$n\le 5000$。</p>
<h4 id="题解-22"><a href="#题解-22" class="headerlink" title="题解"></a>题解</h4><p>记 $f_i$ 表示 $i$ 这个数对 $\sum |S|$ 的贡献，即有多少个矩阵满足某一行的最小值为 $i$。</p>
<p>显然有：$f_i=n^2\binom{n^2-n}{i-1}(i-1)!(n^2-i)!$ 。</p>
<p>时间复杂度 $O(n^2+Tn)$。</p>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><p>树形DP模板。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>线段树模板题。</p>
<h3 id="E-2"><a href="#E-2" class="headerlink" title="E"></a>E</h3><p>$6n$ 即为答案。</p>
<h3 id="G-4"><a href="#G-4" class="headerlink" title="G"></a>G</h3><p>如果不能填格子，那么显然一定要在前 $i$ 个格子中滑下且这 $i$ 个格子都已经有球。枚举合法方案中最小的下标 $i$ 满足第 $i$ 个格子没有球。那么，前 $i$ 个格子都要有数，且后面的 $n-1-i$ 个格子随便乱放。</p>
<p>设 $g_{i,j}$ 表示长度为 $i-1$ 的格子随便乱放 $j$ 个，没有一个滑下的方案数。</p>
<p>设 $f_{i,j}$ 表示长度为 $i$ 的格子放了 $j$ 个，$1\sim i$ 的格子都放了球的方案数。</p>
<p>需要求出 $f,g$ ，还需要一个 $h_i$ 表示 $i$ 个格子放 $i$ 个球，且没有滑下的方案数。</p>
<p>$f,g$ 的转移枚举第一段，然后转移。</p>
<p>时间复杂度 $O(n^3)-O(n)$。</p>
<p>显然 $f,g$ 的转移是一个卷积的形式，可优化到 $O(n^2\log n)-O(n)$，但完全没必要。</p>
<h3 id="H-4"><a href="#H-4" class="headerlink" title="H"></a>H</h3><p>显然奇数一定不行。</p>
<p>那么操作就变成 $\times 2,/2,+1,-1$。</p>
<p>利用快速幂的思想，算出从 $1$ 出发向下走的步数 $x$，以及向右走的步数 $y$，</p>
<p>开始先向下走一步变成 $2$，之后每向下一步或向右一步都会 $\times 2$ 变成 $4$，需要经过某些转换转变回 $2$。</p>
<p>显然某种兜一圈的方法可以完成这个操作。</p>
<p>于是就做完了，最多不会超过 $197\times 5+1=986$ 次操作。</p>
<h3 id="I-2"><a href="#I-2" class="headerlink" title="I"></a>I</h3><p>签到题。</p>
<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><p>边权从大到小排序，然后并查集按秩合并。</p>
<h3 id="M-1"><a href="#M-1" class="headerlink" title="M"></a>M</h3><p>模拟即可。</p>
<h2 id="Contest-18"><a href="#Contest-18" class="headerlink" title="Contest 18"></a>Contest 18</h2><a href="/2021/09/08/2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest/" title="“ICPC2018沈阳”">“ICPC2018沈阳”</a>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>SAM</tag>
        <tag>扩展KMP</tag>
        <tag>manacher</tag>
        <tag>FFT</tag>
        <tag>树状数组</tag>
        <tag>KM算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校4</title>
    <url>/2021/07/29/hdu2021%E5%A4%9A%E6%A0%A14/</url>
    <content><![CDATA[<p><a href="https://acm.hdu.edu.cn/contests/contest_show.php?cid=987">比赛链接</a></p>
<span id="more"></span>

<h3 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h3><p>签到题，给出的项除了常数以外都是不收敛的。</p>
<p>于是判断有 $x$ 的项是否为 $0$ 即可。</p>
<h3 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h3><p>签到题，暴力枚举起始点，用桶记录个数即可。</p>
<p>也可套用点分治做法做到 $O(n\log n)$。</p>
<h3 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>求所有长度为 $n$ 的01字符串的最短循环节的出现次数。</p>
<p>$n\le 10^9,\sum n\le 10^{10}$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>设 $g_n$ 表示答案，$f_i$ 表示最小循环节长度为 $i$ 的字符串个数。</p>
<p>有：$g_n=\sum_{i=1}^n\left \lfloor \frac{n}{i} \right \rfloor f_i$。</p>
<p>考虑 $f_i$ 如何求：</p>
<p>当 $m\le \frac{n}{2}$ 时，$2^m=\sum_{i|m} f_i$。</p>
<p>而当 $m&gt;\frac{n}{2}$ 后，上式就不成立了。因为周期引理不再适用。</p>
<p>但可以发现，此时的 $\left \lfloor \frac{n}{i} \right \rfloor=1$ ，于是我们还是通过补集转换，转去算 $2^n-\sum_{i=1}^{\left \lfloor \frac{n}{2} \right \rfloor} f_i$ 。</p>
<p>于是有 $g_n=2^n+\sum _{i=1}^{\frac{n}{2}}(\left \lfloor \frac{n}{i} \right \rfloor -1)f_i$。</p>
<p>整除分块，又因为有 $2^n=f * 1$，杜教筛筛出 $f_i$ 的前缀和即可。发现跑一次算 $f_i$ 前缀和的杜教筛就能算出整除分块里的所有的前缀和。</p>
<p>这里记录一下杜教筛的过程：若有积性函数 $f$，要算 $f$ 的前缀和 $S_n=\sum_{i=1}^nf_i$找到另外两个积性函数 $h,g$ 使得 $h=f * g$。</p>
<p>$$<br>\sum_{i=1}^n h_i=\sum_{i=1}^n \sum_{j|i} f(j)g(\frac{i}{j})\<br>=\sum_{i=1}^n g_i \sum_{j=1}^{\left \lfloor \frac{n}{i} \right \rfloor} f_i\<br>=\sum_{i=1}^n g_i S_{\left \lfloor \frac{n}{i} \right \rfloor}<br>$$</p>
<p>于是就可以了。</p>
<p>需要预处理 $O(n^{\frac{2}{3}})$ 前的 $f_i$ 的前缀和。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[N+<span class="number">3</span>],f[N+<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll nw=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		nw=(nw*<span class="number">2</span>)%mod;</span><br><span class="line">		f[i]=<span class="built_in">Dec</span>(nw,f[i]);</span><br><span class="line">		s[i]=<span class="built_in">Add</span>(s[i<span class="number">-1</span>],f[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=i+i;j&lt;=n;j+=i)</span><br><span class="line">			f[j]=<span class="built_in">Add</span>(f[j],f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,n2,tot;</span><br><span class="line">ll a[<span class="number">300000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&lt;=n2?x:tot-n/x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc_g</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="built_in">id</span>(m)]!=<span class="number">-1</span>) <span class="keyword">return</span> a[<span class="built_in">id</span>(m)];</span><br><span class="line">	ll ans=<span class="built_in">Dec</span>(<span class="built_in">Pow</span>(<span class="number">2</span>,(m+<span class="number">1</span>)),<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">2</span>,r;l&lt;=m;l=r+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		r=m/(m/l);</span><br><span class="line">		ans=<span class="built_in">Dec</span>(ans,<span class="number">1ll</span>*(r-l+<span class="number">1</span>)*<span class="built_in">calc_g</span>(m/l)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a[<span class="built_in">id</span>(m)]=ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc_f</span><span class="params">(<span class="type">int</span> _n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=_n; n2=<span class="built_in">sqrt</span>(n+<span class="number">0.3</span>); tot=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		r=n/(n/l);</span><br><span class="line">		a[tot++]=((r&lt;=N)?s[r]:<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> m=n/<span class="number">2</span>;</span><br><span class="line">	ll ans=<span class="built_in">Pow</span>(<span class="number">2</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=m;l=r+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		r=<span class="built_in">min</span>(m,n/(n/l));</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="number">1ll</span>*(n/l<span class="number">-1</span>)*(<span class="built_in">calc_g</span>(r)-<span class="built_in">calc_g</span>(l<span class="number">-1</span>)+mod)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1e6</span>);</span><br><span class="line">	<span class="function">CASET <span class="title">printf</span><span class="params">(<span class="string">&quot;%lld\n&quot;</span>,calc_f(read()))</span></span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给出一个由小写字母组成的字符串 $S$，及每个字符的权值。一个串的价值为其每个字符的权值之和。</p>
<p>求 $S$ 所有不同的子串中，价值为第 $k$ 小的价值是多少。没有则输出 $-1$。</p>
<p>两个子串相同当且仅当他们长度相同且对应每一位字符均相等。</p>
<p>$n\le 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>真的是，好久不写，都忘了SAM的性质了。</p>
<p>二分答案，建出SAM后，每个节点对应着 $len_i-len_{fa_i}$ 个子串。且长度连续，均为当中最长串的后缀。</p>
<p>于是在每个节点里面再二分一次找到串的个数就好了。</p>
<p>注意！需要记录SAM中每个串的终止位置！即right集合当中的任意一个即可。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],fa[N],len[N],las,siz,idx[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=siz;i++) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),fa[i]=len[i]=<span class="number">0</span>;</span><br><span class="line">		las=siz=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> cur=++siz;</span><br><span class="line">		idx[cur]=id+<span class="number">1</span>;</span><br><span class="line">		len[cur]=len[las]+<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> p=las;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> clone=++siz;</span><br><span class="line">				len[clone]=len[p]+<span class="number">1</span>; idx[clone]=idx[q];</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				fa[clone]=fa[q];</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">				fa[cur]=fa[q]=clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,sum[N],val[<span class="number">30</span>];</span><br><span class="line">ll k;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> L[N],R[N],id[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ss=<span class="number">0</span>;</span><br><span class="line">	m=SAM::siz;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,SAM::siz) id[i]=SAM::idx[i],L[i]=SAM::len[SAM::fa[i]]+<span class="number">1</span>,R[i]=SAM::len[i],ss+=SAM::len[i]-SAM::len[SAM::fa[i]];</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ss=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,m) <span class="keyword">if</span>(sum[id[i]]-sum[id[i]-L[i]]&lt;=x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l=L[i],r=R[i],mid;</span><br><span class="line">		<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(sum[id[i]]-sum[id[i]-mid]&lt;=x) l=mid+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ss+=(r-L[i]+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); cin&gt;&gt;k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">		SAM::<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,<span class="built_in">strlen</span>(s)) SAM::<span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>,i);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">25</span>) val[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">get</span>()&lt;k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum[i]=sum[i<span class="number">-1</span>]+val[s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		<span class="type">int</span> l=<span class="number">0</span>,r=n*<span class="number">100</span>,mid;</span><br><span class="line">		<span class="keyword">for</span>(;l+<span class="number">1</span>&lt;r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(mid)&gt;=k) r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>$n\times m$ 的网格图，从 $(1,1)$ 开始，每次能往上或往右走一格，走到 $(n,m)$。有 $k$ 个点不能经过。问有可能走到的格子有多少个。</p>
<p>$n,m,k\le 10^5$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>补集转换，变为求哪些格子走不到。</p>
<p>对于一条斜向上的线段，不能走的格子将形成一个直角三角形或等腰梯形。</p>
<p>考虑斜着的扫描线，这样相当于是若干条不相交的线段组成。随着扫描线的右移，中间的线段长度将集体 $-1$，两端的线段有可能不减。</p>
<p>用链表维护这些线段，插入一个点时判断能否与左右两端的线段合并，或本身就在线段里面。</p>
<p>线段长度减一的话暴力枚举链表中的每一个元素即可，长度减到 $0$ 后将其删除。</p>
<p>这样做的复杂度是对的，因为线段原始的总长不会超过 $k$。</p>
<p>时间复杂度 $O(n+m+k)$。不知为何跑得很慢。</p>
<h4 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line">node p[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">	<span class="type">int</span> y,len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">line s[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,k,L[N],R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> p[x].y&gt;p[y].y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">		ll ans=<span class="number">1ll</span>*n*m;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+m) adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n+m+<span class="number">1</span>) L[i]=R[i]=<span class="number">0</span>;</span><br><span class="line">		R[<span class="number">0</span>]=n+m+<span class="number">1</span>; L[n+m+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) p[i].x=<span class="built_in">read</span>(),p[i].y=<span class="built_in">read</span>(),<span class="built_in">add</span>(p[i].x+p[i].y,i);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n+m) <span class="built_in">sort</span>(<span class="built_in">all</span>(adj[i]),cmp);</span><br><span class="line">		<span class="type">int</span> u;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=R[<span class="number">0</span>];j!=n+m+<span class="number">1</span>;j=R[j])</span><br><span class="line">			&#123;</span><br><span class="line">				s[j].len--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(R[<span class="number">0</span>]!=n+m+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				u=R[<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">if</span>(s[u].y==i<span class="number">-2</span>&amp;&amp;i&lt;=m+<span class="number">1</span>) s[u].len++,s[u].y=i<span class="number">-1</span>;</span><br><span class="line">				u=L[n+m+<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">if</span>(s[u].y==s[u].len+<span class="number">1</span>&amp;&amp;i&lt;=n+<span class="number">1</span>) s[u].len++;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=R[<span class="number">0</span>];j!=n+m+<span class="number">1</span>;j=R[j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[j].len==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					L[R[j]]=L[j];</span><br><span class="line">					R[L[j]]=R[j];</span><br><span class="line">					j=L[j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">int</span> j=R[<span class="number">0</span>];</span><br><span class="line">			s[<span class="number">0</span>].y=<span class="number">1000000000</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(;j!=n+m+<span class="number">1</span>&amp;&amp;s[j].y&gt;=p[v].y;j=R[j]);</span><br><span class="line">				j=L[j]; k=R[j];</span><br><span class="line">				<span class="keyword">if</span>(!j)</span><br><span class="line">				&#123;</span><br><span class="line">					s[v].y=p[v].y; s[v].len=<span class="number">1</span>;</span><br><span class="line">					R[<span class="number">0</span>]=L[k]=v;</span><br><span class="line">					L[v]=<span class="number">0</span>; R[v]=k;</span><br><span class="line">					j=v;</span><br><span class="line">					<span class="keyword">if</span>(k==n+m+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[j].y-s[j].len+<span class="number">1</span>&lt;=p[v].y)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span>(s[j].y-s[j].len==p[v].y) s[j].len++;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							s[v].y=p[v].y; s[v].len=<span class="number">1</span>;</span><br><span class="line">							R[j]=L[k]=v;</span><br><span class="line">							L[v]=j; R[v]=k;</span><br><span class="line">							j=v;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(k!=n+m+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[j].y-s[j].len==s[k].y)</span><br><span class="line">					&#123;</span><br><span class="line">						s[j].len+=s[k].len;</span><br><span class="line">						<span class="type">int</span> t=R[k];</span><br><span class="line">						L[t]=j; R[j]=t;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">			ll k=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=R[<span class="number">0</span>];j!=n+m+<span class="number">1</span>;j=R[j]) ans-=s[j].len,k+=s[j].len;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>数论</tag>
        <tag>SAM</tag>
        <tag>杜教筛</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校3</title>
    <url>/2021/07/27/hdu2021%E5%A4%9A%E6%A0%A13/</url>
    <content><![CDATA[<p><a href="https://acm.hdu.edu.cn/search.php?field=problem&key=2021%A1%B0MINIEYE%B1%AD%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A83%A3%A9&source=1&searchmode=source">链接</a></p>
<span id="more"></span>

<h3 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一棵树，有点权 $p_i$。</p>
<p>$q$ 次询问，每次询问给定从 $u$ 到 $v$ 的有向路径，以及权值 $k$。从 $u$ 到 $v$ 依次选择点权 $p_i$，若 $k\geq p_i$，则 $k$ 变为 $k-p_i$。输出最后的 $k$。</p>
<p>$n,q\le 10^5,p_i\le 10^9,\sum n,\sum q\le 8\times 10^5$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>离线，然后树剖，将每条路径分成向上和向下共 $O(\log n)$ 条dfs序连续的段。变成序列上的操作。</p>
<p>用平衡树维护每个询问的当前答案。</p>
<p>每次遇到一个数 $p_i$，需要将平衡树内 $\geq p_i$ 的数都减去 $p_i$。</p>
<p>这个是平衡树的经典操作，分成 $[0,k - 1],[k,2k-1],\left [2k,+\infty \right )$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Treap&#123;</span><br><span class="line">    <span class="type">int</span> son[N][<span class="number">2</span>],val[N],siz[N],rnd[N],tag[N],fa[N],rt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		rt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) son[i][<span class="number">0</span>]=son[i][<span class="number">1</span>]=val[i]=tag[i]=fa[i]=<span class="number">0</span>,siz[i]=<span class="number">1</span>,rnd[i]=<span class="built_in">rand</span>();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		siz[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">0</span>]) siz[u]+=siz[son[u][<span class="number">0</span>]],fa[son[u][<span class="number">0</span>]]=u;</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">1</span>]) siz[u]+=siz[son[u][<span class="number">1</span>]],fa[son[u][<span class="number">1</span>]]=u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u||!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">0</span>]) tag[son[u][<span class="number">0</span>]]+=tag[u],val[son[u][<span class="number">0</span>]]-=tag[u];</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">1</span>]) tag[son[u][<span class="number">1</span>]]+=tag[u],val[son[u][<span class="number">1</span>]]-=tag[u];</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="built_in">pushdown</span>(x); <span class="built_in">pushdown</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(rnd[x]&lt;rnd[y]) &#123;son[x][<span class="number">1</span>]=<span class="built_in">merge</span>(son[x][<span class="number">1</span>],y); <span class="built_in">pushup</span>(x);<span class="keyword">return</span> x;&#125;</span><br><span class="line">        <span class="keyword">else</span>              &#123;son[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,son[y][<span class="number">0</span>]); <span class="built_in">pushup</span>(y);<span class="keyword">return</span> y;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split_val</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">if</span>(val[u]&lt;=k) x=u,<span class="built_in">split_val</span>(son[x][<span class="number">1</span>],k,son[x][<span class="number">1</span>],y);</span><br><span class="line">        <span class="keyword">else</span> y=u,<span class="built_in">split_val</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">split_siz</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=siz[son[u][<span class="number">0</span>]]) y=u,<span class="built_in">split_siz</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">else</span> x=u,<span class="built_in">split_siz</span>(son[x][<span class="number">1</span>],k-siz[son[u][<span class="number">0</span>]]<span class="number">-1</span>,son[x][<span class="number">1</span>],y);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x,y,z,ans;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		val[id]=v; tag[id]=<span class="number">0</span>; son[id][<span class="number">0</span>]=son[id][<span class="number">1</span>]=fa[id]=<span class="number">0</span>; siz[id]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">split_val</span>(rt,v,x,y);</span><br><span class="line">        rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,id),y);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="type">int</span> st[<span class="number">1000</span>],top;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> si=<span class="number">1</span>,u;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>]) si+=siz[son[x][<span class="number">0</span>]];</span><br><span class="line">		fa[rt]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(top=<span class="number">0</span>;fa[x];x=fa[x]) st[++top]=x;</span><br><span class="line">		<span class="keyword">for</span>(;top;top--)</span><br><span class="line">		&#123;</span><br><span class="line">			u=st[top];</span><br><span class="line">			<span class="built_in">pushdown</span>(fa[u]);</span><br><span class="line">			<span class="keyword">if</span>(son[fa[u]][<span class="number">1</span>]==u)</span><br><span class="line">				si+=siz[son[fa[u]][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> si;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> si=<span class="built_in">push</span>(id);</span><br><span class="line">        <span class="built_in">split_siz</span>(rt,si<span class="number">-1</span>,x,y);</span><br><span class="line">        <span class="built_in">split_siz</span>(y,<span class="number">1</span>,y,z);</span><br><span class="line">		v=val[y];</span><br><span class="line">		fa[id]=<span class="number">0</span>;</span><br><span class="line">        rt=<span class="built_in">merge</span>(x,z);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">0</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">0</span>],k),son[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[u][<span class="number">1</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">1</span>],k),son[u][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">		val[u]-=k;</span><br><span class="line">		<span class="type">int</span> w,e;</span><br><span class="line">		<span class="built_in">split_val</span>(rt,val[u],w,e);</span><br><span class="line">		rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(w,u),e);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split_val</span>(rt,k<span class="number">-1</span>,x,y);</span><br><span class="line">		<span class="built_in">split_val</span>(y,<span class="number">2</span>*k<span class="number">-1</span>,y,z);</span><br><span class="line">		<span class="keyword">if</span>(z) tag[z]+=k,val[z]-=k;</span><br><span class="line">		rt=x;</span><br><span class="line">		<span class="built_in">dfs</span>(y,k);</span><br><span class="line">		rt=<span class="built_in">merge</span>(rt,z);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,q,val[N];</span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> siz[N],fa[N],top[N],son[N],dep[N],dfn[N],tim,_dfn[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dep[u]=dep[pre]+<span class="number">1</span>; fa[u]=pre; siz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[son[u]]&lt;siz[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	top[u]=tp;</span><br><span class="line">	dfn[u]=++tim;</span><br><span class="line">	_dfn[tim]=u;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],tp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!top[v=ver[i]])</span><br><span class="line">			<span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;top[x]!=top[y];x=fa[top[x]])</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			<span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> dep[x]&gt;dep[y]?y:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> in[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; op[<span class="number">2</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;top[x]!=top[y];)</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&gt;dep[top[y]])</span><br><span class="line">			op[<span class="number">0</span>][dfn[x]].<span class="built_in">pb</span>(id),op[<span class="number">0</span>][dfn[top[x]]<span class="number">-1</span>].<span class="built_in">pb</span>(id),x=fa[top[x]];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			op[<span class="number">1</span>][dfn[top[y]]].<span class="built_in">pb</span>(id),op[<span class="number">1</span>][dfn[y]+<span class="number">1</span>].<span class="built_in">pb</span>(id),y=fa[top[y]];</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y]) op[<span class="number">0</span>][dfn[x]].<span class="built_in">pb</span>(id),op[<span class="number">0</span>][dfn[y]<span class="number">-1</span>].<span class="built_in">pb</span>(id);</span><br><span class="line">	<span class="keyword">else</span> op[<span class="number">1</span>][dfn[x]].<span class="built_in">pb</span>(id),op[<span class="number">1</span>][dfn[y]+<span class="number">1</span>].<span class="built_in">pb</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		tim=tot=<span class="number">0</span>;</span><br><span class="line">		n=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) head[i]=son[i]=fa[i]=dep[i]=top[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) val[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n+<span class="number">1</span>) op[<span class="number">0</span>][i].<span class="built_in">clear</span>(),op[<span class="number">1</span>][i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">		<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>); <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> x,y,z,k;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,q)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">get</span>(x,y,i);</span><br><span class="line">			ans[i]=<span class="built_in">read</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		Treap::<span class="built_in">init</span>(q);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,q) in[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ff</span>(j,<span class="number">0</span>,op[<span class="number">0</span>][i].<span class="built_in">size</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				k=op[<span class="number">0</span>][i][j];</span><br><span class="line">				<span class="keyword">if</span>(in[k])</span><br><span class="line">				&#123;</span><br><span class="line">					Treap::<span class="built_in">del</span>(k,ans[k]);</span><br><span class="line">					in[k]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					Treap::<span class="built_in">ins</span>(k,ans[k]);</span><br><span class="line">					in[k]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			Treap::<span class="built_in">work</span>(val[_dfn[i]]);</span><br><span class="line">		&#125;</span><br><span class="line">		Treap::<span class="built_in">init</span>(q);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,q) in[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ff</span>(j,<span class="number">0</span>,op[<span class="number">1</span>][i].<span class="built_in">size</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				k=op[<span class="number">1</span>][i][j];</span><br><span class="line">				<span class="keyword">if</span>(in[k])</span><br><span class="line">				&#123;</span><br><span class="line">					Treap::<span class="built_in">del</span>(k,ans[k]);</span><br><span class="line">					in[k]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					Treap::<span class="built_in">ins</span>(k,ans[k]);</span><br><span class="line">					in[k]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			Treap::<span class="built_in">work</span>(val[_dfn[i]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,q) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定两个十进制的数字串 $S,T$，均有通配字符‘*’，对于每个 $i(0\le i \le |T|)$，问若能至多失配 $i$ 次，字符串 $S$ 中长度为 $T$ 的子串有多少个能与之匹配。</p>
<p>$|T|\le |S|\le 2\times 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>含通配字符的通常可以用FFT去进行解决。设 $f_i$ 表示 $S[i,i+|T|-1]$ 与 $T$ 匹配的次数，算出 $f_i$ 即可。</p>
<p>这里将每个数字 $k$ 分开考虑，设 $a_i=[S_i==k],b_i=[T_i==k]$，对于该字符，$S[j,j+|T|-1]$ 与 $T$ 匹配的次数为 $\sum_{i=0}^{|T|-1}a_{i+j}b_i$。</p>
<p>将 $b_i$ 反串，然后FFT即可。</p>
<p>但是，对于通配字符，它们在每个数字中都会被统计到，统计多了 $10-1=9$ 次，于是再做一次跟通配字符相关的FFT，减去其 $9$ 倍的贡献即可。</p>
<p>时间复杂度 $O(11n\log n)$。</p>
<h3 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>$n$ 个工人，$n$ 件物品要加工。第 $i$ 个人加工 $j$ 物品能获得 $a_i+b_j$ 的收益。</p>
<p>每个人只能加工最多一个物品，每个物品最多只能被一个人加工。</p>
<p>$m$ 条限制，每条限制形如 $i$ 工人不能加工 $j$ 物品。</p>
<p>对于每个 $i$，问加工 $i$ 个物品所能获得的最大收益，或者判断不可行。</p>
<p>$n\le 4000,m\le 10000$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>显然是一个费用流的模型。</p>
<p>建立源点 $S$ ，向工人连边权为 $1$，费用为 $a_i$ 的边。</p>
<p>建立汇点 $T$，物品向 $T$ 连边权为 $1$，费用为 $b_i$ 的边。</p>
<p>工人向能加工的物品连一条边权为 $1$，费用为 $0$ 的边。</p>
<p>然后每次将权值加 $1$，跑费用流。</p>
<p>但是这样的边数是 $O(n^2)$ 的。</p>
<p>考虑一共 $n$ 次找增广路，每次增广时寻找一条路径，且起点终点都没有用过的点，并且要权值和要最大。</p>
<p>考虑模拟这个过程，但由于这是一个补图，采用在补图上做的经典套路，维护一个链表表示右边还未访问的节点。模拟费用流的过程，左边的节点从大到小开始寻找增广路，每次找到的点要么在原图中有连边，要么在链表中被删去，一次找到所有增广路的时间是 $O(n+m)$ 的。</p>
<p>于是总的时间复杂度 $O(n^2+nm)$。</p>
<h3 id="1009"><a href="#1009" class="headerlink" title="1009"></a>1009</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>$n\times n$ 的格子，每个格子有两个值 $a_{i,j},b_{i,j}$。</p>
<p>从 $(1,1)$ 开始，每步往下或往右走，走到 $(n,n)$。</p>
<p>求这样的路径中 $(\sum a_{i,j})\times (\sum b_{i,j})$ 的最大值。</p>
<p>$n\le 100,a_{i,j},b_{i,j} \le 10^6$。</p>
<p>数据随机。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>设 $f_{i,j,k}$ 表示走到 $(i,j)$ ，$\sum a =k$  时 $b_{i,j}$ 的最大值。</p>
<p>对于同一个 $i,j$，若 $k_1\le k_2$ 且 $f_{i,j,k_1}\le f_{i,j,k_2}$，则 $k_1$ 完全没用。</p>
<p>在随机情况下，合法的 $k$ 大概只有几千。</p>
<p>于是复杂度为 $O(n^2k)$。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>LGV引理</title>
    <url>/2021/07/26/LGV%E5%BC%95%E7%90%86/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>LGV引理可以用来解决在DAG上不相交路径的计数。</p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个有向无环图，各 $k$ 个点的集合 $A,B$ 。要求从统计 $n$ 条从 $A_i$ 到 $B_i$ 的路径，每个点至多在一条路径中的方案数 $N$。</p>
<h3 id="LGV引理"><a href="#LGV引理" class="headerlink" title="LGV引理"></a>LGV引理</h3><p>记 $e(u,v)$ 为从点 $u$ 到点 $v$ 的路径方案数，则有：</p>
<p>$$<br>\left | N \right |=\begin{vmatrix}<br>e(A_1,B_1) &amp; e(A_1,B_2) &amp; \cdots &amp; e(A_1,B_n)\\<br>e(A_2,B_1) &amp; e(A_2,B_2) &amp; \cdots &amp; e(A_2,B_n)\\<br>\vdots  &amp; \vdots  &amp; \ddots  &amp; \vdots \\<br>e(A_n,B_1) &amp; e(A_n,B_2) &amp; \cdots &amp; e(A_n,B_n)<br>\end{vmatrix}<br>$$</p>
<h3 id="证明感性理解"><a href="#证明感性理解" class="headerlink" title="证明感性理解"></a><del>证明</del>感性理解</h3><p>$$<br>|N|=\sum_{p_i\in [1,n],p_i\neq p_j}(-1)^{\sigma(p)}\prod_{i=1}^n e（A_i,B_{p_i})<br>$$</p>
<p>假如某种方案出现了相交情况，比如从 $A_1$ 到 $B_i$ 与从 $A_2$ 到 $B_j$ 出现了相交，那么将 $B_i$ 与 $B_j$ 交换后，逆序对个数奇偶性改变，由容斥原理一减一加就没了。</p>
<p>于是求个行列式就好了。</p>
<p>$e$ 数组也可以直接DP算出来。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul>
<li>NOI2021D1T2 模板题</li>
<li><a href="#">Post not found: “[yja]jzoj5606”</a></li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校2</title>
    <url>/2021/07/23/hdu2021%E5%A4%9A%E6%A0%A12/</url>
    <content><![CDATA[<p>竟然排到了第12名，学弟们都是神仙啊。</p>
<span id="more"></span>

<h3 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h3><p>签到题，对于边长为 $i$ 的点，答案为 $8(n-i)^3$。</p>
<p>求个和即可。</p>
<h3 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h3><p>简单题，树剖后转换为区间加二次函数，线段树维护即可。</p>
<h3 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h3><h3 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h3><p>也就是多校1的某两题结合起来。。。</p>
<p>离线后将每个点，询问插进Trie里面，Trie中每个节点维护一个线段树。</p>
<p>询问在线段树上查询即可，合并使用线段树合并。</p>
<h3 id="1010"><a href="#1010" class="headerlink" title="1010"></a>1010</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定奇质数 $p$，与整数 $a(1 &lt; a &lt; p)$，长度为 $p-1$ 的序列 $b$ 满足 $b_i&lt;p,b_i\equiv ai\pmod p$。</p>
<p>问序列 $b$ 的逆序对个数模 $2$ 的结果。</p>
<p>$T\le 10^5,p\in \mathbb{P},2 \le a &lt; p &lt; 10^{18}$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>对于一个排列，交换任意两个数后，逆序对奇偶性一定改变。</p>
<p>因此，只需找到最小的 $d$，满足 $a^d\equiv 1\pmod p$，这个 $d$ 显然是 $\varphi(p)=p-1$ 的约数。</p>
<p>之后整个 $b$ 序列就形成了 $\frac{p-1}{d}$ 个环，每个环需要交换 $d-1$ 次。</p>
<p>于是答案即为 $\frac{p-1}{d}(d-1)\bmod 2$。</p>
<p>当且仅当 $d$ 为偶数，且 $d$ 中 $2$ 的次幂与 $p-1$ 中相同时答案为 $1$。</p>
<p>于是只需判断 $a^{\frac{p-1}{2}}$ 在模 $p$ 意义下是否为 $1$ 即可。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2021多校1</title>
    <url>/2021/07/20/hdu2021%E5%A4%9A%E6%A0%A11/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=2021%A1%B0MINIEYE%B1%AD%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A81%A3%A9&source=1&searchmode=source">链接</a></p>
<span id="more"></span>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$，求 $(n\bmod1)\vee (n\bmod 2)\vee \cdots\vee (n\bmod n)$。</p>
<p>$T\le 5000$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>打表题，可能的答案只能为 $2^k-1$。于是算出 $k$ 即可。</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>一个 $2\sim n$ 标记的 $n-1$ 个点形成一个完全无向图，边 $i,j$ 的边权为 $\text{lcm}(i,j)$。求完全图的最小生成树边权和。</p>
<p>$n\le 10^7,T\le 100$。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>构造题，对于 $3\sim n$ 的点，质数则连 $2$，否则随便找个约数连即可。</p>
<p>于是线性筛预处理即可。</p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>一个序列，找到最短的序列使得区间异或和不小于 $k$，输出左端点最小时的情况。</p>
<p>$n\le 10^5,a_i &lt; 2^{30}$。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>做前缀异或和，然后在Trie上操作即可。</p>
<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>$n$ 个人传球，每次不能传给自己。刚开始在 $1$手上，设第 $x$ 次传球后在 $1$ 手上的情况为 $f_x$，求最小的 $x$ 使得 $f_x\equiv t\pmod {998244353}$。</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>推出 $f_x$ 通项为 $\frac{n-1}{n}(-1)^i+\frac{1}{n}(n-1)^i$。</p>
<p>于是将 $i$ 分开奇偶讨论，BSGS即可。</p>
<p>时间复杂度 $O(T\sqrt{n})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> w=<span class="built_in">sqrt</span>(mod);</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> m1=<span class="number">2333333</span>;</span><br><span class="line">vector&lt;pii&gt; has[m1];</span><br><span class="line"><span class="type">int</span> st[w+<span class="number">5</span>],top;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y=x%m1;</span><br><span class="line">	has[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x,id));</span><br><span class="line">	st[++top]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y=x%m1;</span><br><span class="line">	ll ans=<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,(<span class="type">int</span>)has[y].<span class="built_in">size</span>()) <span class="keyword">if</span>(x==has[y][i].fi) ans=<span class="built_in">max</span>(ans,(ll)has[y][i].se);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll a,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll p=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,w)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">insert</span>(p*a%mod,i);</span><br><span class="line">		(p*=x)%=mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=inf;</span><br><span class="line">	p=<span class="built_in">Pow</span>(x,w);</span><br><span class="line">	ll t=p;</span><br><span class="line">	ll q;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,w+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q=<span class="built_in">find</span>(t);</span><br><span class="line">		<span class="keyword">if</span>(q!=<span class="number">-1</span>) ans=<span class="built_in">min</span>(ans,<span class="number">1ll</span>*i*w-q);</span><br><span class="line">		t=t*p%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,top) has[st[i]].<span class="built_in">clear</span>();</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> (ans==inf)?<span class="number">-1</span>:ans;</span><br><span class="line">&#125;</span><br><span class="line">ll n,x,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">0</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">1</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		a=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">		b=a*(n<span class="number">-1</span>)%mod;</span><br><span class="line">		ll t=<span class="built_in">solve</span>((x*n-(n<span class="number">-1</span>)+mod)%mod,<span class="number">1ll</span>*(n<span class="number">-1</span>)*(n<span class="number">-1</span>)%mod);</span><br><span class="line">		<span class="keyword">if</span>(t!=<span class="number">-1</span>) t=t*<span class="number">2</span>;</span><br><span class="line">		ll q=<span class="built_in">solve</span>((x*n+(n<span class="number">-1</span>)+mod)%mod*(n<span class="number">-1</span>)%mod,<span class="number">1ll</span>*(n<span class="number">-1</span>)*(n<span class="number">-1</span>)%mod);</span><br><span class="line">		<span class="keyword">if</span>(q!=<span class="number">-1</span>) q=q*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,q);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(q,t));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>在一个二维坐标上，存在着 $n$ 个点 $(i,f_i)$。</p>
<p>多次询问某个平行于坐标轴的矩形中的点有多少个不同的横坐标。</p>
<p>$T\le 5$，$n,q\le 10^5$</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>记 $a_i$ 表示点 $i$ 坐标向左看到的第一个点的横坐标，没有记为 $0$。</p>
<p>对于一个矩形，差分一下变成一条边在 $x$ 轴上的询问。左右区间为 $[l,r]$，高度为 $h$。</p>
<p>对于每个询问，查询 $l\le i\le r,a_i&lt;l,f_i\le h$ 的个数。</p>
<p>这是一个三位偏序问题，cdq+树状数组即可。时间复杂度 $O(n\log ^2n)$。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>树状数组</tag>
        <tag>cdq分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[SDOI2011]消防</title>
    <url>/2021/06/17/SDOI2011-%E6%B6%88%E9%98%B2/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵树，有边权。选择一条长度不超过 $s$ 的路径，使得所有点到路径的距离最大值最小。</p>
<p>$n\le 3\times 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h4><p>大力猜结论可知，这条路径一定在树上。</p>
<p>先证明一些性质（设 $d_{x,y}$ 表示两点间距离，$f(l)$ 为树中所有点到路径 $l$ 的最远距离）：</p>
<ul>
<li>性质一：离一个点最远的点必然是一直径的端点。</li>
</ul>
<p>证明：用反证法，讨论三种情况即可。</p>
<ul>
<li>性质二：这条路径必与某条直径相交。</li>
</ul>
<p>证明：反证，假设这样最优的路径 $l_1$ 不在某条直径上，设直径端点为 $x,y$，直径中与 $l_1$ 距离最短的点为 $u$，不妨设 $d_{x,u}\geq d_{y,u}$。设 $l_1$ 中与 $u$ 最近的点为 $v$，显然 $u\not = v$。</p>
<p>由性质一可知，$l_1$ 的点在树中的最远点为 $x$。$u$ 的最远点也为 $x$。</p>
<p>只取 $u$ 这个点成为一条路径 $l_2$，有 $f(l_2)=d_{u,x} &lt; d_{u,x}+d_{u,v}=f(l_1)$。说明 $l_1$ 不为最优路径，与已知矛盾，证毕。</p>
<ul>
<li>性质三：这条路径可以全在某条直径上。</li>
</ul>
<p>证明：由性质二，这条路径与直径相交，设相交部分为 $l_2$，其两端点为 $a,b$。还是运用反证法：设 $l_1$ 的两端点为 $c,d$， 易证 $f(l_2)\le f(l_1)$ 而得出矛盾。</p>
<p>综上，我们只需考虑路径全在直径上的情况。</p>
<p>将一条直径的所有点找出来，按顺序排成一排，共 $m$ 个，记为 $a_i$。设非直径中的所有点到 $a_i$ 距离最大值为 $f_i$，从直径一端到 $a_i$ 的距离为 $s_i$。</p>
<p>那么以 $a_{i},a_{j}(i\le j)$ 为端点的路径，最大值为 $\max\{\max_{i\le k \le j}\{f_k\},s_m-s_j,s_i\}$</p>
<p>随便用个方法（比如单调队列）即可求出最值。</p>
<p>时间复杂度 $O(n)$。</p>
<h4 id="算法2"><a href="#算法2" class="headerlink" title="算法2"></a>算法2</h4><p>既然要最大值最小，那么就二分吧。</p>
<p>二分一个值 $mid$，看是否存在一条路径使得到所有点的距离都不超过 $mid$。</p>
<p>树形DP，设 $f_i$ 表示 $i$ 的子树内，以 $i$ 为端点的路径中，子树内所有点到该路径的距离均不超过 $mid$ 时，路径的最短长度。设 $g_i$ 表示子树内，经过 $i$ 的路径中，子树内所有点到该路径的距离均不超过 $mid$ 时，路径的最短长度。</p>
<p>随便DP一下就可以了。</p>
<p>时间复杂度 $O(n\log n)$，常数略大。</p>
]]></content>
      <categories>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>思维题</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[HEOI2013]SAO</title>
    <url>/2021/06/16/HEOI2013-SAO/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P4099">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个数排列，有 $n-1$ 个限制，无向后形成一棵树，表示某个数必须排在某个数前面。</p>
<p>求合法方案数。</p>
<p>$n\le 10^3,T\le 10$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>还以为有多难</del></p>
<p>显然是一棵树的形式。</p>
<p>考虑树形DP，设 $f_{i,j}$ 表示子树 $i$ 中的数排在一起后，$i$ 排在第 $j$ 位的方案数。</p>
<p>合并时枚举 $k$，表示子树 $v$ 在合并后有 $k$ 个数排在 $i$ 的前面。</p>
<p>对于子树 $v$，在 $u$ 处合并，显然有：</p>
<p>$f’<em>{u,i+j}+=\sum_k \binom{i+j-1}{i-1}\binom{s_u+s_v-i-j}{s_u-i}f</em>{u,i}f_{v,k}$。</p>
<p>根据这条边的限制，$k$ 的取值是一个区间。</p>
<p>前缀和优化后，时间复杂度 $O(n^2)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1004</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x+=y;</span><br><span class="line">	<span class="keyword">return</span> x&lt;mod?x:x-mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll f[N][N],C[N][N],g[N],tmp[N];</span><br><span class="line"><span class="type">int</span> siz[N];</span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>],head[N],ver[N&lt;&lt;<span class="number">1</span>],col[N&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; col[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; col[tot]=c; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; f[u][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x=head[u],v;x;x=ne[x])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[x])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,siz[v]) tmp[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,siz[v]) tmp[i]=<span class="built_in">Add</span>(tmp[i<span class="number">-1</span>],f[v][i]);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,siz[u]+siz[v]) g[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(col[x]==v)</span><br><span class="line">				<span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u])</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">0</span>,siz[v])</span><br><span class="line">						g[i+j]=<span class="built_in">Add</span>(g[i+j],C[i+j<span class="number">-1</span>][i<span class="number">-1</span>]*C[siz[u]+siz[v]-i-j][siz[u]-i]%mod*f[u][i]%mod*(tmp[siz[v]]-tmp[j]+mod)%mod);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u])</span><br><span class="line">					<span class="built_in">fo</span>(j,<span class="number">0</span>,siz[v])</span><br><span class="line">						g[i+j]=<span class="built_in">Add</span>(g[i+j],C[i+j<span class="number">-1</span>][i<span class="number">-1</span>]*C[siz[u]+siz[v]-i-j][siz[u]-i]%mod*f[u][i]%mod*tmp[j]%mod);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u]) f[u][i]=g[i];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,n) f[i][j]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) head[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,tot) ver[i]=col[i]=ne[i]=<span class="number">0</span>;</span><br><span class="line">	tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i) C[i][j]=<span class="built_in">Add</span>(C[i<span class="number">-1</span>][j<span class="number">-1</span>],C[i<span class="number">-1</span>][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="type">int</span> x,y; <span class="type">char</span> sig[<span class="number">4</span>]; ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sig); y=<span class="built_in">read</span>();</span><br><span class="line">			x++; y++;</span><br><span class="line">			<span class="built_in">add</span>(x,y,sig[<span class="number">0</span>]==<span class="string">&#x27;&lt;&#x27;</span>?x:y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) (ans+=f[<span class="number">1</span>][i])%=mod;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合数学</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[JSOI2018]潜入行动</title>
    <url>/2021/06/15/JSOI2018-%E6%BD%9C%E5%85%A5%E8%A1%8C%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/P4516">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>刚高考完，好久没做这么水的树形DP了，手有点生qaq。</p>
<p>设 $f_{i,j,k,l}$ 表示以 $i$ 为子树中，用了 $j$ 次监听，$i$ 是否使用监听，$i$ 是否被监听的方案数。</p>
<p>子树在 $i$ 处合并，分情况讨论即可。</p>
<p>注意空间限制，只能开下int。</p>
<p>时间复杂度 $O(nk)$。</p>
<p>证明：对于 $i$ 的儿子 $son$，要与 $i$ 合并，那么时间复杂度为 $O(\min\{siz_i,k\}\times \min\{siz_{son},k\})$。</p>
<p>当 $siz_i,siz_{son}$ 大于 $k$ 时，只有 $\frac{n}{k}$ 个点，总时间复杂度 $O(nk)$。</p>
<p>当 $siz_{son}$ 小于 $k$ 时，考虑 $son$ 子树中的每个点，他一直合并上去时，需要花费的时间不会超过 $k$，总时间复杂度 $O(nk)$。</p>
<p>于是总复杂度还是 $O(nk)$ 。证毕。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100003</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">103</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x+=y;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=mod) <span class="keyword">return</span> x-mod;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*y%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> f[N][M][<span class="number">2</span>][<span class="number">2</span>],g[M][<span class="number">2</span>][<span class="number">2</span>],siz[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[u][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	f[u][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	siz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(v^pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			<span class="type">int</span> l=<span class="built_in">min</span>(k,siz[u]);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,l)</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">					<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">						g[i][j][k]=f[u][i][j][k],f[u][i][j][k]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,l)</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="built_in">min</span>(siz[v],k-i))</span><br><span class="line">				&#123;</span><br><span class="line">					f[u][i+j][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">Mul</span>(g[i][<span class="number">0</span>][<span class="number">0</span>],f[v][j][<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">					f[u][i+j][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">Mul</span>(g[i][<span class="number">0</span>][<span class="number">1</span>],(f[v][j][<span class="number">0</span>][<span class="number">1</span>]+f[v][j][<span class="number">1</span>][<span class="number">1</span>])));</span><br><span class="line">					f[u][i+j][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">Mul</span>(g[i][<span class="number">0</span>][<span class="number">0</span>],f[v][j][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">					f[u][i+j][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">Mul</span>(g[i][<span class="number">1</span>][<span class="number">0</span>],(f[v][j][<span class="number">0</span>][<span class="number">0</span>]+f[v][j][<span class="number">0</span>][<span class="number">1</span>])));</span><br><span class="line">					f[u][i+j][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">1</span>][<span class="number">1</span>],<span class="built_in">Mul</span>(g[i][<span class="number">1</span>][<span class="number">1</span>],(f[v][j][<span class="number">0</span>][<span class="number">0</span>]+f[v][j][<span class="number">0</span>][<span class="number">1</span>])%mod+(f[v][j][<span class="number">1</span>][<span class="number">0</span>]+f[v][j][<span class="number">1</span>][<span class="number">1</span>])%mod));</span><br><span class="line">					f[u][i+j][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">Add</span>(f[u][i+j][<span class="number">1</span>][<span class="number">1</span>],<span class="built_in">Mul</span>(g[i][<span class="number">1</span>][<span class="number">0</span>],(f[v][j][<span class="number">1</span>][<span class="number">0</span>]+f[v][j][<span class="number">1</span>][<span class="number">1</span>])));</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Add</span>(f[<span class="number">1</span>][k][<span class="number">0</span>][<span class="number">1</span>],f[<span class="number">1</span>][k][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #703[CF1486]</title>
    <url>/2021/02/19/Codeforces-Round-703-CF1486/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1486/problems">problems’s link</a></p>
<p>退役选手一个无聊的晚上。</p>
<span id="more"></span>

<p>退役半年，手速和思维都降下来了呀。</p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>从前往后贪心，第 $i$ 个位置看是否能把它搞成 $i-1$。</p>
<p>然而因为自己智障还WA了两发。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,x,flag;</span><br><span class="line">ll s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); s=<span class="number">0</span>; flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(x+s&lt;i) flag=<span class="number">0</span>;</span><br><span class="line">			s=x+s-i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(flag?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>显然 $x,y$ 坐标分开，然后中位数。</p>
<p>3min看完题+写完。（英文水平有所上升）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),b[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> m=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1ll</span>*(b[m+<span class="number">1</span>]-b[m]+<span class="number">1</span>)*(a[m+<span class="number">1</span>]-a[m]+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>交互题。</p>
<p>一开始还以为是个什么难题。</p>
<p>结果发现自己是在打div.2，在打div.2的C。</p>
<p>于是先找出整体次大，然后看最大在哪一边，然后二分即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r||r&gt;n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>,l,r);</span><br><span class="line">	<span class="built_in">fflush</span>(stdout);</span><br><span class="line">	<span class="type">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">	<span class="keyword">if</span>(l+<span class="number">1</span>==r) <span class="keyword">return</span> l^r^<span class="built_in">ask</span>(l,r);</span><br><span class="line">	<span class="type">int</span> mid=<span class="built_in">ask</span>(l,r);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">ask</span>(mid,r)==mid)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> L=mid+<span class="number">1</span>,R=r,m;</span><br><span class="line">		<span class="keyword">for</span>(;L+<span class="number">1</span>&lt;R;)</span><br><span class="line">		&#123;</span><br><span class="line">			m=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ask</span>(mid,m)==mid) R=m;</span><br><span class="line">			<span class="keyword">else</span> L=m+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(L==R) <span class="keyword">return</span> L;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">solve</span>(L,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> L=l,R=mid<span class="number">-1</span>,m;</span><br><span class="line">		<span class="keyword">for</span>(;L+<span class="number">1</span>&lt;R;)</span><br><span class="line">		&#123;</span><br><span class="line">			m=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ask</span>(m,mid)==mid) L=m;</span><br><span class="line">			<span class="keyword">else</span> R=m<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(L==R) <span class="keyword">return</span> L;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">solve</span>(L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> ans=<span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;! %d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>一眼题。</p>
<p>直接二分答案，然后奇偶分开讨论，顺着扫一遍，用个数据结构维护就好了。这里用set。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> b[N],a[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=b[i<span class="number">-1</span>]+(a[i]&gt;=x);</span><br><span class="line">	s[<span class="number">0</span>].<span class="built_in">clear</span>(); s[<span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n-m+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i&amp;<span class="number">1</span>].<span class="built_in">insert</span>(i<span class="number">-2</span>*b[i<span class="number">-1</span>]);</span><br><span class="line">		j=i+m<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(s[j&amp;<span class="number">1</span>].<span class="built_in">lower_bound</span>(<span class="number">-2</span>*b[j]+j+<span class="number">2</span>)!=s[j&amp;<span class="number">1</span>].<span class="built_in">end</span>()) &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[!(j&amp;<span class="number">1</span>)].<span class="built_in">lower_bound</span>(<span class="number">-2</span>*b[j]+j+<span class="number">3</span>)!=s[!(j&amp;<span class="number">1</span>)].<span class="built_in">end</span>()) &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=n+<span class="number">1</span>,mid;</span><br><span class="line">	<span class="keyword">for</span>(;l+<span class="number">1</span>&lt;r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>$1\leq w_i\leq 50$，这性质很有用。</p>
<p>于是记 $f_{i,j}$ 表示走到 $i$，上一条边的费用是 $j$ 的最短路。特别地，$f_{i,0}$ 表示走完两条路。</p>
<p>于是dijkstra即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">400010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">52</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ver[M],val[M],head[N],ne[M],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N][K];</span><br><span class="line"><span class="type">bool</span> vis[N][K];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y; ll d;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.d&gt;B.d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>(),<span class="built_in">add</span>(x,y,z);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">50</span>) f[i][j]=inf;</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>; q.<span class="built_in">push</span>((node)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		node u=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(vis[u.x][u.y]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[u.x][u.y]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(!u.y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u.x],v;i;i=ne[i])</span><br><span class="line">			&#123;</span><br><span class="line">				v=ver[i];</span><br><span class="line">				<span class="keyword">if</span>(f[v][val[i]]&gt;f[u.x][<span class="number">0</span>])</span><br><span class="line">				&#123;</span><br><span class="line">					f[v][val[i]]=f[u.x][<span class="number">0</span>];</span><br><span class="line">					q.<span class="built_in">push</span>((node)&#123;v,val[i],f[u.x][<span class="number">0</span>]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u.x],v;i;i=ne[i])</span><br><span class="line">			&#123;</span><br><span class="line">				v=ver[i];</span><br><span class="line">				<span class="keyword">if</span>(f[v][<span class="number">0</span>]&gt;f[u.x][u.y]+(u.y+val[i])*(u.y+val[i]))</span><br><span class="line">				&#123;</span><br><span class="line">					f[v][<span class="number">0</span>]=f[u.x][u.y]+(u.y+val[i])*(u.y+val[i]);</span><br><span class="line">					q.<span class="built_in">push</span>((node)&#123;v,<span class="number">0</span>,f[v][<span class="number">0</span>]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ll ans;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i][<span class="number">0</span>]==inf) f[i][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,f[i][<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>将 $1$ 作为根。</p>
<p>不难发现，如果两条路径有且仅有一个相交的点，那么肯定是两条路径的lca中的一个。</p>
<p>分两种情况。</p>
<p>1，两条路径lca相同。用总数减去不合法的情况即可。</p>
<p>2，两条路径lca不同。树上差分一下统计一些东西就可以了。</p>
<p>可以做到线性。</p>
<p>懒得写代码了，睡觉去了。</p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>二分</tag>
        <tag>LCA</tag>
        <tag>交互题</tag>
      </tags>
  </entry>
  <entry>
    <title>相似子串[bzoj3230]</title>
    <url>/2020/08/12/%E7%9B%B8%E4%BC%BC%E5%AD%90%E4%B8%B2-bzoj3230/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://darkbzoj.tk/problem/3230">bzoj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>就当是后缀数组复习题啦。</p>
<p>求第 $k$ 小本质不同的字符串除了可以用SAM算之外，也可以用SA求。</p>
<p>具体做法是把后缀按rank排好，那么相邻的两个后缀的贡献就是 $(n-sa_i+1)-height_i$。</p>
<p>作这个东西的前缀和，然后二分就可以找到第 $k$ 小的位置了。</p>
<p>剩下的就是正串反串建SA然后求lcp的事了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">19</span>;</span><br><span class="line"><span class="type">int</span> base[N],t[N],l2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t[x]==t[y]&amp;&amp;t[x+k]==t[y+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuufixArray</span>&#123;</span><br><span class="line">	<span class="type">int</span> height[N],sa[N],rk[N],f[N][K],len;</span><br><span class="line">	ll sum[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in">sizeof</span>(t));</span><br><span class="line">		len=n; s[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=i,rk[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rsort</span>(n,<span class="number">128</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			p=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">			<span class="built_in">rsort</span>(n,p);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">			rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">			<span class="keyword">for</span>(j=sa[rk[i]<span class="number">-1</span>],(k?(k--):<span class="number">0</span>);s[i+k]==s[j+k];k++);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i],sum[i]=sum[i<span class="number">-1</span>]+(n-sa[i]+<span class="number">1</span>)-height[i];</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,K<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">return</span> len-x+<span class="number">1</span>;</span><br><span class="line">		x=rk[x]; y=rk[y];</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		x++;</span><br><span class="line">		<span class="type">int</span> k=l2[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">min</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(ll k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;l)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> tmp=<span class="built_in">lower_bound</span>(sum+<span class="number">1</span>,sum+len+<span class="number">1</span>,k)-sum;</span><br><span class="line">		x=sa[tmp];</span><br><span class="line">		l=len-sa[tmp]+<span class="number">1</span>-(sum[tmp]-k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;SA[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1ll</span>*x*x;&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	SA[<span class="number">0</span>].<span class="built_in">build</span>(s,n);</span><br><span class="line">	<span class="built_in">reverse</span>(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line">	SA[<span class="number">1</span>].<span class="built_in">build</span>(s,n);</span><br><span class="line">	ll sum=SA[<span class="number">0</span>].sum[n];</span><br><span class="line">	ll u,v;</span><br><span class="line">	<span class="type">int</span> x,y,l1,l2,len;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(u&gt;sum||v&gt;sum) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			SA[<span class="number">0</span>].<span class="built_in">calc</span>(u,x,l1);</span><br><span class="line">			SA[<span class="number">0</span>].<span class="built_in">calc</span>(v,y,l2);</span><br><span class="line">			len=<span class="built_in">min</span>(l1,l2);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">sqr</span>(<span class="built_in">min</span>(len,SA[<span class="number">0</span>].<span class="built_in">ask</span>(x,y)))+<span class="built_in">sqr</span>(<span class="built_in">min</span>(len,SA[<span class="number">1</span>].<span class="built_in">ask</span>(n-(x+l1<span class="number">-1</span>)+<span class="number">1</span>,n-(y+l2<span class="number">-1</span>)+<span class="number">1</span>))));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
      </tags>
  </entry>
  <entry>
    <title>序列妙妙值[uoj549]</title>
    <url>/2020/08/12/%E5%BA%8F%E5%88%97%E5%A6%99%E5%A6%99%E5%80%BC-uoj549/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://uoj.ac/problem/549">link</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑Dp，设 $f_{j,i}$ 表示考虑选了 $j$ 个非空子序列，选到 $i$ 的最小值。设 $s_i$ 为 $a_i$ 的前缀异或和。</p>
<p>$f_{j,i}=\min_{k\in[0,i-1]}\{f_{j-1,k}+(s_i \text{xor} s_k)\}$。</p>
<p>这时就有几种思路：拆位，Trie，和DP优化。</p>
<p>然后发现拆位和Trie都似乎不太可做的样子，那就只有Dp优化了叭。</p>
<p>看到部分分 $a_i&lt;2^8$，于是我们对于每个 $s_k$，记录 $f_{j-1,k}$ 的最小值，然后更新时 $O(2^8)$ 枚举即可。</p>
<p>于是就获得了60pts的成绩。</p>
<p>考虑满分应该怎么做，这时你发现算答案要 $O(2^{16})$，而更新最小值只需要 $O(1)$。考虑均分这个复杂度。</p>
<p>拆位，将 $s_i$ 拆成前 $8$ 位和后 $8$ 位，分别算贡献。</p>
<p>设 $g_{x,y}$ 表示 $s_i$ 的前 $8$ 位是 $x$，$s_k$ 的后 $8$ 位是 $y$ 时的最小值。</p>
<p>那么就可以做了。</p>
<p>时间复杂度 $O(nk\sqrt{\max a_i})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> f[<span class="number">9</span>][<span class="number">60005</span>],a[<span class="number">60005</span>],g[<span class="number">256</span>][<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=x&gt;&gt;<span class="number">8</span>,z=x&amp;<span class="number">255</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">255</span>) g[i][z]=<span class="built_in">min</span>(g[i][z],((i^y)&lt;&lt;<span class="number">8</span>)+val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=x&gt;&gt;<span class="number">8</span>,z=x&amp;<span class="number">255</span>,ans=inf;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">255</span>) ans=<span class="built_in">min</span>(ans,g[y][i]+(i^z));</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(ex_seq2);</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=a[i<span class="number">-1</span>]^<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(x,<span class="number">0</span>,<span class="number">255</span>) <span class="built_in">fo</span>(y,<span class="number">0</span>,<span class="number">255</span>) g[x][y]=inf;</span><br><span class="line">		<span class="built_in">fo</span>(i,j,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">update</span>(a[i<span class="number">-1</span>],f[j<span class="number">-1</span>][i<span class="number">-1</span>]);</span><br><span class="line">			f[j][i]=<span class="built_in">min</span>(f[j][i],<span class="built_in">query</span>(a[i]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,k,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[k][i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串游戏[bzoj2690]</title>
    <url>/2020/08/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B8%B8%E6%88%8F-bzoj2690/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $N$ 个仅有 小写字母组成的字符串 $a_ i$,每个字符串都有一个权值 $v_i$ ,有 $M$ 次操作，操作分三种：</p>
<ul>
<li><p>Cv x v’:把第x个字符串的权值修改为v’</p>
</li>
<li><p>Cs x a’:把第x个字符串修改成a’</p>
</li>
<li><p>Q:求出当前的最大权字符串集合，使得这个集合中的字符串经过重新排列后满足除最后一个字符串外，前一个字符串是后一个的前缀(两个字符串相同也是前缀关系，也可以一个字符串都不选)</p>
</li>
</ul>
<p>前50%的数据可以接受离线算法，后50%的数据要求在线算法。</p>
<p>$N\le 50000,M\le 10^5$ ，字符串总长 $\le 10^6$。</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>将这些字符串建成Trie，只考虑权值大于 $0$ 的串，在字符串结尾出放上它的权值。那么答案就是Trie树上某个点到根节点的权值和的最大值。</p>
<p>当可以离线的时候，先把Trie建出来，然后维护每个节点的答案。修改一个字符串权值相当于子树加，修改字符串看成改点权就好了。</p>
<p>当要在线的时候，我们用Treap动态维护dfs序，记录当前的dfs序以及子树大小，考虑加一个字符串后的几种情况就好了。</p>
<p>一道复习Treap和Trie的好题~</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">namespace</span> Treap&#123;</span><br><span class="line">	<span class="type">int</span> ch[N][<span class="number">2</span>],fa[N],siz[N],rnd[N],rt,tot;</span><br><span class="line">	ll val[N],mx[N],tag[N];</span><br><span class="line">	<span class="type">int</span> tid[N],id[N],len[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,ll x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u) tag[u]+=x,val[u]+=x,mx[u]+=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushid</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u) tid[u]+=s,id[u]+=s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(tag[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pushtag</span>(ch[u][<span class="number">0</span>],tag[u]);</span><br><span class="line">			<span class="built_in">pushtag</span>(ch[u][<span class="number">1</span>],tag[u]);</span><br><span class="line">			tag[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tid[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pushid</span>(ch[u][<span class="number">0</span>],tid[u]);</span><br><span class="line">			<span class="built_in">pushid</span>(ch[u][<span class="number">1</span>],tid[u]);</span><br><span class="line">			tid[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[u]=siz[ch[u][<span class="number">0</span>]]+siz[ch[u][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">		mx[u]=<span class="built_in">max</span>(val[u],<span class="built_in">max</span>(mx[ch[u][<span class="number">0</span>]],mx[ch[u][<span class="number">1</span>]]));</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">0</span>]) fa[ch[u][<span class="number">0</span>]]=u;</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">1</span>]) fa[ch[u][<span class="number">1</span>]]=u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(fa[u]) <span class="built_in">push</span>(fa[u]);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_siz</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> (<span class="type">void</span>)(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(siz[ch[u][<span class="number">0</span>]]&gt;=k) y=u,<span class="built_in">split_siz</span>(ch[u][<span class="number">0</span>],k,x,ch[y][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">else</span> x=u,<span class="built_in">split_siz</span>(ch[u][<span class="number">1</span>],k-siz[ch[u][<span class="number">0</span>]]<span class="number">-1</span>,ch[x][<span class="number">1</span>],y);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) &#123;<span class="keyword">return</span> x|y;&#125;</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[y])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pushdown</span>(x); ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y);</span><br><span class="line">			<span class="built_in">pushup</span>(x); <span class="keyword">return</span> x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pushdown</span>(y); ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]);</span><br><span class="line">			<span class="built_in">pushup</span>(y); <span class="keyword">return</span> y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Rank</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">push</span>(x);</span><br><span class="line">		<span class="type">int</span> s=siz[ch[x][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;x;x=fa[x])</span><br><span class="line">			<span class="keyword">if</span>(ch[fa[x]][<span class="number">1</span>]==x)</span><br><span class="line">				s+=siz[ch[fa[x]][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		tot=rt=<span class="number">1</span>;</span><br><span class="line">		rnd[<span class="number">1</span>]=<span class="built_in">rand</span>(); siz[<span class="number">1</span>]=<span class="number">1</span>; len[<span class="number">1</span>]=id[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Treap;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ne[N][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> j,<span class="type">int</span> n,<span class="type">int</span> u,<span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,z,c;</span><br><span class="line">	<span class="built_in">push</span>(u);</span><br><span class="line">	<span class="built_in">split_siz</span>(rt,id[u]<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="built_in">split_siz</span>(y,len[u],y,z);</span><br><span class="line">	<span class="type">int</span> now=id[u]+len[u]<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,j,n)</span><br><span class="line">	&#123;</span><br><span class="line">		now++;</span><br><span class="line">		c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		ne[u][c]=++tot;</span><br><span class="line">		u=ne[u][c];</span><br><span class="line">		rnd[u]=<span class="built_in">rand</span>(); mx[u]=val[u]=sum;</span><br><span class="line">		siz[u]=<span class="number">1</span>; ch[u][<span class="number">0</span>]=ch[u][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		id[u]=now; len[u]=n-i;</span><br><span class="line">		y=<span class="built_in">merge</span>(y,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans=u;</span><br><span class="line">	u=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,j)</span><br><span class="line">	&#123;</span><br><span class="line">		c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		len[u]+=n-j;</span><br><span class="line">		u=ne[u][c];</span><br><span class="line">	&#125;</span><br><span class="line">	rt=<span class="built_in">merge</span>(x,<span class="built_in">merge</span>(y,z));</span><br><span class="line">	<span class="built_in">split_siz</span>(rt,<span class="built_in">Rank</span>(tot),x,y);</span><br><span class="line">	<span class="built_in">DEBUG</span>(siz[y]);</span><br><span class="line">	<span class="built_in">pushid</span>(y,n-j);</span><br><span class="line">	rt=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> value[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ins_str</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">strlen</span>(s),c,u=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		sum+=value[u];</span><br><span class="line">		<span class="keyword">if</span>(!ne[u][c]) <span class="keyword">return</span> <span class="built_in">work</span>(s,i,n,u,sum);</span><br><span class="line">		u=ne[u][c];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins_val</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	value[u]+=v;</span><br><span class="line">	<span class="built_in">push</span>(u);</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">split_siz</span>(rt,id[u]<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="built_in">split_siz</span>(y,len[u],y,z);</span><br><span class="line">	<span class="built_in">pushtag</span>(y,v);</span><br><span class="line">	rt=<span class="built_in">merge</span>(x,<span class="built_in">merge</span>(y,z));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> va[N],str_end[N];</span><br><span class="line"><span class="type">int</span> n,m,opt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">20030403</span>);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> a[N];</span><br><span class="line">	opt=<span class="built_in">read</span>()<span class="number">-1</span>;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a),str_end[i]=<span class="built_in">ins_str</span>(a);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) va[i]=<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">read</span>()),<span class="built_in">ins_val</span>(str_end[i],va[i]);</span><br><span class="line">	<span class="type">int</span> x,v,ans=<span class="number">0</span>; <span class="type">char</span> t[<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t);</span><br><span class="line">		<span class="keyword">if</span>(t[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans=mx[rt]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(t[<span class="number">1</span>]==<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				v=<span class="built_in">read</span>();</span><br><span class="line">				<span class="keyword">if</span>(opt) v=<span class="built_in">min</span>(<span class="number">1000</span>,v+(ans%<span class="number">1000</span>));</span><br><span class="line">				v=<span class="built_in">max</span>(<span class="number">0</span>,v);</span><br><span class="line">				<span class="built_in">ins_val</span>(str_end[x],v-va[x]);</span><br><span class="line">				va[x]=v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ins_val</span>(str_end[x],-va[x]);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a); v=ans%<span class="number">26</span>;</span><br><span class="line">				<span class="keyword">if</span>(opt) <span class="built_in">ff</span>(i,<span class="number">0</span>,<span class="built_in">strlen</span>(a)) a[i]=(a[i]-<span class="string">&#x27;a&#x27;</span>+v)%<span class="number">26</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">				str_end[x]=<span class="built_in">ins_str</span>(a);</span><br><span class="line">				<span class="built_in">ins_val</span>(str_end[x],va[x]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>斗主地[NOI2019]</title>
    <url>/2020/08/11/%E6%96%97%E4%B8%BB%E5%9C%B0-NOI2019/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://loj.ac/problem/3160">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑一次洗牌操作的意义：</p>
<p><del>这样的洗牌是均匀的，因此每种合法方案的概率一样。</del></p>
<p>观察样例可以发现，最终每个位置答案的期望是 $\frac{7}{4},\frac{9}{4},\frac{11}{4},\frac{13}{4}$。这是一个一次函数！</p>
<p>于是经过打表验证，设最后第 $i$ 个位置的答案为 $F(i)$，则 $F$ 是一个不超过二次的函数！</p>
<p>打表程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">srand</span>(<span class="number">20030403</span>);</span><br><span class="line">n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=i;</span><br><span class="line"><span class="built_in">fo</span>(i,<span class="number">1</span>,m) b[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> T=<span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">fo</span>(ti,<span class="number">1</span>,T)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) c[i]=a[i],id[i]=i;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">random_shuffle</span>(id+<span class="number">1</span>,id+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">sort</span>(id+<span class="number">1</span>,id+b[j]+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">sort</span>(id+b[j]+<span class="number">1</span>,id+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[id[i]]=c[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) c[i]=d[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans[i]+=c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%.3lf &quot;</span>,(db)ans[i]/T);</span><br></pre></td></tr></table></figure>



<p>那么只需要记住 $F(1),F(2),F(3)$ 即可。</p>
<p>那么对于每次洗牌，设第一堆有 $x$ 张牌，拉格朗日插值一下算出 $F(x+1),F(x+2),F(x+3)$，然后用组合数学推超级多种情况以后算出新的 $F(1),F(2),F(3)$ 就好了。</p>
<p>时间复杂度 $O(m+q)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line">ll mod=<span class="number">998244353</span>,inv2,invn,invn2,invn3;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll E1,E2,E3,F1,F2,F3,G1,G2,G3;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">F</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> E1;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> E2;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>) <span class="keyword">return</span> E3;</span><br><span class="line">	<span class="keyword">return</span> (E1*(x<span class="number">-2</span>)%mod*(x<span class="number">-3</span>)%mod*inv2-E2*(x<span class="number">-1</span>)%mod*(x<span class="number">-3</span>)%mod+E3*(x<span class="number">-1</span>)%mod*(x<span class="number">-2</span>)%mod*inv2+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,opt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(landlords);</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); opt=<span class="built_in">read</span>();</span><br><span class="line">	inv2=(mod+<span class="number">1</span>)/<span class="number">2</span>; invn=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>); invn2=<span class="built_in">Pow</span>(<span class="number">1ll</span>*n*(n<span class="number">-1</span>)%mod,mod<span class="number">-2</span>); invn3=<span class="built_in">Pow</span>(<span class="number">1ll</span>*n*(n<span class="number">-1</span>)%mod*(n<span class="number">-2</span>)%mod,mod<span class="number">-2</span>);</span><br><span class="line">	E1=<span class="built_in">Pow</span>(<span class="number">1</span>,opt),E2=<span class="built_in">Pow</span>(<span class="number">2</span>,opt),E3=<span class="built_in">Pow</span>(<span class="number">3</span>,opt);</span><br><span class="line">	ll x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>();</span><br><span class="line">		F1=<span class="built_in">F</span>(x+<span class="number">1</span>); F2=<span class="built_in">F</span>(x+<span class="number">2</span>); F3=<span class="built_in">F</span>(x+<span class="number">3</span>);</span><br><span class="line">		G1=E1; G2=E2; G3=E3;</span><br><span class="line">		E1=(G1*x+F1*(n-x))%mod*invn%mod;</span><br><span class="line">		E2=(G2*x%mod*(x<span class="number">-1</span>)%mod+(G1+F1)*x%mod*(n-x)%mod+F2*(n-x)%mod*(n-x<span class="number">-1</span>)%mod)%mod*invn2%mod;</span><br><span class="line">		E3=(G3*x%mod*(x<span class="number">-1</span>)%mod*(x<span class="number">-2</span>)+(F1+G2+G2)%mod*x%mod*(n-x)%mod*(x<span class="number">-1</span>)+(G1+F2+F2)%mod*x%mod*(n-x)%mod*(n-x<span class="number">-1</span>)+F3*(n-x)%mod*(n-x<span class="number">-1</span>)%mod*(n-x<span class="number">-2</span>))%mod*invn3%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">CASET <span class="title">printf</span><span class="params">(<span class="string">&quot;%lld\n&quot;</span>,F(read()))</span></span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NOI</category>
      </categories>
      <tags>
        <tag>拉格朗日插值</tag>
        <tag>思维题</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏[NOI2017]</title>
    <url>/2020/08/08/%E6%B8%B8%E6%88%8F-NOI2017/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://loj.ac/problem/2305">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>3-SAT？？？</p>
<p>不好意思，那是NP问题。</p>
<p>先不考虑 ‘x’ 的限制。显然每个点有一种情况必定不能选，于是就变成2-SAT了。</p>
<p>于是我们可以 $3^d$ 枚举 x 的每一位必定不选什么，时间复杂度 $O((n+m)3^d)$。</p>
<p>考虑如果存在一个合法方案，那么在是 x 的那一位，你只需要枚举剩下两个的其中一个就好了！</p>
<p>于是直接枚举 x 的每一位是否不选a或b就可以判断是否有满足条件的解了。</p>
<p>时间复杂度 $O((n+m)2^d)$。</p>
<p>tarjan打错两次也是没谁了，看来夜晚是真的不适合我学OI。。。</p>
<p><strong>注意dfs时low[u]=min(low[u],dfn[v])的前提是v还在栈里。</strong></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> tim,scc_cnt,dfn[N],low[N],st[N],top,bel[N];</span><br><span class="line"><span class="type">bool</span> ins[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dfn[u]=low[u]=++tim; ins[u]=<span class="number">1</span>; st[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">			<span class="built_in">dfs</span>(v),low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ins[v])</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">	<span class="keyword">if</span>(low[u]==dfn[u])</span><br><span class="line">	&#123;</span><br><span class="line">		++scc_cnt;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			bel[st[top]]=scc_cnt;</span><br><span class="line">			ins[st[top]]=<span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">while</span>(st[top--]!=u);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	scc_cnt=tim=top=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) adj[i].<span class="built_in">clear</span>(),dfn[i]=low[i]=bel[i]=ins[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> x[N],y[N],lx[N],ly[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s[x]==<span class="number">0</span>) <span class="keyword">return</span> (y==<span class="number">1</span>)?x:x+n;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">return</span> (y==<span class="number">0</span>)?x:x+n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">other</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;n?x-n:x+n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> u,v;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(s[x[i]]!=lx[i])</span><br><span class="line">		&#123;</span><br><span class="line">			u=<span class="built_in">calc</span>(x[i],lx[i]);</span><br><span class="line">			<span class="keyword">if</span>(s[y[i]]==ly[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(u&gt;n) <span class="built_in">add</span>(u,u-n);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">add</span>(u,u+n);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			v=<span class="built_in">calc</span>(y[i],ly[i]);</span><br><span class="line">			<span class="built_in">add</span>(u,v); <span class="built_in">add</span>(<span class="built_in">other</span>(v),<span class="built_in">other</span>(u));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n+n) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(bel[i]==bel[i+n]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(bel[i]&lt;bel[i+n])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="number">2</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id[<span class="number">10</span>],d;</span><br><span class="line"><span class="type">char</span> t[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); <span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(s[i]==<span class="string">&#x27;x&#x27;</span>) id[d++]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) s[i]-=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x[i]=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t); lx[i]=t[<span class="number">0</span>]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">		y[i]=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t); ly[i]=t[<span class="number">0</span>]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt_d=<span class="number">1</span>&lt;&lt;d;</span><br><span class="line">	<span class="built_in">ff</span>(sta,<span class="number">0</span>,cnt_d)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,d) s[id[i]]=((sta&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">check</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NOI</category>
      </categories>
      <tags>
        <tag>2-SAT</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI赛前总结</title>
    <url>/2020/08/08/NOI%E8%B5%9B%E5%89%8D%E6%A8%A1%E6%8B%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>这是在NOI前一个星期的一些总结。</p>
<span id="more"></span>

<h2 id="08-07"><a href="#08-07" class="headerlink" title="08.07"></a>08.07</h2><p>今天发挥的还算可以，最后T3也想到了单调性DP的做法，但是已经来不及了。</p>
<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>输出任意一个长度最小的字符串，满足在这个字符串的子串中能找到所有长度为 $l$ 且字符在集合 $c$ 中的串。</p>
<p>手玩一下发现，输出不超过10MB就是大概 $1.2\times 10^7$ 个字符。如果输出的字符串中每个长度为 $l$ 的子串与 $c^l$ 种字符串一一对应，那么得到长度下界为 $c^l+l-1$。</p>
<p>考虑构造，并尝试在构造过程中证明下界是可以到达的。</p>
<p>将 $c^l$ 种字符串看成一个点，对于一个长度为 $l$ 的字符串，将第一位删掉然后在最后一位加上一个字符，形成了一个新的字符串。将这两个字符串连一条有向边。于是需要跑一遍哈密顿路径。</p>
<p>然后这个是NP完全的。</p>
<p>或许尝试一下将每个点只经过一次转换成边之经过一次，这样就只需要跑欧拉路径？</p>
<p>建一个二分图，左边是所有字符集为 $c$，长度为 $l-1$ 的字符串；右边是所有字符集为 $c$，长度为 $l$ 的字符串。当左边的某个字符串在最后加一个点形成右边的一个字符串则它们连一条边；右边的字符串与删掉一位后形成的左边的字符串连一条边。</p>
<p>这样实际上是把点变成了两条边，于是转成了求欧拉路径。</p>
<p>为了证明达到下界，我们来看是否任意的这样的图都存在欧拉路径。</p>
<p>证明很显然，左边的点有 $2c$ 条边，右边的点有 $2$ 条边。于是必定存在。</p>
<p>那么dfs跑一遍，发现栈空间极大无比，搞到了512MB。</p>
<p>于是手写一个栈，发现时间复杂度是 $O(c^{l+1})$ 的，因为每次都需要枚举一遍 $0\cdots c-1$。</p>
<p>于是再加一个当前弧优化之类的东西就可以了。</p>
<p>时间和空间复杂度都是 $O(c^l)$。</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>有一个字符串，多次询问区间内的回文子串个数。不同的位置算多个。</p>
<p>$n,m\leq 1.3\times 10^5$。</p>
<p>有一个<del>或许</del>能拿优秀部分分的做法是莫队，每次莫队的端点移动时产生的贡献是固定一个端点，询问另一个端点在一段区间内的回文串个数。这个可以预处理PAM的parents树然后树链剖分or倍增解决。时间复杂度 $O(n\sqrt n\log n)$。</p>
<p>考虑正解，换一种思考方式，用manacher去做。</p>
<p>考虑枚举回文串的中间点，设 $f_i$ 为最长的延伸长度，然后稍微转换一下变成求 $\sum_{i=L}^R\min\{f_i,i-L,R-i\}$。</p>
<p>这个min里面有三个数，考虑将数量变少。将 $[L,R]$ 从中间断开，设 $mid=\frac{L+R}{2}$，那么min里面的东西就变为两个了。</p>
<p>考虑 $[L,mid]$ 如何算（$[mid+1,R]$ 同理），相当于求 $\sum_{i=L}^{mid}\min\{f_i,i-L\}$。</p>
<p>当 $f_i\le i-L$ 时，即 $i-f_i\geq L$。这时需要分别统计符合条件的 $i$ 的 $f_i$，$i$，$1$ 之和。</p>
<p>于是上个可持久化线段树即可。</p>
<p>时间复杂度 $O((n+m)\log n)$。</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><a href="/2020/08/07/%E5%BB%BA%E9%80%A0%E8%AE%B0%E8%80%85%E7%AB%99-jzoj4646/" title="建造记者站">建造记者站</a>

<h2 id="08-08"><a href="#08-08" class="headerlink" title="08.08"></a>08.08</h2><p>今天在酒店里做题，用了几个小时做了两题。晚上颓废+NOI原题。</p>
<h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><p><img src="/NOI%E8%B5%9B%E5%89%8D%E6%A8%A1%E6%8B%9F%E6%80%BB%E7%BB%93/0808T1.png" alt="0808T1"></p>
<p>$n,q\leq 10^5$。</p>
<p>权值在边上十分不好做。考虑将贡献扔到点上。</p>
<p>将一条边 $(u,v,w)$ 的贡献扔到点上，令 $val_u,val_v$ 加上 $\frac{w}{2}$。那么如果一个人两个点都选了，贡献刚好是 $w$；否则减一下贡献就是 $0$ 了。</p>
<p>那么题目变成，每次修改两个点的权值。然后将这些权值从大到小排序，在奇数位的贡献为正，偶数位的贡献为负，问贡献和。</p>
<p>由于需要强制在线，那么写个Treap维护一下就好了。</p>
<p>这个Treap需要支持维护将某个特定节点取出来，因此需要维护父亲。</p>
<p>程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">namespace</span> Treap&#123;</span><br><span class="line">	<span class="type">int</span> siz[N],rnd[N],sum[N],val[N],ch[N][<span class="number">2</span>],fa[N],rt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(siz[ch[u][<span class="number">0</span>]]&amp;<span class="number">1</span>) sum[u]=sum[ch[u][<span class="number">0</span>]]-val[u]+sum[ch[u][<span class="number">1</span>]];</span><br><span class="line">		<span class="keyword">else</span> sum[u]=sum[ch[u][<span class="number">0</span>]]+val[u]-sum[ch[u][<span class="number">1</span>]];</span><br><span class="line">		siz[u]=siz[ch[u][<span class="number">0</span>]]+siz[ch[u][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">0</span>]) fa[ch[u][<span class="number">0</span>]]=u;</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">1</span>]) fa[ch[u][<span class="number">1</span>]]=u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y)</span><br><span class="line">		&#123;</span><br><span class="line">			fa[x]=fa[y]=x+y;</span><br><span class="line">			<span class="keyword">return</span> x+y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[y])</span><br><span class="line">		&#123;</span><br><span class="line">			ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y); <span class="built_in">pushup</span>(x); <span class="keyword">return</span> x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]); <span class="built_in">pushup</span>(y); <span class="keyword">return</span> y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_val</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> (<span class="type">void</span>)(x=y=fa[x]=fa[y]=<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(val[u]&gt;=v)</span><br><span class="line">		&#123;</span><br><span class="line">			x=u; <span class="built_in">split_val</span>(ch[u][<span class="number">1</span>],v,ch[x][<span class="number">1</span>],y); <span class="built_in">pushup</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			y=u; <span class="built_in">split_val</span>(ch[u][<span class="number">0</span>],v,x,ch[y][<span class="number">0</span>]); <span class="built_in">pushup</span>(y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_siz</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> (<span class="type">void</span>)(x=y=fa[x]=fa[y]=<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(k&gt;siz[ch[u][<span class="number">0</span>]])</span><br><span class="line">		&#123;</span><br><span class="line">			x=u; <span class="built_in">split_siz</span>(ch[u][<span class="number">1</span>],k-siz[ch[u][<span class="number">0</span>]]<span class="number">-1</span>,ch[x][<span class="number">1</span>],y); <span class="built_in">pushup</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			y=u; <span class="built_in">split_siz</span>(ch[u][<span class="number">0</span>],k,x,ch[y][<span class="number">0</span>]); <span class="built_in">pushup</span>(y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> s=siz[ch[u][<span class="number">0</span>]];</span><br><span class="line">		<span class="keyword">for</span>(;u!=rt;u=fa[u])</span><br><span class="line">			<span class="keyword">if</span>(ch[fa[u]][<span class="number">1</span>]==u)</span><br><span class="line">				s+=siz[ch[fa[u]][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">0</span>]) <span class="built_in">dfs</span>(ch[u][<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,val[u]);</span><br><span class="line">		<span class="keyword">if</span>(ch[u][<span class="number">1</span>]) <span class="built_in">dfs</span>(ch[u][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">take</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> x,y,z;</span><br><span class="line">		<span class="built_in">split_siz</span>(rt,<span class="built_in">kth</span>(u),x,y);</span><br><span class="line">		<span class="built_in">split_siz</span>(y,<span class="number">1</span>,y,z);</span><br><span class="line">		rt=<span class="built_in">merge</span>(x,z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">		<span class="built_in">take</span>(u);</span><br><span class="line">		val[u]+=v; sum[u]+=v;</span><br><span class="line">		<span class="built_in">split_val</span>(rt,val[u],x,y);</span><br><span class="line">		rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,u),y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dec</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">		<span class="built_in">take</span>(u);</span><br><span class="line">		val[u]-=v; sum[u]-=v;</span><br><span class="line">		<span class="built_in">split_val</span>(rt,val[u],x,y);</span><br><span class="line">		rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,u),y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Treap;</span><br><span class="line"><span class="type">int</span> n,q,ty,cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(round);</span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">20030403</span>);</span><br><span class="line">	n=<span class="built_in">read</span>(); q=<span class="built_in">read</span>(); ty=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) siz[i]=<span class="number">1</span>,rnd[i]=<span class="built_in">rand</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) rt=<span class="built_in">merge</span>(rt,i);</span><br><span class="line">	<span class="type">int</span> opt,x,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(!opt)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>()^(ty*ans);</span><br><span class="line">			<span class="built_in">dec</span>(e[x].x,e[x].z);</span><br><span class="line">			<span class="built_in">dec</span>(e[x].y,e[x].z);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			++cnt;</span><br><span class="line">			e[cnt].x=<span class="built_in">read</span>()^(ty*ans),e[cnt].y=<span class="built_in">read</span>()^(ty*ans);</span><br><span class="line">			e[cnt].z=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">add</span>(e[cnt].x,e[cnt].z);</span><br><span class="line">			<span class="built_in">add</span>(e[cnt].y,e[cnt].z);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans=(sum[rt]&gt;&gt;<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p><a href="https://en.wikipedia.org/wiki/Lindström–Gessel–Viennot_lemma">一个叫做Lindström–Gessel–Viennot的引理</a></p>
<p><del>感性</del>证明：</p>
<p>将这些点按横坐标排序后，一共有 $n!$ 种配对方案。考虑上方第 $i$ 个点配对下面第 $p_i$ 个点，那么一个合法的配对方案的必要条件是逆序对个数为 $0$。</p>
<p>现在要求的是不相交的方案，考虑反面，看看相交的方案数是多少。</p>
<p>如果有一种相交的情况，考虑在交点的位置将两条路径反过来。这样做相当于在一个排列中交换了两个位置不同的数，由经典结论，此时逆序对的奇偶性改变。</p>
<p>因此，当有相交的情况时，逆序对为奇数的相交方案=逆序对为偶数的相交方案。</p>
<p>又因为有：逆序对为偶数的所有方案=逆序对为偶数的相交方案+逆序对为 $0$ 的不相交方案，因此得证。</p>
<p>于是如果能求出某两个点配对的方案数，然后高斯消元解行列式就可以了。</p>
<p>枚举第一行的某个点为起点，然后用经典容斥去做DP即可。</p>
<p>时间复杂度 $O(n+m+p^2q+pq^2+p^3)$。</p>
<h3 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h3><p>双重积分？格林公式？</p>
<p>不会不会，溜了溜了。</p>
]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>manacher</tag>
        <tag>博弈论</tag>
        <tag>欧拉回路</tag>
        <tag>平衡树</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title>建造记者站[jzoj4646]</title>
    <url>/2020/08/07/%E5%BB%BA%E9%80%A0%E8%AE%B0%E8%80%85%E7%AB%99-jzoj4646/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%BB%BA%E9%80%A0%E8%AE%B0%E8%80%85%E7%AB%99-jzoj4646/problem.png" alt="题面"></p>
<p>$n\leq 20000,m\leq 100$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h4><p>考虑DP，设 $f_{k,i}$ 表示选了 $k$ 个记者站时，考虑了前 $i$ 个村庄，第 $i$ 个村庄上有一个记者站的最小花费。</p>
<p>那么有DP式子：$f_{k,i}=\min_{1\le j &lt;i}(f_{k-1,j}+c_i+g_{j,i})$</p>
<p>其中 $g_{j,i}$ 表示，$[j,i]$ 内只有 $i,j$ 两个点被选时，不能被覆盖的点的 $P$ 值的和。</p>
<p>暴力预处理 $g_{l,r}$，暴力计算 $f_{k,i}$，时间复杂度 $O(n^3+n^2m)$，得分30分。</p>
<h4 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h4><p><del>盲猜 $g$ 满足四边形不等式，打表验证。</del></p>
<p>反正最后发现这个DP有决策单调性。</p>
<p>由于 $f$ 的计算和前面的DP值无关，因此考虑分治。</p>
<p>现在的问题转换成如何计算一个 $f_{k,i}$。也就是如果计算 $g_{j,i}$。</p>
<p>不能被覆盖的点 $k$ 当且仅当 $d_j&lt;d_k-r_k,d_k+r_k&lt;d_i$。</p>
<p>于是变成一个三位偏序问题，可用树套树在线解决。</p>
<p>时间复杂度 $O(nm\log^2n)$，常数极大，应该可以有 $70+$ 的样子。</p>
<h4 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h4><p>考虑直接DP做，随着 $i$ 的增加，维护 $f_{k-1,j}+g_{j,i}(1\le j &lt;i)$ 的最小值。</p>
<p>当 $i+1$ 时考虑哪些 $g_{j,i}$ 会变化，如果此时有新的 $d_k+r_k&lt;d_i$ 出现，那么所有满足 $d_j&lt;d_k-r_k$ 的 $j$ 的 $g_{j,i}$ 就会加上 $p_k$。</p>
<p>于是对于每个 $k$，预处理出最大的 $j$ 满足 $d_j&lt;d_k-r_k$ ，记为 $l_k$。然后维护一个堆，DP时每次取出最小的 $d_k+r_k$，判断是否满足条件。如果是，则将 $[1,l_k]$ 的值全部加上 $p_k$ 即可。</p>
<p>用线段树维护区间加区间最值。</p>
<p>时间复杂度 $O(nm\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>这里写的是算法三的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="type">int</span> mi[N&lt;&lt;<span class="number">2</span>],tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	<span class="type">int</span> *g;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l==r)</span><br><span class="line">		&#123;</span><br><span class="line">			mi[u]=g[l];</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">		mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> *f)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		g=f; <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		tag[u]+=t; mi[u]+=t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushtag</span>(lc,tag[u]); <span class="built_in">pushtag</span>(rc,tag[u]);</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,x);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">add</span>(ls,L,R,x);</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R) <span class="built_in">add</span>(rs,L,R,x);</span><br><span class="line">		mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(mi[u]=x,tag[u]=<span class="number">0</span>);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		(p&lt;=mid)?<span class="built_in">update</span>(ls,p,x):<span class="built_in">update</span>(rs,p,x);</span><br><span class="line">		mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> mi[u];</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=inf;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) ans=<span class="built_in">min</span>(ans,<span class="built_in">ask</span>(ls,L,R));</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  ans=<span class="built_in">min</span>(ans,<span class="built_in">ask</span>(rs,L,R));</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> id,val;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.val==B.val) <span class="keyword">return</span> A.id&lt;B.id;</span><br><span class="line">		<span class="keyword">return</span> A.val&lt;B.val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node u;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> d[N],c[N],r[N],p[N],le[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">103</span>][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">min</span>(n,<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) d[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) c[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) r[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) le[i]=<span class="built_in">lower_bound</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>,d[i]-r[i])-d<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		f[<span class="number">1</span>][i]=f[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">top</span>();</span><br><span class="line">			<span class="keyword">if</span>(-u.val&lt;d[i]) f[<span class="number">1</span>][i]+=p[u.id],q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		q.<span class="built_in">push</span>((node)&#123;i,-d[i]-r[i]&#125;); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[<span class="number">1</span>][i]+=c[i];</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">2</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		SGT::<span class="built_in">init</span>(n,f[k<span class="number">-1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">			&#123;</span><br><span class="line">				u=q.<span class="built_in">top</span>();</span><br><span class="line">				<span class="keyword">if</span>(-u.val&lt;d[i])</span><br><span class="line">					SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,le[u.id],p[u.id]),q.<span class="built_in">pop</span>();</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(i!=<span class="number">1</span>) f[k][i]=SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">if</span>(f[k][i]&lt;inf)	f[k][i]+=c[i];</span><br><span class="line">			q.<span class="built_in">push</span>((node)&#123;i,-d[i]-r[i]&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>,sum;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans+=p[i];</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fd</span>(i,n,k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">				&#123;</span><br><span class="line">					u=q.<span class="built_in">top</span>();</span><br><span class="line">					<span class="keyword">if</span>(d[i]&lt;u.val) sum+=p[u.id],q.<span class="built_in">pop</span>();</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			q.<span class="built_in">push</span>((node)&#123;i,d[i]-r[i]&#125;);</span><br><span class="line">			ans=<span class="built_in">min</span>(ans,sum+f[k][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>分治</tag>
        <tag>线段树</tag>
        <tag>堆</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title>Duff in Mafia[CF587D]</title>
    <url>/2020/08/05/Duff-in-Mafia-CF587D/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF587D">luogu</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最小值最大显然先二分，然后变成有些边一定不能选，有些边可以选。</p>
<p>每条可以选的边有选或者不选两种情况。</p>
<p>对于一个点而言：考虑与之相连的所有边，如果其中一条边选了，剩下的所有的边都不能选；考虑与之相连的所有同颜色的边，如果其中一条边没选，剩下的都必须要选。</p>
<p>那么就变成一个2-SAT问题了。将 $m$ 条边看成点，拆点，$i,i’$ 分别表示表示这条边选和不选的情况。</p>
<p>对于必定不能选的边，连边 $(i,i’)$。</p>
<p>对于第一种情况，即考虑所有边的情况：将这些边排成一列，然后连边 $(i,j’)$，其中 $j\not =i$。</p>
<p>第二种情况同理，连 $(i’,j)$。</p>
<p>但是这样做复杂度高达 $O(m^2\log t)$，无法承受。</p>
<p>考虑优化连边——前缀优化（似乎是2-SAT的一种很经典的连边方式？）。</p>
<p>这里只考虑第一种情况，第二种反过来就好了。</p>
<p>将这些边排成一列，设为 $x_i$ 和 $x_i’$。然后新建两列点 $s_i,s_i’$，用下面的方式连边，即可达到同样的效果。</p>
<p><img src="/Duff-in-Mafia-CF587D/Edge.png" alt="Edge"></p>
<p>于是时间复杂度 $O((n+m)\log t)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">500005</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans,vec[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,col,t;</span><br><span class="line">&#125;e[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt,scc_cnt,bel[N];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],tim,st[N],top;</span><br><span class="line"><span class="type">bool</span> instack[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dfn[u]=low[u]=++tim;</span><br><span class="line">	instack[u]=<span class="number">1</span>; st[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v]) <span class="built_in">dfs</span>(v),low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">	<span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">	&#123;</span><br><span class="line">		instack[u]=<span class="number">0</span>; bel[u]=++scc_cnt;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v;u!=st[top--];top)</span><br><span class="line">		&#123;</span><br><span class="line">			v=st[top+<span class="number">1</span>]; instack[v]=<span class="number">0</span>; bel[v]=scc_cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	scc_cnt=top=tim=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) bel[i]=instack[i]=dfn[i]=low[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(e[i].t&gt;x) adj[i].<span class="built_in">pb</span>(i+m);</span><br><span class="line">	<span class="built_in">tarjan</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(e[i].t&gt;x) adj[i].<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(bel[i]==bel[i+m]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> len=v.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt+=<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">add</span>(cnt<span class="number">-1</span>,v[i]); <span class="built_in">add</span>(v[i]+m,cnt);</span><br><span class="line">		<span class="keyword">if</span>(i!=len<span class="number">-1</span>) <span class="built_in">add</span>(v[i+<span class="number">1</span>]+m,cnt<span class="number">-1</span>),<span class="built_in">add</span>(cnt,v[i+<span class="number">1</span>]),<span class="built_in">add</span>(cnt+<span class="number">1</span>,cnt<span class="number">-1</span>),<span class="built_in">add</span>(cnt,cnt+<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		e[i].x=<span class="built_in">read</span>(),e[i].y=<span class="built_in">read</span>(),e[i].col=<span class="built_in">read</span>(),e[i].t=<span class="built_in">read</span>();</span><br><span class="line">		vec[e[i].x].<span class="built_in">pb</span>(i); vec[e[i].y].<span class="built_in">pb</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cnt=m+m;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	<span class="keyword">if</span>(vec[i].<span class="built_in">size</span>()&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">sort</span>(<span class="built_in">all</span>(vec[i]),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> e[x].col&lt;e[y].col;&#125;);</span><br><span class="line">		<span class="type">int</span> len=vec[i].<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,len)</span><br><span class="line">		&#123;</span><br><span class="line">			cnt+=<span class="number">2</span>;</span><br><span class="line">			<span class="built_in">add</span>(vec[i][j],cnt<span class="number">-1</span>); <span class="built_in">add</span>(cnt,vec[i][j]+m);</span><br><span class="line">			<span class="keyword">if</span>(j!=len<span class="number">-1</span>) <span class="built_in">add</span>(cnt<span class="number">-1</span>,vec[i][j+<span class="number">1</span>]+m),<span class="built_in">add</span>(vec[i][j+<span class="number">1</span>],cnt),<span class="built_in">add</span>(cnt<span class="number">-1</span>,cnt+<span class="number">1</span>),<span class="built_in">add</span>(cnt+<span class="number">2</span>,cnt); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;j&lt;len;j=k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(v.<span class="built_in">clear</span>();k&lt;len&amp;&amp;e[vec[i][j]].col==e[vec[i][k]].col;k++) v.<span class="built_in">pb</span>(vec[i][k]);</span><br><span class="line">			<span class="built_in">work</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,mid;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) r=<span class="built_in">max</span>(r,e[i].t);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">check</span>(r)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">check</span>(l); ans.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(bel[i]&lt;bel[i+m]) ans.<span class="built_in">pb</span>(i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,l,ans.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x:ans) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>2-SAT</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>Number of Binominal Coefficients[CF582D]</title>
    <url>/2020/08/04/Number-of-Binominal-Coefficients-CF582D/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF582D">luogu</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个组合数能否整除 $p^k$（其中 $p$ 是质数），这个可以算出组合数的含 $p$ 的次幂，然后判断是否大于等于 $k$ 即可。</p>
<p>由kummer定理，$\binom{n+m}{m}$ 的含 $p$ 的次幂等于 $n+m$ 在 $p$ 进制意义下的进位次数。</p>
<p>由于 $\binom{n}{k}=\binom{(n-k)+k}{k}$，那么题目转换成，问有多少对 $0\le a,b\leq A$，且 $a+b$ 进位次数大于等于 $k$。</p>
<p>可以注意到，$\alpha \le 10^9$ 是吓人的。当极限数据 $p=2,A=10^{1000}$ 时，算出最小的 $\alpha$，满足 $p^{\alpha}\geq A$，发现不超过 $3400$。</p>
<p>那么就可以进行数位DP了。</p>
<p>设 $f_{i,j,0/1,0/1}$ 表示从高位到低位考虑到第 $i$ 位，此时（包括 $i-1$ 位进上来的）已经有 $j$ 个进位，第 $i-1$ 位是否进上来第 $i$ 位，数位是否一直取最大值的方案数。</p>
<p>转移分四类大力讨论，算一堆东西即可。</p>
<p>具体见程序。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3405</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll p;</span><br><span class="line"><span class="type">int</span> alpha,x[N],m;</span><br><span class="line"><span class="type">int</span> f[N][N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[m+<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ll p1=<span class="number">1ll</span>*(p+<span class="number">1</span>)*p/<span class="number">2</span>%mod,p2=<span class="number">1ll</span>*p*(p<span class="number">-1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">    ll g1,g2,g3,g4;</span><br><span class="line">    <span class="built_in">fd</span>(i,m,<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x1=<span class="number">1ll</span>*(x[i]+<span class="number">1</span>)*x[i]/<span class="number">2</span>%mod,x2=<span class="number">1ll</span>*x[i]*(x[i]<span class="number">-1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">        ll t1=<span class="number">1ll</span>*x[i]*(p*<span class="number">2</span>-x[i]<span class="number">-1</span>)/<span class="number">2</span>%mod,t2=<span class="number">1ll</span>*x[i]*(p*<span class="number">2</span>-x[i]+<span class="number">1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">0</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            g1=f[i+<span class="number">1</span>][j][<span class="number">0</span>][<span class="number">0</span>]; g2=f[i+<span class="number">1</span>][j][<span class="number">0</span>][<span class="number">1</span>]; g3=f[i+<span class="number">1</span>][j][<span class="number">1</span>][<span class="number">0</span>]; g4=f[i+<span class="number">1</span>][j][<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            f[i][j][<span class="number">0</span>][<span class="number">0</span>]=(p1*g1+x1*g2+p2*g3+t1*g4)%mod;</span><br><span class="line">            f[i][j][<span class="number">0</span>][<span class="number">1</span>]=(g2*(x[i]+<span class="number">1</span>)+g4*(p-x[i]<span class="number">-1</span>))%mod;</span><br><span class="line">            f[i][j+<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=(p2*g1+x2*g2+p1*g3+t2*g4)%mod;</span><br><span class="line">            f[i][j+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=(g2*x[i]+g4*(p-x[i]))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,alpha,m) (ans+=f[<span class="number">1</span>][i][<span class="number">0</span>][<span class="number">0</span>]+f[<span class="number">1</span>][i][<span class="number">0</span>][<span class="number">1</span>])%=mod;</span><br><span class="line">    <span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> s[N];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d\n%s&quot;</span>,&amp;p,&amp;alpha,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(alpha&gt;=<span class="number">3400</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),a[N];</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=s[n-i+<span class="number">1</span>]<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">for</span>(;n;)</span><br><span class="line">    &#123;</span><br><span class="line">        ll tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=tmp*<span class="number">10</span>+a[i]; a[i]=tmp/p; tmp%=p;</span><br><span class="line">            <span class="keyword">if</span>(i==n&amp;&amp;!a[i]) n--;</span><br><span class="line">        &#125;</span><br><span class="line">        x[++m]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">solve</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
        <tag>kummer定理</tag>
      </tags>
  </entry>
  <entry>
    <title>排列计数[luogu5825]</title>
    <url>/2020/08/04/%E6%8E%92%E5%88%97%E8%AE%A1%E6%95%B0-luogu5825/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于所有长度为 $n$ 的排列 $p$，求有 $k$ 个 $i$ 满足 $p_i&lt;p_{i+1}$ 的方案数。</p>
<p>对于所有的 $k$ 都要算。</p>
<p>$n\leq 2\times 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>有一个较为简单的DP，顺次考虑将 $i$ 插入进排列，转移很简单，时间复杂度 $O(n^2)$。</p>
<p>然后你发现做不下去了，考虑至少容斥，设 $F_i$ 为答案，$G_k$ 为至少有 $k$ 个 $i$ 满足条件的方案数。那么最后二项式反演+ntt即可算出 $F$。</p>
<p>考虑钦定了 $k$ 个位置的小于号，然后将连续的小于号的搞成一个连续段，那么将有 $n-k$ 个连续段，且如果知道了段内的数组，那么段内的顺序也是确定的。</p>
<p>假设段的长度为 $x_1,x_2\cdots,x_m$，那么一共有 $\frac{n!}{\prod_{i=1}^m x_i}$ 个贡献，要求满足 $x_i\geq 1$</p>
<p>考虑用生成函数解决：</p>
<p>$$G _ k=[x ^ n]((\sum _ {i=0} \frac{x ^ i}{i!})-1) ^ {n-k}=[x ^ n] (e ^ x-1) ^ {n-k}$$</p>
<p>设 $m=n-k$，则：</p>
<p>$$<a href="e^x-1">x^n</a>^m=\sum_{i=0}^m[x^n]e^{xi}(-1)^{m-i}\binom{m}{i}=\sum_{i=0}^m\frac{i^n}{n!}(-1)^{m-i}\binom{m}{i}$$</p>
<p>搞一个ntt就好了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>懒得搞了，反正很简单。</p>
]]></content>
      <categories>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>生成函数</tag>
        <tag>FFT</tag>
        <tag>二项式反演</tag>
      </tags>
  </entry>
  <entry>
    <title>Tokitsukaze, CSL and Palindrome Game[hdu6791]</title>
    <url>/2020/07/29/Tokitsukaze-CSL-and-Palindrome-Game-hdu6791/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6791">hdu</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于一个字符串 $S$，我们定义 $E(S)$ 为每次在串后面随机一个小写字母，第一次出现该字符串时的期望次数。</p>
<p>给一个长度为 $n$ 的字符串，$q$ 次询问这个字符串中的两个回文子串，谁的 $E(S)$ 大。</p>
<p>$n,q\le 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>考虑，先解决如何计算一个字符串的 $E(S)$。</p>
<p>显然有：$E(S)=\sum_{i=1}^{\infty}P(在i时刻第一次出现S)i$</p>
<p>转换一下得到：$E(S)=\sum_{i=0}^{\infty}P(在i时刻还未出现S)$。</p>
<p>那我们设这么一个字符串集合，表示还未出现S的所有状态，设为 $F$。里面每个字符串有它的出现的概率 $P(F_i)$。</p>
<p>有：$E(S)=\sum P(F_i)$</p>
<p>再设 $G$ 为第一次出现S时的所有状态，同理有 $P(G_i)$。</p>
<p>有：$\sum P(G_i)=1$。</p>
<p>考虑对于 $F$ 集合内的任意一个 $F_i$ ，我们在 $F_i$ 后加上一个 $S$。此时的 $\{F_i+S\}$ 肯定会包含 $G$。除此以外，有可能在还没有加完整个 $S$ 后就已经出现第一次了，这种情况只能是这个 $S$ 的某个前缀是后缀，也就是border。设这个border长度为 $j$，那么需要再后面加 $|S|-j$ 个数。</p>
<p>那么得到：$\sum P(F_i)(\frac{1}{26})^{|S|}=\sum_{长度为j的border}\sum P(G_i)(\frac{1}{26})^{|S|-j}$</p>
<p>同时乘 $(\frac{1}{26})^{|S|}$，由 $\sum P(G_i)=1$ 得到：</p>
<p>$E(S)=\sum_{j=1}^{|S|}[存在长度为j的border]26^j$</p>
<p>还有另一种证明用的是生成函数，参考2018集训队论文。</p>
<h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><p>我们将 $E(S)$ 看成 $26$ 进制。那么只需要先比较字符串长度，如果不相等结果就直接出来了。</p>
<p>否则就是比较字典序。</p>
<p>既然是回文子串，就建一个PAM吧！</p>
<p>然后在上面建fail树倍增一下找到询问的字符串。</p>
<p>根据border理论，一个回文串的border也是回文串，对应的刚好就是fail链上的所有长度大于 $0$ 的节点。</p>
<p>那么哈希，然后倍增找到第一个字典序不同的位置即可。</p>
<p>时间复杂度 $O((n+q)\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244853</span>;</span><br><span class="line"><span class="type">const</span> ll base=<span class="number">29</span>;</span><br><span class="line">ll p[N];</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"><span class="keyword">namespace</span> PAM&#123;</span><br><span class="line">	<span class="type">int</span> s[N],n;</span><br><span class="line">	<span class="type">int</span> fa[N],ne[N][S],len[N],siz,las;</span><br><span class="line">	<span class="type">int</span> f[N][<span class="number">20</span>];</span><br><span class="line">	ll h[N];</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) s[i]=<span class="number">0</span>; s[n=<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,siz) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),fa[i]=len[i]=<span class="number">0</span>,adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		siz=<span class="number">1</span>; las=<span class="number">0</span>;</span><br><span class="line">		fa[<span class="number">0</span>]=<span class="number">1</span>; len[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;s[n<span class="number">-1</span>-len[x]]!=s[n];x=fa[x]);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[++n]=c;</span><br><span class="line">		<span class="type">int</span> p=<span class="built_in">getfail</span>(las);</span><br><span class="line">		<span class="keyword">if</span>(!ne[p][c])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=++siz,q=<span class="built_in">getfail</span>(fa[p]);</span><br><span class="line">			len[u]=len[p]+<span class="number">2</span>; fa[u]=ne[q][c]; ne[p][c]=u; </span><br><span class="line">		&#125;</span><br><span class="line">		las=ne[p][c];</span><br><span class="line">		<span class="keyword">return</span> las;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pre==<span class="number">-1</span>) h[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> h[u]=(h[pre]+(len[u]&lt;=<span class="number">0</span>?<span class="number">0</span>:p[len[u]]))%mod;</span><br><span class="line">		f[u][<span class="number">0</span>]=pre;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">18</span>)</span><br><span class="line">			<span class="keyword">if</span>(f[u][i<span class="number">-1</span>]!=<span class="number">-1</span>)</span><br><span class="line">				f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,siz) <span class="keyword">if</span>(i!=<span class="number">1</span>) adj[fa[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">		<span class="built_in">fo</span>(u,<span class="number">0</span>,siz) <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">18</span>) f[u][i]=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[u][i]!=<span class="number">-1</span>&amp;&amp;len[f[u][i]]&gt;=k) u=f[u][i];</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">jump</span>(pos[y],y-x+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">if</span>(f[x][i]!=<span class="number">-1</span>&amp;&amp;f[y][i]!=<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">if</span>((h[x]-h[f[x][i]]+mod)%mod==(h[y]-h[f[y][i]]+mod)%mod)</span><br><span class="line">					x=f[x][i],y=f[y][i];</span><br><span class="line">		<span class="keyword">if</span>(f[x][<span class="number">0</span>]==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> len[x]&gt;len[y]?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,N) p[i]=p[i<span class="number">-1</span>]*base%mod;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		PAM::<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pos[i]=PAM::<span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		PAM::<span class="built_in">work</span>();</span><br><span class="line">		<span class="type">int</span> a,b,c,d,t;</span><br><span class="line">		CASET</span><br><span class="line">		&#123;</span><br><span class="line">			a=<span class="built_in">read</span>(); b=<span class="built_in">read</span>(); c=<span class="built_in">read</span>(); d=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(b-a+<span class="number">1</span>!=d-c+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">puts</span>((b-a+<span class="number">1</span>&gt;d-c+<span class="number">1</span>)?<span class="string">&quot;cslnb&quot;</span>:<span class="string">&quot;sjfnb&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			t=PAM::<span class="built_in">solve</span>(PAM::<span class="built_in">get</span>(a,b),PAM::<span class="built_in">get</span>(c,d));</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>((t==<span class="number">1</span>)?<span class="string">&quot;cslnb&quot;</span>:<span class="string">&quot;sjfnb&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>期望</tag>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title>一些随机算法</title>
    <url>/2020/07/29/%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>这里是一些关于随机<del>乱搞</del>算法的介绍。（待更。。。</p>
<span id="more"></span>

<h3 id="爬山算法"><a href="#爬山算法" class="headerlink" title="爬山算法"></a>爬山算法</h3><p>顾名思义，你可以想象一下蒙上眼睛以后是怎么爬山的。</p>
<p>那就是随机一个当前位置的临近状态，如果这个状态的比当前位置牛逼，那么就移动到这个位置上。</p>
<p>显然，这样的思路很容易陷入局部最优解然后出不来。</p>
<p>解决方案是<del>使用模拟退火</del>多爬几遍。</p>
<h3 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h3><p>英文名：Simulated Annealing。</p>
<p>顾名思义 $\times 2$。<del>你可以想象一下你从愤怒变为冷静的过程。</del></p>
<p>实际上是退火是与物理相关的词，指的是一个高温的晶体冷却时的过程。</p>
<p>跟爬山类似，退火的过程是从当前的状态转移到另一状态，只不过这个转移的过程跟当前的温度之类的是有关系的。可以理解为随机下一状态的范围是与当前温度相关的。</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>一开始我们先随机一个状态，以及设定一个初始的温度。然后温度随着迭代的次数增加而降低。</p>
<p>对于每一状态：设当前温度为 $T$，状态为 $x_n$，然后你根据当前温度找到了下一个状态 $x_{n+1}$。</p>
<p>设状态 $x$ 的能量为 $E(x)$。这个能量跟爬山的高度是类似的。</p>
<p>为了不陷入局部最优解，我们需要一个东西来判定。</p>
<p>显然，当 $E(x_{n+1})\geq E(x_n)$ 时，也就是 $x_{n+1}$ 比 $x_n$ 优，我们将当前位置转移到 $E(x_{n+1})$ 上。</p>
<p>那么当 $E(x_{n+1})&lt;E(x_n)$ 时，我们要以一定的概率转移到 $E(x_{n+1})$ 上，以保证不陷入局部最优解。而这个概率我们用 $e^{-\frac{E(x_n)-E(x_{n+1})}{T}}$（我也不知道为什么要用这个）。</p>
<p>最后来看这个温度 $T$ 该怎么降低法。</p>
<p>实际上，一般通过指数式的下降来时限这个温度 $T$ 的下降。即 $T_{n+1}=\lambda T_n$，这个 $\lambda$ 可以随你挑。</p>
<p>如果 $\lambda$ 太大，则容易陷入局部最优解；如果 $\lambda$ 太小，则时间复杂度会增加。具体数值就去调参叭，大概是 $0.99$ 左右的样子。</p>
<p>然后退火退到一定程度，即温度过小的时候就可以结束了。</p>
<h4 id="trick0"><a href="#trick0" class="headerlink" title="trick0"></a>trick0</h4><p>调参，比如 $\lambda$ 的值，退火次数，以及随机种子。</p>
<h4 id="trick1"><a href="#trick1" class="headerlink" title="trick1"></a>trick1</h4><p>跟爬山一样，我们可以退多几次火来增加找到最优解的概率。</p>
<h4 id="trick2"><a href="#trick2" class="headerlink" title="trick2"></a>trick2</h4><p>分块模拟退火，当这个函数的峰有很多很多的时候，往往直接退火也无法找到最优解，这时我们将函数分为连续的一些块，每个快内做一次退火，然后合并。</p>
<h3 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h3><ul>
<li><a href="/2020/07/29/%E6%94%BB%E5%87%BB-JSOI2016/" title="攻击[JSOI2016]">攻击[JSOI2016]</a>
</li>
<li><a href="/2020/07/24/hdu2020%E5%A4%9A%E6%A0%A12/" title="Lead-of-Wisdom">Lead-of-Wisdom</a></li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>爬山算法</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>攻击[JSOI2016]</title>
    <url>/2020/07/29/%E6%94%BB%E5%87%BB-JSOI2016/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://loj.ac/problem/2076">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>前 $20\%$ ：$m=2$，暴力判断。</p>
<p>中间 $20\%$：$n=0$，枚举两个点，然后扫描线。</p>
<p>好了，开始搞正解。</p>
<p>发现根本不可做，于是来模拟退火。</p>
<p>退火的能量表示成一个二元组 &lt;点的个数，圆的最大半径&gt;。</p>
<p>要使得点的个数最大，且在点的个数相同时，圆的最大半径最大才行。</p>
<p>然后对于一个点，算这个二元组可以 $O(n+m)$ 算。</p>
<p>那么退火次数可以卡一卡，调一堆参，就过了。</p>
<p>时间复杂度玄学。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pid pair<span class="string">&lt;int,db&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">P</span>(db _x=<span class="number">0</span>,db _y=<span class="number">0</span>)&#123;x=_x; y=_y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">dis</span><span class="params">(P A,P B)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C</span>&#123;db x,y,r;&#125;;</span><br><span class="line">C c[N];</span><br><span class="line">P p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">db R;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Rand</span><span class="params">(db x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*<span class="number">2</span>*((<span class="number">0.0</span>+<span class="built_in">rand</span>())/RAND_MAX)-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pid <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tot=<span class="number">0</span>; db r=R;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) r=<span class="built_in">min</span>(r,<span class="built_in">dis</span>(<span class="built_in">P</span>(x,y),<span class="built_in">P</span>(c[i].x,c[i].y))-c[i].r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(<span class="built_in">dis</span>(p[i],<span class="built_in">P</span>(x,y))&lt;=r) tot++;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(tot,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">(db x,db y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pid now=<span class="built_in">calc</span>(x,y),mx=now,nex;</span><br><span class="line">	db nx,ny,W;</span><br><span class="line">	<span class="keyword">for</span>(db T=R;T&gt;eps;T*=<span class="number">0.99</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		nx=x+<span class="built_in">Rand</span>(T),ny=y+<span class="built_in">Rand</span>(T);</span><br><span class="line">		nex=<span class="built_in">calc</span>(nx,ny);</span><br><span class="line">		<span class="keyword">if</span>(nex&gt;now) x=nx,y=ny,now=nex;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(R*(nex.fi==now.fi?nex.se-now.se:nex.fi-now.fi)/T)&gt;((<span class="number">0.0</span>+<span class="built_in">rand</span>())/RAND_MAX)) x=nx,y=ny,now=nex;</span><br><span class="line">		mx=<span class="built_in">max</span>(mx,nex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mx.fi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">20030403</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;R;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) cin&gt;&gt;c[i].x&gt;&gt;c[i].y&gt;&gt;c[i].r;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="built_in">min</span>(<span class="number">100000</span>/m,<span class="number">2000</span>)) ans=<span class="built_in">max</span>(ans,<span class="built_in">solve</span>(<span class="built_in">Rand</span>(R),<span class="built_in">Rand</span>(R)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展Lucas</title>
    <url>/2020/07/28/%E6%89%A9%E5%B1%95Lucas/</url>
    <content><![CDATA[<p>求 $\binom{n}{m}\bmod p$ 的值。</p>
<p>$m\le n\le 10^{18},p\le 10^7$ </p>
<span id="more"></span>

<p><del>主要是存一个模板。</del></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P4720">luogu</a></p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>Lucas定理：当 $p$ 是质数时，有 $\binom{n}{m}\equiv \binom{\frac{n}{p}}{\frac{m}{p}}\binom{n\bmod p}{m\bmod p}\pmod p$</p>
<p>那么当 $p$ 不是质数时，是否也能计算呢？</p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>如果要算 $\binom{n}{m}\bmod p$，只需要把 $p$ 质因数分解，$p=\sum_{i=1}^mp_i^{a_i}$。</p>
<p>那么对于任意的 $i$，算出 $\binom{n}{m}\bmod p_i^{a_i}$，然后用CRT合并。</p>
<h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h4><p>现在只需要算组合数对 $p^k$ 取模的结果。</p>
<p>将 $\binom{n}{m}$ 分解成阶乘形式：$\binom{n}{m}=\frac{n!}{m!(n-m)!}$</p>
<p>那么将阶乘搞成 $p^t\times y$ 的形式（其中 $\gcd(y,p)=1$），跟 $p$ 有关的幂用 $n!$ 的减去 $m!$ 和 $(n-m)!$ 的幂就可以算了。</p>
<p>剩下的 $y$ 是有逆元的，可以直接算。</p>
<h4 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h4><p>现在只需要分解 $n!$ 就好了。</p>
<p>我们将 $n!=1\times 2\times \cdots \times n$ 分成几部分。</p>
<p>第一部分是 $p$ 的倍数，分别是 $1p,2p\cdots \left \lfloor \frac{n}{p} \right \rfloor p$，那么可以表示为 $p^{\left \lfloor \frac{n}{p} \right \rfloor}\times (\left \lfloor \frac{n}{p} \right \rfloor)!$。</p>
<p>第二部分则不是 $p$ 的倍数。这一部分构成了一个模 $p^k$ 的循环节。</p>
<p>由于 $p^k$ 不会超过 $10^7$，因此可以预处理这个循环节。</p>
<p>设 $sum_j\equiv \sum_{i=1,i\bmod p\not = 0}^ji\pmod p^k$</p>
<p>然后就变成 $sum_{p^k}$ 的 $\left \lfloor \frac{n}{p} \right \rfloor$ 次幂乘上 $sum_{n\bmod p^k}$。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>预处理的时间为 $O(p^k)$，算一次组合数的复杂度为 $O(\log_pn\times log_2n)$。</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>根据不知道是什么定理，$sum_{p^k}$ 要么是 $1$ 要么是 $-1$。</p>
<p>那么算组合数时就省去了快速幂，复杂度变成 $O(\log_2n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!b)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="number">1</span>; y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	ll d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">	y-=a/b*x;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x,y,d;</span><br><span class="line">	d=<span class="built_in">exgcd</span>(a,b,x,y);</span><br><span class="line">	<span class="keyword">if</span>(d!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pair&lt;ll,ll&gt; <span class="title">excrt</span><span class="params">(<span class="type">int</span> n,ll *c,ll *m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll nc=c[<span class="number">1</span>],nm=m[<span class="number">1</span>],d;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		d=<span class="built_in">gcd</span>(m[i],nm);</span><br><span class="line">		<span class="keyword">if</span>((c[i]-nc)%d!=<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">		nc=<span class="built_in">inv</span>(nm/d,m[i]/d)*((c[i]-nc)/d)*nm+nc;</span><br><span class="line">		nm=nm/d*m[i];</span><br><span class="line">		nc=(nc%nm+nm)%nm;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(nc,nm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> ExLucas&#123;</span><br><span class="line">	ll sum[M];</span><br><span class="line">	<span class="type">int</span> t,p;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _p,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		p=_p; t=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) t=t*p;</span><br><span class="line">		sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,t) sum[i]=(sum[i<span class="number">-1</span>]*((i%p==<span class="number">0</span>)?<span class="number">1</span>:i))%t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> nq,sq;</span><br><span class="line">	<span class="function">ll <span class="title">fac</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		nq+=n/p;</span><br><span class="line">		<span class="keyword">if</span>(sum[t]==<span class="number">1</span>||(n/t)%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> sum[n%t]*<span class="built_in">fac</span>(n/p)%t;</span><br><span class="line">		<span class="keyword">return</span> (t-sum[n%t]%t*<span class="built_in">fac</span>(n/p)%t)%t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m,<span class="type">int</span> p,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">init</span>(p,k); sq=<span class="number">0</span>;</span><br><span class="line">		ll ans,sum;</span><br><span class="line">		nq=<span class="number">0</span>; ans=<span class="built_in">fac</span>(n); sq+=nq;</span><br><span class="line">		nq=<span class="number">0</span>; sum=<span class="built_in">fac</span>(m); sq-=nq;</span><br><span class="line">		nq=<span class="number">0</span>; sum=sum*<span class="built_in">fac</span>(n-m)%t; sq-=nq;</span><br><span class="line">		<span class="keyword">return</span> ans*<span class="built_in">inv</span>(sum,t)%t*<span class="built_in">Pow</span>(p,sq,t)%t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,mod,q,c[<span class="number">100</span>],mo[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod; q=mod;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">if</span>(q%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(t=<span class="number">0</span>;q%i==<span class="number">0</span>;q/=i) t++;</span><br><span class="line">			++top;</span><br><span class="line">			c[top]=ExLucas::<span class="built_in">C</span>(n,m,i,t);</span><br><span class="line">			mo[top]=ExLucas::t;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(q!=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		++top;</span><br><span class="line">		c[top]=ExLucas::<span class="built_in">C</span>(n,m,q,<span class="number">1</span>);</span><br><span class="line">		mo[top]=ExLucas::t;</span><br><span class="line">	&#125;</span><br><span class="line">	pair&lt;ll,ll&gt; ans=<span class="built_in">excrt</span>(top,c,mo);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans.fi);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>组合数学</tag>
        <tag>Lucas定理</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2020多校3</title>
    <url>/2020/07/28/hdu2020%E5%A4%9A%E6%A0%A13/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=881">比赛链接</a></p>
<span id="more"></span>

<h3 id="A-Tokitsukaze-CSL-and-Palindrome-Game"><a href="#A-Tokitsukaze-CSL-and-Palindrome-Game" class="headerlink" title="A. Tokitsukaze,CSL and Palindrome Game"></a>A. Tokitsukaze,CSL and Palindrome Game</h3><a href="/2020/07/29/Tokitsukaze-CSL-and-Palindrome-Game-hdu6791/" title="链接">链接</a>

<h3 id="F-X-Number"><a href="#F-X-Number" class="headerlink" title="F. X Number"></a>F. X Number</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>将一个十进制数进行这样分类：</p>
<ul>
<li><p>统计每个数码的出现次数。</p>
</li>
<li><p>如果出现次数有两个或以上的最大值，则分类为 $10$。</p>
</li>
<li><p>否则，若数码 $d$ 的出现次数最多，则分类为 $d$。</p>
</li>
</ul>
<p>多次询问，求 $[l,r]$ 内的数有多少个分类为 $d$。</p>
<p>$T\le 1000,d\in[0,9],1\le l \le r \le 10^{18}$，时限 $3s$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><h5 id="比赛时做法"><a href="#比赛时做法" class="headerlink" title="比赛时做法"></a>比赛时做法</h5><p>一道非常显然的数位DP题。</p>
<p>在数位DP打破限制之后，相当于有 $10$ 个变量，此时为 $a_i$。最终为 $a’_i$，要求 $a’_d&gt;a’_i(i\not=d)$。</p>
<p>此时可以在 $a$ 的基础上进行若干次将 $a_i+1$ 的操作，设这个次数为 $k$。</p>
<p>那么枚举 $a_d$ 加了 $j$ 次，然后算出将其他 $a_i$  加 $k’=k-j$ 次后满足的条件的方案数，乘上系数 $\binom{k}{j}$ 即可。</p>
<p>这是对于所有的 $i\not =d$，你可以算出一个次数 $t_i$，表示第 $i$ 个数码最多只能加这么多次。</p>
<p>那么这个方案数就是 $k’![x^{k’}]\prod <em>{d\not=i}(\sum</em>{j=0}^{t_i}\frac{x^j}{j!})$</p>
<p>暴力卷积，时间复杂度 $O(18^2\times 9)$。</p>
<p>时间复杂度 $O(18^4\times 9\times 10 \times T)$，有若干小常数。</p>
<p>跑了大概3s+秒，然后神奇地将卷积数组改成了long double就跑得飞快。</p>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>显然，18的拆分数是很小的，于是我们可以预处理最后的DP，这样就是正解了。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line">ll c[<span class="number">20</span>][<span class="number">20</span>],fac[<span class="number">20</span>];</span><br><span class="line"><span class="type">long</span> db f[<span class="number">20</span>],g[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">19</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i][<span class="number">0</span>]=c[i][i]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>)</span><br><span class="line">			c[i][j]=c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">18</span>) fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[<span class="number">20</span>],top,s[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">18</span>) f[i]=<span class="number">0</span>;</span><br><span class="line">	f[<span class="number">0</span>]=fac[k];</span><br><span class="line">	<span class="built_in">fd</span>(j,<span class="number">9</span>,<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">if</span>(j^d)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(x,<span class="number">0</span>,k)</span><br><span class="line">				<span class="built_in">fo</span>(y,<span class="number">0</span>,<span class="built_in">min</span>(k-x,v-s[j]<span class="number">-1</span>))</span><br><span class="line">					g[x+y]+=f[x]/fac[y];</span><br><span class="line">			<span class="built_in">fo</span>(x,<span class="number">0</span>,k) f[x]=g[x],g[x]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> (ll)(f[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">9</span>) <span class="keyword">if</span>(i^d) mx=<span class="built_in">max</span>(mx,s[i]);</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,k)</span><br><span class="line">		<span class="keyword">if</span>(s[d]+j&gt;mx)</span><br><span class="line">			ans+=c[k][j]*<span class="built_in">calc</span>(k-j,s[d]+j);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">9</span>) <span class="keyword">if</span>(i^d) mx=<span class="built_in">max</span>(mx,s[i]);</span><br><span class="line">	<span class="keyword">return</span> s[d]&gt;mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> k,<span class="type">bool</span> limit,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!limit&amp;&amp;flag) <span class="keyword">return</span> <span class="built_in">work</span>(top-k+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(k&gt;top) <span class="keyword">return</span> <span class="built_in">check</span>();</span><br><span class="line">	<span class="type">int</span> mx=limit?st[k]<span class="number">-1</span>:<span class="number">9</span>;</span><br><span class="line">	<span class="type">bool</span> nex;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,mx) </span><br><span class="line">	&#123;</span><br><span class="line">		nex=flag|(i!=<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(nex) s[i]++;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(k+<span class="number">1</span>,<span class="number">0</span>,nex);</span><br><span class="line">		<span class="keyword">if</span>(nex) s[i]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(limit)</span><br><span class="line">	&#123;</span><br><span class="line">		s[st[k]]++;</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(k+<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		s[st[k]]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">9</span>) st[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(top=<span class="number">0</span>;r;st[++top]=r%<span class="number">10</span>,r/=<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">reverse</span>(st+<span class="number">1</span>,st+top+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="built_in">read</span>(); r=<span class="built_in">read</span>(); d=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>(r)-<span class="built_in">solve</span>(l<span class="number">-1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2020多校2</title>
    <url>/2020/07/24/hdu2020%E5%A4%9A%E6%A0%A12/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=880">比赛链接</a></p>
<p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=2020+Multi-University+Training+Contest+2&source=1&searchmode=source">题目链接</a></p>
<span id="more"></span>

<h3 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h3><p>做的时候越来越困，导致一堆那种还算简单的题最后想不到了。</p>
<p>其实也不只是困的原因，更重要的还是当遇到困难的时候真的应该安静下来努力克服，或者重新开会理一遍思路，这样就会快点想到，以免浪费太多没有意义的时间。</p>
<p>比如下面的一道裸费用流题，自己想来想去，先是想了想随机，然后再想DP，这是就应该静下心来，思考自己的方案是不是对的。看到匹配问题的时候就应该一开始就想到网络流类的问题才行。</p>
<h3 id="A-Total-Eclipse"><a href="#A-Total-Eclipse" class="headerlink" title="A. Total Eclipse"></a>A. Total Eclipse</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个无向图，上面每个点有权值 $b_i$。进行若干次操作，每次选择一个连通块，然后将连通块内的 $b_i$ 减去 $1$。问至少多少次操作，使得 $b_i$ 全变为 $0$。</p>
<p>$n\le 10^5,m\le 2\times 10^5$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这是第一道做出来的题。</p>
<p>显然贪心，每次选择一个极大连通块内 $b_i$ 最小的点，然后将这个连通块的所有点权都减去 $b_i$，然后删掉 $i$ 这个点。</p>
<p>但是我们无法维护删掉后的连通性。</p>
<p>考虑倒着做，那么就只需要维护加点之后的连通性就可以了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">bool</span> bo[N],vis[N];</span><br><span class="line"><span class="type">int</span> a[N],id[N],fa[N],mi[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y=<span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	mi[x]=<span class="built_in">min</span>(mi[x],mi[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),id[i]=i,fa[i]=i,mi[i]=a[i],vis[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">		<span class="built_in">sort</span>(id+<span class="number">1</span>,id+n+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> a[x]&gt;a[y];&#125;);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=id[i]; vis[u]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">			<span class="keyword">if</span>(vis[v])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> w=<span class="built_in">find</span>(v);</span><br><span class="line">				<span class="keyword">if</span>(!bo[w])</span><br><span class="line">				&#123;</span><br><span class="line">					bo[w]=<span class="number">1</span>;</span><br><span class="line">					ans+=mi[w]-a[u];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(vis[v]) bo[<span class="built_in">find</span>(v)]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(vis[v]) <span class="built_in">merge</span>(<span class="built_in">find</span>(v),u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(<span class="built_in">find</span>(i)==i) ans+=mi[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E-New-Equipments"><a href="#E-New-Equipments" class="headerlink" title="E. New Equipments"></a>E. New Equipments</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>$n$ 个工人，$m$ 件设备编号 $[1,m]$。第 $i$ 个人选第 $j$ 个设备花费 $a_ij^2+b_ij+c_i$ ，对于每个 $k\in[1,n]$，求在 $n$ 个人里选 $k$ 个和设备配对的最小花费是多少。每个设备最多只能被匹配一个工人。</p>
<p>$T\le 10,n\leq 50,n\le m\le 10^8,b_i^2\geq 4a_ic_i,1\le a_i\le 10,|b_i|\le 10^8,0\le c_i\leq 10^{16}$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>因为 $a_i&gt;0$，所有的二次函数有最下值。因此对于一个工人而言，他肯定会贪心的选择 $-\frac{b_i}{2a_i}$ 附近的设备。</p>
<p>这个附近的设备可以表示成一个长度为 $n$ 的区间。</p>
<p>那么能被选到的设备就最多只有 $n^2$ 个。</p>
<p>那么把工人看成一个点，放在左边；有可能被选上的设备放在右边。</p>
<p>随着 $k$ 递增，每次将费用加 $1$ 就好了。</p>
<p>而费用流的时间复杂度是流量乘上最短路的复杂度。</p>
<p>spfa费用流复杂度为 $O(n^5)$，dijkstra优化的费用流复杂度为 $O(n^4+n^3\log n)=O(n^4)$。常数都较小。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><p>dijkstra优化版本。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> G&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> N 3000</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line">	<span class="type">const</span> ll inf=<span class="number">4e18</span>;</span><br><span class="line">	<span class="type">int</span> s,t,ss;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M];</span><br><span class="line">	ll cost[M];</span><br><span class="line">	<span class="type">int</span> ne[M],head[N],tot;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,ll c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; cost[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; cost[tot]=-c;ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	ll h[N],dis[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,t) head[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++) h[i]=inf;</span><br><span class="line">		queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(h[s]=<span class="number">0</span>,q.<span class="built_in">push</span>(s);!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;h[v=ver[i]]&gt;h[u]+cost[i])</span><br><span class="line">				&#123;</span><br><span class="line">					h[v]=h[u]+cost[i];</span><br><span class="line">					<span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			vis[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> u; ll dis;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)&#123;<span class="keyword">return</span> A.dis&gt;B.dis;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> pv[N],pe[N];</span><br><span class="line">	priority_queue&lt;node&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">		ll co=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++) dis[i]=inf;</span><br><span class="line">			<span class="keyword">for</span>(dis[s]=<span class="number">0</span>,q.<span class="built_in">push</span>((node)&#123;s,dis[s]&#125;);!q.<span class="built_in">empty</span>();)</span><br><span class="line">			&#123;</span><br><span class="line">				node now=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">				<span class="type">int</span> u=now.u;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]&lt;now.dis) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					v=ver[i];</span><br><span class="line">					<span class="keyword">if</span>(dis[v]+h[v]&gt;dis[u]+h[u]+cost[i])</span><br><span class="line">						dis[v]=dis[u]+h[u]+cost[i]-h[v],</span><br><span class="line">						q.<span class="built_in">push</span>((node)&#123;v,dis[v]&#125;),</span><br><span class="line">						pv[v]=u,pe[v]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dis[t]==inf) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++) h[i]+=dis[i];</span><br><span class="line">			<span class="type">int</span> tmp=<span class="number">1e9</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=pv[u]) tmp=<span class="built_in">min</span>(tmp,val[pe[u]]);</span><br><span class="line">			flow+=tmp; co+=h[t]*tmp;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t,i;u!=s;u=pv[u]) i=pe[u],val[i]-=tmp,val[i^<span class="number">1</span>]+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> co;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">add</span>(s,ss,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="type">int</span> k=tot<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">spfa</span>(s,t);</span><br><span class="line">		ll sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(((i==n)?<span class="string">&quot;%lld\n&quot;</span>:<span class="string">&quot;%lld &quot;</span>),sum+=<span class="built_in">work</span>());</span><br><span class="line">			val[k]++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> N</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">53</span>;</span><br><span class="line"><span class="type">int</span> n,m,L[N],R[N];</span><br><span class="line">ll a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">F</span><span class="params">(ll x,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*(x*a[j]+b[j])+c[j];</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=<span class="built_in">read</span>(),b[i]=<span class="built_in">read</span>(),c[i]=<span class="built_in">read</span>();</span><br><span class="line">			ll x=-b[i]/(<span class="number">2ll</span>*a[i]);</span><br><span class="line">			<span class="keyword">if</span>(x&lt;=<span class="number">0</span>) L[i]=<span class="number">1</span>,R[i]=n;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(x&gt;=<span class="number">27</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(x+<span class="number">26</span>&lt;=m) L[i]=x<span class="number">-26</span>,R[i]=x+<span class="number">26</span>;</span><br><span class="line">					<span class="keyword">else</span> L[i]=<span class="built_in">max</span>(<span class="number">1</span>,m-n),R[i]=m;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> L[i]=<span class="number">1</span>,R[i]=n;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,L[i],R[i]) vec.<span class="built_in">pb</span>(j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">		vec.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(vec))-vec.<span class="built_in">begin</span>());</span><br><span class="line">		G::<span class="built_in">init</span>();</span><br><span class="line">		G::s=<span class="number">0</span>; G::ss=<span class="number">1</span>; G::t=vec.<span class="built_in">size</span>()+n+<span class="number">3</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			<span class="built_in">fo</span>(j,L[i],R[i])</span><br><span class="line">				G::<span class="built_in">add</span>(i+<span class="number">1</span>,<span class="built_in">lower_bound</span>(<span class="built_in">all</span>(vec),j)-vec.<span class="built_in">begin</span>()+n+<span class="number">2</span>,<span class="number">1</span>,<span class="built_in">F</span>(j,i));</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) G::<span class="built_in">add</span>(G::ss,i+<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,vec.<span class="built_in">size</span>()) G::<span class="built_in">add</span>(j+n+<span class="number">2</span>,G::t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		G::<span class="built_in">solve</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="F-The-Oculus"><a href="#F-The-Oculus" class="headerlink" title="F. The Oculus"></a>F. The Oculus</h3><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>暴力哈希即可，我这里写了双哈希。</p>
<h4 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod1=<span class="number">998244853</span>;</span><br><span class="line"><span class="type">const</span> ll mod2=<span class="number">2147483647</span>;</span><br><span class="line">ll F[<span class="number">2000005</span>],G[<span class="number">2000005</span>];</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,<span class="type">int</span>&gt; ma;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	F[<span class="number">1</span>]=<span class="number">1</span>; F[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">3</span>,<span class="number">2000000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		F[i]=F[i<span class="number">-1</span>]+F[i<span class="number">-2</span>];</span><br><span class="line">		F[i]&gt;=mod1?F[i]-=mod1:<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	G[<span class="number">1</span>]=<span class="number">1</span>; G[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">3</span>,<span class="number">2000000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		G[i]=G[i<span class="number">-1</span>]+G[i<span class="number">-2</span>];</span><br><span class="line">		G[i]&gt;=mod2?G[i]-=mod2:<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">2000000</span>) ma[<span class="built_in">mp</span>(F[i],G[i])]=i;</span><br><span class="line">	ll n1,n2,m1,m2,k1,k2;</span><br><span class="line">	<span class="type">int</span> n,m,k;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); n1=n2=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">read</span>()) (n1=(n1+F[i])%mod1,n2=(n2+G[i])%mod2);</span><br><span class="line">		&#125;</span><br><span class="line">		m=<span class="built_in">read</span>(); m1=m2=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">read</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			m1=(m1+F[i])%mod1,m2=(m2+G[i])%mod2;</span><br><span class="line">		&#125;</span><br><span class="line">		k=<span class="built_in">read</span>(); k1=k2=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">read</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			k1=(k1+F[i])%mod1,k2=(k2+G[i])%mod2;</span><br><span class="line">		&#125;</span><br><span class="line">		n1=(n1*m1-k1+mod1)%mod1; n2=(n2*m2-k2+mod2)%mod2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ma[<span class="built_in">mp</span>(n1,n2)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="G-In-Search-of-Gold"><a href="#G-In-Search-of-Gold" class="headerlink" title="G. In Search of Gold"></a>G. In Search of Gold</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>一棵树，边有两种权值 $a_i,b_i$。有 $k$ 条边可以选择 $a_i$，剩下的 $n-1-k$ 可以选择 $b_i$。问这个树的直径的最小值。</p>
<p>$n\leq 20000,k\le 20,\sum n\le 2\times 10^5$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p><strong>刚开始做的时候想到直接DP，结果发现是不太行的。</strong></p>
<p>要使得两点距离的最大值最小，可以二分答案 $mid$。</p>
<p>那么就只需判断所有可能的情况中，是否存在一种方案使得任意两点的距离 $\le mid$。</p>
<p>这样子就可以DP了，设 $f_{i,j}$ 表示以 $i$ 为根的子树中，满足直径 $\le mid$，用了 $j$ 个 $a$ 时，子树内的点离点 $i$ 最大的距离的最小值。</p>
<p>然后 $O(nk^2)$ 转移即可。</p>
<h4 id="程序-3"><a href="#程序-3" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">40010</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">4e18</span>;</span><br><span class="line"><span class="type">int</span> ver[N],a[N],b[N],ne[N],head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> _a,<span class="type">int</span> _b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; a[tot]=_a; b[tot]=_b; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; a[tot]=_a; b[tot]=_b; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N&gt;&gt;<span class="number">1</span>][<span class="number">22</span>],g[<span class="number">22</span>],mid;</span><br><span class="line"><span class="type">int</span> n,k,siz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">0</span>; f[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	ll tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			<span class="type">int</span> l=<span class="built_in">min</span>(siz[u],k),mi=<span class="built_in">min</span>(k,siz[u]+siz[v])+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,mi) g[j]=inf;</span><br><span class="line">			<span class="built_in">fo</span>(x,<span class="number">0</span>,l)</span><br><span class="line">				<span class="built_in">fo</span>(y,<span class="number">0</span>,<span class="built_in">min</span>(k-x,siz[v]))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(f[u][x]+f[v][y]+a[i]&lt;=mid) g[x+y+<span class="number">1</span>]=<span class="built_in">min</span>(g[x+y+<span class="number">1</span>],<span class="built_in">max</span>(f[u][x],f[v][y]+a[i]));</span><br><span class="line">					<span class="keyword">if</span>(f[u][x]+f[v][y]+b[i]&lt;=mid) g[x+y]=<span class="built_in">min</span>(g[x+y],<span class="built_in">max</span>(f[u][x],f[v][y]+b[i]));</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,mi) f[u][j]=g[j];</span><br><span class="line">			siz[u]+=siz[v]+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); tot=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) head[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> x,y,_a,_b;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),_a=<span class="built_in">read</span>(),_b=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">add</span>(x,y,_a,_b);</span><br><span class="line">		&#125;</span><br><span class="line">		ll l=<span class="number">0</span>,r=<span class="number">1000000000ll</span>*n;</span><br><span class="line">		<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(f[<span class="number">1</span>][k]&lt;=mid) r=mid<span class="number">-1</span>; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,r+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="I-It’s-All-Squares"><a href="#I-It’s-All-Squares" class="headerlink" title="I. It’s All Squares"></a>I. It’s All Squares</h3><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>显然地，我们只需考虑平行于坐标轴的矩形内的点，这个矩形最小且完全包住询问的多边形。</p>
<p>那么如何判断某个点是否在一个多边形里面呢？</p>
<p>根据计算几何那套理论，从该点向任意方向引出一条射线，该射线与多边形经过奇数次则在简单多边形内。</p>
<p>对于一个询问，字符串长度为 $4k$，则最多会包住 $k^2$ 个点。</p>
<p>$n,m$ 同阶，那么算一下发现，所有的询问最多包住 $\frac{\sum |S| n}{4}$ 个点，这是可以承受的。</p>
<p>于是暴力就好了。</p>
<h4 id="程序-4"><a href="#程序-4" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">403</span>;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">char</span> s[<span class="number">200005</span>];</span><br><span class="line"><span class="type">bool</span> ans[N][N];</span><br><span class="line"><span class="type">int</span> flag[N*N];</span><br><span class="line"><span class="type">int</span> n,m,q,len,tot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m) a[i][j]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> L,R,U,D,x,y,sum;q;q--)</span><br><span class="line">		&#123;</span><br><span class="line">			tot++;</span><br><span class="line">			L=<span class="number">401</span>,R=<span class="number">0</span>,U=<span class="number">0</span>,D=<span class="number">401</span>,sum=<span class="number">0</span>;</span><br><span class="line">			x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">			len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,len)</span><br><span class="line">			&#123;</span><br><span class="line">				L=<span class="built_in">min</span>(L,x); R=<span class="built_in">max</span>(R,x);</span><br><span class="line">				D=<span class="built_in">min</span>(D,y); U=<span class="built_in">max</span>(U,y);</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>) x--;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>) x++;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;D&#x27;</span>) y--;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>) y++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,L,R+<span class="number">1</span>) <span class="built_in">fo</span>(j,D,U+<span class="number">1</span>) ans[i][j]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,len)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>) ans[x][y+<span class="number">1</span>]^=<span class="number">1</span>,x--;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>) x++,ans[x][y+<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;D&#x27;</span>) y--;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>) y++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(i,L+<span class="number">1</span>,R)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">bool</span> bo=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">fo</span>(j,D+<span class="number">1</span>,U)</span><br><span class="line">				&#123;</span><br><span class="line">					bo^=ans[i][j];</span><br><span class="line">					<span class="keyword">if</span>(bo)</span><br><span class="line">						<span class="keyword">if</span>(flag[a[i][j]]!=tot) sum++,flag[a[i][j]]=tot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="J-Lead-of-Wisdom"><a href="#J-Lead-of-Wisdom" class="headerlink" title="J. Lead of Wisdom"></a>J. Lead of Wisdom</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>有 $n$ 个东西，每个东西有种类 $t_i$，以及数字 $a_i,b_i,c_i,d_i$。</p>
<p>现在要你选出一个集合 $S$，要求这个集合里有每个种类最多有一个，满足以下式子最大： </p>
<p>$\large (100+\sum_{i\in S}a_i)(100+\sum_{i\in S}b_i)(100+\sum_{i\in S}c_i)(100+\sum_{i\in S}d_i)$ </p>
<p>$T\leq 10,n\leq 50,0\le a_i,b_i,c_i,d_i \le 100$</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><h5 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h5><p>这个东西DP复杂度太高，贪心也不对。</p>
<p>那么就来随机算法吧。</p>
<p>毫无思路，简单粗暴。</p>
<p>我这里写的是爬山。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll a[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line">ll now[<span class="number">4</span>];</span><br><span class="line">vector&lt;node&gt; q[<span class="number">55</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="type">int</span> p[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec)</span><br><span class="line">		p[v]=<span class="built_in">rand</span>()%q[v].<span class="built_in">size</span>();</span><br><span class="line">	ll s[<span class="number">4</span>],ans,cur,ss[<span class="number">4</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) s[i]=now[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec) <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) s[i]+=q[v][p[v]].a[i];</span><br><span class="line">	ans=s[<span class="number">0</span>]*s[<span class="number">1</span>]*s[<span class="number">2</span>]*s[<span class="number">3</span>];</span><br><span class="line">	<span class="type">int</span> tot=vec.<span class="built_in">size</span>(),j,w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,t=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++,t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(t&gt;=<span class="number">40</span>) <span class="keyword">break</span>;</span><br><span class="line">		j=vec[<span class="built_in">rand</span>()%tot];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) ss[i]=s[i]-q[j][p[j]].a[i];</span><br><span class="line">		w=<span class="built_in">rand</span>()%q[j].<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) ss[i]+=q[j][w].a[i];</span><br><span class="line">		cur=ss[<span class="number">0</span>]*ss[<span class="number">1</span>]*ss[<span class="number">2</span>]*ss[<span class="number">3</span>];</span><br><span class="line">		<span class="keyword">if</span>(cur&gt;ans)</span><br><span class="line">		&#123;</span><br><span class="line">			t=<span class="number">0</span>; </span><br><span class="line">			ans=cur;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) s[i]=ss[i];</span><br><span class="line">			p[j]=w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,t,a,b,c,d;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) q[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			t=<span class="built_in">read</span>(); a=<span class="built_in">read</span>(); b=<span class="built_in">read</span>(); c=<span class="built_in">read</span>(); d=<span class="built_in">read</span>();</span><br><span class="line">			q[t].<span class="built_in">pb</span>((node)&#123;a,b,c,d&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) now[i]=<span class="number">100</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">		<span class="keyword">if</span>(q[i].<span class="built_in">size</span>()==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">3</span>) now[j]+=q[i][<span class="number">0</span>].a[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q[i].<span class="built_in">size</span>()&gt;<span class="number">1</span>) vec.<span class="built_in">pb</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">		ll ans=now[<span class="number">0</span>]*now[<span class="number">1</span>]*now[<span class="number">2</span>]*now[<span class="number">3</span>];</span><br><span class="line">		<span class="built_in">fo</span>(t,<span class="number">1</span>,<span class="number">200</span>) ans=<span class="built_in">max</span>(ans,<span class="built_in">solve</span>());</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="算法2"><a href="#算法2" class="headerlink" title="算法2"></a>算法2</h5><p>考虑直接暴力，时间复杂度 $O(k^{\frac{n}{k}})$。</p>
<p>我们来分析复杂度，设 $f(x)=x^{\frac{n}{x}} (x &gt; 0)$，我们需要求它的最大值。</p>
<p>对 $f(x)$ 求导，先取 $\ln$ 再 $\exp$ 就容易算了。</p>
<p>解得：$f’(x)=n(1-\ln x)x^2x^{\frac{n}{x}}$ 。</p>
<p>当 $f’(x)=0$ 时，有 $1-\ln x=0$，即 $x=e$。</p>
<p>当 $0&lt;x&lt;e$ 时，$f’(x)&gt;0$，函数单调增。</p>
<p>当 $x&gt;e$ 时，$f’(x)&lt;0$，函数单调减。</p>
<p>也就是说，当 $k$ 取正整数时，$k=2,3$ 时复杂度是最大的，算一下发现这两个都能过。</p>
<p>于是暴力就好了。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>网络流</tag>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>哈希</tag>
        <tag>树形DP</tag>
        <tag>并查集</tag>
        <tag>爬山算法</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>Minimum Index[hdu6761]</title>
    <url>/2020/07/22/Minimum-Index-hdu6761/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6761">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于给定字符串的每个前缀，求出这个前缀的所有的后缀中字典序最小的编号。</p>
<p>$|s|\leq 10^6,\sum|s|\leq 2\times 10^7$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一看这种题就知道要线性，而SAM和SA之类的都太慢了。</p>
<p>原来是有新的知识没学。。</p>
<p>设 $ans_i$ 表示前缀 $[1,i]$ 的答案。</p>
<p>考虑<a href="/2020/07/22/Lyndon%E5%88%86%E8%A7%A3/" title="Lyndon分解">Lyndon分解</a>的过程。</p>
<p>分若干种情况讨论。</p>
<p>当 $i=j$ 时，表明当前 $[i,k)$ 是一个Lyndon串，那么此时 $ans_{k-1}=i$。</p>
<p>否则 $i\not=j$，这时有：$ans_{k-1}=ans_{j-1}+(k-j)$，因为不会有比这一个周期内更优的答案。</p>
<p>然后就做完了。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">3</span>;</span><br><span class="line">ll pw[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n,p[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Lyndon</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k;i&lt;=n;)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(j=i,k=i+<span class="number">1</span>;k&lt;=n&amp;&amp;s[j]&lt;=s[k];k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==j) p[k<span class="number">-1</span>]=i;</span><br><span class="line">			<span class="keyword">else</span> p[j<span class="number">-1</span>]+(k-j);</span><br><span class="line">			j=(s[j]==s[k])?j+<span class="number">1</span>:i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(;i&lt;=j;i+=k-j);</span><br><span class="line">		p[i<span class="number">-1</span>]=i-(k-j);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">1000000</span>) pw[i]=pw[i<span class="number">-1</span>]*<span class="number">1112</span>%mod;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">Lyndon</span>(s,n);</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans=<span class="built_in">Add</span>(ans,pw[i<span class="number">-1</span>]*p[i]%mod);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>Lyndon分解</tag>
      </tags>
  </entry>
  <entry>
    <title>Lyndon分解</title>
    <url>/2020/07/22/Lyndon%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<p>一个似乎比较偏门的知识？</p>
<span id="more"></span>

<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>Lyndon串：若某字符串中所有后缀字典序最小的是这个字符串本身，则这个串为 Lyndon串。</li>
<li>近似Lyndon串：设 $t$ 是一个Lyndon串，$t^c$ 为 $t$ 拼接 $c$ 次，$t’$ 为 $t$ 串可空前缀，那么 $t^c+t’$ 为近似Lyndon串。</li>
<li>Lyndon分解：将一个字符串 $S$ 分解成一个字符串序列 $s_1,s_2\cdots s_m$，其中 $s_i$ 是Lyndon串，$s=s_1+s_2+\cdots+s_m$（+号表示拼接），且 $\forall i\in[1,m),s_i\geq s_{i+1}$。</li>
</ul>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><ul>
<li>若 $s,t$ 为Lyndon串，且 $s&lt;t$ ，则 $st$ 为Lyndon串。</li>
<li>对于一个字符串，Lyndon分解唯一。</li>
</ul>
<p>第一个定理显然，第二个可以用反证法。</p>
<h3 id="Duval-算法"><a href="#Duval-算法" class="headerlink" title="Duval 算法"></a>Duval 算法</h3><p>考虑依次增加一个数。</p>
<p>维护三个指针 $i,j,k$。</p>
<p>表示 $[1,i)$ 的字母都已经在Lyndon分解里面了，现在在考虑 $i$ 及其后面的字母；$[i,k)$ 可以表示为 $t^c+t’$ 的形式（即近似Lyndon串）；$j=k-|t|$，即 $k$ 一个周期前的字母。</p>
<p>考虑第 $k$ 个字母。</p>
<p>分三种情况讨论：</p>
<ul>
<li>$s_j=s_k$，那么可以继续接上去，$j,k$ 右移一位。</li>
<li>$s_j&lt;s_k$，那么 $[i,k]=t^c+t’+s_k$ 就是一个新的Lyndon串，此时将 $j$ 设为 $i$，然后 $k$ 右移一位，考虑下一个 $k$。</li>
<li>$s_j&gt;s_k$，那么只能 $c$ 个 $t$ 串作为新的Lyndon串，然后将 $i$ 设为 $t’$ 的开头，重新开始考虑，即 $j=i,k=i+1$。</li>
</ul>
<p>时间复杂度 $O(n)$。</p>
<p>程序实现：</p>
<p><a href="https://www.luogu.com.cn/problem/P6114">luogu模板题链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k;i&lt;=n;)</span><br><span class="line">	&#123;</span><br><span class="line">		j=i; k=i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;k&lt;=n&amp;&amp;s[j]&lt;=s[k];j=(s[j]==s[k++])?j+<span class="number">1</span>:i);</span><br><span class="line">		<span class="keyword">for</span>(;i&lt;=j;i+=k-j,ans^=(i<span class="number">-1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h3><p>一个字符串的最小表示为所有循环同构的串中，字典序最小的那个。</p>
<p>可以用Lyndon分解求出。将 $s+s$ 进行Lyndon分解。然后找到分解后Lyndon串首字母位置 $\le n$ 的最大的位置。从那个位置开始的就是最小表示。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>Lyndon分解</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2020多校1</title>
    <url>/2020/07/21/hdu2020%E5%A4%9A%E6%A0%A11/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=879">比赛链接</a></p>
<p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=2020+Multi-University+Training+Contest+1&source=1&searchmode=source">题目链接</a></p>
<span id="more"></span>

<p>没有队友，被爆踩了。最终因罚时排到了61名。</p>
<p>还是不能一次写对啊qwq。</p>
<h3 id="D-Distinct-Sub-palindromes"><a href="#D-Distinct-Sub-palindromes" class="headerlink" title="D. Distinct Sub-palindromes"></a>D. Distinct Sub-palindromes</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>问有多少个长度为 $n$ 的，由小写字母组成的字符串，使得本质不同的回文串个数最少。</p>
<p>输出个数对 $998244353$ 取模的结果。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p><del>取模就是废的。</del></p>
<p><del>与本质不同的回文串个数相对应的是回文树上的节点个数减2。</del></p>
<p><del>打表得出前几个，26,676,17576,15600,15600,15600…</del></p>
<p><del>因此，时间复杂度 $O(1)$。</del></p>
<p>实际上考虑到 $n\leq 3$ 时答案就是 $26^n$。</p>
<p>当 $n&gt;3$ 时，构造形如 $abcabca\cdots$ 这样的可以发现，本质不同的回文串只有 $3$ 个。</p>
<p>那么当出现字母的个数不为 $3$ 时也显然不可以的。</p>
<p>当出现字母为 $3$ 时不能出现形如 $aba$ 或者 $aa$ 这样的子串。</p>
<p>那么就只剩下构造出来的那种情况了。</p>
<p>此时答案就是 $26\times 25\times 24$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>我想到了一个绝妙的写法，这里地方太小，写不下。</p>
<h3 id="E-Fibonacci-Sum"><a href="#E-Fibonacci-Sum" class="headerlink" title="E. Fibonacci Sum"></a>E. Fibonacci Sum</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定 $n,c,k$，求 $\sum_{i=0}^n(F_{ic})^k$，其中 $F_i$ 为斐波那契数列第 $i$ 项。</p>
<p>对 $10^9+9$ 取模。</p>
<p>$T\leq 200,N,C\leq 10^{18},k\leq 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>设 $a=\frac{\sqrt{5}+1}{2},b=\frac{1-\sqrt{5}}{2}$。</p>
<p>那么有：</p>
<p>$\sum_{i=0}^n(F_{ic})^k$</p>
<p>$=\sum_{i=0}^n(\frac{a^{ic}-b^{ic}}{\sqrt{5}})^k$</p>
<p>$=(\frac{1}{\sqrt{5}})^k\sum_{i=0}^n(a^{ic}-b^{ic})^k$</p>
<p>$=(\frac{1}{\sqrt{5}})^k\sum_{i=0}^n\sum_{j=0}^k\binom{k}{j}(a^{ic})^j(-b^{ic})^{k-j}$</p>
<p>$=(\frac{1}{\sqrt{5}})^k\sum_{j=0}^k\binom{k}{j}(-1)^{k-j}\sum_{i=0}^n(a^{cj}b^{c(k-j)})^i$</p>
<p>然后等比数列求和。</p>
<p><strong>当时式子推错了一个地方调了好久好久，推式子时草稿一定要写好。</strong></p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>); <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll x=<span class="built_in">Pow</span>(<span class="number">383008016</span>,mod<span class="number">-2</span>);</span><br><span class="line"><span class="type">const</span> ll a=<span class="number">691504013</span>;</span><br><span class="line"><span class="type">const</span> ll b=<span class="number">308495997</span>;</span><br><span class="line">ll n,c,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">100000</span>);</span><br><span class="line">	ll _a,_b;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;c&gt;&gt;k;</span><br><span class="line">		c%=(mod<span class="number">-1</span>);</span><br><span class="line">		ll ans=<span class="number">0</span>,tmp,sum;</span><br><span class="line">		_a=<span class="built_in">Pow</span>(a,c); _b=<span class="built_in">Pow</span>(b,c);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,k)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp=<span class="built_in">Pow</span>(_a,i)*<span class="built_in">Pow</span>(_b,k-i)%mod;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="number">1</span>) sum=(n+<span class="number">1</span>)%mod;</span><br><span class="line">			<span class="keyword">else</span> sum=(<span class="built_in">Pow</span>(tmp,n+<span class="number">1</span>)<span class="number">-1</span>+mod)%mod*<span class="built_in">Pow</span>(tmp<span class="number">-1</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">			<span class="keyword">if</span>((k-i)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">				ans=<span class="built_in">Add</span>(ans,sum*<span class="built_in">C</span>(k,i)%mod);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				ans=<span class="built_in">Dec</span>(ans,sum*<span class="built_in">C</span>(k,i)%mod);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans*<span class="built_in">Pow</span>(x,k)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F-Finding-a-MEX"><a href="#F-Finding-a-MEX" class="headerlink" title="F. Finding a MEX"></a>F. Finding a MEX</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给一个无向图，每个点上有点权。支持两种操作，一是修改某个点的点权，二是查询到某个点距离为 $1$ 的所有点的点权的Mex。</p>
<p>$T\leq 10,n,m,q\leq 10^5,a_i\leq 10^9$。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>这种套路都出烂了吧…</p>
<p>首先 $a_i\leq 10^9$ 是吓人的，实际上只需要有 $a_i\leq 10^5$，因为大过 $10^5$ 的数求Mex时不会碰到。</p>
<p><strong>考试时就是因为忘记这里然后RE，导致调了十年。有时这些细节可以写在纸上或者程序旁。</strong></p>
<p>然后数据分治，对于度数小于等于 $K$ 的点，我们暴力枚举旁边的点。</p>
<p>对于度数大于 $K$ 的点，最多有 $\frac{2m}{K}$ 个，然后对这些点相连的点的权值搞成一个桶，用分块或数据结构维护之。</p>
<p>空间和时间都大概是根号的。</p>
<h4 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Siz=<span class="number">1000</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> deg[N],a[N],bel[N],cnt,siz[Siz+<span class="number">5</span>][Siz+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n,m,Sqr;</span><br><span class="line"><span class="type">int</span> flag[Siz+<span class="number">5</span>][N];</span><br><span class="line"><span class="type">bool</span> bo[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	deg[x]++; deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bl[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> y,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	flag[i][y]+=d;</span><br><span class="line">	siz[i][bl[y]]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i+=Siz,j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> num=<span class="built_in">min</span>(<span class="number">100000</span>-i+<span class="number">1</span>,Siz);</span><br><span class="line">		<span class="built_in">ff</span>(k,<span class="number">0</span>,num) bl[i+k]=j;</span><br><span class="line">	&#125;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); Sqr=<span class="built_in">sqrt</span>(<span class="number">2</span>*m)+<span class="number">10</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;=<span class="number">100000</span>) a[i]=<span class="number">100000</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sort</span>(<span class="built_in">all</span>(adj[i]));</span><br><span class="line">			adj[i].<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(adj[i]))-adj[i].<span class="built_in">begin</span>());</span><br><span class="line">			<span class="keyword">if</span>(deg[i]&gt;=Sqr)</span><br><span class="line">			&#123;</span><br><span class="line">				++cnt; bel[i]=cnt;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[i]) <span class="built_in">add</span>(cnt,a[v],<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			<span class="built_in">sort</span>(<span class="built_in">all</span>(adj[i]),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> bel[x]&gt;bel[y];&#125;);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> q=<span class="built_in">read</span>(),u,x;q--;)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">read</span>()==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				u=<span class="built_in">read</span>(),x=<span class="built_in">read</span>();</span><br><span class="line">				<span class="keyword">if</span>(x&gt;=<span class="number">100000</span>) x=<span class="number">100000</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">					<span class="keyword">if</span>(deg[v]&gt;=Sqr)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">add</span>(bel[v],a[u],<span class="number">-1</span>);</span><br><span class="line">						<span class="built_in">add</span>(bel[v],x,<span class="number">1</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">				a[u]=x;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				u=<span class="built_in">read</span>(); <span class="type">int</span> ans;</span><br><span class="line">				<span class="keyword">if</span>(deg[u]&lt;Sqr)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) bo[a[v]]=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">for</span>(ans=<span class="number">0</span>;bo[ans];ans++);</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) bo[a[v]]=<span class="number">0</span>;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">bool</span> boo=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;=<span class="number">100000</span>&amp;&amp;!boo;i+=Siz,j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> num=<span class="built_in">min</span>(Siz,<span class="number">100000</span>-i+<span class="number">1</span>);</span><br><span class="line">						<span class="keyword">if</span>(siz[bel[u]][j]==num) <span class="keyword">continue</span>;</span><br><span class="line">						<span class="built_in">ff</span>(k,<span class="number">0</span>,num) <span class="keyword">if</span>(!flag[bel[u]][i+k])</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i+k); boo=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(deg[i]&gt;=Sqr)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[i]) <span class="built_in">add</span>(bel[i],a[v],<span class="number">-1</span>);</span><br><span class="line">			bel[i]=deg[i]=<span class="number">0</span>;</span><br><span class="line">			adj[i].<span class="built_in">clear</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="I-Leading-Robots"><a href="#I-Leading-Robots" class="headerlink" title="I. Leading Robots"></a>I. Leading Robots</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>一个数轴上 $n$ 个动点在往右走。</p>
<p>每个点初始位置为 $p_i$，加速度为 $a_i$，一开始速度为 $0$。问这样的点 $i$ 的个数：存在某个大于等于 $0$ 的实数时间 $t$，使得所有不是 $i$ 的点都严格在点 $i$ 左侧。</p>
<p>$n\leq 50000$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>对于时间 $t$ 和两个点 $i,j$，点 $i$ 在点 $j$ 右侧的条件是：$p_i+\frac{a_it^2}{2}&gt;p_j+\frac{a_jt^2}{2}$。</p>
<p>移项得：$p_i-p_j&gt;(a_j-a_i)\frac{t^2}{2}$</p>
<p>因为 $t\geq 0$，所以 $\frac{t^2}{2}\geq 0$。</p>
<p>分类讨论一下，假设 $a_i&gt;a_j$。</p>
<p>那么 $-\frac{p_i-p_j}{a_i-a_j}&lt;\frac{t^2}{2}$。</p>
<p>按照 $a$ 的大小排序，将 $a$ 看成横坐标，$p$ 看成纵坐标。变成找到 $i$ 之前的点和点 $i$ 形成的直线的斜率的最小值。</p>
<p>这个比较容易，建一个上凸包即可。</p>
<p>$a_i&lt;a_j$ 的情况同理。</p>
<p>那么对于 $\frac{t^2}{2}$ 找到了一个范围 $[L,R]$，满足 $L\le R,0\le R$ 即可。</p>
<p>注意判断相等的那些情况。</p>
<p>因为要排序，时间复杂度 $O(n\log n)$。</p>
<h4 id="程序-3"><a href="#程序-3" class="headerlink" title="程序"></a>程序</h4><p>考场代码，写得超级烂。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> db inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll p,a; <span class="type">bool</span> ok;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.a!=B.a) <span class="keyword">return</span> A.a&lt;B.a;</span><br><span class="line">		<span class="keyword">return</span> A.p&lt;B.p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.p&lt;B.p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Cross</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (q[y].a-q[x].a)*(q[z].p-q[x].p)-(q[z].a-q[x].a)*(q[y].p-q[x].p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,top,st[N];</span><br><span class="line">db L[N],R[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) q[i].p=<span class="built_in">read</span>(),q[i].a=<span class="built_in">read</span>(),q[i].ok=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>,cmp);</span><br><span class="line">		ll mx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j)</span><br><span class="line">		&#123;</span><br><span class="line">			mx=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(j=i;j&lt;=n&amp;&amp;q[i].p==q[j].p;j++) mx=<span class="built_in">max</span>(mx,q[j].a);</span><br><span class="line">			<span class="built_in">fo</span>(k,i,j<span class="number">-1</span>) <span class="keyword">if</span>(q[k].a!=mx) q[k].ok=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q[i+<span class="number">1</span>].a==q[i].a&amp;&amp;q[i+<span class="number">1</span>].p&gt;=q[i].p) q[i].ok=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(q[i+<span class="number">1</span>].a==q[i].a&amp;&amp;q[i+<span class="number">1</span>].p==q[i].p) q[i+<span class="number">1</span>].ok=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		st[top=<span class="number">1</span>]=n; R[n]=inf;</span><br><span class="line">		<span class="built_in">fd</span>(i,n<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span>(q[i+<span class="number">1</span>].p!=q[i].p||q[i+<span class="number">1</span>].a!=q[i].a)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">Cross</span>(st[top<span class="number">-1</span>],i,st[top])&gt;<span class="number">0</span>) top--;</span><br><span class="line">			<span class="keyword">if</span>(q[i].ok) R[i]=-(db)(q[st[top]].p-q[i].p)/(q[st[top]].a-q[i].a);</span><br><span class="line">			st[++top]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		st[top=<span class="number">1</span>]=<span class="number">1</span>; L[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(q[i<span class="number">-1</span>].p!=q[i].p||q[i<span class="number">-1</span>].a!=q[i].a)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">Cross</span>(st[top<span class="number">-1</span>],st[top],i)&gt;<span class="number">0</span>) top--;</span><br><span class="line">			<span class="keyword">if</span>(q[i].ok)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(q[st[top]].a==q[i].a) L[i]=<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">else</span> L[i]=-(db)(q[st[top]].p-q[i].p)/(q[st[top]].a-q[i].a);</span><br><span class="line">			&#125;</span><br><span class="line">			st[++top]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(q[i].ok)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(L[i]&lt;R[i]&amp;&amp;R[i]&gt;<span class="number">1e-12</span>) q[i].ok=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> q[i].ok=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(q[i].ok) ans++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="K-Minimum-Index"><a href="#K-Minimum-Index" class="headerlink" title="K. Minimum Index"></a>K. Minimum Index</h3><a href="/2020/07/22/Minimum-Index-hdu6761/" title="链接">链接</a>

<h3 id="L-Mow"><a href="#L-Mow" class="headerlink" title="L. Mow"></a>L. Mow</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给一个 $n$ 个点的简单多边形，上面长满了草。</p>
<p>你需要在上面割草，有两种方式。</p>
<p>一种是使用手割，每割 $1$ 单位的草花费 $a$ 元；令一种是使用机器割，每割到 $1$ 单位的草花费 $b$ 元。</p>
<p>机器是一个半径为 $r$ 的圆，使用机器时，机器任意一个部位不能在多边形外面。</p>
<p>求割完所有草的最小花费。</p>
<p>$T\leq 100,n\leq 200$。</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>分类讨论：若 $a\le b$，则显然直接用手割完即可。求出多边形面积，然后 $\times a$ 即可。下面只考虑 $a&gt;b$ 的情况。</p>
<p>显然，我们需要机器割得越多越好。</p>
<p>那么机器能割多少呢？</p>
<p><img src="/hdu2020%E5%A4%9A%E6%A0%A11/Polygon.png" alt="Polygon"></p>
<p>对于这个多边形而言，我们将多边形内部的边向里面移 $r$ 个单位，形成了一个新的多边形。设这个多边形的面积为 $s$，周长为 $c$，显然机器最多能割 $s+cr+\pi r^2$ 的面积。</p>
<p>现在只需要求出这个新多边形就好了。</p>
<p>首先我们将点逆时针排好。然后将 $n$ 条直线往里面移动。然后求移动完的直线的半平面交，即可求出新多边形。</p>
<p>需要注意这个新多边形可能是不存在的。</p>
<p>时间复杂度 $O(n)$。</p>
<h4 id="程序-4"><a href="#程序-4" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">dis</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(A.x-B.x)&lt;eps) <span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">		<span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> *(<span class="type">const</span> P &amp;A,<span class="type">const</span> db &amp;k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x*k,A.y*k&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> -(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x-B.x,A.y-B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> +(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;B.x+A.x,B.y+A.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span> *(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.x*B.y-B.x*A.y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> db <span class="keyword">operator</span> ^(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">L</span>&#123;</span><br><span class="line">	P x,y; db ang;</span><br><span class="line">	<span class="built_in">L</span>()&#123;&#125;</span><br><span class="line">	<span class="built_in">L</span>(P a,P b)</span><br><span class="line">	&#123;</span><br><span class="line">		x=a; y=b-a; ang=y.<span class="built_in">angle</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> db <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> y.<span class="built_in">dis</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">parallel</span><span class="params">(L A,L B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">fabs</span>(A.ang-B.ang)&lt;eps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> P <span class="title">intersection</span><span class="params">(L A,L B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	P u=A.x-B.x;</span><br><span class="line">	<span class="keyword">return</span> A.x+A.y*((B.y*u)/(A.y*B.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Area</span><span class="params">(P *a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	db sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">3</span>,n) sum+=(a[i<span class="number">-1</span>]-a[<span class="number">1</span>])*(a[i]-a[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> sum/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">OnLeft</span><span class="params">(L A,P p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.y*(p-A.x)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">OnRight</span><span class="params">(L A,P p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (p-A.x)*A.y&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> L &amp;A,<span class="type">const</span> L &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(A.ang-B.ang)&lt;eps) <span class="built_in">OnLeft</span>(A,B.x);</span><br><span class="line">	<span class="keyword">return</span> A.ang&lt;B.ang;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2005</span>;</span><br><span class="line">P a[N],qp[N],p[N];</span><br><span class="line">L ql[N];</span><br><span class="line">db r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">solve</span><span class="params">(L *l,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(l+<span class="number">1</span>,l+n+<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>;</span><br><span class="line">	ql[++R]=l[<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(;L&lt;R&amp;&amp;<span class="built_in">OnRight</span>(l[i],qp[R<span class="number">-1</span>]);R--);</span><br><span class="line">		<span class="keyword">for</span>(;L&lt;R&amp;&amp;<span class="built_in">OnRight</span>(l[i],qp[L]);L++);</span><br><span class="line">		ql[++R]=l[i];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(ql[R].y*ql[R<span class="number">-1</span>].y)&lt;eps)</span><br><span class="line">		&#123;</span><br><span class="line">			R--;;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">OnLeft</span>(ql[R],l[i].x)) ql[R]=l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;R) qp[R<span class="number">-1</span>]=<span class="built_in">intersection</span>(ql[R],ql[R<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(;L&lt;R&amp;&amp;<span class="built_in">OnRight</span>(ql[L],qp[R<span class="number">-1</span>]);R--);</span><br><span class="line">	qp[R]=<span class="built_in">intersection</span>(ql[R],ql[L]);</span><br><span class="line">	db c=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,L,R) a[++m]=qp[i];</span><br><span class="line">	<span class="keyword">if</span>(m&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	s=<span class="built_in">Area</span>(a,m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) c+=(a[i%m+<span class="number">1</span>]-a[i]).<span class="built_in">dis</span>();</span><br><span class="line">	<span class="keyword">return</span> c*r+pi*r*r+s;</span><br><span class="line">&#125;</span><br><span class="line">L l[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	db a,b;</span><br><span class="line">	db PolygonArea,MachineArea;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">		a=<span class="built_in">read</span>(); b=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i].x=<span class="built_in">read</span>(),p[i].y=<span class="built_in">read</span>();</span><br><span class="line">		PolygonArea=<span class="built_in">Area</span>(p,n);</span><br><span class="line">		<span class="keyword">if</span>(PolygonArea&lt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			PolygonArea=-PolygonArea;</span><br><span class="line">			<span class="built_in">reverse</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//DEBUG(PolygonArea);</span></span><br><span class="line">		<span class="keyword">if</span>(a&lt;b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.12lf\n&quot;</span>,PolygonArea*a);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			P d=p[i%n+<span class="number">1</span>]-p[i];</span><br><span class="line">			<span class="built_in">swap</span>(d.x,d.y);</span><br><span class="line">			d.x=-d.x;</span><br><span class="line">			d=d*(r/d.<span class="built_in">dis</span>());</span><br><span class="line">			l[i]=<span class="built_in">L</span>(p[i]+d,p[i%n+<span class="number">1</span>]+d);</span><br><span class="line">		&#125;</span><br><span class="line">		MachineArea=<span class="built_in">solve</span>(l,n);</span><br><span class="line">		<span class="comment">//DEBUG(MachineArea);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.12lf\n&quot;</span>,<span class="built_in">min</span>(PolygonArea*a,(PolygonArea-MachineArea)*a+MachineArea*b));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>计算几何</tag>
        <tag>PAM</tag>
        <tag>分块</tag>
        <tag>半平面交</tag>
      </tags>
  </entry>
  <entry>
    <title>仙人掌[loj6496]</title>
    <url>/2020/07/20/%E4%BB%99%E4%BA%BA%E6%8E%8C-loj6496/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://loj.ac/problem/6496">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一张 $n$ 个点 $m$ 条边的无向连通图，其中每条边至多属于一个简单环，保证没有自环，可能有重边。你需要为其中每条边定向，其中第 $i$ 个点的出度不能超过 $a_i$，求方案数。</p>
<p>$n\leq 10^5,m\leq 2\times 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先来看看30分的树的部分分。</p>
<p>考虑DP，设 $f_{i,0/1}$ 表示以 $i$ 为根的子树，$i$ 与父亲的边指向/不指向 $i$ 时的方案数。</p>
<p>这个东西的转移是个卷积形式，用分治ntt进行优化即可。</p>
<p>时间复杂度 $O(n\log^2n)$。</p>
<p>考虑建出仙人掌的圆方树，然后在圆方树上DP。</p>
<p>当点是圆点时的转移与树的转移部分类似。</p>
<p>考虑方点时如何处理，也就是一个环上的情况：</p>
<p><img src="/%E4%BB%99%E4%BA%BA%E6%8E%8C-loj6496/%E6%96%B9%E7%82%B9.png" alt="方点"></p>
<p>对于 $v$ 点而言，他有可能在这个环里有两个出度。因此，$f$ 数组改成 $f_{i,0/1/2}$ 表示以 $i$ 根的子树中，其他边连出去的出度为 $0/1/2$ 时的方案数。</p>
<p>在 $u$ 这个方点时考虑这个环，枚举 $u$ 和 $x$ 的这个边的顺序，然后下面从 $x$ 到 $y$ 的边的情况可以DP。</p>
<p>具体的，设 $g_{i,0/1}$ 为考虑到第 $i$ 个点，$i$ 和 $i-1$ 这条边的顺序为 $0/1$ 时的方案数，这个东西很好转移。</p>
<p>然后就做完了。时间复杂度 $O(n\log ^2n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">ll W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N],gra[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st[N],top,dfn[N],low[N],tim,cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dfn[u]=low[u]=++tim; st[++top]=u;</span><br><span class="line">	<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:gra[u])</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">tarjan</span>(v,u);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">			<span class="keyword">if</span>(low[v]==dfn[u])</span><br><span class="line">			&#123;</span><br><span class="line">				++cnt;</span><br><span class="line">				adj[u].<span class="built_in">pb</span>(cnt);</span><br><span class="line">				<span class="keyword">do</span></span><br><span class="line">				&#123;</span><br><span class="line">					adj[cnt].<span class="built_in">pb</span>(st[top]);</span><br><span class="line">				&#125;<span class="keyword">while</span> (st[top--]!=v);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(low[v]&gt;dfn[u]) adj[u].<span class="built_in">pb</span>(v),top--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==pre&amp;&amp;!flag) &#123;flag=<span class="number">1</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;Poly&gt; vec;</span><br><span class="line"><span class="function">Poly <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> vec[l];</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">solve</span>(l,mid)*<span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">Poly G;</span><br><span class="line">ll f[N][<span class="number">3</span>],g[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!adj[u].<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		f[u][<span class="number">0</span>]=(a[u]&gt;=<span class="number">0</span>);</span><br><span class="line">		f[u][<span class="number">1</span>]=(a[u]&gt;=<span class="number">1</span>);</span><br><span class="line">		f[u][<span class="number">2</span>]=(a[u]&gt;=<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(u&lt;=n)</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			G.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">if</span>(v&gt;n) G.<span class="built_in">pb</span>(f[v][<span class="number">2</span>]);</span><br><span class="line">			G.<span class="built_in">pb</span>(f[v][<span class="number">1</span>]); G.<span class="built_in">pb</span>(f[v][<span class="number">0</span>]);</span><br><span class="line">			vec.<span class="built_in">pb</span>(G);</span><br><span class="line">		&#125;</span><br><span class="line">		G=<span class="built_in">solve</span>(<span class="number">0</span>,vec.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">1</span>,<span class="built_in">min</span>((<span class="type">int</span>)G.<span class="built_in">size</span>(),a[u]+<span class="number">1</span>)) G[i]=(G[i]+G[i<span class="number">-1</span>])%mod;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">2</span>) <span class="keyword">if</span>(a[u]&gt;=i) f[u][i]=G[<span class="built_in">min</span>((<span class="type">int</span>)G.<span class="built_in">size</span>()<span class="number">-1</span>,a[u]-i)];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">			g[<span class="number">0</span>][k]=<span class="number">1</span>; g[<span class="number">0</span>][<span class="number">1</span>-k]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">				g[i+<span class="number">1</span>][<span class="number">0</span>]=(g[i][<span class="number">0</span>]*f[v][<span class="number">1</span>]+g[i][<span class="number">1</span>]*f[v][<span class="number">2</span>])%mod,</span><br><span class="line">				g[i+<span class="number">1</span>][<span class="number">1</span>]=(g[i][<span class="number">0</span>]*f[v][<span class="number">0</span>]+g[i][<span class="number">1</span>]*f[v][<span class="number">1</span>])%mod,</span><br><span class="line">				i++;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">				f[u][k+j]=<span class="built_in">Add</span>(f[u][k+j],g[i][<span class="number">1</span>-j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	cnt=n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		gra[x].<span class="built_in">pb</span>(y); gra[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">tarjan</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
        <tag>圆方树</tag>
        <tag>仙人掌</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年百度之星·程序设计大赛 - 初赛一</title>
    <url>/2020/07/19/2020%E5%B9%B4%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F%C2%B7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B-%E5%88%9D%E8%B5%9B%E4%B8%80/</url>
    <content><![CDATA[<p><a href="http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=889">比赛链接</a></p>
<span id="more"></span>

<h3 id="A-Drink"><a href="#A-Drink" class="headerlink" title="A. Drink"></a>A. Drink</h3><p>枚举。</p>
<h3 id="B-GPA"><a href="#B-GPA" class="headerlink" title="B. GPA"></a>B. GPA</h3><p>枚举。</p>
<h3 id="C-Dec"><a href="#C-Dec" class="headerlink" title="C. Dec"></a>C. Dec</h3><p>多重背包DP。</p>
<h3 id="D-Civilization"><a href="#D-Civilization" class="headerlink" title="D. Civilization"></a>D. Civilization</h3><p><del>难度在于读懂题目。</del></p>
<p>读懂之后就是对于每个点求，排序贪心求出答案即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Abs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N][N],dis[N][N],x,y,n,ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> nx,ny;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">-3</span>,+<span class="number">3</span>) <span class="built_in">fo</span>(j,<span class="number">-3</span>,+<span class="number">3</span>)</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">Abs</span>(i)+<span class="built_in">Abs</span>(j)&lt;=<span class="number">3</span>&amp;&amp;!((i==<span class="number">0</span>)&amp;&amp;(j==<span class="number">0</span>)))</span><br><span class="line">	&#123;</span><br><span class="line">		nx=i+x; ny=j+y;</span><br><span class="line">		<span class="keyword">if</span>(nx&gt;<span class="number">0</span>&amp;&amp;nx&lt;=n&amp;&amp;ny&gt;<span class="number">0</span>&amp;&amp;ny&lt;=n) adj.<span class="built_in">pb</span>(a[nx][ny]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(adj));</span><br><span class="line">	adj.<span class="built_in">pb</span>(a[x][y]);</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(adj));</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>,now=<span class="number">0</span>,cnt=<span class="number">0</span>,t;</span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">0</span>;cnt!=<span class="number">9</span>;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum+=now;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;=<span class="number">8</span>*cnt*cnt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(adj.<span class="built_in">size</span>()&gt;cnt) now+=adj[cnt];</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); ans=<span class="number">1000000000</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) a[i][j]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) dis[i][j]=<span class="built_in">calc</span>(i,j);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k=<span class="built_in">Abs</span>(i-x)+<span class="built_in">Abs</span>(j-y);</span><br><span class="line">			k=(k+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">			ans=<span class="built_in">min</span>(ans,k+dis[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E-Rotate"><a href="#E-Rotate" class="headerlink" title="E. Rotate"></a>E. Rotate</h3><p>由于 $a_i$ 的单调性，这些黑块连成的是一个森林。</p>
<p>由期望的线性性，我们只需统计每一层的贡献。也就是看单独出来了多少个 $a_i$。</p>
<p>假设考虑到第 $i$ 层，要算和 $i+1$ 层的贡献。显然这个贡献为这一层黑色块的个数减去与上一层黑色块有交的期望个数。</p>
<p>与上一层黑色块有交的情况可以分为完全包含和在黑白边界上。</p>
<p>这一层黑色块有 $\frac{a_i}{2}$ 个。</p>
<p>由于是随机旋转，这一层的黑色块与上一层<strong>黑</strong>色块完全包含的期望个数=这一层的黑色块与上一层<strong>白</strong>色块完全包含的期望个数。</p>
<p>这一层的黑色块与上一层在黑白边界上的期望个数为 $\frac{a_{i+1}}{2}$，因为一共有 $a_{i+1}$ 个边界，每个边界上的颜色概率都是 $\frac{1}{2}$。</p>
<p>而这一层的黑色块与上一层<strong>黑</strong>色块完全包含的期望个数+这一层的黑色块与上一层在黑白边界上的期望个数/2= $\frac{a_{i}}{4}$</p>
<p>解得这个贡献就是：$\frac{a_i-a_{i+1}}{4}$。</p>
<p>第 $n$ 层特殊考虑，贡献是 $\frac{a_n}{2}$。</p>
<p>因此答案就是：$\frac{1}{4}\sum_{i=1}^n(a_i-a_{i+1})+\frac{a_n}{2}=\frac{a_1+a_n}{4}$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">1ll</span>*(a[<span class="number">1</span>]+a[n])/<span class="number">2</span>*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod);</span><br></pre></td></tr></table></figure>



<h3 id="G-Mosquito"><a href="#G-Mosquito" class="headerlink" title="G. Mosquito"></a>G. Mosquito</h3><p>可以先二分答案，然后建二分图，将矩阵上每个点看成右边的点，左边的是 $k$ 个点。然后用网络流判定。</p>
<p>但这样时间复杂度是 $O(T(nm)^{1.5}\log (n+m))$ 的，过不了。</p>
<p>因为 $k$ 很小，考虑用Hall定理加速判定。</p>
<p>我们需要对右边的点看是否存在完美匹配。</p>
<p>也就是枚举右边的点的一个子集，然后看左边 $k$ 个点中与之相连的所有的 $a_i$ 和是否大于等于子集的大小即可。</p>
<p>那么枚举左边与之相连的点的集合，然后看右边的集合最大能是多少就好了，一共有 $2^6$ 中情况，集合大小可以用Bitset加速判定，时间复杂度上就是 $2^6\times \frac{nm}{64}=nm$ 的。</p>
<p>时间复杂度 $O(Tknm)$，精细点该做法可以实现 $O(Tnm)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> n,m,k,x[<span class="number">6</span>],y[<span class="number">6</span>],z[<span class="number">1</span>&lt;&lt;<span class="number">6</span>],cnt;</span><br><span class="line">bitset&lt;1000*1001&gt; b[<span class="number">1</span>&lt;&lt;<span class="number">6</span>],ba;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Abs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(t,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;k) b[t].<span class="built_in">reset</span>();</span><br><span class="line">	<span class="built_in">ff</span>(t,<span class="number">0</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">Abs</span>(i-x[t])+<span class="built_in">Abs</span>(j-y[t])&lt;=dis)</span><br><span class="line">				b[<span class="number">1</span>&lt;&lt;t][(i<span class="number">-1</span>)*m+j<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ff</span>(t,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;k)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">lowbit</span>(t)!=t)</span><br><span class="line">			b[t]=b[t^<span class="built_in">lowbit</span>(t)]|b[<span class="built_in">lowbit</span>(t)];</span><br><span class="line">	<span class="built_in">ff</span>(t,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;k)</span><br><span class="line">		<span class="keyword">if</span>((b[t^cnt]^ba).<span class="built_in">count</span>()&gt;z[t])</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); s=<span class="number">0</span>;</span><br><span class="line">		ba.<span class="built_in">reset</span>();</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n*m) ba.<span class="built_in">set</span>(i);</span><br><span class="line">		cnt=(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,k) x[i]=<span class="built_in">read</span>(),y[i]=<span class="built_in">read</span>(),z[<span class="number">1</span>&lt;&lt;i]=<span class="built_in">read</span>(),s+=z[<span class="number">1</span>&lt;&lt;i];</span><br><span class="line">		<span class="keyword">if</span>(s&lt;n*m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;k) <span class="keyword">if</span>(<span class="built_in">lowbit</span>(i)!=i) z[i]=z[i^<span class="built_in">lowbit</span>(i)]+z[<span class="built_in">lowbit</span>(i)];</span><br><span class="line">		<span class="type">int</span> l=<span class="number">0</span>,r=n+m,mid;</span><br><span class="line">		<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,l);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>二分</tag>
        <tag>期望</tag>
        <tag>Hall定理</tag>
        <tag>数论</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #526[CF1083]</title>
    <url>/2020/07/18/Codeforces-Round-526-CF1083/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1083/problems">题目链接</a></p>
<span id="more"></span>

<h3 id="A-The-Fair-Nut-and-the-Best-Path"><a href="#A-The-Fair-Nut-and-the-Best-Path" class="headerlink" title="A. The Fair Nut and the Best Path"></a>A. The Fair Nut and the Best Path</h3><p>树形DP模板。</p>
<h3 id="B-The-Fair-Nut-and-Strings"><a href="#B-The-Fair-Nut-and-Strings" class="headerlink" title="B. The Fair Nut and Strings"></a>B. The Fair Nut and Strings</h3><p>先来看看给定 $k$ 个长度为 $n$ 的字符串，然后问你有多少个非空字符串是他们中至少一个的前缀。</p>
<p>把这 $k$ 个串建出一个Trie，那么Trie的节点个数-1就是满足条件的字符串个数。</p>
<p>那么把 $a,b$ 两个串建成Trie，然后在Trie树上数数每一层夹在他们中间的节点个数就好了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">char</span> s1[<span class="number">500010</span>],s2[<span class="number">500010</span>];</span><br><span class="line">ll ans,now;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s1,s2);</span><br><span class="line">	now=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		now&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(s1[i]==<span class="string">&#x27;b&#x27;</span>) now--;</span><br><span class="line">		<span class="keyword">if</span>(s2[i]==<span class="string">&#x27;a&#x27;</span>) now--;</span><br><span class="line">		<span class="keyword">if</span>(now&gt;=k) &#123;ans+=<span class="number">1ll</span>*k*(n-i); <span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">else</span> ans+=now;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Max-Mex"><a href="#C-Max-Mex" class="headerlink" title="C. Max Mex"></a>C. Max Mex</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出一棵树，树上点的点权为一个 $[0,n-1]$ 的排列。</p>
<p>支持交换两点点权，以及求树上路径权值Mex的最大值。</p>
<p>$n\leq 2\times 10^5$。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>首先这个东西可以去二分找到最大值。</p>
<p>然后变成判断是否存在一条最短的路径使得某个区间上所有的数都在这条路径上。</p>
<p>考虑合并两个区间的答案。对于某两个区间 $[a,b],[b+1,c]$，假设对这两个区间都存在一条最短的路径，设为 $(A_x,A_y),(B_x,B_y)$，那么区间 $[a,c]$ 有解当且仅当这两条路径的并是一条路径。</p>
<p>那么枚举 $A_x,A_y,B_x,B_y$ 中的两个，看是否能作为合并后路径的端点即可。</p>
<p>判断很简单，需要用到lca。</p>
<p>然后在线段树上二分找到这个最大值即可。</p>
<p>时间复杂度 $O((n+6q)\log n)$.</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">namespace</span> T&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> m,fir[N],dep[N],f[N&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],l2[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">		f[++m][<span class="number">0</span>]=u; fir[u]=m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			f[++m][<span class="number">0</span>]=u;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getmin</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dep[x]&gt;dep[y]?y:x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x=fir[x]; y=fir[y];</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="type">int</span> k=l2[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">getmin</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dep[x]+dep[y]-(dep[<span class="built_in">lca</span>(x,y)]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,m) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,l2[m])</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=m) f[i][j]=<span class="built_in">getmin</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> T::dis;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dis</span>(x,y)==<span class="built_in">dis</span>(x,z)+<span class="built_in">dis</span>(z,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">merge</span><span class="params">(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.x==<span class="number">-1</span>||B.x==<span class="number">-1</span>) <span class="keyword">return</span> (node)&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(A.x,A.y,B.x)&amp;&amp;<span class="built_in">check</span>(A.x,A.y,B.y)) <span class="keyword">return</span> A;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(B.x,B.y,A.x)&amp;&amp;<span class="built_in">check</span>(B.x,B.y,A.y)) <span class="keyword">return</span> B;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(A.x,B.x,A.y)&amp;&amp;<span class="built_in">check</span>(A.x,B.x,B.y)) <span class="keyword">return</span> (node)&#123;A.x,B.x&#125;;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(A.y,B.y,A.x)&amp;&amp;<span class="built_in">check</span>(A.y,B.y,B.x)) <span class="keyword">return</span> (node)&#123;A.y,B.y&#125;;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(A.x,B.y,A.y)&amp;&amp;<span class="built_in">check</span>(A.x,B.y,B.x)) <span class="keyword">return</span> (node)&#123;A.x,B.y&#125;;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(A.y,B.x,A.x)&amp;&amp;<span class="built_in">check</span>(A.y,B.x,B.y)) <span class="keyword">return</span> (node)&#123;A.y,B.x&#125;;</span><br><span class="line">	<span class="keyword">return</span> (node)&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p[N],_p[N];</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	node t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(t[u]=(node)&#123;_p[l],_p[l]&#125;);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">		t[u]=<span class="built_in">merge</span>(t[lc],t[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(t[u]=(node)&#123;_p[l],_p[l]&#125;);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		(p&lt;=mid)?<span class="built_in">update</span>(ls,p):<span class="built_in">update</span>(rs,p);</span><br><span class="line">		t[u]=<span class="built_in">merge</span>(t[lc],t[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,node &amp;A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(t[u].x&gt;=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(A.x&gt;=<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				node B=<span class="built_in">merge</span>(A,t[u]);</span><br><span class="line">				<span class="keyword">if</span>(B.x&gt;=<span class="number">0</span>) &#123;A=B; <span class="keyword">return</span> r+<span class="number">1</span>;&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;A=t[u]; <span class="keyword">return</span> r+<span class="number">1</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> ans=<span class="built_in">ask</span>(ls,A);</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;mid) <span class="keyword">return</span> <span class="built_in">ask</span>(rs,A);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) _p[p[i]]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) T::<span class="built_in">add</span>(<span class="built_in">read</span>(),i);</span><br><span class="line">	T::<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	node u;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">read</span>()==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">swap</span>(_p[p[x]],_p[p[y]]);</span><br><span class="line">			<span class="built_in">swap</span>(p[x],p[y]);</span><br><span class="line">			<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[x]);</span><br><span class="line">			<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[y]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			u=(node)&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,u)<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-The-Fair-Nut’s-getting-crazy"><a href="#D-The-Fair-Nut’s-getting-crazy" class="headerlink" title="D. The Fair Nut’s getting crazy"></a>D. The Fair Nut’s getting crazy</h3><p>这题还是比较套路的。枚举区间的交 $[i,j]$，看有多少贡献。</p>
<p>设 $pre_i$ 表示值和 $a_i$ 相同的最大的比 $i$ 小的下标，$nex_i$ 表示值和 $a_i$ 相同的最小的比 $i$ 大的下标。</p>
<p>再设 $f_{i,j}=\max_{k\in[i,j]} pre_k+1,g_{i,j}=\min_{k\in[i,j]} nex_k-1$。</p>
<p>枚举一个 $i$，那么合法的 $j$ 是一段连续的区间，设此时这个 $j$ 为 $mx_j$。</p>
<p>那么一个 $i$ 的贡献就是：$\sum_{j=i}^{mx_j}(i-f_{i,j})\times (g_{i,j}-j)$。</p>
<p>化简一下得到：$i\sum_{j=i}^{mx_j}g_{i,j}-i\sum_{j=i}^{mx_j}j-\sum_{j=i}^{mx_j}f_{i,j}g_{i,j}+\sum_{k=i}^{mx_j}jf_{i,j}$。</p>
<p>考虑倒序枚举 $i$，那么每次会修改一些 $g_{i,j}$ 和 $f_{i,j}$，也就是对 $[i,n]$ 取一个 $\min$ 或者 $\max$。</p>
<p>这个用一个单调栈，转换成区间赋值。</p>
<p>那么相当于维护两个序列，支持对这两个序列区间赋值，求 $\sum_{i}g_i,\sum_{i}f_ig_i,\sum_{i}if_i$。</p>
<p>用线段维护若干个区间和即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1ll</span>*x*(x+<span class="number">1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">calc</span>(y)-<span class="built_in">calc</span>(x<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (lc|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">ll s[N&lt;&lt;<span class="number">2</span>][<span class="number">4</span>],tag[N&lt;&lt;<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> opt,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s[u][<span class="number">2</span>]=s[u][opt^<span class="number">1</span>]*x%mod;</span><br><span class="line">	s[u][opt]=<span class="number">1ll</span>*(r-l+<span class="number">1</span>)*x%mod;</span><br><span class="line">	tag[u][opt]=x;</span><br><span class="line">	<span class="keyword">if</span>(opt==<span class="number">0</span>) s[u][<span class="number">3</span>]=<span class="number">1ll</span>*<span class="built_in">calc</span>(l,r)*x%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span>(tag[u][i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pushtag</span>(ls,i,tag[u][i]);</span><br><span class="line">			<span class="built_in">pushtag</span>(rs,i,tag[u][i]);</span><br><span class="line">			tag[u][i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">3</span>) s[u][i]=(s[lc][i]+s[rc][i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> opt,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,l,r,opt,x);</span><br><span class="line">	<span class="built_in">pushdown</span>(u,l,r);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">update</span>(ls,L,R,opt,x);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">update</span>(rs,L,R,opt,x);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">ll sum[<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">3</span>) sum[i]+=s[u][i];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(u,l,r);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">ask</span>(ls,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">ask</span>(rs,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],m;</span><br><span class="line"><span class="type">int</span> las[N],pre[N],nex[N],st[N],top;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">int</span> f1[N],f2[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">	m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,a[i])-b;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pre[i]=las[a[i]]+<span class="number">1</span>,las[a[i]]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) las[i]=n+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) nex[i]=las[a[i]]<span class="number">-1</span>,las[a[i]]=i;</span><br><span class="line">	st[top=<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(;top&amp;&amp;pre[i]&gt;pre[st[top]];top--);</span><br><span class="line">		f1[i]=st[top]<span class="number">-1</span>; st[++top]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	st[top=<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(;top&amp;&amp;nex[i]&lt;nex[st[top]];top--);</span><br><span class="line">		f2[i]=st[top]<span class="number">-1</span>; st[++top]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) las[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j=n;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,f1[i],<span class="number">0</span>,pre[i]);</span><br><span class="line">		<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,f2[i],<span class="number">1</span>,nex[i]);</span><br><span class="line">		las[a[i]]++;</span><br><span class="line">		<span class="keyword">for</span>(;las[a[i]]&gt;=<span class="number">2</span>;las[a[j]]--,j--);</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">1</span>,<span class="number">3</span>) sum[k]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,j);</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">1</span>,<span class="number">3</span>) sum[k]%=mod;</span><br><span class="line">		(ans+=<span class="number">1ll</span>*i*(sum[<span class="number">1</span>]-<span class="built_in">calc</span>(i,j))-sum[<span class="number">2</span>]+sum[<span class="number">3</span>])%=mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(ans+mod)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="E-The-Fair-Nut-and-Rectangles"><a href="#E-The-Fair-Nut-and-Rectangles" class="headerlink" title="E. The Fair Nut and Rectangles"></a>E. The Fair Nut and Rectangles</h3><p><del>Div 1.E就这难度？？？</del></p>
<p>把点按照 $x$ 排序，然后DP，然后斜率优化即可。</p>
<p>时间复杂度 $O(n\log n)$，瓶颈在排序上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll x,y,a;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line">ll f[N],ans;</span><br><span class="line"><span class="type">int</span> n,st[N],l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">K</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (db)(f[y]-f[x])/(p[y].x-p[x].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i].x=<span class="built_in">read</span>(),p[i].y=<span class="built_in">read</span>(),p[i].a=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	l=<span class="number">1</span>; r=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=p[i].x*p[i].y-p[i].a;</span><br><span class="line">		<span class="keyword">for</span>(;l&lt;r&amp;&amp;<span class="built_in">K</span>(st[l],st[l+<span class="number">1</span>])&gt;=p[i].y;l++);</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=r) f[i]=<span class="built_in">max</span>(f[i],p[i].x*p[i].y-p[i].a+f[st[l]]-p[st[l]].x*p[i].y);</span><br><span class="line">		<span class="keyword">for</span>(;l&lt;r&amp;&amp;<span class="built_in">K</span>(st[r<span class="number">-1</span>],i)&gt;<span class="built_in">K</span>(st[r<span class="number">-1</span>],st[r]);r--);</span><br><span class="line">		st[++r]=i;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Trie</tag>
        <tag>线段树</tag>
        <tag>LCA</tag>
        <tag>单调栈</tag>
        <tag>斜率优化DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 1[CF1110]</title>
    <url>/2020/07/14/Codeforces-Global-Round-1-CF1110/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1110/problems">题目链接</a></p>
<span id="more"></span>

<p>A,B都没什么好说的。</p>
<h3 id="C-Meaningless-Operations"><a href="#C-Meaningless-Operations" class="headerlink" title="C. Meaningless Operations"></a>C. Meaningless Operations</h3><p>题意：多次询问，求 $f(a)=\max_{0 &lt; b &lt; a}\gcd(a\oplus b,a &amp; b)$。</p>
<p>先用二进制表示 $a$，显然有 $\gcd(a\oplus b,a&amp; b)\leq a\oplus b$，设 $a$ 的最高二进制位为 $x$，则 $a\oplus b\leq 2^{x+1}-1$。</p>
<p>可以发现，当 $a\not = 2^{x+1}-1$ 时，$a\oplus b$ 能取到最大值。此时有：$a+b=2^{x+1}-1$，则 $a&amp; b=0$，因此 $\gcd$ 也能取到最大值。</p>
<p>那么当 $a=2^{x+1}-1$ 时，$a\oplus b=a-b,a&amp; b=b$，则 $\gcd(a\oplus b,a&amp; b)=\gcd(a-b,b)=\gcd(a,b)$，找到 $a$ 的最大不是本身的因子即可。</p>
<h3 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h3><p>如果出现了三个 $(x-1,x,x+1)$，则可以用 $(x-1,x-1,x-1),(x,x,x),(x+1,x+1,x+1)$ 代替。</p>
<p>也就是一种合法的方案一定能转换成每种 $(x-1,x,x+1)$ 不超过 $2$ 个的形式。</p>
<p>设 $f_{i,j,k}$ 表示考虑到第 $i$ 位，$(i-1,i,i+1)$ 有 $j$ 个，$(i,i+1,i+2)$ 有 $k$ 个的最大值，然后DP即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">			<span class="built_in">fo</span>(l,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">				<span class="keyword">if</span>(f[i<span class="number">-1</span>][k][l]!=<span class="number">-1</span>&amp;&amp;j+k+l&lt;=a[i])</span><br><span class="line">					f[i][j][k]=<span class="built_in">max</span>(f[i][j][k],f[i<span class="number">-1</span>][k][l]+l+(a[i]-j-k-l)/<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[m][<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>



<h3 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h3><p>题意：给一个序列 $c$，每次选一个 $i\in[2,n-1]$，将 $c_i$ 变成 $c_{i-1}+c_{i+1}-c_i$，问是否能将 $c$ 变成序列 $t$。</p>
<p>这种题通常都是差分或者前缀和就搞出来了。</p>
<p>首先必须要有 $c_1=t_1,c_n=t_n$。</p>
<p>我们进行差分，设 $a_i=c_{i}-c_{i-1}$，发现上述的操作实际上是在交换两个相邻的 $a_i$。题意转换成你可以交换任意相邻的数字，使得最后序列等于某个序列，排个序就没了。</p>
<h3 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h3><p>题意：</p>
<p>给定一棵带边权树，满足按照节点编号从小到大的顺序dfs得到的dfs序 $dfn_i=i$。</p>
<p>多次询问，可离线，求 $[l,r]$ 中所有的叶子结点点 $v$ 最近的距离。</p>
<p>$n,q\leq 5\times 10^5$</p>
<p>那就离线吧，把询问挂到树上，然后在dfs时处理询问。</p>
<p>假设你从 $u$ 开始经过了一条边 $(u,v,w)$，$w$ 表示权值，那么有些叶子结点的距离就 $+w$，有些就 $-w$，并且 dfs 序都是 $O(1)$ 段区间。由题目的性质知道对于的节点编号也是 $O(1)$ 段区间。</p>
<p>那么用线段树，把非叶子结点的距离设为 $+\infty$ ，然后随便打打标记就好了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1ll</span>&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	ll mx[N&lt;&lt;<span class="number">2</span>],tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,ll x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		mx[u]+=x; tag[u]+=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushtag</span>(lc,tag[u]);</span><br><span class="line">		<span class="built_in">pushtag</span>(rc,tag[u]);</span><br><span class="line">		tag[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		mx[u]=<span class="built_in">min</span>(mx[lc],mx[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,ll v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,v);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">add</span>(ls,L,R,v);</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">add</span>(rs,L,R,v);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> mx[u];</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		ll ans=inf;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) ans=<span class="built_in">min</span>(ans,<span class="built_in">ask</span>(ls,L,R));</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  ans=<span class="built_in">min</span>(ans,<span class="built_in">ask</span>(rs,L,R));</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(mx[u]=v);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		(p&lt;=mid)?<span class="built_in">ins</span>(ls,p,v):<span class="built_in">ins</span>(rs,p,v);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,id;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;query&gt; q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; leaf;</span><br><span class="line"><span class="type">int</span> n,m,fa[N];</span><br><span class="line">ll ans[N],now;</span><br><span class="line"><span class="type">int</span> ver[N],val[N],ne[N],head[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> le[N],ri[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:q[u])</span><br><span class="line">		ans[x.id]=SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,x.l,x.r)+now;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		now+=val[i];</span><br><span class="line">		SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,le[v],ri[v],-val[i]*<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">dfs</span>(v);</span><br><span class="line">		now-=val[i];</span><br><span class="line">		SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,le[v],ri[v],val[i]*<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> u,ll now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	le[u]=n+<span class="number">1</span>,ri[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		<span class="built_in">pre</span>(v,now+val[i]);</span><br><span class="line">		le[u]=<span class="built_in">min</span>(le[u],le[v]);</span><br><span class="line">		ri[u]=<span class="built_in">max</span>(ri[u],ri[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!head[u]) le[u]=ri[u]=u,SGT::<span class="built_in">ins</span>(<span class="number">1</span>,<span class="number">1</span>,n,u,now);</span><br><span class="line">	<span class="keyword">else</span> SGT::<span class="built_in">ins</span>(<span class="number">1</span>,<span class="number">1</span>,n,u,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		fa[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(fa[i],i,<span class="built_in">read</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!head[i]) leaf.<span class="built_in">pb</span>(i);</span><br><span class="line">	<span class="built_in">pre</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> v,l,r;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		v=<span class="built_in">read</span>(); l=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">		l=<span class="built_in">lower_bound</span>(<span class="built_in">all</span>(leaf),l)-leaf.<span class="built_in">begin</span>();</span><br><span class="line">		r=<span class="built_in">upper_bound</span>(<span class="built_in">all</span>(leaf),r)-leaf.<span class="built_in">begin</span>()<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r) <span class="keyword">continue</span>;</span><br><span class="line">		q[v].<span class="built_in">pb</span>((query)&#123;leaf[l],leaf[r],i&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="G-Tree-Tac-Toe"><a href="#G-Tree-Tac-Toe" class="headerlink" title="G. Tree-Tac-Toe"></a>G. Tree-Tac-Toe</h3><p>我们假设先不考虑刚开始就是白色的点。</p>
<p>首先显然的是，黑色不可能赢，因为如果黑色有必胜策略的话，白色能先走它的这个必胜策略。</p>
<p>那么看什么时候白色能赢。</p>
<p>设点 $i$ 的度数为 $deg_i$。</p>
<p>第一种情况：显然有，若存在 $i$ ，使得 $deg_i\geq 4$ ，则白色必赢。</p>
<p>第二种情况：接下来考虑度数是 $3$ 的点，发现如果他所连的三个点中存在至少两个不是叶子结点，那么白色也必胜了。</p>
<p>第三种情况：排除了上面两种情况以后，剩下的只能是一条链，然后在链的第二个和倒数第二个的点上最多再挂一个点的形式。</p>
<p>如果这两个点上都没再挂一个点，那么最后只能是平局。</p>
<p>最后只剩下这种：</p>
<p><img src="/Codeforces-Global-Round-1-CF1110/G1.png" alt="G1"></p>
<p>可以发现，当直径上点的长度是奇数的时候，白色必胜。</p>
<p>那么最后来考虑刚开始就有白色的情况。</p>
<p>它相当于你把这个点染成白色以后，必须要有一步黑色的操作，且这个黑色的操作不能影响到原来的点。</p>
<p>也就是必须设计一个东西，然后挂在这个被染成白色的点上面。</p>
<p>显然可以这样设计：</p>
<p><img src="/Codeforces-Global-Round-1-CF1110/G2.png" alt="G2"></p>
<p>当你选了白点以后，如果黑色不选这个中间的点，那么下一步白色选它，黑色就输了。</p>
<p>那么这题就能做了。时间复杂度 $O(n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2000010</span>;</span><br><span class="line"><span class="type">int</span> n,ans,deg[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N],vec;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); deg[x]++;</span><br><span class="line">	adj[y].<span class="built_in">pb</span>(x); deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(s[i]==<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">add</span>(i,++n);</span><br><span class="line">			++n; <span class="built_in">add</span>(n<span class="number">-1</span>,n);</span><br><span class="line">			++n; <span class="built_in">add</span>(n<span class="number">-2</span>,n);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;=<span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;Draw&quot;</span>);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) deg[i]=<span class="number">0</span>,adj[i].<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			<span class="keyword">if</span>(deg[i]&gt;=<span class="number">4</span>) &#123;ans=<span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(deg[i]==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> v:adj[i]) <span class="keyword">if</span>(deg[v]&gt;=<span class="number">2</span>) cnt++;</span><br><span class="line">				<span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>) &#123;ans=<span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(deg[i]==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> v:adj[i]) vec.<span class="built_in">pb</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(!ans)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">			vec.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(vec))-vec.<span class="built_in">begin</span>());</span><br><span class="line">			<span class="type">int</span> u=vec[<span class="number">0</span>],v=vec[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(deg[u]==<span class="number">3</span>&amp;&amp;deg[v]==<span class="number">3</span>&amp;&amp;(n&amp;<span class="number">1</span>)) ans=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(ans?<span class="string">&quot;White&quot;</span>:<span class="string">&quot;Draw&quot;</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) deg[i]=<span class="number">0</span>,adj[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="H-Modest-Substrings"><a href="#H-Modest-Substrings" class="headerlink" title="H. Modest Substrings"></a>H. Modest Substrings</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>求一个字典序最小的长度为 $n$ 的数字串，满足不含前导零的子串所表示的数字在 $[l,r]$ 内的子串数目最多。输出这个子串数目和字符串。</p>
<p>$1\leq l \leq r \leq 10^{800},n\leq 200$，时限 5s，空间 1G。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>如果 $r-l$ 比较小的话，我们就可以把所有在 $[l,r]$ 内的数字建出一个AC自动机，然后在上面跑DP就好了。</p>
<p>类似于数位DP，如果某个时刻你选的数字已经脱离限制了，那么以后随便填就都可满足了。比如 $l=227$，$r=403$，第一位选了 $2$，当第二位选了 $3$ 的时候，后面随便乱选都满足在 $[l,r]$ 里面了（对应在AC自动机上是一个满10叉树）。</p>
<p>我们找到哪些前缀会在选完前缀的最后一个数后脱离限制。发现最多有 $800\times 10 \times 2=16000$ 个这样的前缀，找这些前缀分类讨论一下即可找到。</p>
<p>要注意，脱离了限制不代表一定可以满足在 $[l,r]$ 内，这个前缀还需要加上一定个数的字符才能在 $[l,r]$ 内。</p>
<p>然后对这些前缀建立AC自动机，然后在AC机上进行DP。</p>
<p>设 $f_{i,j}$ 表示考虑到第 $i$ 位，当前在AC自动机的第 $j$ 个点上的最值。</p>
<p>考虑往后转移，设此时字符串是 $s$，你在后面填上一个字符 $c$，看这个此时这个字符 $c$ 的贡献。</p>
<p>这个贡献相当于枚举 $s+c$ 的后缀，看这个后缀是否脱离限制，且后面能给它加足够的点来完成。那么设 $h_{j,k}$ 表示节点 $j$ 的点的fail链的所有点中，当中有 $h_{j,k}$ 个前缀满足需要再加 $k$ 个字符才能在 $[l,r]$ 内。</p>
<p>那么这个DP就是：$f_{i+1,ne_{j,c}}=\max\{f_{i,j}+\sum_{k\leq n-i-1}h_{ne_{j,c},k}\}$。</p>
<p>$h$ 做个前缀和即可快速转移。</p>
<p>时间复杂度 $O(nm\Sigma)$，其中 $m$ 为 AC自动机点数，$\Sigma$ 为字符集大小。</p>
<p>输出方案倒退回去再正推贪心即可。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">16100</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ne[N][<span class="number">10</span>],fail[N],cnt,h[N][<span class="number">2003</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_next</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!ne[x][k]) ne[x][k]=++cnt;</span><br><span class="line">	<span class="keyword">return</span> ne[x][k];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">9</span>) <span class="keyword">if</span>(ne[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ne[<span class="number">0</span>][i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m) h[u][i]+=h[fail[u]][i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=ne[u][i];</span><br><span class="line">			<span class="keyword">if</span>(!v) ne[u][i]=ne[fail[u]][i];</span><br><span class="line">			<span class="keyword">else</span> fail[v]=ne[fail[u]][i],q.<span class="built_in">push</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n1,n2;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> s1[<span class="number">805</span>],s2[<span class="number">805</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s1,s2);</span><br><span class="line">	n1=<span class="built_in">strlen</span>(s1); n2=<span class="built_in">strlen</span>(s2);</span><br><span class="line">	<span class="type">int</span> u1=<span class="number">0</span>,u2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n1==n2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(u1==u2)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(j,s1[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>,s2[i]-<span class="string">&#x27;0&#x27;</span><span class="number">-1</span>) h[<span class="built_in">get_next</span>(u1,j)][n1-i<span class="number">-1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(j,s1[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>,<span class="number">9</span>) h[<span class="built_in">get_next</span>(u1,j)][n1-i<span class="number">-1</span>]++;</span><br><span class="line">				<span class="built_in">fo</span>(j,(!i)?<span class="number">1</span>:<span class="number">0</span>,s2[i]-<span class="string">&#x27;0&#x27;</span><span class="number">-1</span>) h[<span class="built_in">get_next</span>(u2,j)][n2-i<span class="number">-1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			u1=<span class="built_in">get_next</span>(u1,s1[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">			u2=<span class="built_in">get_next</span>(u2,s2[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		h[u1][<span class="number">0</span>]++;</span><br><span class="line">		<span class="keyword">if</span>(u1^u2) h[u2][<span class="number">0</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,s1[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>,<span class="number">9</span>) h[<span class="built_in">get_next</span>(u1,j)][n1-i<span class="number">-1</span>]++;</span><br><span class="line">			u1=<span class="built_in">get_next</span>(u1,s1[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,n2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,(!i)?<span class="number">1</span>:<span class="number">0</span>,s2[i]-<span class="string">&#x27;0&#x27;</span><span class="number">-1</span>) h[<span class="built_in">get_next</span>(u2,j)][n2-i<span class="number">-1</span>]++;</span><br><span class="line">			u2=<span class="built_in">get_next</span>(u2,s2[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		h[u1][<span class="number">0</span>]++; h[u2][<span class="number">0</span>]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,n1+<span class="number">1</span>,n2<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">				h[<span class="built_in">get_next</span>(<span class="number">0</span>,j)][i<span class="number">-1</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n2<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[<span class="number">2005</span>][N];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2005</span>][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">getfail</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) h[i][j]+=h[i][j<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">128</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,cnt)</span><br><span class="line">			<span class="keyword">if</span>(f[i<span class="number">-1</span>][j]&gt;=<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">					f[i][ne[j][k]]=<span class="built_in">max</span>(f[i][ne[j][k]],f[i<span class="number">-1</span>][j]+h[ne[j][k]][n-i]);</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) mx=<span class="built_in">max</span>(mx,f[n][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mx);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) <span class="keyword">if</span>(f[n][i]==mx) vis[n][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,n<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,cnt)</span><br><span class="line">			<span class="keyword">if</span>(f[i][j]&gt;=<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">					<span class="keyword">if</span>(vis[i+<span class="number">1</span>][ne[j][k]]&amp;&amp;f[i][j]+h[ne[j][k]][n-i<span class="number">-1</span>]==f[i+<span class="number">1</span>][ne[j][k]])</span><br><span class="line">						vis[i][j]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">			<span class="keyword">if</span>(vis[i][ne[u][k]]&amp;&amp;f[i<span class="number">-1</span>][u]+h[ne[u][k]][n-i]==f[i][ne[u][k]])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">putchar</span>(k^<span class="number">48</span>);</span><br><span class="line">				u=ne[u][k];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
        <tag>线段树</tag>
        <tag>思维题</tag>
        <tag>博弈论</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>Knights[CF1067C]</title>
    <url>/2020/07/12/Knights-CF1067C/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1067C">luogu</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>就是一道裸构造题。</p>
<p>如图，对于橙色的格子，需要这 $8$ 个黑色格子的至少 $4$ 个。</p>
<p><img src="/Knights-CF1067C/1.png" alt="1"></p>
<p>假设用下面的四个来搞出这个橙色的格子。</p>
<p>如果要搞出一行橙色，不难想到用两行即可。</p>
<p>如图所示：</p>
<p><img src="/Knights-CF1067C/2.png" alt="2"></p>
<p>红色的即为黑色两行通过上面的方法新搞出来的格子。</p>
<p>那么每次长度-4，设这黑色两行长度为 $m$，则一共大概有：$\frac{m\times \frac{m}{4}}{2}\times 2=\frac{m^2}{4}$。</p>
<p>显然有：$2n=m$，则一共约有 $\frac{n^2}{16}$ 个格子。还差一点。</p>
<p>既然两行搞不定，我们尝试来三行的。</p>
<p>显然这三行不需要全都涂满。经过乱搞发现这样就可以变成三行了：</p>
<p><img src="/Knights-CF1067C/3.png" alt="3"></p>
<p>大概满足条件 $n=\frac{3}{2}m$，所以一共大概有 $\frac{m^2}{4}=\frac{n^2}{9}$ 个格子。</p>
<p>这样就可以做了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="number">19260817</span>+i,<span class="number">19890604</span>+i);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(n%<span class="number">3</span>!=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="number">19260817</span>+n,<span class="number">19890604</span>+n);</span><br><span class="line">		n--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;3 %d\n&quot;</span>,<span class="number">2</span>*i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">3</span>+<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;2 %d\n&quot;</span>,<span class="number">2</span>*i<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n/<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>,<span class="number">2</span>*i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #517[CF1071]</title>
    <url>/2020/07/12/Codeforces-Round-517-CF1071/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1071/problems">Codeforces Round #517</a></p>
<span id="more"></span>

<h3 id="A-Cram-Time"><a href="#A-Cram-Time" class="headerlink" title="A. Cram Time"></a>A. Cram Time</h3><p>显然，在里面的肯定是一段前缀。</p>
<p>先二分出最大值，找到这个前缀。</p>
<p>然后从大到小贪心减去即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s1,s2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,V.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:V) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">read</span>(); b=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">100000</span>,mid;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1ll</span>*mid*(mid+<span class="number">1</span>)/<span class="number">2</span>&lt;=a+b) l=mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	l--;</span><br><span class="line">	<span class="built_in">fd</span>(i,l,<span class="number">1</span>) <span class="keyword">if</span>(a&gt;=i) s1.<span class="built_in">pb</span>(i),a-=i; <span class="keyword">else</span> s2.<span class="built_in">pb</span>(i),b-=i;</span><br><span class="line">	<span class="built_in">print</span>(s1);</span><br><span class="line">	<span class="built_in">print</span>(s2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="B-Minimum-path"><a href="#B-Minimum-path" class="headerlink" title="B. Minimum path"></a>B. Minimum path</h3><p>$n\times n$ 的网格，上面有字母。从左上到右下走，每次只能往下或往右走，一条路径形成了长度为 $2n-1$ 的字符串，你可以在网格图上修改 $k$ 次，每次修改一个字母，输出最小的字典序。</p>
<p>显然如果 $k\geq 2n-1$ ，则答案为 $2n-1$ 个 $a$。</p>
<p>然后把这个字符串分成两部分，一部分是前面的 $a$，另一部分是后面的东西。</p>
<p>考虑贪心，设 $dp_{i,j}$ 表示走到 $(i,j)$ 最少经过多少个不是 $a$ 的网格。</p>
<p>那么找到 $i+j-1$ 最大的且 $dp_{i,j}\leq k$ 的 $(i,j)$，前 $i+j-1$ 个就全都是 $a$ 了。</p>
<p>剩下的就一个 bfs 就好了。</p>
<p>注意bfs时的去重，以及 $k=0$ 的情况。</p>
<p>时间复杂度 $O(n^2)$ 左右。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2005</span>;</span><br><span class="line"><span class="type">int</span> n,k,f[N][N];</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.x!=B.x) <span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">		<span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.x==B.x&amp;&amp;A.y==B.y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;P&gt; p,q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mi=<span class="number">27</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:q)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(u.x&lt;n) mi=<span class="built_in">min</span>(mi,s[u.x+<span class="number">1</span>][u.y]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>(u.y&lt;n) mi=<span class="built_in">min</span>(mi,s[u.x][u.y+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getnext</span><span class="params">(<span class="type">int</span> mi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:q)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(u.x&lt;n&amp;&amp;s[u.x+<span class="number">1</span>][u.y]-<span class="string">&#x27;a&#x27;</span>==mi) p.<span class="built_in">pb</span>((P)&#123;u.x+<span class="number">1</span>,u.y&#125;);</span><br><span class="line">		<span class="keyword">if</span>(u.y&lt;n&amp;&amp;s[u.x][u.y+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>==mi) p.<span class="built_in">pb</span>((P)&#123;u.x,u.y+<span class="number">1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(p));</span><br><span class="line">	p.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(p))-p.<span class="built_in">begin</span>());</span><br><span class="line">	q=p; p.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">if</span>(k&gt;=<span class="number">2</span>*n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">2</span>*n<span class="number">-1</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">1</span>]=(s[<span class="number">1</span>][<span class="number">1</span>]!=<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		c=(s[i][j]!=<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>(i<span class="number">-1</span>) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i<span class="number">-1</span>][j]+c);</span><br><span class="line">		<span class="keyword">if</span>(j<span class="number">-1</span>) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][j<span class="number">-1</span>]+c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(f[i][j]&lt;=k) mx=<span class="built_in">max</span>(mx,i+j<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,mx) <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(f[i][j]&lt;=k&amp;&amp;i+j<span class="number">-1</span>==mx) q.<span class="built_in">pb</span>((P)&#123;i,j&#125;);</span><br><span class="line">	<span class="keyword">if</span>(f[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;k==<span class="number">0</span>) k=<span class="number">1</span>,<span class="built_in">putchar</span>(s[<span class="number">1</span>][<span class="number">1</span>]),q.<span class="built_in">pb</span>((P)&#123;<span class="number">1</span>,<span class="number">1</span>&#125;),mx=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(t,mx+<span class="number">1</span>,<span class="number">2</span>*n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">find</span>();</span><br><span class="line">		<span class="built_in">putchar</span>(x+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="built_in">getnext</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Triple-Flips"><a href="#C-Triple-Flips" class="headerlink" title="C. Triple Flips"></a>C. Triple Flips</h3><p><del>打表题×1。</del></p>
<p>考虑暴力，枚举一个等差数列是否选择，然后判断。</p>
<p>然后你会发现，题目中的 $12$ 非常的奇怪。然后你又发现长度为 $8$ 的序列的等差数列个数就是 $12$。</p>
<p>暴力打表发现，所有长度为 $8$ 的情况都是可以的。</p>
<p>也就是说，长度小于 $8$ 的可以暴力做，长度大于 $8$ 的要通过不超过 $\frac{n}{3}$ 次操作搞成长度小于 $8$ 的就可以进行暴力了。</p>
<p>考虑当前区间 $[l,r]$ 左边连续的三个数，大力分类讨论：</p>
<ol>
<li><p>$0**$，直接变成子问题 $[l+1,r]$ 。</p>
</li>
<li><p>$111$，操作一次 $(l,l+1,l+2)$ 。</p>
</li>
<li><p>$101$，操作一次 $(l,l+2,l+4)$。</p>
</li>
<li><p>$100$，操作一次 $(l,l+3,l+6)$。</p>
</li>
<li><p>$110$，不会。</p>
</li>
</ol>
<p>把右边连续的三个数也考虑上，那么“不会”的情况就是 $110\cdots011$。</p>
<p>显然再分类一下就必定可以用两次将这六位都变成 $0$。</p>
<p>时间复杂度为 $O(n)$ 加上暴力的复杂度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> a[N],b[N],flag;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; vec,opt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a[x]^=<span class="number">1</span>; a[y]^=<span class="number">1</span>; a[(x+y)&gt;&gt;<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;r-l+<span class="number">1</span>&lt;<span class="number">8</span>&amp;&amp;l&gt;<span class="number">1</span>;l--);</span><br><span class="line">	<span class="keyword">for</span>(;r-l+<span class="number">1</span>&lt;<span class="number">8</span>&amp;&amp;r&lt;n;r++);</span><br><span class="line">	<span class="built_in">fo</span>(i,l,r)</span><br><span class="line">		<span class="built_in">fo</span>(j,i+<span class="number">1</span>,r)</span><br><span class="line">			<span class="keyword">if</span>((j-i)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">				opt.<span class="built_in">pb</span>(<span class="built_in">mp</span>(i,j));</span><br><span class="line">	<span class="type">int</span> k=opt.<span class="built_in">size</span>(),m=<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">	<span class="type">bool</span> bo;</span><br><span class="line">	<span class="built_in">ff</span>(s,<span class="number">0</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,l,r) b[i]=a[i];</span><br><span class="line">		bo=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,k)</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s)</span><br><span class="line">				<span class="built_in">update</span>(opt[i].fi,opt[i].se);</span><br><span class="line">		<span class="built_in">fo</span>(i,l,r) <span class="keyword">if</span>(a[i]) &#123;bo=<span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(!bo)</span><br><span class="line">		&#123;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,k) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s) vec.<span class="built_in">pb</span>(opt[i]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,l,r) a[i]=b[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(r-l+<span class="number">1</span>&lt;=<span class="number">8</span>) <span class="keyword">return</span> <span class="built_in">work</span>(l,r);</span><br><span class="line">	<span class="keyword">if</span>(!a[l]) <span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">1</span>,r);</span><br><span class="line">	<span class="keyword">if</span>(!a[r]) <span class="keyword">return</span> <span class="built_in">solve</span>(l,r<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(a[l+<span class="number">1</span>]&amp;&amp;a[l+<span class="number">2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l,l+<span class="number">2</span>)),<span class="built_in">update</span>(l,l+<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">3</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[l+<span class="number">2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l,l+<span class="number">4</span>)),<span class="built_in">update</span>(l,l+<span class="number">4</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">3</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!a[l+<span class="number">1</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l,l+<span class="number">6</span>)),<span class="built_in">update</span>(l,l+<span class="number">6</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">3</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[r<span class="number">-1</span>]&amp;&amp;a[r<span class="number">-2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(r<span class="number">-2</span>,r)),<span class="built_in">update</span>(r<span class="number">-2</span>,r);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l,r<span class="number">-3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[r<span class="number">-2</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(r<span class="number">-4</span>,r)),<span class="built_in">update</span>(r<span class="number">-4</span>,r);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l,r<span class="number">-3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!a[r<span class="number">-1</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(r<span class="number">-6</span>,r)),<span class="built_in">update</span>(r<span class="number">-6</span>,r);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l,r<span class="number">-3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>((r-l+<span class="number">1</span>)&amp;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l,r)),<span class="built_in">update</span>(l,r);</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l+<span class="number">1</span>,r<span class="number">-1</span>)),<span class="built_in">update</span>(l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">3</span>,r<span class="number">-3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l+<span class="number">1</span>,r)),<span class="built_in">update</span>(l+<span class="number">1</span>,r);</span><br><span class="line">		vec.<span class="built_in">pb</span>(<span class="built_in">mp</span>(l,r<span class="number">-1</span>)),<span class="built_in">update</span>(l,r<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">solve</span>(l+<span class="number">3</span>,r<span class="number">-3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,vec.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec) <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,v.fi,(v.se+v.fi)/<span class="number">2</span>,v.se);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Familiar-Operations"><a href="#D-Familiar-Operations" class="headerlink" title="D. Familiar Operations"></a>D. Familiar Operations</h3><p><del>打表题×2。</del></p>
<p>先把数 $x$ 质因数分解：$x=\prod p_i^{a_i}$，</p>
<p>然后把 $a_i$ 排序，$a$ 序列相同的数归为一类。</p>
<p>显然有用的数的 $a$ 序列长度不会超过 $8$。</p>
<p>通过打表发现，有意义的 $a$ 序列不同的个数在 $1000$ 以内。</p>
<p>通过打表又发现 $\prod (a_i+1)$ （即约数个数）不同的种类在 $200$ 左右。</p>
<p>打表可以用dfs实现。</p>
<p>接着就把不同的 $a$ 序列看成一个点，和在序列上加一或减一后形成的序列对应的点连一条权值为 $1$ 的边。</p>
<p>最终结果是使得两个序列的约数个数相等。</p>
<p>那么枚举最后相同的约数个数是哪一类，然后求出最短距离就好了。</p>
<p>求最短距离用bfs即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> p[]=&#123;<span class="number">19</span>,<span class="number">17</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">map&lt;vector&lt;<span class="type">int</span>&gt;,<span class="type">int</span>&gt; ma;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; d[<span class="number">4010</span>],vec,ve,E[<span class="number">4010</span>],h[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> cnt,siz,f[<span class="number">4000</span>][<span class="number">4000</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> id,vector&lt;<span class="type">int</span>&gt; &amp;V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) f[id][i]=inf;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:V) q.<span class="built_in">push</span>(x),f[id][x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:E[u])</span><br><span class="line">			<span class="keyword">if</span>(f[id][v]==inf)</span><br><span class="line">			&#123;</span><br><span class="line">				f[id][v]=f[id][u]+<span class="number">1</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll now,<span class="type">int</span> limit,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">8</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		++cnt;</span><br><span class="line">		ma[vec]=cnt;</span><br><span class="line">		d[cnt]=vec;</span><br><span class="line">		<span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec) x*=v+<span class="number">1</span>;</span><br><span class="line">		h[x].<span class="built_in">pb</span>(cnt);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,vec.<span class="built_in">size</span>())</span><br><span class="line">		<span class="keyword">if</span>((i==<span class="number">0</span>&amp;&amp;vec[i])||(i!=<span class="number">0</span>&amp;&amp;vec[i]!=vec[i<span class="number">-1</span>]))</span><br><span class="line">		&#123;</span><br><span class="line">			ve=vec; ve[i]--;</span><br><span class="line">			x=ma[ve];</span><br><span class="line">			E[x].<span class="built_in">pb</span>(cnt); E[cnt].<span class="built_in">pb</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">30</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(now&gt;<span class="number">100000000ll</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=limit) vec.<span class="built_in">pb</span>(i),<span class="built_in">dfs</span>(now,i,k+<span class="number">1</span>),vec.<span class="built_in">pop_back</span>();</span><br><span class="line">		now*=p[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">g</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vec.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)</span><br><span class="line">		<span class="keyword">if</span>(x%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(y=<span class="number">0</span>;x%i==<span class="number">0</span>;x/=i) y++;</span><br><span class="line">			vec.<span class="built_in">pb</span>(y);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(x!=<span class="number">1</span>) vec.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(;vec.<span class="built_in">size</span>()&lt;<span class="number">8</span>;vec.<span class="built_in">pb</span>(<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(vec));</span><br><span class="line">	<span class="keyword">return</span> ma[vec];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,<span class="number">100000</span>)</span><br><span class="line">		<span class="keyword">if</span>(h[i].<span class="built_in">size</span>())</span><br><span class="line">			++siz,<span class="built_in">bfs</span>(siz,h[i]);</span><br><span class="line">	<span class="type">int</span> x,y,ans;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">g</span>(<span class="built_in">read</span>()),y=<span class="built_in">g</span>(<span class="built_in">read</span>()); ans=inf;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz) ans=<span class="built_in">min</span>(ans,f[i][x]+f[i][y]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>构造</tag>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>最短路</tag>
        <tag>二分</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #516[CF1063]</title>
    <url>/2020/07/11/Codeforces-Round-516-CF1063/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1063/problems">Codeforces Round #516</a></p>
<span id="more"></span>

<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>题意：重排字符串，使得字符串的回文子串个数最多。输出任意一个满足条件的字符串。</p>
<p>找规律发现，将字符从小到大排好就是一个满足条件的字符串。</p>
<p>考虑一个字母，它出现了 $x$ 遍，那么由这个字母结尾的回文串最多只有 $\frac{x(x+1)}{2}$ 个，而排序则刚好达到这个上界。</p>
<p>因此上面那个规律就是正确的了。</p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>题意：$n\times m$ 个格子，某些格子是障碍物。从某一个点出发，向左不能超过 $L$ 次，向右不能超过 $R$ 次，问能到达的点的个数。</p>
<p>一看上去它有两个限制条件，非常不好做，如果只剩一个那就可以随便bfs了。</p>
<p>首先，假设你从 $(x,y)$ 出发，要到达 $(x_0,y_0)$，假设你向左走了 $l$ 步，那么你显然是向右走了 $l+(y_0-y)$ 步。</p>
<p>因此，只需要最小化其中任意一个限制就可以了。</p>
<p>剩下就是一个简单的 bfs。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2005</span>;</span><br><span class="line"><span class="type">int</span> n,m,max_le,max_ri,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,l,r;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(node u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	node v;</span><br><span class="line">	<span class="keyword">for</span>(v=u,v.x--;;v.x--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v.x&lt;=<span class="number">0</span>||vis[v.x][v.y]) <span class="keyword">break</span>;</span><br><span class="line">		vis[v.x][v.y]=<span class="number">1</span>;</span><br><span class="line">		q.<span class="built_in">push</span>(v);</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(v=u,v.x++;;v.x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v.x&gt;n||vis[v.x][v.y]) <span class="keyword">break</span>;</span><br><span class="line">		vis[v.x][v.y]=<span class="number">1</span>;</span><br><span class="line">		q.<span class="built_in">push</span>(v);</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Left</span><span class="params">(node u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.l&gt;=max_le) <span class="keyword">return</span>;</span><br><span class="line">	u.y--; u.l++;</span><br><span class="line">	<span class="keyword">if</span>(u.y&lt;=<span class="number">0</span>||vis[u.x][u.y]) <span class="keyword">return</span>;</span><br><span class="line">	vis[u.x][u.y]=<span class="number">1</span>;</span><br><span class="line">	ans++;</span><br><span class="line">	q.<span class="built_in">push</span>(u);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Right</span><span class="params">(node u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.r&gt;=max_ri) <span class="keyword">return</span>;</span><br><span class="line">	u.y++; u.r++;</span><br><span class="line">	<span class="keyword">if</span>(u.y&gt;m||vis[u.x][u.y]) <span class="keyword">return</span>;</span><br><span class="line">	vis[u.x][u.y]=<span class="number">1</span>;</span><br><span class="line">	ans++;</span><br><span class="line">	q.<span class="built_in">push</span>(u);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> nx=<span class="built_in">read</span>(),ny=<span class="built_in">read</span>();</span><br><span class="line">	max_le=<span class="built_in">read</span>(); max_ri=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m) vis[i][j]=(s[j]==<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(vis[nx][ny]==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	q.<span class="built_in">push</span>((node)&#123;nx,ny,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">	vis[nx][ny]=<span class="number">1</span>; <span class="built_in">update</span>((node)&#123;nx,ny,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">	ans++;</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		node u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">Left</span>(u); <span class="built_in">Right</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>题意：交互题，问交互器 $n$ 遍，每次你可以询问一个点是黑色还是白色，最后让你求出一条直线，使得该直线将询问的 $n$ 个点分成两部分，每部分颜色相同，两部分颜色不同。</p>
<p>$n\leq 30$，$0\leq x,y \leq 10^9$。</p>
<p>可以发现，$\log_2{10^9}\approx 30$，考虑二分。</p>
<p>实际上二维是假的，我们只需要考虑一条直线上的点，最后再用一条斜斜的直线截成两部分就好了。</p>
<p>枚举 $[l,r]$ 的中间点 $mid$，问它是否是白色还是黑色就好了。</p>
<p>时间复杂度 $O(n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,y);</span><br><span class="line">	<span class="built_in">fflush</span>(stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">	<span class="keyword">return</span> s[<span class="number">0</span>]==<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1e9</span>,mid;</span><br><span class="line">	<span class="type">bool</span> b=<span class="built_in">ask</span>(<span class="number">0</span>,<span class="number">1</span>),t;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ask</span>(mid,<span class="number">1</span>)==b) l=mid; <span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,l,<span class="number">0</span>,l+<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>题意：一个圆环上 $n$ 个人，$k$ 个糖果。你可以设定每个人每次最多拿走 $1$ 个或 $2$ 个糖果，从 $l$ 开始顺时针让人拿糖果，最后在 $r$ 时糖果没了。如果还有糖果则这个人能要拿最多的，但不能超出限制。最大化最多拿两个糖果的人数。$n,l,r,k\leq 10^{11}$。</p>
<p>数据分治，然后列出一大堆不等式，讨论一下注意细节就好了。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><a href="/2020/05/27/%E9%BB%91%E7%BA%A2%E5%85%94-FJWC2020Day1/" title="黑红兔[FJWC2020Day1]">黑红兔[FJWC2020Day1]</a>]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>后缀数组</tag>
        <tag>bfs</tag>
        <tag>交互题</tag>
        <tag>数据分治</tag>
      </tags>
  </entry>
  <entry>
    <title>Construction of a tree[AGC029F]</title>
    <url>/2020/07/07/Construction-of-a-tree-AGC029F/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n-1$ 个点集(全集为 $\{1,2,\cdots,n\}$)，从每个集合内选两个点连边，使得最后形成一棵树。输出方案。</p>
<p>$n\leq 10^5$，点集大小之和 $\le 2\times 10^5$。</p>
<span id="more"></span>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://atcoder.jp/contests/agc029/tasks/agc029_f">AtCoder</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对于这 $n-1$ 个集合 $S=\{S_1,S_2\cdots S_{n-1}\}$，我们选出这些集合的若干个子集 $T\subseteq S$，设 $f(T)$ 表示在 $T$ 中的集合 $S_i$ 所拥有的点的集合的大小。那么如果存在一个非空集合 $T$ 使得 $f(T)\leq |T|$，这 $f(T)$ 个点最多连出 $f(T)-1$ 条边，而 $f(T)-1&lt; |T|$，显然不可能符合题意。</p>
<p>也就是说，$\forall T\subseteq S,|T|&gt;0$，满足 $f(T)&gt;|T|$ 是有解的必要条件。</p>
<p>发现这个很像Hall定理的形式：$f(T)\geq T$。</p>
<p>考虑构造一个二分图，左边是原图中的 $n$ 个点，右边是 $n-1$ 个集合，每个点如果在某个集合内则连一条边。</p>
<p>然后跑一个二分图匹配，不存在完美匹配则不满足Hall定理，则一定无解。</p>
<p>那么左边的点就有且仅有一个点没有匹配上，设这个点为 $x$。</p>
<p>考虑构造，对当前的 $x$ 进行dfs，找到与其相连的还未被标记的一个集合 $w$，然后标记它，再对这个集合 $w$ 找到与其匹配的点 $y$，则 $(x,y)$ 这条边就是集合 $w$ 中的边了。</p>
<p>构造的正确性证明：</p>
<p>我们只需说明不会出现有解的在这种构造下变为无解。按照这种方法，当无解的时候，当前被标记的集合所形成的的集合满足 $f(T)\leq |T|$ ，而有解的时候是不会有这种情况的。得证。</p>
<p>在二分图下跑Dinic，时间复杂度 $O(n\sqrt{m})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">2000000</span>;</span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> inf=<span class="number">2e9</span>;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	<span class="type">int</span> head[N],cur[N],ne[M],ver[M],val[M],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> d[N];</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,t) cur[i]=head[i];</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,t) d[i]=<span class="number">-1</span>; q.<span class="built_in">push</span>(s); d[s]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,r,v;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==d[u]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i]));</span><br><span class="line">				<span class="keyword">if</span>(!r) <span class="keyword">continue</span>;</span><br><span class="line">				val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">				res-=r; <span class="keyword">if</span>(!res) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">bfs</span>()) flow+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> X[N],Y[N],cnt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=s&amp;&amp;!vis[v-n])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[v-n]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=head[v];j;j=ne[j])</span><br><span class="line">				<span class="keyword">if</span>(val[j])</span><br><span class="line">					cnt++,X[v-n]=u,Y[v-n]=ver[j],<span class="built_in">dfs</span>(ver[j]);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	Dinic::t=<span class="number">2</span>*n;</span><br><span class="line">	s=<span class="number">0</span>; t=<span class="number">2</span>*n;</span><br><span class="line">	<span class="built_in">ff</span>(i,n+<span class="number">1</span>,<span class="number">2</span>*n) <span class="function">CASET <span class="title">add</span><span class="params">(read(),i,<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">add</span>(s,i,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,n+<span class="number">1</span>,<span class="number">2</span>*n) <span class="built_in">add</span>(i,t,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">dinic</span>()!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> root;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[<span class="number">0</span>];i;i=ne[i]) <span class="keyword">if</span>(val[i]) root=ver[i];</span><br><span class="line">	<span class="built_in">dfs</span>(root);</span><br><span class="line">	<span class="keyword">if</span>(cnt!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,X[i],Y[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>AtCoder</category>
        <category>AGC</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>思维题</tag>
        <tag>Hall定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Ball Eat Chameleons[AGC021]</title>
    <url>/2020/07/05/Ball-Eat-Chameleons-AGC021/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://atcoder.jp/contests/agc021/tasks/agc021_e">AtCoder</a></p>
<p><a href="https://www.luogu.com.cn/problem/AT3871">luogu</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设选了 $R$ 个红球，则选了 $B=k-R$ 个蓝球。</p>
<p>考虑一只变色龙最后是红色的当且仅当：</p>
<ol>
<li>所吃红球&gt;蓝球；</li>
<li>所吃红球=蓝球，且最后一次吃的是蓝球。</li>
</ol>
<p>接下来来看什么时候可行。</p>
<p>分类讨论：</p>
<ol>
<li><p>$R&lt;B$，此时方案数显然为 $0$。因为至少存在一只变色龙是蓝色。</p>
</li>
<li><p>$R\geq B+n$，此时方案数显然为 $\binom{R+B}{B}$，因为每只变色龙都可以符合第一种情况。</p>
</li>
<li><p>$R=B$，这时候必须满足序列中最后一个是蓝球，否则必然不合法，然后转换成 $(R,B-1)$ 的问题。</p>
</li>
<li><p>$R\in (B,B+n)$，这时候需要有 $n-(R-B)$ 只变色龙符合第二种情况。并且，当这只变色龙吃的球的个数大于 $2$ 的话，可以将最后的一个红球和蓝球不吃，让给剩下 $R-B$ 只满足第一种情况的变色龙吃，也能满足情况。</p>
<p>因此，这种情况就变成了给定一个 <code>R,B</code> 序列，里面有 $R$ 个 <code>R</code>，$B$ 个 <code>B</code>，至少要找到 $n-(R-B)$ 个互不相交的子序列，且这个子序列是 <code>RB</code>，问符合情况的方案数。</p>
<p>把 <code>R</code> 看成 $+1$，<code>B</code> 看成 $-1$，上面的条件相当于：</p>
<p>对于每个前缀都满足前缀和 $\geq B-(n-(R-B))=R-n$</p>
<p>这时候由经典的折线法容斥一下就好了，得到方案数：$\binom{R+B}{R}-\binom{R+B}{2R-n+1}$。</p>
</li>
</ol>
<p>预处理组合数，时间复杂度 $O(k)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="type">int</span> n,k,R,B;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n-m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>); <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;k) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">init</span>(k);</span><br><span class="line">	<span class="built_in">fo</span>(R,<span class="number">0</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		B=k-R;</span><br><span class="line">		<span class="keyword">if</span>(R&lt;B) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(R&gt;=B+n) &#123;ans=<span class="built_in">Add</span>(ans,<span class="built_in">C</span>(R+B,R)); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(R==B) B--;</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="built_in">Dec</span>(<span class="built_in">C</span>(R+B,R),<span class="built_in">C</span>(R+B,<span class="number">2</span>*R-n+<span class="number">1</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>AtCoder</category>
        <category>AGC</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Mike and Friends[CF547E]</title>
    <url>/2020/07/04/Mike-and-Friends-CF547E/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://codeforces.ml/contest/547/problem/E">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>练手速的题</del></p>
<p><del>这种题也需要写20min。。。</del></p>
<p>显然你建一个广义SAM然后离线一下再线段树合并就没了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>注意广义SAM不仅需要las=1，还需要特殊处理一些东西。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">400010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=N*<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ans[N*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ls[M],rs[M],cnt;</span><br><span class="line"><span class="type">int</span> siz[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) u=++cnt;</span><br><span class="line">	siz[u]++;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	(p&lt;=mid)?<span class="built_in">update</span>(ls[u],l,mid,p):<span class="built_in">update</span>(rs[u],mid+<span class="number">1</span>,r,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	ls[x]=<span class="built_in">merge</span>(ls[x],ls[y]);</span><br><span class="line">	rs[x]=<span class="built_in">merge</span>(rs[x],rs[y]);</span><br><span class="line">	siz[x]+=siz[y];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> siz[u];</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) ans+=<span class="built_in">ask</span>(ls[u],l,mid,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  ans+=<span class="built_in">ask</span>(rs[u],mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt[N],pos[N];</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	vector&lt;query&gt; vec[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">dfs</span>(v),rt[u]=<span class="built_in">merge</span>(rt[u],rt[v]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec[u]) ans[v.id]=<span class="built_in">ask</span>(rt[u],<span class="number">1</span>,n,v.x,v.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>],fa[N&lt;&lt;<span class="number">1</span>],len[N&lt;&lt;<span class="number">1</span>],cnt,las;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;cnt=las=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ne[las][c])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> p=las,q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) &#123;las=q; <span class="keyword">return</span>;&#125;</span><br><span class="line">			<span class="type">int</span> clone=++cnt;</span><br><span class="line">			<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">			len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">			fa[clone]=fa[q];</span><br><span class="line">			<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">			fa[q]=clone;</span><br><span class="line">			las=clone;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> cur=++cnt,p=las;</span><br><span class="line">		len[cur]=len[p]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> clone=++cnt;</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">				fa[clone]=fa[q];</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">				fa[q]=fa[cur]=clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,cnt) Tree::<span class="built_in">add</span>(fa[i],i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> SAM::las;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	SAM::<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		las=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,len) SAM::<span class="built_in">extend</span>(s[j]-<span class="string">&#x27;a&#x27;</span>),<span class="built_in">update</span>(rt[las],<span class="number">1</span>,n,i);</span><br><span class="line">		pos[i]=las;</span><br><span class="line">	&#125;</span><br><span class="line">	SAM::<span class="built_in">build</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=pos[<span class="built_in">read</span>()];</span><br><span class="line">		Tree::vec[z].<span class="built_in">pb</span>((query)&#123;x,y,i&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	Tree::<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Berserk Robot[CF538G]</title>
    <url>/2020/07/04/Berserk-Robot-CF538G/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/538/G">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>真的是人类智慧题啊。</del></p>
<p>首先遇到这种走格子题，往往都或许可以通过某些变换，将横纵坐标分开来考虑的。</p>
<p>考虑上面的套路，将坐标系旋转 $45$ 度，那么就变成了：</p>
<p>$$U(x+1,y+1),D(x-1,y-1),L(x-1,y+1),R(x+1,y-1)$$</p>
<p>原先的坐标 $(x,y)$ 就变成了 $(x+y,y-x)$。</p>
<p>现在就可以分开横纵坐标考虑了，每次可以加上 $1$ 或者减去 $1$，并满足第 $t_i$ 秒等于某个值 $x$。</p>
<p>设走了 $k$ 次 $+1$，那么有：$k-(t-k)=x$，即 $k=\frac{x+t}{2}$。</p>
<p>那么再转换一下，原先在第 $t$ 秒的坐标 $(x,y)$ 变成 $(\frac{x+y+t}{2},\frac{y-x+t}{2})$，然后横纵坐标都满足，每次 $+1$ 或者不加。（注意特判掉 $x+y+t$ 不是偶数的情况）</p>
<p>那么原先的四个方向就变成了：</p>
<p>$$U(x+1,y+1),D(x,y),L(x,y+1),R(x+1,y)$$</p>
<p>下面只考虑 $x$ 的（$y$ 同理）：</p>
<p>设第 $i$ 秒的位置在 $pos_i$。$k_i=\left\lfloor \frac{t_i}{l}\right\rfloor,w_i=t_i\bmod l$。</p>
<p>那么有：$X_i=pos_{t_i}=pos_l\times k_i+pos_{w_i}$。</p>
<p>$w_i$ 是比较小的，考虑将这 $n$ 个方程按照 $w_i$ 的大小排序，然后差分。</p>
<p>为了方便，我们加入两个方程，分别满足 $k_i=0,w_i=0,X_i=0$，以及 $k_i=-1,w_i=l,X_i=0$，原因是最前一段和最后一段也需要考虑。</p>
<p>假设是方程 $i$ 和方程 $j$ 进行差分，那么有：</p>
<p>$$X_i-X_j=pos_l\times (k_i-k_j)+(pos_{w_i}-pos_{w_j})$$</p>
<p>由于我们按照 $w_i$ 进行排序，那么就有 $pos_{w_i}-pos_{w_j}\geq 0$。</p>
<p>设 $X=X_i-X_j,k=k_i-k_j$。原式变为：$X=pos_l\times k+(pos_{w_i}-pos_{w_j})$</p>
<p>由于每次只能让 $pos_{i}$ 最多加上 $1$，因此 $pos_{w_i}-pos_{w_j}\in[0,w_i-w_j]$。</p>
<p>原式再变为：$X-(w_i-w_j)\leq pos_l\times k\leq X$。</p>
<p>根据 $k$ 的大小分 $k=0,k&gt;0,k&lt;0$ 三种情况进行讨论，得出无解，或者一个关于 $pos_l$ 大小的区间。</p>
<p>那么在这个区间内的值都是能满足的了。</p>
<p>得到了 $pos_l$，由最开始的方程 $X_i=pos_{t_i}=pos_l\times k_i+pos_{w_i}$ 就能算出每个 $pos_{w_i}$。</p>
<p>最后只需构造方案就好了，根据贪心，我们对于 $x,y$ 每次都加一，直到 $x$ 或 $y$ 不能再加为止。然后再 $x$ 或 $y$ 单独跳，最后走 $U(x,y)$（也就是不动）就好了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200020</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">8e18</span>;</span><br><span class="line"><span class="type">int</span> n,l;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll x,y,k,w;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.w&lt;B.w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line">ll lx,rx,ly,ry,dx,dy,nx,ny;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); l=<span class="built_in">read</span>();</span><br><span class="line">	ll X,Y,T,w,k;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		T=<span class="built_in">read</span>(); X=<span class="built_in">read</span>(); Y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>((X+Y+T)&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">		q[i].x=(X+Y+T)/<span class="number">2</span>;</span><br><span class="line">		q[i].y=(Y-X+T)/<span class="number">2</span>;</span><br><span class="line">		q[i].k=T/l; q[i].w=T%l;</span><br><span class="line">	&#125;</span><br><span class="line">	q[n+<span class="number">1</span>].k=<span class="number">-1</span>,q[n+<span class="number">1</span>].w=l;</span><br><span class="line">	<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">2</span>);</span><br><span class="line">	lx=ly=-inf;</span><br><span class="line">	rx=ry=inf;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		w=q[i].w-q[i<span class="number">-1</span>].w;</span><br><span class="line">		k=q[i].k-q[i<span class="number">-1</span>].k;</span><br><span class="line">		X=q[i].x-q[i<span class="number">-1</span>].x;</span><br><span class="line">		Y=q[i].y-q[i<span class="number">-1</span>].y;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(X-w&gt;<span class="number">0</span>||X&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(Y-w&gt;<span class="number">0</span>||Y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			lx=<span class="built_in">max</span>(lx,(ll)<span class="built_in">ceil</span>((<span class="type">long</span> db)(X-w)/k));</span><br><span class="line">			ly=<span class="built_in">max</span>(ly,(ll)<span class="built_in">ceil</span>((<span class="type">long</span> db)(Y-w)/k));</span><br><span class="line">			rx=<span class="built_in">min</span>(rx,(ll)<span class="built_in">floor</span>((<span class="type">long</span> db)X/k));</span><br><span class="line">			ry=<span class="built_in">min</span>(ry,(ll)<span class="built_in">floor</span>((<span class="type">long</span> db)Y/k));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			lx=<span class="built_in">max</span>(lx,(ll)<span class="built_in">ceil</span>((<span class="type">long</span> db)X/k));</span><br><span class="line">			ly=<span class="built_in">max</span>(ly,(ll)<span class="built_in">ceil</span>((<span class="type">long</span> db)Y/k));</span><br><span class="line">			rx=<span class="built_in">min</span>(rx,(ll)<span class="built_in">floor</span>((<span class="type">long</span> db)(X-w)/k));</span><br><span class="line">			ry=<span class="built_in">min</span>(ry,(ll)<span class="built_in">floor</span>((<span class="type">long</span> db)(Y-w)/k));</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//DEBUG(lx); DEBUG(rx);</span></span><br><span class="line">	<span class="keyword">if</span>(lx&gt;rx||ly&gt;ry) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	nx=lx; ny=ly;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n+<span class="number">1</span>) q[i].x=q[i].x-q[i].k*nx,q[i].y=q[i].y-q[i].k*ny;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		dx=q[i].x-q[i<span class="number">-1</span>].x,dy=q[i].y-q[i<span class="number">-1</span>].y;</span><br><span class="line">		X=Y=<span class="number">0</span>; w=q[i].w-q[i<span class="number">-1</span>].w;</span><br><span class="line">		<span class="keyword">for</span>(;w--;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(X&lt;dx)</span><br><span class="line">			&#123;</span><br><span class="line">				++X;</span><br><span class="line">				<span class="keyword">if</span>(Y&lt;dy) ++Y,<span class="built_in">putchar</span>(<span class="string">&#x27;U&#x27;</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(Y&lt;dy) ++Y,<span class="built_in">putchar</span>(<span class="string">&#x27;L&#x27;</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>Tavas in Kansas[CF536D]</title>
    <url>/2020/07/04/Tavas-in-Kansas-CF536D/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/536/D">CF</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ul>
<li><p>给定一张 $n$ 个点 $m$ 条边的可能有自环和重边的无向连通图，每条边都有一个非负边权。</p>
</li>
<li><p>小 X 和小 Y 在这张图上玩一个游戏，在游戏中，第 $i$ 个城市有一个权值 $p_i$。</p>
</li>
<li><p>一开始，小 X 在城市 $s$ 中，小 Y 在城市 $t$ 中，两人各有一个得分，初始为 $0$，小 X 为先手，然后轮流进行操作。</p>
</li>
<li><p>当轮到某一个人时，他必须选择一个非负整数 $x$，以选定所有与他所在的城市的最短距离不超过 $x$ 的还未被选定过的城市，他的得分将会加上这些城市的权值。</p>
</li>
<li><p>另外，每个人每次必须能够至少选定一个城市。</p>
</li>
<li><p>当没有人可以选择时，游戏结束，得分高者获胜。</p>
</li>
<li><p>现在请你计算出，在两人都使用最佳策略的情况下，谁会获胜（或者判断为平局）。</p>
</li>
<li><p>$n\leq 2000,m\leq 10^5,|p_i|\leq 10^9$。</p>
</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>分析一下可以发现，这两个人博弈所形成的的状态可以由 $(k,i,j)$ 表示，其中 $k$ 表示当前谁先手，第一个人当前的距离是 $i$，第二个人当前的距离是 $j$ 。</p>
<p>因此，先把到 $s$ 和 $t$ 的最短路预处理，然后进行离散化，那么这个状态就是 $O(n^2)$ 级别的了。设第 $i$ 个点在这两个离散化数组中的下标是 $id1_i,id2_i$。</p>
<p>考虑DP，设 $f_{k,i,j}$ 表示状态为 $(k,i,j)$ 时，第一个人减去第二个人的值是多少。设 $sum(i,j,k,l)$ 表示满足 $id1_x\in[i,j],id2_x\in[k,l]$ 的 $x$ 点的权值之和。</p>
<p>那么有：</p>
<p>$$f_{0,i,j}=\max\{f_{1,k,j}+sum(i,k-1,j,\infty)|k&gt;i\}$$</p>
<p>$$f_{1,i,j}=\min\{f_{0,i,k}+sum(i,\infty,j,k-1)|k&gt;j\}$$</p>
<p>此外，还需满足每个人每次必须能够至少选定一个城市的条件，也就是必须有至少一个点在里面。</p>
<p>算 $sum$ 可以二维前缀和搞一搞就好。</p>
<p>DP直接暴力是 $O(n^3)$ 的，然后你发现用一个前缀最值优化一下就好了。</p>
<p>时间复杂度 $O(m\log n+n^2)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],ne[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> u; ll d;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> A.d&gt;B.d;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	priority_queue&lt;node&gt; q;</span><br><span class="line">	ll h[N],d[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_dis</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> &amp;m,<span class="type">int</span> *id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		q.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[i]=inf,vis[i]=<span class="number">0</span>;</span><br><span class="line">		d[s]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">top</span>().u; q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">			vis[u]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(d[v=ver[i]]&gt;d[u]+val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+val[i];</span><br><span class="line">					<span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>((node)&#123;v,d[v]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) id[i]=i,h[i]=d[i];</span><br><span class="line">		<span class="built_in">sort</span>(h+<span class="number">1</span>,h+n+<span class="number">1</span>);</span><br><span class="line">		m=<span class="built_in">unique</span>(h+<span class="number">1</span>,h+n+<span class="number">1</span>)-h<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) id[i]=<span class="built_in">lower_bound</span>(h+<span class="number">1</span>,h+m+<span class="number">1</span>,d[i])-h;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s,t,p[N];</span><br><span class="line"><span class="type">int</span> ids[N],idt[N],ns,nt;</span><br><span class="line">ll sum[N][N],f[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="type">int</span> siz[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">si</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> siz[l][r]-siz[l][y<span class="number">-1</span>]-siz[x<span class="number">-1</span>][r]+siz[x<span class="number">-1</span>][y<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">su</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sum[l][r]-sum[l][y<span class="number">-1</span>]-sum[x<span class="number">-1</span>][r]+sum[x<span class="number">-1</span>][y<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	s=<span class="built_in">read</span>(); t=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>(),Graph::<span class="built_in">add</span>(x,y,z);</span><br><span class="line">	Graph::<span class="built_in">get_dis</span>(s,ns,ids);</span><br><span class="line">	Graph::<span class="built_in">get_dis</span>(t,nt,idt);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) siz[ids[i]][idt[i]]++,sum[ids[i]][idt[i]]+=p[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,ns)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,nt)</span><br><span class="line">			siz[i][j]+=siz[i<span class="number">-1</span>][j]+siz[i][j<span class="number">-1</span>]-siz[i<span class="number">-1</span>][j<span class="number">-1</span>],</span><br><span class="line">			sum[i][j]+=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fd</span>(i,ns,<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">fd</span>(j,nt,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">si</span>(i,j,i,nt)) f[<span class="number">0</span>][i][j]=<span class="built_in">max</span>(f[<span class="number">0</span>][i+<span class="number">1</span>][j],f[<span class="number">1</span>][i+<span class="number">1</span>][j])+<span class="built_in">su</span>(i,j,i,nt);</span><br><span class="line">			<span class="keyword">else</span> f[<span class="number">0</span>][i][j]=f[<span class="number">0</span>][i+<span class="number">1</span>][j];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">si</span>(i,j,ns,j)) f[<span class="number">1</span>][i][j]=<span class="built_in">min</span>(f[<span class="number">1</span>][i][j+<span class="number">1</span>],f[<span class="number">0</span>][i][j+<span class="number">1</span>])-<span class="built_in">su</span>(i,j,ns,j);</span><br><span class="line">			<span class="keyword">else</span> f[<span class="number">1</span>][i][j]=f[<span class="number">1</span>][i][j+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]&gt;<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;Break a heart&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]&lt;<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;Cry&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Flowers&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Bear and Chemistry[CF639F]</title>
    <url>/2020/07/03/Bear-and-Chemistry-CF639F/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://codeforces.com/contest/639/problem/F">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>用来练码力的题。</del></p>
<p><del>这种题还写了1.5h真的差评。</del></p>
<p>显然你先直接缩点，变成一个森林。</p>
<p>然后每次询问就是给你一些点和边，表示在森林的基础上再加上这些边，然后跑边双，问这些点是否在同一个边双内。</p>
<p>那么在森林上对这些点建出虚树，然后再跑Tarjan就好了。</p>
<p>时间复杂度 $O((n+m)\log n)$。</p>
<p>有那么亿点细节。。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">6e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,col[N],bel[N],m,q,cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> dfn[N],low[N],tim;</span><br><span class="line">	<span class="type">int</span> ver[N],ne[N],head[N],tot;</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; bridge;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[u]=low[u]=++tim;</span><br><span class="line">		<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(!dfn[v=ver[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">dfs</span>(v,u);</span><br><span class="line">				low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">				<span class="keyword">if</span>(low[v]&gt;dfn[u]) vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>,bridge.<span class="built_in">pb</span>(i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(v!=pre) low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">if</span>(!flag) flag=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span> low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		col[u]=cnt;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(!col[v=ver[i]]&amp;&amp;!vis[i])</span><br><span class="line">				<span class="built_in">dfs</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a,vector&lt;edge&gt; &amp;E)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		tim=<span class="number">0</span>; tot=<span class="number">1</span>; cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i:bridge) vis[i]=vis[i^<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		bridge.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i:a) head[i]=dfn[i]=low[i]=col[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(edge v:E) <span class="built_in">add</span>(v.x,v.y);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i:a) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i:a) <span class="keyword">if</span>(!col[i]) ++cnt,<span class="built_in">dfs</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Graph::ver;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt; E,E1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; V,V1,V2;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> dep[N],f[N][<span class="number">20</span>],rt[N],dfn[N],tim;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[u]=++tim; f[u][<span class="number">0</span>]=pre;</span><br><span class="line">		dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">19</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v:adj[u]) <span class="keyword">if</span>(v!=pre) rt[v]=rt[u],<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i:Graph::bridge) <span class="built_in">add</span>(col[ver[i]],col[ver[i^<span class="number">1</span>]]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>(!dep[i]) rt[i]=i,<span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">19</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[y][i]&amp;&amp;dep[f[y][i]]&gt;=dep[x]) y=f[y][i];</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">19</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">		<span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">sort</span>(<span class="built_in">all</span>(a),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">		a.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(a))-a.<span class="built_in">begin</span>());</span><br><span class="line">		<span class="type">static</span> <span class="type">int</span> st[N],top,now;</span><br><span class="line">		top=now=<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> y;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> x:a)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(top&amp;&amp;rt[x]!=now)</span><br><span class="line">				<span class="keyword">for</span>(;--top;) E1.<span class="built_in">pb</span>((edge)&#123;st[top],st[top+<span class="number">1</span>]&#125;);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(top)</span><br><span class="line">			&#123;</span><br><span class="line">				y=<span class="built_in">lca</span>(x,st[top]);</span><br><span class="line">				<span class="keyword">if</span>(y!=st[top])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(;top&gt;=<span class="number">2</span>&amp;&amp;dep[st[top<span class="number">-1</span>]]&gt;=dep[y];top--) E1.<span class="built_in">pb</span>((edge)&#123;st[top],st[top<span class="number">-1</span>]&#125;);</span><br><span class="line">					<span class="keyword">if</span>(st[top]!=y) E1.<span class="built_in">pb</span>((edge)&#123;st[top],y&#125;),st[top]=y,V1.<span class="built_in">pb</span>(y);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			now=rt[x];</span><br><span class="line">			<span class="keyword">if</span>(st[top]!=x) st[++top]=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(top) <span class="keyword">for</span>(;--top;) E1.<span class="built_in">pb</span>((edge)&#123;st[top],st[top+<span class="number">1</span>]&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(edge i:E) V2.<span class="built_in">pb</span>(i.x),V2.<span class="built_in">pb</span>(i.y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i:V) V2.<span class="built_in">pb</span>(i);</span><br><span class="line">	Tree::<span class="built_in">build</span>(V2);</span><br><span class="line">	<span class="keyword">for</span>(edge i:E) E1.<span class="built_in">pb</span>((edge)&#123;i.x,i.y&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i:V2) V1.<span class="built_in">pb</span>(i);</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(V1));</span><br><span class="line">	V1.<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(V1))-V1.<span class="built_in">begin</span>());</span><br><span class="line">	Graph::<span class="built_in">work</span>(V1,E1);</span><br><span class="line">	<span class="type">int</span> c=col[V[<span class="number">0</span>]];</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,V.<span class="built_in">size</span>()) <span class="keyword">if</span>(col[V[i]]!=c) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Rnow;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=(x+Rnow)%n;</span><br><span class="line">	<span class="keyword">if</span>(x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) E.<span class="built_in">pb</span>((edge)&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>()&#125;);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) V.<span class="built_in">pb</span>(i);</span><br><span class="line">	Graph::<span class="built_in">work</span>(V,E);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) bel[i]=col[i];</span><br><span class="line">	Tree::<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> T=<span class="number">1</span>,v,e;T&lt;=q;T++)</span><br><span class="line">	&#123;</span><br><span class="line">		v=<span class="built_in">read</span>(); e=<span class="built_in">read</span>();</span><br><span class="line">		E.<span class="built_in">clear</span>(); V.<span class="built_in">clear</span>();</span><br><span class="line">		E1.<span class="built_in">clear</span>(); V1.<span class="built_in">clear</span>(); V2.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,v) V.<span class="built_in">pb</span>(bel[<span class="built_in">change</span>(<span class="built_in">read</span>())]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,e) E.<span class="built_in">pb</span>((edge)&#123;bel[<span class="built_in">change</span>(<span class="built_in">read</span>())],bel[<span class="built_in">change</span>(<span class="built_in">read</span>())]&#125;);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>()) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>),Rnow=(Rnow+T)%n;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>虚树</tag>
        <tag>双连通分量</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>Orchestra[CF627E]</title>
    <url>/2020/07/03/Orchestra-CF627E/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://codeforces.com/contest/627/problem/E">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然有一个暴力的做法是：枚举矩阵的上边界和下边界，然后统计每一列的情况，压缩成一维，然后双指针扫一遍就没了。</p>
<p>时间复杂度是三次方的，显然过不了。</p>
<p>考虑先枚举一个上边界，然后按顺序从上往下枚举下边界，这时你会在这个一维数组中插入一个数，这时影响到答案的只有他前面的 $k$ 个点和后面一个点，我们将这些点找出来，然后修改贡献就好了。</p>
<p>可以用链表来维护，但是链表不支持随机访问。</p>
<p>因此我们从下往上枚举下边界，然后插入变成删除就可以了。</p>
<p>时间复杂度 $O(n^2k)$，$n,r,c$ 同阶。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3005</span>;</span><br><span class="line"><span class="type">int</span> r,c,n,k,x[N],y[N],sum[N],a[N],pos[N],cnt,L[N],R[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec[N];</span><br><span class="line">ll ans,s,val[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sum[a[x]]--;</span><br><span class="line">	<span class="type">int</span> le=x,ri;</span><br><span class="line">	s-=val[x]; val[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) <span class="keyword">if</span>(L[le]) le=L[le],s-=val[le],val[le]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> t=R[x];</span><br><span class="line">	<span class="keyword">if</span>(!sum[a[x]])</span><br><span class="line">	&#123;</span><br><span class="line">		L[R[x]]=L[x],R[L[x]]=R[x];</span><br><span class="line">		s-=val[t],val[t]=<span class="number">0</span>; t=R[t];</span><br><span class="line">		<span class="keyword">if</span>(le==x) le=R[le];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(le==cnt+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	ri=le;</span><br><span class="line">	<span class="type">int</span> now=sum[a[le]];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) <span class="keyword">if</span>(now&lt;k) ri=R[ri],now+=sum[a[ri]];</span><br><span class="line">	<span class="keyword">if</span>(ri==cnt+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span>(;le!=t&amp;&amp;ri!=cnt+<span class="number">1</span>;)</span><br><span class="line">	&#123;</span><br><span class="line">		s+=(val[le]=<span class="number">1ll</span>*(c-a[ri]+<span class="number">1</span>)*(a[le]-a[L[le]]));</span><br><span class="line">		now-=sum[a[le]]; le=R[le];</span><br><span class="line">		<span class="keyword">for</span>(;now&lt;k&amp;&amp;ri&lt;=cnt;ri=R[ri],now+=sum[a[ri]]);</span><br><span class="line">		<span class="keyword">if</span>(ri==cnt+<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	r=<span class="built_in">read</span>(); c=<span class="built_in">read</span>(); n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) x[i]=<span class="built_in">read</span>(),y[i]=<span class="built_in">read</span>(),vec[x[i]].<span class="built_in">pb</span>(y[i]);</span><br><span class="line">	<span class="built_in">fo</span>(l,<span class="number">1</span>,r)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>; s=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(x[i]&gt;=l) sum[y[i]]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,c) <span class="keyword">if</span>(sum[i]) a[++cnt]=i,pos[i]=cnt;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) L[i]=i<span class="number">-1</span>,R[i]=i+<span class="number">1</span>;</span><br><span class="line">		R[<span class="number">0</span>]=<span class="number">1</span>; R[cnt+<span class="number">1</span>]=cnt+<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> ri=<span class="number">0</span>,le=<span class="number">1</span>,now=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) <span class="keyword">if</span>(now&lt;k) ri=R[ri],now+=sum[a[ri]];</span><br><span class="line">		<span class="keyword">if</span>(now&gt;=k&amp;&amp;ri!=cnt+<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">			&#123;</span><br><span class="line">				s+=(val[le]=<span class="number">1ll</span>*(c-a[ri]+<span class="number">1</span>)*(a[le]-a[L[le]]));</span><br><span class="line">				now-=sum[a[le]]; le=R[le];</span><br><span class="line">				<span class="keyword">for</span>(;now&lt;k&amp;&amp;ri&lt;=cnt;ri=R[ri],now+=sum[a[ri]]);</span><br><span class="line">				<span class="keyword">if</span>(ri==cnt+<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fd</span>(d,r,l)</span><br><span class="line">			&#123;</span><br><span class="line">				ans+=s;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec[d]) <span class="built_in">del</span>(pos[v]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt+<span class="number">1</span>) L[i]=R[i]=a[i]=val[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,c) sum[i]=pos[i]=<span class="number">0</span>; cnt=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>New Year and Forgotten Tree[CF611H]</title>
    <url>/2020/07/02/New-Year-and-Forgotten-Tree-CF611H/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/611/problem/H">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先简化一下，将位数相同的点搞在一起形成一个大的点，那么一共就有 $m=\left \lfloor \log_{10}n \right \rfloor \leq 6$ 个大点。对于每个大点，随便选择一个点作为关键点。</p>
<p>如果有解，那么肯定存在一种情况，使得一条原树中的边，其中一个点连向的是关键点。</p>
<p>那么关键点之间形成的，是一个树结构。</p>
<p>根据prufer数列，我们有 $m^{m-2}$ 种树。</p>
<p>那么暴力枚举所有的情况，考虑剩下的边怎么连。</p>
<p>也就是说，一条边 $(x,y)$ 有两种选择，要么 $x$ 连的是关键点，要么 $y$ 连。</p>
<p>建立一个二分图，左边的点代表剩下的边，右边的点代表一个大点。</p>
<p>然后建这个二分图，判断是否存在完美匹配，如果存在就找到一个解了。</p>
<p>判断是否存在完美匹配可以用Hall定理或者暴力跑网络流。</p>
<p>因为要输出方案，可以跑一个网络流，然后根据残量网络输出即可。</p>
<p>时间复杂度 $O(m^{m-2}2^m+m^3)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	<span class="type">int</span> ver[M],ne[M],head[M],val[M],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> cur[M],d[M];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,s,t) d[i]=<span class="number">-1</span>,cur[i]=head[i];</span><br><span class="line">		q.<span class="built_in">push</span>(s); d[s]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(d[v=ver[i]]==<span class="number">-1</span>&amp;&amp;val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,v,r;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==d[u]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i]));</span><br><span class="line">				<span class="keyword">if</span>(!r) <span class="keyword">continue</span>;</span><br><span class="line">				res-=r; val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">				<span class="keyword">if</span>(!res) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">bfs</span>();<span class="built_in">dfs</span>(s,inf));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,E[<span class="number">7</span>][<span class="number">7</span>],sum[<span class="number">7</span>],pw[<span class="number">7</span>],fa[<span class="number">7</span>],id[<span class="number">100</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,m) E[i][fa[i]]--,E[fa[i]][i]--;</span><br><span class="line">	s=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> k=m;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m)</span><br><span class="line">		<span class="built_in">ff</span>(j,i,m)</span><br><span class="line">			<span class="keyword">if</span>(E[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				++k;</span><br><span class="line">				id[k][<span class="number">0</span>]=i,id[k][<span class="number">1</span>]=j;</span><br><span class="line">				<span class="built_in">add</span>(s,k,E[i][j]);</span><br><span class="line">				<span class="built_in">add</span>(k,i+<span class="number">1</span>,inf);</span><br><span class="line">				<span class="built_in">add</span>(k,j+<span class="number">1</span>,inf);</span><br><span class="line">			&#125;</span><br><span class="line">	t=k+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m) <span class="built_in">add</span>(i+<span class="number">1</span>,t,sum[i]<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">dinic</span>();</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,pw[i],pw[fa[i]]);</span><br><span class="line">	<span class="built_in">fo</span>(u,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>((v=ver[i])!=t)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> j=(u<span class="number">-1</span>)^id[v][<span class="number">0</span>]^id[v][<span class="number">1</span>];</span><br><span class="line">				<span class="built_in">fo</span>(tim,<span class="number">1</span>,val[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,pw[u<span class="number">-1</span>]+now,pw[j]),now++;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">6</span>],g[<span class="number">1</span>&lt;&lt;<span class="number">6</span>];</span><br><span class="line">	<span class="built_in">cle</span>(f); <span class="built_in">cle</span>(g);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m) g[<span class="number">1</span>&lt;&lt;i]=sum[i]<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m)</span><br><span class="line">		<span class="built_in">ff</span>(j,i,m)</span><br><span class="line">			f[<span class="number">1</span>&lt;&lt;i]+=E[i][j],f[<span class="number">1</span>&lt;&lt;j]+=E[i][j],</span><br><span class="line">			f[(<span class="number">1</span>&lt;&lt;i)|(<span class="number">1</span>&lt;&lt;j)]-=E[i][j];</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		f[<span class="number">1</span>&lt;&lt;i]--,f[<span class="number">1</span>&lt;&lt;fa[i]]--,</span><br><span class="line">		f[(<span class="number">1</span>&lt;&lt;i)|(<span class="number">1</span>&lt;&lt;fa[i])]++;</span><br><span class="line">	<span class="built_in">ff</span>(s,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">lowbit</span>(s)^s)</span><br><span class="line">		&#123;</span><br><span class="line">			f[s]+=f[<span class="built_in">lowbit</span>(s)]+f[s^<span class="built_in">lowbit</span>(s)];</span><br><span class="line">			g[s]+=g[<span class="built_in">lowbit</span>(s)]+g[s^<span class="built_in">lowbit</span>(s)];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f[s]&lt;g[s]) <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x=i;</span><br><span class="line">			<span class="built_in">ff</span>(j,<span class="number">1</span>,m) x=fa[x];</span><br><span class="line">			<span class="keyword">if</span>(x) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">check</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(u!=i&amp;&amp;E[u][i])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[u]=i;</span><br><span class="line">			<span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">			fa[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="type">char</span> s1[<span class="number">10</span>],s2[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> u,v;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s1,s2);</span><br><span class="line">		u=<span class="built_in">strlen</span>(s1)<span class="number">-1</span>; v=<span class="built_in">strlen</span>(s2)<span class="number">-1</span>;</span><br><span class="line">		E[u][v]++;</span><br><span class="line">		<span class="keyword">if</span>(u^v) E[v][u]++;</span><br><span class="line">	&#125;</span><br><span class="line">	m=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i*=<span class="number">10</span>,m++) sum[m]=<span class="built_in">min</span>(i*<span class="number">10</span>,n+<span class="number">1</span>)-i,pw[m]=i;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>Hall定理</tag>
        <tag>prufer数列</tag>
      </tags>
  </entry>
  <entry>
    <title>prufer数列</title>
    <url>/2020/07/02/prufer%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<p>prufer数列的一些基础。</p>
<span id="more"></span>

<p>prufer数列是一棵无根树所生成的数列，对于一棵有 $n$ 个点的树，它的prufer数列长度为 $n-2$。</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="树-gt-prufer数列"><a href="#树-gt-prufer数列" class="headerlink" title="树-&gt;prufer数列"></a>树-&gt;prufer数列</h3><p>我们定义一棵无根树中度数为 $1$ 的点是叶子。</p>
<p>将以下操作重复 $n-2$ 遍：</p>
<p>将树中编号最小的叶子拎出来，在数列末尾写上与这个叶子相连的点，然后删除这个叶子。</p>
<h3 id="prufer数列-gt-树"><a href="#prufer数列-gt-树" class="headerlink" title="prufer数列-&gt;树"></a>prufer数列-&gt;树</h3><p>定义集合 $A=\{1,2,\cdots,n\}$，将以下操作重复 $n-2$ 遍：</p>
<p>找到当前的 $A$ 中最小的不在当前数列的点 $x$，与数列开头的第一个点 $y$ 连边，在 $A$ 中删除 $x$，在数列中删除 $y$。</p>
<p>最后 $A$ 集合剩下的两个点连一条边。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li><p>prufer数列与树一一对应。</p>
</li>
<li><p>$n$ 个点的完全无向图的生成树个数是 $n^{n-2}$。（Caylay公式）</p>
</li>
<li><p>prufer数列中，某个点的出现次数+1=在树中该点的度数。证明显然。</p>
</li>
<li><p>对于每个点给定度数 $deg_u$，生成树个数为 $\frac{(n-2)!}{\prod(deg_u-1)!}$。</p>
<p>证明：由性质3，在长度为 $n-2$ 的prufer数列中，每个点 $u$ 的出现次数为 $deg_u-1$.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>prufer数列</tag>
      </tags>
  </entry>
  <entry>
    <title>Fox And Travelling[CF512D]</title>
    <url>/2020/07/01/Fox-And-Travelling-CF512D/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/512/problem/D">CF</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ul>
<li>给定一张 $n$ 个点 $m$ 条边的无向图。</li>
<li>一个点只有当<strong>与它直接相连的点中最多只有一个点未被遍历过时</strong>才可被遍历。</li>
<li>询问对于每个$k\in [0,n]$，遍历 $k$ 个点的方案数。</li>
<li>$n\leq 100$，对 $10^9+9$ 取模。</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先来看看什么点是不能够被遍历的。</p>
<p>显然环中的点是不行的。两个环上点之间的路径上的点也是不行的。</p>
<p>可以发现，我们把整个图进行拓扑排序，有拓扑序的点就是能遍历的点。</p>
<p>那么把这些不能选的点去掉以后，剩下的是一堆树结构。这些树有两种情况：</p>
<ol>
<li>有根树，即根节点的父亲是不能被遍历的。</li>
<li>无根树，即可以乱选的。</li>
</ol>
<p>对于有根树我们直接进行树形背包DP，合并的时候乘一个组合数。</p>
<p>对于无根树，我们考虑沿用有根树的做法，对于每个点都来搞一次DP，然后将DP值相加。但发现会算重，对于一个选了 $k$ 个点的方案，那么在其他 $n-k$ 个点的DP中就会统计到它，因此最后将相加后的DP值除一个 $n-k$ 就好了。注意全选的时候是不用除的。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">105</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">20005</span>;</span><br><span class="line">ll fac[N],inv[N],ninv[N];</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Poly vector<span class="string">&lt;ll&gt;</span></span></span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>+(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>*(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>()<span class="number">-1</span>,m=B.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">	Poly C; C.<span class="built_in">resize</span>(n+m+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">0</span>,n+m)</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="built_in">min</span>(j,n))</span><br><span class="line">			<span class="keyword">if</span>(j-i&lt;=m)</span><br><span class="line">				C[j]=<span class="built_in">Add</span>(C[j],A[i]*B[j-i]%mod*(fac[j]*inv[i]%mod*inv[j-i]%mod)%mod);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>); <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">	ninv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) ninv[i]=(mod-mod/i)*ninv[mod%i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">Poly ans,f[N],s;</span><br><span class="line"><span class="type">int</span> ver[M],ne[M],head[M],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="type">bool</span> flag[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	deg[x]++; deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(deg[i]&lt;=<span class="number">1</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); flag[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(!flag[v=ver[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				deg[v]--;</span><br><span class="line">				<span class="keyword">if</span>(deg[v]&lt;=<span class="number">1</span>) q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>; f[u].<span class="built_in">clear</span>(); f[u].<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">			<span class="built_in">dfs</span>(v,u),f[u]=f[u]*f[v];</span><br><span class="line">	f[u].<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">	f[u][f[u].<span class="built_in">size</span>()<span class="number">-1</span>]=f[u][f[u].<span class="built_in">size</span>()<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vec.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i]) <span class="keyword">if</span>((v=ver[i])!=pre) <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">init</span>(n);</span><br><span class="line">	<span class="built_in">topo</span>();</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	ans.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=ver[i&lt;&lt;<span class="number">1</span>],y=ver[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!flag[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="keyword">if</span>(flag[x]&amp;&amp;!flag[y])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(x,y);</span><br><span class="line">			ans=ans*f[x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(flag[i]&amp;&amp;!vis[i])</span><br><span class="line">	&#123;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">dfs2</span>(i,<span class="number">0</span>);</span><br><span class="line">		s.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u:vec)<span class="built_in">dfs</span>(u,<span class="number">0</span>),s=s+f[u];</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,vec.<span class="built_in">size</span>()) s[i]=s[i]*ninv[vec.<span class="built_in">size</span>()-i]%mod;</span><br><span class="line">		ans=ans*s;</span><br><span class="line">	&#125;</span><br><span class="line">	ans.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序[NOI2018]</title>
    <url>/2020/06/30/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-NOI2018/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://loj.ac/problem/2719">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然我们需要分析一下达到交换次数下界的排列的充要条件。</p>
<p>如果有三个数 $a_i,a_j,a_k (i &lt; j &lt; k)$ 满足 $a_i&gt;a_j&gt;a_k$，那么这个排列一定不合法。因为 $a_j$ 至少要向右和向左都交换一次，那么这两次交换对这个 $a_j$ 是毫无意义的。</p>
<p>那么剩下的情况只有最长下降子序列长度不超过 $2$ 的情况。可以发现，这样的情况一定合法。</p>
<p>如果不考虑字典序的限制，只统计有多少个排列满足最长下降子序列长度不超过 $2$。</p>
<p>尝试DP，设 $f_{i,j}$ 表示考虑到第 $i$ 位，前缀最大值为 $j$ 的方案数。看看 $f_{i,j}$ 能转移到哪里去。显然 $f_{i+1,k}(k&gt;j)$ 是一定可以的，且系数是 $1$。那么能否转移到 $f_{i+1,j}$ 呢？可以发现，如果你第 $i+1$ 位填的不是前 $i$ 位最小的没有出现过的正整数 $t$ 的话，后面一定会填上这个 $t$，此时 $j,a_{i+1},t$ 就会形成一个长度为 $3$ 的下降子序列了。因此 $f_{i,j}$ 给 $f_{i+1,j}$ 的贡献的系数为 $1$，且必须满足 $i+1\leq j$（不然就没数可填了）。</p>
<p>考虑这个 $f_{i,j}$ 的组合意义，显然是从 $(0,0)$ 开始走，每次可以往右边且纵坐标不比当前点小的格点走，不经过 $y=x-1$，走到 $(n,n)$ 的方案数。</p>
<p>用折线法容斥一下，把不经过直线的限制去掉。剩下的是一个组合数。</p>
<p>现在考虑字典序的限制。假设我们从第 $i$ 位开始打破字典序的限制，那么就相当于前面的情况，只不过不是从 $(0,0)$ 开始走罢了。</p>
<p>预处理组合数，枚举从哪一位开始打破限制就好了。注意及时break。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1200010</span>;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>); <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p[N],mx,pos;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">C</span>(<span class="number">2</span>*n-x-y,n-y)-<span class="built_in">C</span>(<span class="number">2</span>*n-x-y,n-y<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1200000</span>);</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>(),vis[i]=<span class="number">0</span>;</span><br><span class="line">		mx=<span class="number">0</span>; pos=<span class="number">1</span>; ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(;vis[pos];pos++);</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,<span class="built_in">calc</span>(i<span class="number">-1</span>,<span class="built_in">max</span>(mx,p[i])+<span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span>(mx&gt;p[i]&amp;&amp;p[i]&gt;pos) <span class="keyword">break</span>;</span><br><span class="line">			mx=<span class="built_in">max</span>(mx,p[i]); vis[p[i]]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NOI</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>思维题</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>yja[jzoj5606]</title>
    <url>/2020/06/30/yja-jzoj5606/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在平面上找 $n$ 个点, 要求这 $n$ 个点离原点的距离分别为 $r_1, r_2, \cdots, r_n$。 最大化这 $n$ 个点构成的凸包面积。凸包上的点的顺序任意。</p>
<p>$n\leq 8,r_i\leq 1000$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>拉格朗日乘数法模板题。</del></p>
<p>由于 $n$ 比较小，我们可以暴力枚举这 $n$ 个点顺时针的顺序，一共有 $(n-1)!$ 种。$n$ 个点分别和原点连线，设这 $n$ 条直线的夹角为 $\alpha <em>i$，显然 $a_i$ 不会超过 $\pi$ 。凸包面积为 $\frac{1}{2}\sum</em>{i=1}^nr_ir_{i\% n+1}\sin\alpha_i$。</p>
<p>好看一点，设 $R_i=r_ir_{i \% n+1}$，我们需要最大化 $\sum_{i=1}^nR_i\sin \alpha _i$，满足条件 $\sum \alpha_i=2\pi$。</p>
<p>由拉格朗日乘数法的套路，设函数 $F(\alpha_1,\alpha_2,\cdots,\alpha_n,\lambda)=\sum_{i=1}^nR_i\sin \alpha <em>i+\lambda(2\pi-\sum</em>{i=1}^n\alpha_i)$。</p>
<p>求偏导数可得：</p>
<p>$$\frac{\partial F}{\partial \alpha_i}=R_i\cos {\alpha_i}-\lambda=0 \\ \frac{\partial F}{\partial \lambda}=2\pi-\sum_{i=1}^na_i=0$$</p>
<p>也就是：$\cos \alpha_i=\frac{\lambda}{R_i}$。</p>
<p>当 $0\leq \alpha_i\leq \pi$ 时，$\cos \alpha_i$ 单调递减。</p>
<p>满足单调性，那么我们就可以二分这个 $\lambda$，然后就可以算出此时的 $a_i$ 了。</p>
<p>时间复杂度 $O(n!\log Ans)$。</p>
<p><strong>注意二分的范围</strong></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line">db ans;</span><br><span class="line"><span class="type">int</span> n,l[<span class="number">9</span>],pos[<span class="number">9</span>],bo[<span class="number">9</span>];</span><br><span class="line">db R[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	db mi=<span class="number">1e9</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) mi=<span class="built_in">min</span>(mi,R[i]=l[pos[i]]*l[pos[i%n+<span class="number">1</span>]]);</span><br><span class="line">	db l=-mi,r=mi,mid,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(tim,<span class="number">0</span>,<span class="number">60</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2.</span>;</span><br><span class="line">		sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=<span class="built_in">acos</span>(mid/R[i]);</span><br><span class="line">		<span class="keyword">if</span>(sum&lt;pi*<span class="number">2</span>) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=<span class="built_in">sin</span>(<span class="built_in">acos</span>(mid/R[i]))*R[i];</span><br><span class="line">	ans=<span class="built_in">max</span>(ans,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> <span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="keyword">if</span>(!bo[i])</span><br><span class="line">	&#123;</span><br><span class="line">		bo[i]=<span class="number">1</span>; pos[k]=i; <span class="built_in">dfs</span>(k+<span class="number">1</span>);</span><br><span class="line">		pos[k]=<span class="number">0</span>; bo[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(yja);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l[i]);</span><br><span class="line">	bo[<span class="number">1</span>]=<span class="number">1</span>; pos[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,ans/<span class="number">2.</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>拉格朗日乘数法</tag>
      </tags>
  </entry>
  <entry>
    <title>Sanrd[uoj188]</title>
    <url>/2020/06/29/Sanrd-uoj188/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://uoj.ac/problem/188">uoj</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求 $[l,r]$ 内整数的次大质因子（重复算多次）的和。质数的次大质因子为 $0$。</p>
<p>$l+r,r\leq 10^{11}$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看着数据范围显然要往Min25的方向去想。</p>
<p>但是这个东西并不是积性函数。我们考虑Min25的第二部分，即求 $S(n,j)$ 的地方。</p>
<p>普通的Min25筛做法是分别考虑质数与合数的贡献，这里质数的贡献是 $0$。那么只需考虑合数部分。</p>
<p>还是像Min25筛的套路，枚举最小的质因子 $P_k$ 以及他的幂次 $q$，如果此时这个质因子不是次大的质因子，那么贡献就是 $S(\frac{n}{P_k^q},k+1)$，否则就是 $P_k$ 乘上 $[1,\frac{n}{P_k^q}]$ 中的质数个数。</p>
<p>那么只需要预处理出所有形如 $\frac{n}{i}$ 的质数个数就好了。</p>
<p>这个用Min25的前半部分即可。</p>
<p>时间复杂度 $O(\frac{n^{\frac{3}{4}}}{\log n})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e6</span>;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">ll pri[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) pri[++cnt]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;<span class="number">1ll</span>*pri[j]*i&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll now_n,f[N],w[N];</span><br><span class="line"><span class="type">int</span> id1[N],id2[N];</span><br><span class="line"><span class="type">int</span> Sqr,m;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll n,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pri[j]&gt;n||n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll sum=<span class="number">0</span>,tmp,x; <span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=j;<span class="number">1ll</span>*pri[i]*pri[i]&lt;=n&amp;&amp;i&lt;=cnt;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp=pri[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;tmp*pri[i]&lt;=n;tmp*=pri[i],k++)</span><br><span class="line">		&#123;</span><br><span class="line">			x=n/tmp;</span><br><span class="line">			y=(x&lt;=Sqr)?id1[x]:id2[now_n/x];</span><br><span class="line">			sum+=<span class="built_in">S</span>(x,i+<span class="number">1</span>)+<span class="number">1ll</span>*pri[i]*(f[y]-(i<span class="number">-1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Sqr=<span class="built_in">sqrt</span>(n); m=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j=n/(n/i);</span><br><span class="line">		w[++m]=n/i;</span><br><span class="line">		w[m]&lt;=Sqr?id1[w[m]]=m:id2[n/w[m]]=m;</span><br><span class="line">		f[m]=w[m]<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll x; <span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt&amp;&amp;<span class="number">1ll</span>*pri[i]*pri[i]&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;<span class="number">1ll</span>*pri[i]*pri[i]&lt;=w[j];j++)</span><br><span class="line">		&#123;</span><br><span class="line">			x=w[j]/pri[i];</span><br><span class="line">			y=(x&lt;=Sqr)?id1[x]:id2[n/x];</span><br><span class="line">			f[j]-=f[y]-(i<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	now_n=n;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">S</span>(n,<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll l,r,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">	<span class="built_in">init</span>(<span class="built_in">sqrt</span>(r));</span><br><span class="line">	cout&lt;&lt;<span class="built_in">solve</span>(r)-<span class="built_in">solve</span>(l<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uoj</category>
      </categories>
      <tags>
        <tag>Min25筛</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforce Global Round 8[CF1368]</title>
    <url>/2020/06/28/Codeforce-Global-Round-8-CF1368/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1368/problems">Codeforce Global Round 8</a></p>
<span id="more"></span>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>对于每一个二进制位，无论如何操作，1的个数都是不会变化的。</p>
<p>假设你现在进行一次操作，原本是 $x,y(x\leq y)$，现在变成了 $x-z,y+z(z\leq 0)$，那么贡献的差就是 $(x-z)^2+(y+z)^2-(x^2+y^2)=2(y-x)z+z^2\geq 0$。</p>
<p>也就是最大值越大越好。那么从大到小，对于每一位贪心即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n,x,cnt[<span class="number">21</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;x) cnt[j]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">if</span>(cnt[j]) x|=(<span class="number">1</span>&lt;&lt;j),cnt[j]--;</span><br><span class="line">		ans+=<span class="number">1ll</span>*x*x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>占坑。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>一道不错的交互题。</p>
<p>我们用 $1$ 表示环上的这个灯是亮着的。</p>
<p>我们先来看看如何算出 $R(n)$。首先，假设环上已经有了 $m$ 个点，你现在考虑加 $x$ 个点进去。如果要产生贡献的话，这 $m+x$ 个点所连成的最大连续的段的长度最多是 $x-1$。也就是说，这些连续段最多有 $\left \lceil \frac{m+x}{x-1} \right \rceil$ 段，也就是 $0$ 的个数最少要有 $\left \lceil \frac{m+x}{x-1} \right \rceil$ 个。那么列出不等式：$m+x+\left \lceil \frac{m+x}{x-1} \right \rceil\leq n$。</p>
<p>解得 $m\leq n-\left \lceil \frac{n}{x} \right \rceil-x$。</p>
<p>由于 $m$ 此时还能产生贡献，那么 $R(n)$ 就等于 $m$ 的最大值加 $1$。</p>
<p>这时候我们算出了一个 $x$，表示每次操作后不能使得有一个段的长度大于等于 $x$。那么每隔 $x$ 个就设置一个点，表示无论如何都不能放 $1$ 在这上面。</p>
<p>然后一直选不在这些点且灯是关着的 $x$ 个点，直到大于等于 $R(n)$ 时结束就好了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> a[<span class="number">1010</span>],flag[<span class="number">1010</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:v) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fflush</span>(stdout);</span><br><span class="line">	<span class="type">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>,k=<span class="number">0</span>,tmp;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp=n-(n+i<span class="number">-1</span>)/i-i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mx&lt;tmp) mx=tmp,k=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=k) flag[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>,tim=k;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i]) sum++;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;=mx)&#123; <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!a[i]&amp;&amp;!flag[i])</span><br><span class="line">		&#123;</span><br><span class="line">			tim--;</span><br><span class="line">			vec.<span class="built_in">pb</span>(i); a[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!tim) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">ask</span>(vec);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u]=<span class="number">0</span>;</span><br><span class="line">			u++;</span><br><span class="line">			<span class="keyword">if</span>(u&gt;n) u=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>交互题</tag>
      </tags>
  </entry>
  <entry>
    <title>GDOI2020退役记</title>
    <url>/2020/06/21/GDOI2020%E9%80%80%E5%BD%B9%E8%AE%B0/</url>
    <content><![CDATA[<p>退役失败！</p>
<span id="more"></span>

<h3 id="Day-约-150"><a href="#Day-约-150" class="headerlink" title="Day 约-150"></a>Day 约-150</h3><p>由于众所周知的原因，我开始在家里学习OI。这期间听了中大学生的课，以及做了他们出的模拟赛，Zayin的题质量好评。</p>
<h3 id="Day-约-40"><a href="#Day-约-40" class="headerlink" title="Day 约-40"></a>Day 约-40</h3><p>开学的第二天停课了。</p>
<p>一开始在loj等大量刷题。</p>
<p>然后过了几天后开始在jz的gmoj上做题。</p>
<p>学到了很多新姿势和算法，越来越熟练了。</p>
<p>考前模拟赛ITcarrot爆切大数据结构，惨遭爆锤；初二的lsd，zzh爆切多项式，惨遭爆锤 $\times 2$。</p>
<h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>下午3点出发，来到了广州大学城<del>大学城是真的大</del>。</p>
<p>住的房间极大无比，然后他们又把我推去一个人一间房<del>第二天可以换一张床睡</del>。在房间里复习到5点多决定去吃完饭，结果最后叫了M记的外卖。</p>
<p>没带牌，于是开始颓generals和皇室。</p>
<p>11点05就睡下了。</p>
<p>一个人一间房真的爽。</p>
<h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>早上7点起床看到了好朋友的祝福，温暖，感动，幸福，也更加放松更加自信了，觉得或许就是最后一次比赛了，加油就是了。</p>
<p>通过打的的方式去到了广大附，结果老师他们去了正门。正当我们想走过去时，侧门的所有人同时把我们喊回来了，说只有侧门能进。</p>
<p>结果他们竟然也从正门溜了进去（</p>
<p>8点15就进去了考场，结果发现没人试机，发现有Sublime可用，压缩包解压密码乱码差评。</p>
<p>先看T1，似乎是个线段树二分，T3不太可做，T2裸出计数题，那应该不会太简单吧，先放着，去写T1。</p>
<p>分析5min后发现是线段树二分无疑，9点左右开始写，决定先写暴力。</p>
<p>但是总感觉暴力极其难写，加上一个智障错误，写了快半个小时。</p>
<p>然后开始码线段树上二分，由于细节极多无比写了快大半个小时。结果发现大样例过不了，且只有第一个数是错的。</p>
<p>想了想细节，似乎发现自己看错题了，然后魔改代码发现一直过不去。这时自己想放弃，但想到这么些年的努力不应该就这样白费，提醒自己必须做出这道题，过了几分钟后就清醒了。</p>
<p>再回去留神题意发现自己没读错。然而这时候已经过了10点半了。</p>
<p>于是又改了改了线段树，调了好几个错之后大样例对了，这时已经11点了，赶紧造了数据对拍，没有出错，在11点15分时拍上了。</p>
<p>赶紧开第二题，然后发现把多项式拆开，然后用第二类斯特林数将幂转换成下降幂，然后再用组合数的一些性质搞一下，最后二项式定理就好了。</p>
<p><del>怎么可以出这么裸的题啊</del></p>
<p>但是我的神奇做法要用到 $x$ 的逆元，然而 $x$ 有时候是没有逆元的，没管那么多了。直接开码。</p>
<p>期间发现自己的式子推错了一两个地方，都是些小问题。</p>
<p>最后在12点多时做对了这个神奇做法。然后我神奇的发现是可以不用 $x$ 的逆元的，然后改了一下，在12点半的程序就过了小样例。然后发现自己智障的在快速幂时将幂次模了个 $mod-1$，改了之后大样例也过了。</p>
<p>这时候已经12点45了，决定跑去再看一下T1，直接弃疗T3。。。</p>
<p>出来以后发现大众分200+，完了看来是要垫底了。</p>
<p>最后T1还被卡了几个点，变成了90分。</p>
<p>中午去了某个商场吃饭，然后踩单车回去，在酒店颓了一个下午。</p>
<p>晚饭用华莱士解决。</p>
<p>晚上和好朋友聊到了12点多才睡。</p>
<h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>早上起来发现有点困，于是洗了个脸后精神了一点。</p>
<p>开始后先看T1，应该是一道卡常+状压Dp题，先放着。然后看一眼T2，发现秒了，不就是dsu on tree+Trie嘛，<del>两个log，能过能过</del>。再看一眼T3，似乎是矩阵树+莫反的嵌套题。</p>
<p>于是决定先开T2。20min码完发现自己直接过了大样例？？然后开T3，分析一波复杂度发现过不去，分析一波发现不会（我怎么就没想到用多项式，我怎么就没用链式前向星），不管了，开始码了，30min后又直接过了所有的样例，我有点慌，于是把两题对拍都打了，发现都过了。</p>
<p>这时候才11点，发现还有两个小时做T1。</p>
<p>显然状压Dp可直接获得六七十分，然后发现某个东西可以预处理一下，就变成 $O(m2^m)$ 了。</p>
<p>但是我的做法空间是 $O(m2^m)$ 的，过不去，于是发现可以减少一位，那么 $23\times 2^{22}$ 个int才300多M，于是在12点多的时候搞定了。</p>
<p>发现T1有点卡，然后优化不了了，也没想到其他做法。</p>
<p>于是对着电脑十分无聊得过了大半个小时，发现电脑上没有扫雷。</p>
<p>中午何老师请吃必胜客，中途遇到SM的好友拍了张照。</p>
<p>10个人点了6个pizza。</p>
<p>感觉要退役了，于是准备去学文化课。</p>
<p>回到机房上了六楼想看电影，结果听到了轩攸分享SM的日食十分快乐，然后就忘记看了。</p>
<h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h3><p>多停了一天的课，在机房又休息了一天。</p>
<h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h3><p>回去上文化课，上着上着语文课手机突然在震，发现分数出了，$90+100+0+80+100+70$，被卡掉了 $60$ 分，然后还是排到了14名。十分激动，在语文课上哭了出来。</p>
<p>上完课立刻把消息告诉了给家人和好朋友。</p>
<p>于是就退役失败啦。</p>
<p>中午由于某种原因十分感动，又大哭了一场。</p>
<h3 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h3><p><del>成功达成成就：在本学期内只上了两天的课。</del></p>
<p>又回到了熟悉的机房。</p>
<p>因为昨天中午的这个某种原因，写了一篇朋友圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GDOI2020退役记：</span><br><span class="line"></span><br><span class="line">退役失败。</span><br><span class="line"></span><br><span class="line">记得那是还很小的六年级，第一次听说了OI。</span><br><span class="line">那是还很懵懂的初一，第一次参加NOIP，刚开始还觉得自己没能考进复赛大哭一场，结果复赛刚好压线搞了个普及一等奖。也是第一次体验了省选。</span><br><span class="line">那是还很水的初三，第一次参加了NOIP的提高组，结果顺利水到了一等十分开心。</span><br><span class="line">不知怎的就考上了华附，与很多好朋友分开了。</span><br><span class="line"></span><br><span class="line">由于初三一年几乎没学过，很多知识也已经忘记。以及接下来若干次比赛的失利，让我觉得自己或许真的不适合走这条路。看着学长和同学的退役，脑海里也不止一次想过放弃的念头。</span><br><span class="line">或许是坚韧，是顽强，是那想要证明自己的决心，让我一直坚持着。</span><br><span class="line"></span><br><span class="line">是时候了。</span><br><span class="line"></span><br><span class="line">需要感谢我的亲人。或许你们不太了解这一条路，但自始至终都一直支持我鼓励我，想尽办法让我放松心情。你们永远都是我最亲爱，最重要的人。</span><br><span class="line"></span><br><span class="line">需要感谢我的教练，老师。谢谢李老师，刘老师，广爷，吴老师作为我的班主任给予的支持；是黄靖老师，带我走进那属于OI的浩瀚星空；是张思胜老师，像朋友般的关心我，为我加油；是何，梁，黄老师两年来的辛勤付出与深切教诲，让我离梦想更近一步。你们是一条鞭子，让我前行，也是一缕春风，温暖心脾。</span><br><span class="line"></span><br><span class="line">还有我的好友们。你们给我的那些n年来一起走过的时光，带给我的快乐，支持，我想我没有忘记，不敢忘记，也不会忘记，这像是那隐形的翅膀，助我飞翔：万分感谢轩攸带给我的运气，和一直以来的关心；Snakes学长，祝你的高考能像中考那般辉煌；同级的ITcarrot,aspe,dddmh,henry_he,Malzahar,HelloElwin,MCPlayer542,Kevin327,Eabo,beng,zqq和外校的朋友，也祝福你们的高三过得幸福，充实；也祝hsfzLZH1,KesdiaelKen,JC,qfr,白井黑子,BilyHurington,zengxy,Hermione_Granger,gzchenben等，能在后几年的省选中发挥出色，成功女装（雾</span><br><span class="line"></span><br><span class="line">NOI2020加油!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>tree[jzoj6511]</title>
    <url>/2020/06/14/tree-jzoj6511/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/tree-jzoj6511/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然直接算是非常不好算的。因为有 $3$ 个数，如果能减少到枚举两个数或者一个就更好了。</p>
<p>对于一条有向的路径 $(u,v)$，我们定义 $W_{u,v}$ 为该路径权值模 $P$ 后是否不为 $0$。</p>
<p>那么一共有 $2^3=8$ 种情况，我们需要算的只有两种。</p>
<p>无论如何，先列个表看看再说：</p>
<table>
<thead>
<tr>
<th align="center">$W_{u,v}$</th>
<th align="center">$W_{u,t}$</th>
<th align="center">$W_{t,v}$</th>
<th align="center">是否计算</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$0$</td>
<td align="center">$0$</td>
<td align="center">$0$</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">$0$</td>
<td align="center">$0$</td>
<td align="center">$1$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$0$</td>
<td align="center">$1$</td>
<td align="center">$0$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$0$</td>
<td align="center">$1$</td>
<td align="center">$1$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$1$</td>
<td align="center">$0$</td>
<td align="center">$0$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$1$</td>
<td align="center">$0$</td>
<td align="center">$1$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$1$</td>
<td align="center">$1$</td>
<td align="center">$0$</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">$1$</td>
<td align="center">$1$</td>
<td align="center">$1$</td>
<td align="center">Yes</td>
</tr>
</tbody></table>
<p>考虑容斥，看看不计算的能不能算，最后用 $n^3$ 减去就好了。</p>
<p>我们发现，不需要计算的情况都包含两组 $W$ ，满足这两种 $W$ 的值是不相等的。</p>
<p>那么可以枚举这两组 $W$ 是哪两组，剩下那组不管它，然后把方案数加起来后，除以 $2$ 就是答案了。</p>
<p>分三类讨论：</p>
<ol>
<li>$W_{u,v}\not = W_{u,t}$</li>
<li>$W_{u,v}\not = W_{t,v}$</li>
<li>$W_{u,t}\not = W_{t,v}$</li>
</ol>
<p>这样来看，我们只需要对于每个点 $u$，都算出 $W_{u,i}=0$ 和 $W_{i,u}=0$ 有多少种，这样就可以算出答案了。</p>
<p>至此，我们把枚举三个点变成了枚举两个点的路径问题。</p>
<p>跟树上所有的路径相关的，考虑点分治。</p>
<p>对于点分治过程中的一个分治结构，我们考虑用容斥的方法减去子树自己对自己的贡献。</p>
<p>那么只需要考虑一条经过分治中心的一条链的权值怎么算就好了。</p>
<p>先来看 $W_{i,u}$ 如何计算。</p>
<p><img src="/tree-jzoj6511/tree.png" alt="tree"></p>
<p>如图，$w_i,l_i$ 表示为该链（有方向）的权值以及长度。</p>
<p>那么将这两条链合起来的权值就是：$w_2\times K^{l_1}+w_1$</p>
<p>要使得这个权值为 $0$，则有：$w_2=\frac{-w_1}{K^{l_1}}$。</p>
<p>$W_{u,i}$ 同理。</p>
<p>那么先来一次dfs，用个 map 或者哈希记录 $\frac{-w_1}{K^{l_1}}$ 的出现次数，然后再来一次dfs统计即可。</p>
<p>时间复杂度 $O(n\log n)$ 或 $O(n\log ^2n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line">ll base,mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> siz[N],mx[N],rt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll pw[N],iw[N],w[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; mx[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre&amp;&amp;!vis[v])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">getroot</span>(v,u,S);</span><br><span class="line">		siz[u]+=siz[v];</span><br><span class="line">		mx[u]=<span class="built_in">max</span>(mx[u],siz[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[u],S-siz[u]);</span><br><span class="line">	<span class="keyword">if</span>(mx[rt]&gt;mx[u]) rt=u;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;ll,<span class="type">int</span>&gt; g[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> now_siz;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> len,ll w1,ll w2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	g[<span class="number">0</span>][(mod-w1)*iw[len]%mod]++; g[<span class="number">1</span>][w2]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!vis[v]&amp;&amp;(v!=pre))</span><br><span class="line">		<span class="built_in">dfs</span>(v,u,len+<span class="number">1</span>,(w1+w[v])*base%mod,(w2+w[v]*pw[len+<span class="number">1</span>])%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> opt,<span class="type">int</span> len,ll w1,ll w2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp;</span><br><span class="line">	tmp=(mod-w2)*iw[len]%mod;</span><br><span class="line">	<span class="keyword">if</span>(g[<span class="number">1</span>].<span class="built_in">count</span>(tmp)) f[u][<span class="number">0</span>][<span class="number">0</span>]+=opt*g[<span class="number">1</span>][tmp];</span><br><span class="line">	tmp=w1;</span><br><span class="line">	<span class="keyword">if</span>(g[<span class="number">0</span>].<span class="built_in">count</span>(tmp)) f[u][<span class="number">1</span>][<span class="number">0</span>]+=opt*g[<span class="number">0</span>][tmp];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!vis[v]&amp;&amp;(v!=pre))</span><br><span class="line">		<span class="built_in">dfs2</span>(v,u,opt,len+<span class="number">1</span>,(w1+w[v]*pw[len+<span class="number">1</span>])%mod,(w2+w[v])*base%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	g[<span class="number">0</span>].<span class="built_in">clear</span>(); g[<span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(u,pre,<span class="number">1</span>,w[u]*base%mod,w[u]*base%mod);</span><br><span class="line">		<span class="built_in">dfs2</span>(u,pre,opt,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(u,pre,<span class="number">2</span>,(w[pre]*base%mod+w[u])%mod*base%mod,(w[u]*base%mod+w[pre])%mod*base%mod);</span><br><span class="line">		<span class="built_in">dfs2</span>(u,pre,opt,<span class="number">1</span>,w[u]*base%mod,w[u]*base%mod);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	now_siz=S; <span class="built_in">calc</span>(u,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!vis[v])</span><br><span class="line">	&#123;</span><br><span class="line">		now_siz=(siz[u]&lt;siz[v])?S-siz[u]:siz[v];</span><br><span class="line">		<span class="built_in">calc</span>(v,u,<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!vis[v])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> Si=(siz[u]&lt;siz[v])?S-siz[u]:siz[v];</span><br><span class="line">		rt=<span class="number">0</span>; <span class="built_in">getroot</span>(v,u,Si); <span class="built_in">divide</span>(rt,Si);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1ll</span>*f[u][x][<span class="number">0</span>]*f[u][y][<span class="number">1</span>]+<span class="number">1ll</span>*f[u][x][<span class="number">1</span>]*f[u][y][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(tree);</span><br><span class="line">	n=<span class="built_in">read</span>(); base=<span class="built_in">read</span>(); mod=<span class="built_in">read</span>();</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>; iw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	pw[<span class="number">1</span>]=base; iw[<span class="number">1</span>]=<span class="built_in">Pow</span>(base,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) pw[i]=pw[i<span class="number">-1</span>]*pw[<span class="number">1</span>]%mod,iw[i]=iw[i<span class="number">-1</span>]*iw[<span class="number">1</span>]%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) w[i]=<span class="built_in">read</span>()%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	mx[<span class="number">0</span>]=<span class="number">1e9</span>; rt=<span class="number">0</span>; <span class="built_in">getroot</span>(<span class="number">1</span>,<span class="number">0</span>,n); <span class="built_in">divide</span>(rt,n);</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) f[i][j][<span class="number">1</span>]=n-f[i][j][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sum+=<span class="built_in">work</span>(i,<span class="number">1</span>,<span class="number">1</span>)+<span class="built_in">work</span>(i,<span class="number">0</span>,<span class="number">0</span>)+<span class="built_in">work</span>(i,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">1ll</span>*n*n*n-(sum/<span class="number">2</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>哈希</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>匹配字符串[loj547]</title>
    <url>/2020/06/12/%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2-loj547/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/547">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>这个idea我之前想过了。。。但只想到了52分</del></p>
<p>首先有一个很显然的DP，设 $f_{i}$ 表示长度为 $i$ 的字符串，且第 $i$ 位必须选 $0$ 的合法方案数，则有：</p>
<p>$$f_i=\sum_{j=1}^{\min\{i,m\}}f_{i-j}$$</p>
<p>对于 $m$ 的大小，我们进行分类讨论。</p>
<h4 id="m-leq-2500"><a href="#m-leq-2500" class="headerlink" title="$m\leq 2500$"></a>$m\leq 2500$</h4><p>上述的DP方程可以用常系数线性齐次递推，暴力多项式取模，时间复杂度为 $O(m^2\log n)$。</p>
<h4 id="otherwise"><a href="#otherwise" class="headerlink" title="otherwise"></a>otherwise</h4><p>我们考虑前缀和，设 $s_i=\sum_{j=1}^if_j$。</p>
<p>那么上面的式子就是：$s_i-s_{i-1}=s_{i-1}-s_{i-m-1}$。</p>
<p>即：$s_i=2s_{i-1}-s_{i-m-1}$。</p>
<p>这个相当于是在数轴上走，走到 $i+m+1$，就贡献 $-1$，走到 $i+1$，就贡献 $2$。</p>
<p>由于走 $i+m+1$ 的次数比较少，那么可以枚举这个次数，因此有：</p>
<p>$$s_n=\sum_{i=0}\binom{n-im}{i}2^{n-i(m+1)}(-1)^i$$</p>
<p>组合数用Lucas定理计算即可。</p>
<p>时间复杂度 $O(\frac{n}{m}\times \log _{65537}n)$</p>
<p><strong>注意 $m=1$ 的特判。</strong></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">65537</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> CM&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line">	ll f[N],g[N],h[N],b[N],c[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,k) <span class="built_in">fo</span>(j,<span class="number">0</span>,k) c[i+j]=<span class="built_in">Add</span>(c[i+j],a[i]*b[j]%mod);</span><br><span class="line">		<span class="built_in">fd</span>(i,k&lt;&lt;<span class="number">1</span>,k) <span class="built_in">fo</span>(j,<span class="number">0</span>,k) c[i+j-k]=<span class="built_in">Dec</span>(c[i+j-k],c[i]*g[j]%mod);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,k<span class="number">-1</span>) a[i]=c[i],c[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Ppow</span><span class="params">(ll *a,ll n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		a[<span class="number">0</span>]=<span class="number">1</span>; b[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,<span class="built_in">mul</span>(b,b,m)) <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="built_in">mul</span>(a,b,m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		h[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) h[i]=(h[i<span class="number">-1</span>]*<span class="number">2</span>)%mod;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> h[n];</span><br><span class="line">		g[m]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,m) g[i]=mod<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">Ppow</span>(f,n,m);</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) ans=<span class="built_in">Add</span>(ans,f[i]*h[i]%mod); </span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Lucas&#123;</span><br><span class="line">	ll fac[mod],inv[mod];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;mod) <span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">C</span>(n%mod,m%mod)*<span class="built_in">C</span>(n/mod,m/mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll tmp=<span class="built_in">Pow</span>(<span class="built_in">Pow</span>(<span class="number">2</span>,m+<span class="number">1</span>),mod<span class="number">-2</span>),now=<span class="built_in">Pow</span>(<span class="number">2</span>,n),ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n/(m+<span class="number">1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans-=<span class="built_in">C</span>(n-m*i,i)*now%mod;</span><br><span class="line">			<span class="keyword">else</span> ans+=<span class="built_in">C</span>(n-m*i,i)*now%mod;</span><br><span class="line">			now=now*tmp%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (ans%mod+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,mod<span class="number">-1</span>) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">		inv[mod<span class="number">-1</span>]=<span class="built_in">Pow</span>(fac[mod<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line">		<span class="built_in">fd</span>(i,mod<span class="number">-1</span>,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">work</span>(n+<span class="number">1</span>)-<span class="built_in">work</span>(n)+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(m&lt;=<span class="number">2500</span>)?CM::<span class="built_in">solve</span>():Lucas::<span class="built_in">solve</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>常系数线性齐次递推</tag>
        <tag>Lucas定理</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到塞莱斯特山[jzoj6506]</title>
    <url>/2020/06/12/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E5%A1%9E%E8%8E%B1%E6%96%AF%E7%89%B9%E5%B1%B1-jzoj6506/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E5%A1%9E%E8%8E%B1%E6%96%AF%E7%89%B9%E5%B1%B1-jzoj6506/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，因为是在一棵树上，我们不妨考虑的是树形DP。那么来看一棵子树应该如何设计状态。</p>
<p>子树 $u$ 中的点在排列上形成了若干个不相交的段。在DP的时候我们需要合并$u$ 的子树的结果，也就是将若干个段合成几个段。如果两个不同子树的段在这时合成了一段，那么这两个段的衔接处就会产生一个 $dep_u$ 的贡献。</p>
<p>因此，我们可以设计状态为 $f_{u,i}$ 表示考虑子树 $u$ 时，一共有 $i$ 个段，段与段之间有序的方案数。</p>
<p>那么考虑枚举 $u$ 的子树 $v$，然后将贡献合并到 $u$ 那里去。</p>
<p>枚举 $i,j,k$，有</p>
<p>$$f’<em>{u,k}=\sum</em>{i}\sum_{j}f_{u,i}\times f_{v,j}\times g_{i,j,k}\times dep_u^{i+j-k}$$</p>
<p>其中，$g_{i,j,k}$ 为将两种不同的段，第一种有 $i$ 个段，第二种有 $j$ 个，合并成 $k$ 个段的方案数（段与段之间有序）。</p>
<p>那么，枚举合并之后 $k$ 个段中，第一个段是怎么来的。分三种情况讨论，得到：</p>
<p>$$g_{i,j,k}=(2\times \sum_{l=1}g_{i-l,j-l,k-1})+\sum_{l=0}g_{i-l,j-l-1,k-1}+\sum_{l=0}g_{i-l-1,j-l,k-1}$$</p>
<p>发现这三个都是一个前缀和的形式，用前缀和优化一下即可达到 $O(n^3)$ 的预处理。</p>
<p>时间复杂度 $O(n^3)$。</p>
<p>注意树上背包的时候需要按照子树大小来搞，不然复杂度不对。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> dep[N],siz[N];</span><br><span class="line">ll f[N][N],h[N],s[N&lt;&lt;<span class="number">1</span>][N],pw[N][N];</span><br><span class="line"><span class="type">int</span> g[N][N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; f[u][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">	&#123;</span><br><span class="line">		dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u])</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,siz[v])</span><br><span class="line">				<span class="built_in">fo</span>(k,<span class="built_in">max</span>(i-j,<span class="number">1</span>),i+j)</span><br><span class="line">					h[k]=<span class="built_in">Add</span>(h[k],<span class="built_in">Mul</span>(f[u][i]*f[v][j]%mod,pw[dep[u]][i+j-k]*g[i][j][k]%mod));</span><br><span class="line">		siz[u]+=siz[v];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,siz[u]) f[u][i]=h[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) h[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(tree);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) adj[<span class="built_in">read</span>()].<span class="built_in">pb</span>(i);</span><br><span class="line">	g[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> m=n+<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n)</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,n-i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(i+j&gt;=k) g[i][j][k]=(s[i-j+m][k<span class="number">-1</span>]*<span class="number">2</span>%mod+(s[i-j+<span class="number">1</span>+m][k<span class="number">-1</span>]+s[i-j<span class="number">-1</span>+m][k<span class="number">-1</span>]))%mod;</span><br><span class="line">				s[i-j+m][k<span class="number">-1</span>]=<span class="built_in">Add</span>(s[i-j+m][k<span class="number">-1</span>],g[i][j][k<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		pw[k][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pw[k][i]=pw[k][i<span class="number">-1</span>]*k%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>圣痕[jzoj6496]</title>
    <url>/2020/06/11/%E5%9C%A3%E7%97%95-jzoj6496/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%9C%A3%E7%97%95-jzoj6496/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然是需要二分半径的。</p>
<p>那么二分完之后，如何判断两个直线的交点是否在圆内呢？</p>
<p>可以求出直线与圆的交点，这两个交点形成了一个扇形。</p>
<p>当且仅当两条直线所代表的扇形出现重合部分，且不是覆盖关系，那么交点即在圆内。</p>
<p>那么将这些交点按极角排序。变成线段上的问题，问在这些线段中选出两个满足上述关系的方案数。</p>
<p>扫描线，然后用一个线段树随便维护。</p>
<p>算出了这个 $r$ 以后，我们需要算距离之和。</p>
<p>因为 $m$ 只有 $10^7$ ，所以对于此时的半径 $r$，暴力在线段树上找出所有的交点计算即可。</p>
<p>此时<strong>在圆内</strong>的交点个数是比 $m$ 少的（实际上还是有可能大一点的，因为奇奇怪怪的精度问题）。总之，不能统计圆周上的点，因为如果所有的线段交点一样你就完了。不统计圆周上的点可以在极角排序的时候，如果两个点很近，则把右端点排到前面去。</p>
<p>时间复杂度 $O(m+n\log n \log ans)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> db inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">	db k,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	db x; <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> P <span class="title">LineAndCircle</span><span class="params">(db r,db k,db b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	db a=k*k+<span class="number">1</span>,c=b*b-r*r,t;</span><br><span class="line">	b=b*k*<span class="number">2</span>; t=b*b<span class="number">-4.0</span>*a*c;</span><br><span class="line">	<span class="keyword">if</span>(t&lt;<span class="number">0</span>) <span class="keyword">return</span> (P)&#123;inf,inf&#125;;</span><br><span class="line">	t=<span class="built_in">sqrt</span>(t);</span><br><span class="line">	<span class="keyword">return</span> (P)&#123;(-b+t)/(a*<span class="number">2</span>),(-b-t)/(a*<span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmps</span><span class="params">(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(A.x-B.x)&lt;eps) <span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">	<span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">line L[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt,in[N&lt;&lt;<span class="number">1</span>],out[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">node a[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(db k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	P u; cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		u=<span class="built_in">LineAndCircle</span>(k,L[i].k,L[i].b);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(u.x-inf)&gt;eps)</span><br><span class="line">		&#123;</span><br><span class="line">			u.x=<span class="built_in">atan2</span>(L[i].k*u.x+L[i].b,u.x);</span><br><span class="line">			u.y=<span class="built_in">atan2</span>(L[i].k*u.y+L[i].b,u.y);</span><br><span class="line">			<span class="keyword">if</span>(u.x&gt;u.y) <span class="built_in">swap</span>(u.x,u.y);</span><br><span class="line">			a[++cnt]=(node)&#123;u.x,i&#125;;</span><br><span class="line">			a[++cnt]=(node)&#123;u.y,-i&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>,cmps);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>(a[i].y&gt;<span class="number">0</span>) in[a[i].y]=i; <span class="keyword">else</span> out[-a[i].y]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="type">int</span> now;</span><br><span class="line">db sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> A,<span class="type">int</span> B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	db x=(L[B].b-L[A].b)/(L[A].k-L[B].k),y=L[A].k*x+L[A].b;</span><br><span class="line">	sum+=<span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,v[u].<span class="built_in">size</span>()) <span class="built_in">solve</span>(now,v[u][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s[u];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) ans+=<span class="built_in">ask</span>(lc,l,mid,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  ans+=<span class="built_in">ask</span>(rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s[u]++; <span class="keyword">if</span>(flag) v[u].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	(p&lt;=mid)?<span class="built_in">add</span>(lc,l,mid,p,x):<span class="built_in">add</span>(rc,mid+<span class="number">1</span>,r,p,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(db k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">build</span>(k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt*<span class="number">4</span>) s[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">		<span class="keyword">if</span>(a[i].y&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			l=in[a[i].y],r=out[a[i].y]; now=a[i].y;</span><br><span class="line">			ans+=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,l,r);</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,r,now);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">work</span><span class="params">(db k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	flag=<span class="number">1</span>; ll ans=<span class="built_in">calc</span>(k);</span><br><span class="line">	<span class="keyword">return</span> sum-(ans-m)*k;</span><br><span class="line">&#125;</span><br><span class="line">db x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(stigmata);</span><br><span class="line">	n=<span class="built_in">read</span>(); x=(db)<span class="built_in">read</span>()/<span class="number">1000.</span>,y=(db)<span class="built_in">read</span>()/<span class="number">1000.</span>;</span><br><span class="line">	m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		L[i].k=(db)<span class="built_in">read</span>()/<span class="number">1000.</span>,L[i].b=(db)<span class="built_in">read</span>()/<span class="number">1000.</span>-y;</span><br><span class="line">		L[i].b+=L[i].k*x;</span><br><span class="line">	&#125;</span><br><span class="line">	db l=<span class="number">0</span>,r=<span class="number">1e8</span>,mid;</span><br><span class="line">	<span class="built_in">fo</span>(t,<span class="number">1</span>,<span class="number">70</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2.</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">calc</span>(mid)&gt;m) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	cerr&lt;&lt;<span class="built_in">clock</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,<span class="built_in">work</span>(r));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>勘探[jzoj6494]</title>
    <url>/2020/06/11/%E5%8B%98%E6%8E%A2-jzoj6494/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%8B%98%E6%8E%A2-jzoj6494/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="L-为奇数"><a href="#L-为奇数" class="headerlink" title="$L$ 为奇数"></a>$L$ 为奇数</h4><p>首先来看看 $50$ 分的。 </p>
<p>这时候重心在边上，这条边将树分成了两部分，且这两部分中叶子结点到根的路径为长度为 $\frac{L-1}{2}$。</p>
<p>那么设 $f_{i,j}$ 表示 $i$ 个点，最长路径的长度为 $j$ 的有根树的方案数。</p>
<p>考虑从 $f_{k,j-1}$ 转移过来，因为根节点已经是固定了的，所以儿子中只要有一个 $f_{k,j-1}$ 即可满足条件。</p>
<p>显然我们不能一个个枚举儿子选什么，因为会出现重复的情况，为避免之，再枚举儿子中最长路径长度为 $j-1$ 的节点个数，假设有 $l$ 个。</p>
<p>那么后面这个系数相当于是在 $f_{k,j-1}$ 棵树中选出 $l$ 个形成一个集合，可以重复选的方案数。由插板法可知，系数为 $\binom{f_{k,j-1}+l-1}{l}$。</p>
<p>那么则有：$f_{i,j}=\sum_{k}\sum_{l}f_{i-kl,j}\binom{f_{k,j-1}+l-1}{l}$。</p>
<p>需要注意一下枚举的顺序，且 $l$ 从小到大枚举即可用 $l-1$ 的组合数来 $O(1)$ 算出 $l$ 时的组合数。</p>
<p>但这只是最长路径长度为 $j-1$ 的，还可以有其他长度小于 $j-1$ 的可以插进去。</p>
<p>那么再维护多一个 $g_{i,j}$ 表示 $i+1$ 个点（除去根节点外还有 $i$ 个），最长路径的长度 $\leq j$ 的有根树的方案数。</p>
<p>用现在的 $f_j$ 和 $g_{j-1}$ 卷积以后就得到了真正的 $f_{i,j}$ 了。</p>
<p>然后再维护 $g$ 数组，方法和 $f$ 的是几乎一样的。</p>
<p>算出了 $f$ 数组，接下来的就很容易了。</p>
<p>枚举两部分中节点个数较少的节点个数 $i$，然后将 $f_{i,\frac{L-1}{2}}\times f_{n-i,\frac{L-1}{2}}$ 相加就是答案了。</p>
<p>需要注意一下当 $i=\frac{n}{2}$ 时的方案数。</p>
<h4 id="L-为偶数"><a href="#L-为偶数" class="headerlink" title="$L$ 为偶数"></a>$L$ 为偶数</h4><p>然后再来考虑 $L$ 为偶数的。设 $x=\frac{L}{2}$。</p>
<p>和奇数类似，现在重心是一个点，将树分成了若干部分。但是可能会有很多棵子树。</p>
<p>我们需要满足至少有两棵子树的高度恰好为 $x-1$，且所有的子树高度都不能超过 $x-1$。</p>
<p>考虑容斥，用 $f_{n,x}$ 减去只有一棵子树的高度为 $x-1$ 的方案数。</p>
<p>那么枚举这个子树的节点个数 $i$，则此时方案数为 $f_{i,x-1}\times g_{n-i,x-1}$。</p>
<p>这个节点个数 $i$ 满足 $i\geq x,n-i\geq x$。 </p>
<h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>我们需要枚举 $i,j,k,l$ 来计算 $f$ 和 $g$，但由于 $kl\leq i\leq n$，因此时间复杂度是 $O(Ln^2\log n)$ 的。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll fac[N],inv[N],f[N][N],g[N][N],h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">S</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=inv[l];</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,l) sum=sum*(n+i)%mod;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>; g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	ll t,w;</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">1</span>,m/<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		f[<span class="number">1</span>][k]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t=w=f[j][k<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;j*l&lt;i;t=t*(w+l)%mod,l++)</span><br><span class="line">					f[i][k]=<span class="built_in">Add</span>(f[i][k],f[i-j*l][k]*t%mod*inv[l]%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		f[<span class="number">1</span>][k]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) h[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,n-i) h[i+j]=<span class="built_in">Add</span>(h[i+j],f[j][k]*g[i][k<span class="number">-1</span>]%mod);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) f[i][k]=h[i],g[i][k]=g[i][k<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t=w=f[j][k<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;j*l&lt;=i;t=t*(w+l)%mod,l++)</span><br><span class="line">					g[i][k]=<span class="built_in">Add</span>(g[i][k],g[i-j*l][k]*t%mod*inv[l]%mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(m&amp;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=(m<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>(i&lt;=n-i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="number">2</span>*i!=n) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(f[i][x],f[n-i][x]));</span><br><span class="line">				<span class="keyword">else</span> ans=<span class="built_in">Add</span>(ans,<span class="built_in">S</span>(f[i][x],<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=m/<span class="number">2</span>;</span><br><span class="line">		ans=f[n][x];</span><br><span class="line">		<span class="built_in">fo</span>(i,x,n<span class="number">-1</span>) ans=<span class="built_in">Dec</span>(ans,<span class="built_in">Mul</span>(f[i][x<span class="number">-1</span>],g[n-i<span class="number">-1</span>][x<span class="number">-1</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(exploit);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(n==<span class="number">1</span>)%mod);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(n==<span class="number">2</span>)%mod);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(n&gt;=<span class="number">3</span>)%mod);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>容斥原理</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>守卫疆域[jzoj6489]</title>
    <url>/2020/06/10/%E5%AE%88%E5%8D%AB%E7%96%86%E5%9F%9F-jzoj6489/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%AE%88%E5%8D%AB%E7%96%86%E5%9F%9F-jzoj6489/problem.png" alt="problem"></p>
<p>原题：$n\leq 500$，加强 $n\leq 2000$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="算法一，-n-leq-20"><a href="#算法一，-n-leq-20" class="headerlink" title="算法一，$n\leq 20$"></a>算法一，$n\leq 20$</h4><p>$n\leq 20$，不难想到暴力枚举哪些点可能成为圆内的点，然后跑最小圆覆盖即可。</p>
<p>时间复杂度 $O(n2^n)$。</p>
<h4 id="算法二，-n-leq-100"><a href="#算法二，-n-leq-100" class="headerlink" title="算法二，$n\leq 100$"></a>算法二，$n\leq 100$</h4><p>我们知道，$n$ 个点跑一遍最小圆覆盖，这个圆必定是这 $n$ 个点中选两个点组成直径所形成的圆，或者选三个点的外接圆。那么枚举这三个点，然后 $O(n)$ 判断一下即可。</p>
<p>时间复杂度 $O(n^4)$。</p>
<h4 id="算法三，-n-leq-500"><a href="#算法三，-n-leq-500" class="headerlink" title="算法三，$n\leq 500$"></a>算法三，$n\leq 500$</h4><p><del>似乎可以有 $O(n^3)$ 的做法，不管了。</del></p>
<p>显然可以二分半径 $R$。</p>
<p>然后枚举一个点 $P_i$ 是否在最终的圆 $B$ 中，贪心地考虑，这个圆的圆心 $B$ 在以 $P_i$ 为圆心 $R$ 为半径的圆 $C$ 上是最好的。因为这样才能覆盖尽可能多的点。那么如果我要使得另一个点也在圆里面，满足条件的是圆 $C$ 的一段圆弧。这段圆弧可以用圆圆求交来搞定。那么只需要将这些圆弧的两个端点拎出来进行排序，然后扫描线统计一下最大值即可。这一部分需要排序，时间复杂度 $O(n\log n)$。</p>
<p>加上枚举 $P_i$ 及二分半径，时间复杂度 $O(n^2\log n \log D)$，其中 $\log D$ 为二分次数。 </p>
<h4 id="算法四，-n-leq-2000"><a href="#算法四，-n-leq-2000" class="headerlink" title="算法四，$n\leq 2000$"></a>算法四，$n\leq 2000$</h4><p>算法四告诉我们，可以在 $O(n\log n)$ 的时间内求出：是否存在一个圆，半径为 $R$，满足 $P_i$ 必须在圆内，且圆内点的权值和大于等于某个值。</p>
<p>对于算法四中的 $P_i$，它也是可以去二分的。也就是说，可以通过 $O(n\log n\log D)$ 的时间来求出满足 $P_i$ 必须在圆内，且权值和大于等于某个值的最小半径，方法和算法四相同，设这个半径为 $R_i$。</p>
<p>还是考虑算法四中一个一个去枚举，假设当前的最小答案是 $ans$，那如果不存在一个以 $ans$ 为半径的圆，满足 $P_i$ 在圆内且权值和满足条件，那么就有 $R_i&gt;ans$，因此这个点实际上是废掉的，$R_i$ 无法产生任何贡献。这个也可以通过 $O(n\log n)$ 的时间去判断。</p>
<p>那如果我这个 $ans$ 经过几次暴力算出 $R_i$ 后，变得足够小，剩下的点就可以只需要判断一次 $R_i&gt;ans$ ，然后可以知道它不会产生任何贡献了。</p>
<p>那么每次去选一个点，判断是否能让 $ans$ 变小，如果阔以，就用 $O(n\log n\log D)$ 的时间算出 $R_i$ 去更新 $ans$，否则就直接跳过，因为不会让 $ans$ 变小。</p>
<p>如果上面的方法是随机选择的话，对于一个从小到大排名为 $j$ 的 $R_i$ 而言，有 $\frac{1}{j}$ 的概率是需要算出真正的 $R_i$ 的。那么 $n$ 个 $R_i$ 就期望要算 $\sum_{i=1}^n\frac{1}{i}=O(\log n)$ 次，因此这一部分的时间复杂度是 $O(n\log ^2n\log D)$ 的。</p>
<p>对于每个 $i$，都需要一次判断是否能让答案变小，时间复杂度是 $O(n^2\log n)$ 的。</p>
<p>因此只需要一个random_shuffle，我们就可以得到一个期望时间复杂度为 $O(n^2\log n+n\log ^2n\log D)$ 的算法。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> db pi2=<span class="number">2</span>*<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B) &#123;<span class="keyword">return</span> A.x!=B.x?A.x&lt;B.x:A.y&lt;B.y;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span>+(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)&#123;<span class="keyword">return</span> (P)&#123;A.x+B.x,A.y+B.y&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span>-(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)&#123;<span class="keyword">return</span> (P)&#123;A.x-B.x,A.y-B.y&#125;;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Cross</span><span class="params">(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span></span>&#123;<span class="keyword">return</span> A.x*B.y-A.y*B.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Dot</span><span class="params">(<span class="type">const</span> P &amp;A,<span class="type">const</span> P &amp;B)</span></span>&#123;<span class="keyword">return</span> A.x*B.x+A.y*B.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Len2</span><span class="params">(<span class="type">const</span> P &amp;A)</span></span>&#123;<span class="keyword">return</span> A.x*A.x+A.y*A.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">Len</span><span class="params">(<span class="type">const</span> P &amp;A)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Len2</span>(A));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">ang</span><span class="params">(<span class="type">const</span> P &amp;A)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(A.y,A.x);&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">P a[N],pos[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">db d,w,t,l,r;</span><br><span class="line"><span class="type">int</span> k,sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> i,db R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	R*=<span class="number">2</span>; k=<span class="number">0</span>; sum=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(j^i)</span><br><span class="line">	&#123;</span><br><span class="line">		d=<span class="built_in">Len</span>(a[i]-a[j]);</span><br><span class="line">		<span class="keyword">if</span>(d&lt;eps) &#123;sum++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(d&gt;R) <span class="keyword">continue</span>;</span><br><span class="line">		w=<span class="built_in">ang</span>(a[i]-a[j]);</span><br><span class="line">		<span class="keyword">if</span>(w&lt;<span class="number">0</span>) w+=pi2;</span><br><span class="line">		t=<span class="built_in">acos</span>(d/R);</span><br><span class="line">		l=w-t; r=w+t;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;<span class="number">0</span>) l+=pi2;</span><br><span class="line">		<span class="keyword">if</span>(r&gt;pi2) r-=pi2;</span><br><span class="line">		pos[++k]=(P)&#123;l,<span class="number">1</span>&#125;;</span><br><span class="line">		pos[++k]=(P)&#123;r,<span class="number">-1</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r) sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum&gt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(pos+<span class="number">1</span>,pos+k+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		sum+=(<span class="type">int</span>)pos[i].y;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(guard);</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i].x=<span class="built_in">read</span>(),a[i].y=<span class="built_in">read</span>(),tot++;</span><br><span class="line">	<span class="keyword">if</span>(tot&lt;m) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">random_shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	db ans=<span class="number">14143</span>,l,r,mid;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">calc</span>(i,ans)) <span class="keyword">continue</span>;</span><br><span class="line">		l=<span class="number">0</span>; r=ans;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="built_in">log</span>(ans)*<span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">calc</span>(i,mid)) r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.7lf&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>随机</tag>
        <tag>最小圆覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title>铺路[jzoj6491]</title>
    <url>/2020/06/10/%E9%93%BA%E8%B7%AF-jzoj6491/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E9%93%BA%E8%B7%AF-jzoj6491/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先来分析一波：</p>
<p>我们发现，当所有的点的度数都为奇数时，点数必定是偶数。</p>
<p>证明可以用归纳法。</p>
<p>考虑一棵偶数个点的树，它一定符合所有点的度数为奇数。</p>
<p>那么对于一个偶数个点的图，我们保留它的一棵最小生成树，最小生成树中最大的边权就是答案了。</p>
<p>考虑 $n,m\leq 2000$ 的做法，也就是只考虑一次询问时该怎么做。</p>
<p>可以将边从小到大排好序，然后一个一个插进去。直到所有连通块的点数都是偶数，当前这条边的权值就是答案。</p>
<p>那么你获得了一个 $O(n^2\alpha(n))$ 的50分做法。</p>
<p>接下来考虑正解：</p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>考虑继续沿用50分做法的思想，不考虑离线，直接做。</p>
<p>显然答案是单调不降的。</p>
<p>那么对于当前的生成森林，你如果删掉了权值最大的边后，这条边就以后都不可能再加回去了。</p>
<p>考虑用LCT维护这个生成森林，每次尝试插进一条新的边，如果插进去以后形成了环，那么将环上的最大的边删掉。</p>
<p>然后如果此时连通块均为偶数，我们则可以考虑去删最大的边。</p>
<p>那么我们维护一个可删堆，每次在堆中找到还生成森林里面的最大的边，直到删掉之后连通块出现了奇数。</p>
<p>需要在LCT中维护子树大小以及链的最大边。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">400010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">	<span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],siz[N],si[N],val[N],mi[N];</span><br><span class="line">	<span class="type">bool</span> r[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">son</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>]!=x&amp;&amp;ch[fa[x]][<span class="number">1</span>]!=x;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val[x]&lt;=val[y]?y:x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[x]=siz[ch[x][<span class="number">0</span>]]+siz[ch[x][<span class="number">1</span>]]+si[x]+(val[x]==-inf);</span><br><span class="line">		mi[x]=<span class="built_in">getmax</span>(x,<span class="built_in">getmax</span>(mi[ch[x][<span class="number">0</span>]],mi[ch[x][<span class="number">1</span>]]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">		r[x]^=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!r[x]) <span class="keyword">return</span>;</span><br><span class="line">		r[x]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rev</span>(ch[x][<span class="number">0</span>]); <span class="built_in">rev</span>(ch[x][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">if</span>(!<span class="built_in">isroot</span>(x)) <span class="built_in">push</span>(fa[x]); <span class="built_in">pushdown</span>(x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x],z=fa[y],d=<span class="built_in">son</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) ch[z][<span class="built_in">son</span>(y)]=x; fa[x]=z;</span><br><span class="line">		ch[y][d]=ch[x][<span class="number">1</span>-d]; fa[ch[y][d]]=y;</span><br><span class="line">		ch[x][<span class="number">1</span>-d]=y; fa[y]=x;</span><br><span class="line">		<span class="built_in">pushup</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">push</span>(x);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> y=fa[x];!<span class="built_in">isroot</span>(x);<span class="built_in">rotate</span>(x),y=fa[x])</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) <span class="built_in">rotate</span>((<span class="built_in">son</span>(x)^<span class="built_in">son</span>(y))?x:y);</span><br><span class="line">		<span class="built_in">pushup</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;x;y=x,x=fa[x])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">splay</span>(x);</span><br><span class="line">			si[x]+=siz[ch[x][<span class="number">1</span>]]-siz[y];</span><br><span class="line">			ch[x][<span class="number">1</span>]=y;</span><br><span class="line">			<span class="built_in">pushup</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="built_in">access</span>(x); <span class="built_in">splay</span>(x); <span class="built_in">rev</span>(x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="built_in">makeroot</span>(x); <span class="built_in">access</span>(y); <span class="built_in">splay</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(x,y); fa[x]=y; si[y]+=siz[x]; <span class="built_in">pushup</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(x,y); ch[y][<span class="number">0</span>]=fa[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">access</span>(x); <span class="built_in">splay</span>(x);</span><br><span class="line">		<span class="keyword">for</span>(;ch[x][<span class="number">0</span>];<span class="built_in">pushdown</span>(x),x=ch[x][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findsiz</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">access</span>(x); <span class="built_in">splay</span>(x); <span class="keyword">return</span> siz[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">split</span>(x,y);</span><br><span class="line">		<span class="keyword">return</span> mi[y];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;<span class="keyword">return</span> (val[x]==val[y])?x&lt;y:val[x]&lt;val[y];&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">del_queue</span>&#123;</span><br><span class="line">	priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,cmp&gt; q1,q2;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q1.<span class="built_in">push</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q2.<span class="built_in">push</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q1.<span class="built_in">empty</span>()&amp;&amp;!q2.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q1.<span class="built_in">top</span>()==q2.<span class="built_in">top</span>()) q1.<span class="built_in">pop</span>(),q2.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(q1.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> q1.<span class="built_in">top</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> q1.<span class="built_in">size</span>()==q2.<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p;</span><br><span class="line"><span class="type">int</span> cnt,n,m,X[N],Y[N],fx,fy,x,y,z,sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!p.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=p.<span class="built_in">top</span>();</span><br><span class="line">		<span class="built_in">cut</span>(X[u],u);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">findsiz</span>(X[u])&amp;<span class="number">1</span>) <span class="keyword">return</span> (<span class="type">void</span>)(<span class="built_in">link</span>(X[u],u));</span><br><span class="line">		<span class="built_in">cut</span>(Y[u],u);</span><br><span class="line">		p.<span class="built_in">pop</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(road);</span><br><span class="line">	sum=cnt=n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	val[<span class="number">0</span>]=-inf<span class="number">-1</span>; siz[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) mi[i]=i,val[i]=-inf,siz[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(); ++cnt; val[cnt]=z=<span class="built_in">read</span>(); mi[cnt]=cnt;</span><br><span class="line">		X[cnt]=x; Y[cnt]=y;</span><br><span class="line">		fx=<span class="built_in">findroot</span>(x); fy=<span class="built_in">findroot</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(fx!=fy)</span><br><span class="line">		&#123;</span><br><span class="line">			sum-=(<span class="built_in">findsiz</span>(fx)&amp;<span class="number">1</span>)+(<span class="built_in">findsiz</span>(fy)&amp;<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">link</span>(x,cnt); <span class="built_in">link</span>(y,cnt);</span><br><span class="line">			sum+=(<span class="built_in">findsiz</span>(cnt)&amp;<span class="number">1</span>);</span><br><span class="line">			p.<span class="built_in">push</span>(cnt);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> k;</span><br><span class="line">			k=<span class="built_in">findmax</span>(x,y);</span><br><span class="line">			<span class="keyword">if</span>(val[k]&gt;z)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cut</span>(X[k],k),<span class="built_in">cut</span>(Y[k],k);</span><br><span class="line">				p.<span class="built_in">pop</span>(k);</span><br><span class="line">				<span class="built_in">link</span>(x,cnt); <span class="built_in">link</span>(y,cnt);</span><br><span class="line">				p.<span class="built_in">push</span>(cnt);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!sum) <span class="built_in">del</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum?<span class="number">-1</span>:val[p.<span class="built_in">top</span>()]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>堆</tag>
        <tag>并查集</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>异或树[jzoj6707]</title>
    <url>/2020/06/09/%E5%BC%82%E6%88%96%E6%A0%91-jzoj6707/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%BC%82%E6%88%96%E6%A0%91-jzoj6707/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然这是一道DP题。看起来似乎只能从高位到低位考虑。</p>
<p>假设有些点的最高位为 $0$，剩下的点最高位为 $1$，那么这些点形成了两个连通块。</p>
<p>这两个连通块内部先做一次最小生成树，然后之间需要连一条边权最小的边链接这两个连通块。</p>
<p>现在我们先来算，假设你考虑到某一位 $i$（从 $0$ 开始），有两块的大小是 $k,l$，这时候中间这条边的权值的期望*方案数是多少，记这个数为 $g_{i,k,l}$。</p>
<p>然而这个 $g$ 是无法直接算的。考虑转换最小值，有一个经典的套路，要算一个随机变量 $x$ 的期望，那么可以通过以下转换：</p>
<p>$$E(x)=\sum_{i=0} i[P(x=i)]=\sum_{i=1}[P(x\geq i)]$$</p>
<p>我们转换成求这条权值最小的边大于等于某个数 $j(j&lt; 2^i)$ 的方案数，也就是所以跨过两个块的边都大于等于这个 $j$ 的方案数。设这个方案数为 $f_{i,j,k,l}$。</p>
<p>现在只需要考虑 $f$ 如何计算。</p>
<p>进行大力分类讨论：</p>
<ol>
<li><p>$k=0$ 或 $l=0$</p>
<p>这时候为了方便其他 $f$ 的计算，可以令 $f_{i,j,k,l}$ 直接表示为所有的方案数，即 $2^{(i+1)(k+l)}$。</p>
</li>
<li><p>$j$ 的第 $i$ 位为 $1$</p>
<p>这时候 $k,l$ 都大于 $0$ 了，那么这两个块的最高位异或后必须为 $1$，也就是一个块的最高位全是 $0$ ，令一个的最高位全是 $1$，这样的方案数有两种，然后还需要看 $j$ 除去第 $i$ 位后的结果，也就是 $f_{i-1,j\oplus 2^i,k,l}$。</p>
</li>
<li><p>$j$ 的第 $i$ 位为 $0$</p>
<p>此时，这两个块的最高位就没有什么限制了，也就是块内的最高位可以不相同。那么，就需要分别枚举两个块有多少个最高位为 $0$ 的，设为 $u,v$，一共有 $\binom{k}{u}\times \binom{l}{v}$ 种选法，对于 $j$ 的限制，显然不需要考虑不同块且最高位不同的点，方案数为 $f_{i-1,j,u,v}\times f_{i-1,j,k-u,l-v}$。</p>
</li>
</ol>
<p>然后大力转移就好了。需要注意 $i=0$ 时的边界。</p>
<p>现在你已经求出了所有的 $g_{i,k,l}$。</p>
<p>最后需要将这些 $g_{i,k,l}$ 转换成答案。</p>
<p>我们可以再来一个DP，设 $h_{i,j}$ 表示考虑到第 $i$ 位（从 $0$ 开始），一共 $j$ 个点时的答案之和。</p>
<p>然后还是按照最高位分两块，枚举其中一块的点数 $k$，则有：</p>
<p>$$h_{i,j}=\sum_{k=0}^j\binom{j}{k}\left (2^{i(j-k)}h_{i-1,k}+2^{ik}h_{i-1,j-k}+[k&gt;0,j&gt;k](g_{i-1,k,j-k}+2^i\times 2^{ij})\right )$$</p>
<p>最后面的 $[k&gt;0,j&gt;k]$ 是需要保证两个块都有点，才能有一条跨过两块的边。</p>
<p>时间复杂度 $O(mn^42^m)$，有超级多个 $\frac{1}{2}$ 的常数，因此卡卡常，减小一下取模的次数就过了。</p>
<p><strong>注意 $n=1$ 的特判。</strong></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">53</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll p2[N*N],C[N][N],f[<span class="number">9</span>][<span class="number">260</span>][N][N],h[<span class="number">9</span>][N],g[<span class="number">9</span>][N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(<span class="keyword">xor</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">	p2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,N*N<span class="number">-1</span>) p2[i]=(p2[i<span class="number">-1</span>]*<span class="number">2</span>)%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>)</span><br><span class="line">			C[i][j]=<span class="built_in">Add</span>(C[i<span class="number">-1</span>][j],C[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n-i)</span><br><span class="line">			f[<span class="number">0</span>][<span class="number">0</span>][i][j]=p2[i+j],f[<span class="number">0</span>][<span class="number">1</span>][i][j]=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,n)</span><br><span class="line">				f[i<span class="number">-1</span>][j][k][<span class="number">0</span>]=f[i<span class="number">-1</span>][j][<span class="number">0</span>][k]=p2[i*k];</span><br><span class="line">	ll tmp;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">ff</span>(j,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;(i+<span class="number">1</span>))</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">1</span>,n)</span><br><span class="line">				<span class="built_in">fo</span>(l,<span class="number">1</span>,n-k)</span><br><span class="line">					<span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">						f[i][j][k][l]=f[i<span class="number">-1</span>][j^(<span class="number">1</span>&lt;&lt;i)][k][l]*<span class="number">2</span>%mod;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">fo</span>(u,<span class="number">0</span>,k)</span><br><span class="line">						&#123;</span><br><span class="line">							tmp=<span class="number">0</span>;</span><br><span class="line">							<span class="built_in">fo</span>(v,<span class="number">0</span>,l) tmp=<span class="built_in">Add</span>(tmp,C[l][v]*f[i<span class="number">-1</span>][j][u][v]%mod*f[i<span class="number">-1</span>][j][k-u][l-v]%mod);</span><br><span class="line">							f[i][j][k][l]+=tmp*C[k][u]%mod;</span><br><span class="line">						&#125;</span><br><span class="line">						f[i][j][k][l]%=mod;</span><br><span class="line">					&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">1</span>,n)</span><br><span class="line">			<span class="built_in">fo</span>(l,<span class="number">1</span>,n-k)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">ff</span>(j,<span class="number">1</span>,p2[i+<span class="number">1</span>])</span><br><span class="line">					g[i][k][l]+=f[i][j][k][l];</span><br><span class="line">				g[i][k][l]%=mod;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) h[<span class="number">0</span>][i]=<span class="built_in">Dec</span>(p2[i],<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,j)</span><br><span class="line">				h[i][j]=<span class="built_in">Add</span>(h[i][j],<span class="built_in">Mul</span>(C[j][k],<span class="built_in">Add</span>(<span class="built_in">Add</span>(h[i<span class="number">-1</span>][k]*p2[i*(j-k)]%mod,h[i<span class="number">-1</span>][j-k]*p2[i*k]%mod),(k&gt;<span class="number">0</span>&amp;&amp;j&gt;k)*<span class="built_in">Add</span>(g[i<span class="number">-1</span>][k][j-k],p2[i*j]*p2[i]%mod))));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,h[m<span class="number">-1</span>][n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>期望</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>排列[jzoj6709]</title>
    <url>/2020/06/08/%E6%8E%92%E5%88%97-jzoj6709/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E6%8E%92%E5%88%97-jzoj6709/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>做多了FFT，这题似乎感觉还是挺简单滴~。</p>
<p>显然容斥一下，设 $g_n$ 表示恰好 $i$ 个的答案，设 $f_n$ 表示至少 $i$ 个的答案。</p>
<p>那么有：$f_i=\sum_{j=i}^ng_j\binom{j}{i}$。</p>
<p>二项式反演一下：$g_i=\sum_{j=i}^n(-1)^{j-i}\binom{j}{i}f_j$。</p>
<p>这个是一个卷积形式，求完 $f_i$ 后一个卷积就好了。</p>
<p>下面来看如何求 $f_i$。</p>
<p>我们建一个二分图，$X_i,Y_j$ 连边当且仅当 $|i-j|=m$。我们选一条边 $(i,j)$ 表示令 $P_i=j$。</p>
<p>对于 $f_i$ 而言，我们需要在这个二分图中找到 $i$ 条边的方案数，最后乘一个随意乱连的方案，即 $(n-i)!$。</p>
<p>那么对于二分图中的一条链，假设长度为 $k$，你需要选 $j$ 条边，那么方案数就为 $h_j=\binom{k-j}{j}$。</p>
<p>然后把这个 $h$ 写成生成函数的形式，那么在二分图中找到 $i$ 条边的方案数相当于就是将所有的链的 $h$ 乘起来后的第 $i$ 项。</p>
<p>因为这些链的 $h$ 的次数的和是 $n$，因此这个也可以随便做做就好了。比如写个最低级的多项式快速幂。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Poly vector<span class="string">&lt;ll&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll W[M];</span><br><span class="line"><span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">nttinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">				a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">				a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">	<span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">	w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span> </span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) A[i]=<span class="built_in">Mul</span>(A[i],B[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ^(Poly A,<span class="type">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">	Poly B; B.<span class="built_in">resize</span>(<span class="number">0</span>); B.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,A=A*A) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) B=B*A;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">facinit</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line">Poly A,B,F,G,H;</span><br><span class="line"><span class="type">int</span> k,n,m,len;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(perm);</span><br><span class="line">	<span class="built_in">nttinit</span>();</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="built_in">facinit</span>(n+<span class="number">1</span>);</span><br><span class="line">	k=n%m; len=n/m+<span class="number">1</span>;</span><br><span class="line">	A.<span class="built_in">resize</span>(len/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len/<span class="number">2</span>) A[i]=<span class="built_in">C</span>(len-i,i);</span><br><span class="line">	A=A^(k&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	k=m-n%m; len--;</span><br><span class="line">	B.<span class="built_in">resize</span>(len/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len/<span class="number">2</span>) B[i]=<span class="built_in">C</span>(len-i,i);</span><br><span class="line">	B=B^(k&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	F=A*B;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) F[i]=<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(F[i],fac[n-i]),fac[i]);</span><br><span class="line">	G.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) G[n-i]=<span class="built_in">Pow</span>(mod<span class="number">-1</span>,i)*inv[i]%mod;</span><br><span class="line">	H=G*F;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,H[i+n]*inv[i]%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>FFT</tag>
        <tag>二项式反演</tag>
      </tags>
  </entry>
  <entry>
    <title>密码[jzoj6708]</title>
    <url>/2020/06/08/%E5%AF%86%E7%A0%81-jzoj6708/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><img src="/%E5%AF%86%E7%A0%81-jzoj6708/problem.png" alt="problem"></p>
<span id="more"></span>

<h3 id="做法1"><a href="#做法1" class="headerlink" title="做法1"></a>做法1</h3><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>考虑多项式。</p>
<p>题目实际上求的是 $\prod_{k=i}^{i+m-1}val_{k,s[k-i+1]}$。</p>
<p>那么求一个ln后，变成求加法。</p>
<p>由于字符集大小只有10，我们将10个字符分开来处理。</p>
<p>对于一种字符 $j$，定义 $f_i=[s[i]==j]$。</p>
<p>然后将其中一个串反转，做个卷积即可。</p>
<p>时间复杂度 $O(n|S| \log n)$，其中 $|S|$ 为字符集大小。</p>
<p>感觉可能会有精度问题？但有人过了qwq。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>太简单，不写了。</p>
<h3 id="做法2"><a href="#做法2" class="headerlink" title="做法2"></a>做法2</h3><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>我们发现，对于每位字符，大于 $0.5$ 的概率最多只有一个，而如果他经过了比较多的概率 $&lt;0.5$ 的点，那么最终答案就会很小。显然，经过 $30$ 个左右就会使得答案小于 $10^{-9}$。</p>
<p>根据这个性质，我们把所有大于 $0.5$ 的字符拿出来，没有的那一位填一个为出现过的数。然后枚举每一个结束位置，拿着密码串去跟这一位去做lcp，将这些概率乘起来，当匹配次数超过 $30$ 遍后就直接返回 $0$。</p>
<p>这个可以用后缀数组或者SAM用 $O(n\log n)$ 预处理做到 $O(1)$ 查询。</p>
<p>最后你发现将这些概率乘起来时是一段区间，统计这段区间不能有前缀积，因为会有精度问题，可以写一个线段树或者猫树。</p>
<p>无论如何，总的时间复杂度为 $O(n\log n)$。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2.5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	db s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n) s[i]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,db x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[u]*=x;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		(p&lt;=mid)?<span class="built_in">add</span>(lc,l,mid,p,x):<span class="built_in">add</span>(rc,mid+<span class="number">1</span>,r,p,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">db <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> s[u];</span><br><span class="line">		db ans=<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) ans=ans*<span class="built_in">ask</span>(lc,l,mid,L,R);</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  ans=ans*<span class="built_in">ask</span>(rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> base[N],rk[N],t[N],sa[N],height[N],f[N][<span class="number">19</span>],l2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y,<span class="type">const</span> <span class="type">int</span> &amp;len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t[x]==t[y]&amp;&amp;t[x+len]==t[y+len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> *s,<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s[n+<span class="number">1</span>]=<span class="number">13</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=i,rk[i]=s[i];</span><br><span class="line">	<span class="built_in">rsort</span>(n,m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">		<span class="built_in">rsort</span>(n,p);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">		rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=(<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">		<span class="keyword">for</span>(j=sa[rk[i]<span class="number">-1</span>],(k?k--:<span class="number">0</span>);s[i+k]==s[j+k];k++);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="number">18</span>)</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lcp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=rk[x]; y=rk[y];</span><br><span class="line">	<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	x++;</span><br><span class="line">	<span class="type">int</span> l=l2[y-x+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(f[x][l],f[y-(<span class="number">1</span>&lt;&lt;l)+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s[N],n,m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">db val[N][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=m,d;</span><br><span class="line">	db ans=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">35</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		d=<span class="built_in">lcp</span>(m+<span class="number">1</span>-l,n+m+<span class="number">2</span>-x-l);</span><br><span class="line">		<span class="keyword">if</span>(d) ans*=SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,x+l-d+<span class="number">1</span>,x+l);</span><br><span class="line">		l-=d;</span><br><span class="line">		<span class="keyword">if</span>(!l) <span class="keyword">return</span> ans;</span><br><span class="line">		ans*=val[l+x][str[l]-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">		l--;</span><br><span class="line">		<span class="keyword">if</span>(!l) <span class="keyword">return</span> ans;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(password);</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	SGT::<span class="built_in">init</span>(n&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i]=<span class="number">11</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(); val[i][j]=(db)x/<span class="number">1000000000.0</span>;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">500000000</span>) s[i]=j+<span class="number">1</span>,SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,val[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	s[n+<span class="number">1</span>]=<span class="number">12</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) s[n+<span class="number">1</span>+i]=str[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(s+<span class="number">1</span>,s+n+m+<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">build</span>(s,n+m+<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,m,n) <span class="built_in">printf</span>(<span class="string">&quot;%.15lf\n&quot;</span>,<span class="built_in">calc</span>(i-m));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
        <tag>线段树</tag>
        <tag>SAM</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>手链强化[FJWC2020Day2]</title>
    <url>/2020/06/08/%E6%89%8B%E9%93%BE%E5%BC%BA%E5%8C%96-FJWC2020Day2/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为 $n$ 的手链，对于每一个珠子，可以不染色，也可<br>以染 $k$ 种颜色中的一种。不能有相邻的两个珠子同时被染色。问<br>不同的染色手链种类数。旋转相同视作一种。对 $10^9+7$ 取模。</p>
<p>$n,k\leq 10^9$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先由 Burnside引理，得到答案为 $\frac{1}{n}\sum_{i=1}^n=f(\gcd(i,n))$，其中 $f(i)$ 表示长度为 $i$ 的环，不考虑旋转时的答案。</p>
<p>显然答案也等于 $\frac{1}{n}\sum_{d|n}\varphi(\frac{n}{d})f(d)$。</p>
<p>那么现在只需要考虑如何求 $f(i)$ 就好了。</p>
<p>设 $g_{i,0/1}$ 表示依次考虑环上每一个点，考虑到环上第 $i$ 个，该点染不染色的方案数。</p>
<p>显然有：$g_{i,0}=g_{i-1,0}+g_{i-1,1},g_{i,1}=kg_{i-1,0}$。</p>
<p>然后分两种情况讨论：</p>
<p>1，第一个点不染色，那么有 $g_{1,0}=1,g_{1,1}=0$，此时对答案贡献为 $g_{n,0}+g_{n,1}$。</p>
<p>2，第一个点染色，那么有 $g_{1,0}=0,g_{1,1}=k$，此时对答案贡献为 $g_{n,0}$。</p>
<p>那么就可以用矩阵快速幂求出这个 $f(i)$ 了。</p>
<p>求一个 $\varphi(i)$ 的复杂度可以通过预处理根号内的质数做到 $\frac{\sqrt i}{\log i}$。</p>
<p>那么时间复杂度为：</p>
<p>$$O(\sum_{d|n}\frac{\sqrt{d}}{\log d})\le O(\sum_{d|n}\frac{\sqrt{n}}{\log n})\le O(n^{\frac{1}{3}}\frac{\sqrt n}{\log n})=O(\frac{n^{\frac{5}{6}}}{\log n})$$</p>
<p><del>实际上跑得极快。</del></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mat</span>&#123;</span><br><span class="line">	ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">mat</span>() &#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">	<span class="keyword">inline</span> ll* <span class="keyword">operator</span> [] (<span class="type">const</span> <span class="type">int</span> &amp;x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> mat <span class="keyword">operator</span> * (mat A,mat B)</span><br><span class="line">	&#123;</span><br><span class="line">		mat C;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">			C[i][j]=<span class="built_in">Add</span>(C[i][j],A[i][k]*B[k][j]%mod);</span><br><span class="line">		<span class="keyword">return</span> C;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> mat <span class="title">Pow</span><span class="params">(mat A,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mat B; B[<span class="number">0</span>][<span class="number">0</span>]=B[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,A=A*A) <span class="keyword">if</span>(n&amp;<span class="number">1</span>) B=B*A;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line">mat F,G,H,A;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	H[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; H[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	A=<span class="built_in">Pow</span>(F,n<span class="number">-1</span>);</span><br><span class="line">	G=H*A;</span><br><span class="line">	sum=<span class="built_in">Add</span>(sum,<span class="built_in">Add</span>(G[<span class="number">0</span>][<span class="number">0</span>],G[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">	H[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>; H[<span class="number">0</span>][<span class="number">1</span>]=k;</span><br><span class="line">	G=H*A;</span><br><span class="line">	sum=<span class="built_in">Add</span>(sum,G[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> vis[M],pri[M],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;pri[++cnt]=i;&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;pri[j]*i&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[pri[j]*i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll s=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt&amp;&amp;pri[i]*pri[i]&lt;=n;i++)</span><br><span class="line">		<span class="keyword">if</span>(n%pri[i]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s=s*(pri[i]<span class="number">-1</span>)/pri[i];</span><br><span class="line">			<span class="keyword">for</span>(;n%pri[i]==<span class="number">0</span>;n/=pri[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(n!=<span class="number">1</span>) s=s*(n<span class="number">-1</span>)/n;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="built_in">sqrt</span>(n))</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">phi</span>(n/i),<span class="built_in">f</span>(i)));</span><br><span class="line">			<span class="keyword">if</span>(i*i!=n) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">phi</span>(i),<span class="built_in">f</span>(n/i)));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(bracelet);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="built_in">init</span>(<span class="built_in">sqrt</span>(n));</span><br><span class="line">	F[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; F[<span class="number">0</span>][<span class="number">1</span>]=k;</span><br><span class="line">	F[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>; F[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Mul</span>(<span class="built_in">calc</span>(n),<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>Burnside引理</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵[bzoj2406]</title>
    <url>/2020/06/04/%E7%9F%A9%E9%98%B5-bzoj2406/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://darkbzoj.tk/problem/2406">darkbzoj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>过了那么久，才发现自己的Dinic原来写成EK了。。。</p>
<p>首先二分答案 $mid$，变成判断是否对于所有的式子，都满足 $|\sum a_i-\sum b_i|\leq mid$，那么每个式子的 $\sum b_i$ 的大小就是在一个区间内了。</p>
<p>然后行和列分别建点，每个 $b_{i,j}$ 的范围是 $[L,R]$，那么就连 $(i,j,L,R)$。</p>
<p>然后就变成了有源有汇有上下界可行流。</p>
<p>连边 $(t,s,inf)$，然后转成无源无汇有上下界可行流就好了。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">405</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">int</span> SS,TT,S,T,cnt;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],ne[M],head[N],tot;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) head[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=d; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> d[N],cur[N];</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) d[i]=<span class="number">-1</span>,cur[i]=head[i];</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		q.<span class="built_in">push</span>(SS); d[SS]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d[TT]!=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==TT||!flow) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,v,r;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==d[u]+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(!(r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i])))) <span class="keyword">continue</span>;</span><br><span class="line">				res-=r;</span><br><span class="line">				val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">				<span class="keyword">if</span>(!res) <span class="keyword">break</span>;<span class="comment">//不能在for循环中写&quot;i&amp;&amp;res&quot;，因为会使得i=ne[i]后才退出</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">bfs</span>();) flow+=<span class="built_in">dfs</span>(SS,inf);</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Dinic::SS;</span><br><span class="line"><span class="keyword">using</span> Dinic::TT;</span><br><span class="line"><span class="keyword">using</span> Dinic::T;</span><br><span class="line"><span class="keyword">using</span> Dinic::S;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,L,R;</span><br><span class="line"><span class="type">int</span> c[N],d[N],a[N][N],in[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Dinic::<span class="built_in">add</span>(x,y,r-l);</span><br><span class="line">	in[x]-=l; in[y]+=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	Dinic::<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">add</span>(S,i,c[i]-k,c[i]+k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(i+n,T,d[i]-k,d[i]+k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m) <span class="built_in">add</span>(i,j+n,L,R);</span><br><span class="line">	Dinic::<span class="built_in">add</span>(T,S,inf);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,Dinic::cnt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(in[i]&gt;<span class="number">0</span>) Dinic::<span class="built_in">add</span>(SS,i,in[i]),sum+=in[i];</span><br><span class="line">		<span class="keyword">if</span>(in[i]&lt;<span class="number">0</span>) Dinic::<span class="built_in">add</span>(i,TT,-in[i]);</span><br><span class="line">		in[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Dinic::<span class="built_in">dinic</span>()==sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); Dinic::cnt=n+m+<span class="number">3</span>;</span><br><span class="line">	S=<span class="number">0</span>; T=n+m+<span class="number">1</span>; SS=T+<span class="number">1</span>; TT=T+<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m) a[i][j]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m) c[i]+=a[i][j],d[j]+=a[i][j];</span><br><span class="line">	L=<span class="built_in">read</span>(); R=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">200000</span>,mid;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,r+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>Chips Challenge[WF2011]</title>
    <url>/2020/06/04/Chips-Challenge-WF2011/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA1104">luogu</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>可以通过连 $\infty/ -\infty$ 的边来实现强制相等。</strong></p>
<p>首先，每个格子选的总数难以确定，那么我们可以枚举格子选的总数 $k$，然后最后看看这时候的答案是否和这个 $k$ 相等。枚举以后，每行和每列的限制就确定了，设 $mx=\lfloor k\times \frac{a}{b}\rfloor$。</p>
<p>根据网络流的套路，我们将行列分别建点。然后连边。</p>
<p>首先建一个源点 $s$ 和汇点 $t$，$s$ 向每行的点连一条 $[0,mx]$ 的边，每列向 $t$ 连一条 $[0,mx]$ 的边，表示不超过 $mx$ 的限制。</p>
<p>对于每个格子 $(i,j)$ ：可选连 $[0,1]$，必选连 $[1,1]$，不选啥都不干。</p>
<p>然后跑最大流就好了。</p>
<p>但是，有个很恶心的是他要求行和列选择的要相同。</p>
<p>这时候需要考虑增设一个费用，把每选一个格子就增设费用 $1$，即考虑行和列之间连边时的费用是 $1$。</p>
<p>还需要强制满足 $i$ 行和 $i$ 列选的个数相同。那么增设一条从 $i$ 行连向 $i$ 列，容量 $[0,\infty]$，费用为 $0$ 的边。那么它最后一定是要满流的（不满流就不是最大流了），且除了这条边以外的流量之和相等（否则就不满流了）。</p>
<p>这样就可以了，最后求个最大费用最大流。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> s,t;</span><br><span class="line"><span class="keyword">namespace</span> MCMF&#123;</span><br><span class="line">	<span class="type">int</span> ver[M],ne[M],cost[M],val[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; cost[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; cost[tot]=-c;ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> d[N],pre[N],mi[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,t) d[i]=inf,pre[i]=mi[i]=<span class="number">0</span>;</span><br><span class="line">		d[s]=<span class="number">0</span>; mi[s]=inf; q.<span class="built_in">push</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); vis[u]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]&gt;d[u]+cost[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+cost[i];</span><br><span class="line">					pre[v]=i; mi[v]=<span class="built_in">min</span>(mi[u],val[i]);</span><br><span class="line">					<span class="keyword">if</span>(!vis[v]) vis[v]=<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mi[t]!=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">spfa</span>();ans+=d[t]*mi[t])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> v=t;v!=s;v=ver[pre[v]^<span class="number">1</span>]) val[pre[v]]-=mi[t],val[pre[v]^<span class="number">1</span>]+=mi[t];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> fy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,a[N][N];</span><br><span class="line"><span class="type">char</span> ss[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y+opt*n*m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ss[i]+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">			<span class="keyword">if</span>(ss[i][j]==<span class="string">&#x27;R&#x27;</span>) a[i][j]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ss[i][j]==<span class="string">&#x27;L&#x27;</span>) a[i][j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ss[i][j]==<span class="string">&#x27;D&#x27;</span>) a[i][j]=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">else</span> a[i][j]=<span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s=<span class="number">0</span>; t=n*m*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">id</span>(i,j,<span class="number">0</span>),x,y;</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=i+fx[k],y=j+fy[k];</span><br><span class="line">			<span class="keyword">if</span>(x==<span class="number">0</span>) x=n; <span class="keyword">if</span>(x&gt;n) x=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(y==<span class="number">0</span>) y=m; <span class="keyword">if</span>(y&gt;m) y=<span class="number">1</span>;</span><br><span class="line">			MCMF::<span class="built_in">add</span>(u,<span class="built_in">id</span>(x,y,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>-(a[i][j]==k));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,m) MCMF::<span class="built_in">add</span>(s,<span class="built_in">id</span>(i,j,<span class="number">0</span>),<span class="number">1</span>,<span class="number">0</span>),MCMF::<span class="built_in">add</span>(<span class="built_in">id</span>(i,j,<span class="number">1</span>),t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,MCMF::<span class="built_in">work</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>Delight for a Cat[bzoj4842]</title>
    <url>/2020/06/03/Delight-for-a-Cat-bzoj4842/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://vjudge.net/problem/HYSBZ-4842">vjudge</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先你可以先强制令所有时间都打隔膜。那么如果某个时间点变为了睡觉，那么收益就为 $c_i=a_i-b_i$。</p>
<p>然后令 $x_i$ 表示每个时间段是否变为睡觉，那么有：</p>
<p>$$\forall j\in [1,n-k+1],t_1\leq \sum_{i=j}^{j+k-1} x_i\leq k-t_2$$</p>
<p>根据线性规划的那套东西，我们再设变量 $y_i$，将不等式变为等式：</p>
<p>$$\forall j\in [1,n-k+1],\sum_{i=j}^{j+k-1} x_i+y_j-t_1=0,y_j\leq k-t_1-t_2$$</p>
<p>再这 $n-k+1$ 个方程后面添加 $0=0$，然后差分得到：</p>
<p>$$x_1+x_2+\cdots+x_k+y_1-t_1=0 \\ x_{k+1}-x_1+y_2-y_1=0 \\ x_{k+2}-x_2+y_3-y_2=0 \\ \vdots \\ x_n-x_{n-k}+y_{n-k+1}-y_{n-k}=0 \\ -x_{n-k+1}-x_{n-k+2}-\cdots-x_n-y_{n-k+1}+t_1=0$$</p>
<p>最后要使得 $\sum x_ic_i$ 最大。</p>
<p>然后你发现每个变量都只出现了两遍，且系数为 $1$ 和 $-1$。</p>
<p>那么把每个方程看做一个点，每个变量从系数为 $1$ 的点连向 $-1$ 的点。对于 $x_i$，流量为 $1$，费用为 $c_i$；对于 $y_i$，流量为 $k-t_1-t_2$，费用为 $0$。因为网络流有个非常好的就是除了源汇点之外，流入=流出。这样连边就相当于保证了变量的上限以及变量的守恒。</p>
<p>然后跑最大费用最大流就好了。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">40010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10005</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">namespace</span> MCMF&#123;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],ne[M],cost[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	ll d[N];</span><br><span class="line">	<span class="type">int</span> mi[N],pre[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; cost[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; cost[tot]=-c;ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,t) d[i]=-inf,vis[i]=pre[i]=mi[i]=<span class="number">0</span>;</span><br><span class="line">		d[s]=<span class="number">0</span>; pre[s]=<span class="number">0</span>; mi[s]=<span class="number">2e9</span>;</span><br><span class="line">		q.<span class="built_in">push</span>(s); vis[s]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); vis[u]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]&lt;d[u]+cost[i])</span><br><span class="line">			&#123;</span><br><span class="line">				d[v]=d[u]+cost[i]; pre[v]=i; mi[v]=<span class="built_in">min</span>(mi[u],val[i]);</span><br><span class="line">				<span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mi[t];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=<span class="number">1ll</span>*d[t]*mi[t];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> v=t;v;v=ver[pre[v]^<span class="number">1</span>]) val[pre[v]]-=mi[t],val[pre[v]^<span class="number">1</span>]+=mi[t];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll sum;</span><br><span class="line"><span class="type">int</span> n,k,t1,t2,a[N],b[N],pos[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); t1=<span class="built_in">read</span>(); t2=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) b[i]=<span class="built_in">read</span>(),sum+=b[i];</span><br><span class="line">	MCMF::s=<span class="number">0</span>; MCMF::t=n-k+<span class="number">3</span>;</span><br><span class="line">	MCMF::<span class="built_in">add</span>(MCMF::s,<span class="number">1</span>,k-t2,<span class="number">0</span>);</span><br><span class="line">	MCMF::<span class="built_in">add</span>(n-k+<span class="number">2</span>,MCMF::t,k-t2,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) MCMF::<span class="built_in">add</span>(<span class="built_in">max</span>(<span class="number">1</span>,i-k+<span class="number">1</span>),<span class="built_in">min</span>(i+<span class="number">1</span>,n-k+<span class="number">2</span>),<span class="number">1</span>,a[i]-b[i]),pos[i]=MCMF::head[<span class="built_in">max</span>(<span class="number">1</span>,i-k+<span class="number">1</span>)];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n-k+<span class="number">1</span>) MCMF::<span class="built_in">add</span>(i,i+<span class="number">1</span>,k-t1-t2,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum+MCMF::<span class="built_in">work</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">putchar</span>(MCMF::val[pos[i]]?<span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>线性规划</tag>
      </tags>
  </entry>
  <entry>
    <title>泳池[NOI2017]</title>
    <url>/2020/06/01/%E6%B3%B3%E6%B1%A0-NOI2017/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2304">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这种毒瘤DP谁想得到。。。</p>
<p>显然恰好为 $k$ 比较难算，</p>
<p>由于 $k$ 比较小，考虑DP，设 $g_i$ 表示前 $i$ 列中，第 $i$ 列的第一行格子必须不安全时的答案。</p>
<p>那么显然 $g_i$ 只跟前 $k$ 个值有关系。那么有 $g_i=\sum_{j=1}^kg_{i-j}h_j$。</p>
<p>最终的答案显然为 $\frac{g_{n+1}}{1-q}$。</p>
<p>如果算出了 $h_j$ 以及前 $k$ 项，那么就可以用常系数线性齐次递推做了，暴力多项式取模即可做到 $O(k^2\log n)$。</p>
<p>这个 $h_j$ 表示的 $j-1$ 列，$1001$ 行时，最大面积不超过 $k$ 的方案数。</p>
<p>考虑一个<del>我如何都想不到的</del>DP：设 $f_{i,j}$ 表示只有 $j$ 列，不考虑前 $i$ 行（即前 $i$ 行全都是安全的），第 $i+1$ 行开始出现不安全的，且最大面积不超过 $k$ 的方案数。设 $g_{i,j}=\sum_{k\geq i} f_{k,j}$。</p>
<p>那么当 $ij&gt;k$ 时，$f_{i,j}=0$。</p>
<p>否则，枚举第 $i+1$ 行，从左到右第 $1$ 个出现的不安全的点。</p>
<p>那么有：</p>
<p>$$f_{i,j}=\sum_{k=1}^jq^i(1-q)g_{i+1,k-1}g_{i,j-k}$$</p>
<p>这个DP看起来是 $O(k^3)$ 的，但由于 $ij\leq k$，实际上是 $O(k^2\log k)$ 的。</p>
<p>那么 $h_i$ 就很容易用 $f_{1,x}$ 来表示了。</p>
<p>时间复杂度 $O(k^2(\log k+\log n))$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2005</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll p,q,f[N][N],qw[N],g[N],h[N];</span><br><span class="line">ll a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,k) <span class="built_in">fo</span>(j,<span class="number">0</span>,k) c[i+j]=<span class="built_in">Add</span>(c[i+j],<span class="built_in">Mul</span>(a[i],b[j]));</span><br><span class="line">	<span class="built_in">fd</span>(i,k&lt;&lt;<span class="number">1</span>,k) <span class="built_in">fo</span>(j,<span class="number">0</span>,k) c[i+j-k]=<span class="built_in">Dec</span>(c[i+j-k],<span class="built_in">Mul</span>(c[i],h[j]));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,k<span class="number">-1</span>) a[i]=c[i],c[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Ppow</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">	a[<span class="number">1</span>]=<span class="number">1</span>; b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,<span class="built_in">mul</span>(a,a,m)) <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="built_in">mul</span>(b,a,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">Pow</span>(p,n);</span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">	<span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[m+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="built_in">fd</span>(i,m,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i][<span class="number">0</span>]=<span class="number">1</span>; t=<span class="built_in">min</span>(n,m/i);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,t)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,j<span class="number">-1</span>) f[i][j]=<span class="built_in">Add</span>(f[i][j],<span class="built_in">Mul</span>(f[i+<span class="number">1</span>][k],f[i][j<span class="number">-1</span>-k]));</span><br><span class="line">			f[i][j]=<span class="built_in">Add</span>(f[i+<span class="number">1</span>][j],<span class="built_in">Mul</span>(f[i][j],qw[i]*p%mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	m++;</span><br><span class="line">	g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>) g[i]=<span class="built_in">Add</span>(g[i],<span class="built_in">Mul</span>(g[j],<span class="built_in">Mul</span>(p,f[<span class="number">1</span>][i-j<span class="number">-1</span>])));</span><br><span class="line">	h[m]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,m) h[m-i]=<span class="built_in">Dec</span>(<span class="number">0</span>,<span class="built_in">Mul</span>(p,f[<span class="number">1</span>][i<span class="number">-1</span>]));</span><br><span class="line">	<span class="built_in">Ppow</span>(n+<span class="number">1</span>,m);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) ans=<span class="built_in">Add</span>(ans,b[i]*g[i]%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Mul</span>(ans,<span class="built_in">Pow</span>(p,mod<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); q=<span class="built_in">read</span>(); q=<span class="built_in">Mul</span>(q,<span class="built_in">Pow</span>(<span class="built_in">read</span>(),mod<span class="number">-2</span>));</span><br><span class="line">	qw[<span class="number">0</span>]=<span class="number">1</span>; p=<span class="built_in">Dec</span>(<span class="number">1</span>,q);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">1000</span>) qw[i]=<span class="built_in">Mul</span>(qw[i<span class="number">-1</span>],q);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Dec</span>(<span class="built_in">work</span>(m),<span class="built_in">work</span>(m<span class="number">-1</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>NOI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>常系数线性齐次递推</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串[FJWC2020Day3]</title>
    <url>/2020/06/01/%E5%AD%97%E7%AC%A6%E4%B8%B2-FJWC2020Day3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你喜欢字符串。有人送了你一个仅含小写字母的字符串。</p>
<p>由于你是一名优秀的 𝑂𝐼er，所以你决定对这个字符串展开研究。</p>
<p>定义两个字符串是相似的，当且仅当存在至多一个 $i$ ，使得这两个字符串中只有第 $i$ 个字母不同。</p>
<p>你取出了这个字符串中所有长度为 $m$ 的子串。你想知道，对于每个长度为 $m$ 的子串，有多少个其它长度为 $m$ 的子串与它相似。</p>
<p>$n\leq 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>也不知为啥别人的可以这么短。。。</p>
<p>显然，两个字符串 $i,j$ 是相似的当且仅当 $lcp(i,j)+lcs(i+m-1,j+m-1)\geq m-1$。</p>
<p>那么分别对正串和反串建出 SAM 的建出两棵树，记 $P1_i$ 和 $P2_i$ 表示第 $i$ 个长度为 $m$ 的字符串在两棵树中的所在的位置，那么上面的条件就是 $len_{lca1(P1_i,P1_j)}+len_{lca2(P2_i,P2_j)}\geq m-1$。</p>
<p>那么，我们可以对两棵树进行处理。</p>
<p>首先对第一棵树进行dsu on tree。枚举第一棵树的lca，那么上述条件就是 $len_{lca2(P2_i,P2_j)}\geq m-1-len_{lca}$</p>
<p>先递归处理轻儿子，然后将贡献删掉。然后递归重儿子，保留其贡献。</p>
<p>我们只需要考虑：</p>
<h4 id="轻儿子节点之间的贡献"><a href="#轻儿子节点之间的贡献" class="headerlink" title="轻儿子节点之间的贡献"></a>轻儿子节点之间的贡献</h4><p>对于一个节点 $u$，将轻儿子从左到右排成一列，只考虑 $j&lt;i$ 时 $j$ 对 $i$ 的贡献（否则反过来再处理一遍就可以了），那么枚举第 $i$ 个轻儿子的子树中的节点，考虑之前的所有节点，要使得在第二棵树上的 $len_{lca2}$ 大于等于 $k=m-1-len_{lca}$，那么用倍增找到这个节点在第二棵树上的祖先中最浅的节点 $w$，使得 $len_w\geq k$。</p>
<p>之后就在 $w$ 的子树中找有多少个节点满足这个节点在第一棵树中在 $j$ 的子树里。这个是一个单点加，区间查询，用树状数组维护即可。</p>
<h4 id="重儿子对轻儿子的贡献"><a href="#重儿子对轻儿子的贡献" class="headerlink" title="重儿子对轻儿子的贡献"></a>重儿子对轻儿子的贡献</h4><p>显然你不能再枚举一遍重儿子，那么再维护一个树状数组（表示的就是上面所说的贡献），意义跟第一种情况是几乎一样的，然后枚举轻儿子的所有节点，倍增，然后查询即可。</p>
<h4 id="轻儿子对重儿子的贡献"><a href="#轻儿子对重儿子的贡献" class="headerlink" title="轻儿子对重儿子的贡献"></a>轻儿子对重儿子的贡献</h4><p>显然你不能再枚举一遍重儿子，那么对于一个轻儿子子树中的节点 $v$ 而言，设它在一种情况中的 $w$ 是 $w_v$，那么所有满足在第一棵树重儿子的子树中且在第二棵树 $w_v$ 的子树中的节点的答案需要加 $1$。</p>
<p>这是一个矩形加，最后再单点查询的问题。</p>
<p>那么将矩形加离线，然后扫描线+树状数组解决即可。</p>
<p>综上，时间复杂度是 $O(n\log^2n)$ 的。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p><del>也就接近300行而已。。。</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,cnt;</span><br><span class="line"><span class="type">int</span> c[N],d[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> *b,<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=cnt;x+=<span class="built_in">lowbit</span>(x)) b[x]+=d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> *b,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">add</span>(b,l,d); <span class="built_in">add</span>(b,r+<span class="number">1</span>,-d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> *b,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) s+=b[x];</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> *b,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">ask</span>(b,r)-<span class="built_in">ask</span>(b,l<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][<span class="number">26</span>],len[N],fa[N],siz,las;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,siz) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),len[i]=fa[i]=<span class="number">0</span>;</span><br><span class="line">		siz=las=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> cur=++siz,p=las;</span><br><span class="line">		len[cur]=len[p]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> np=++siz;</span><br><span class="line">				len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[np],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				fa[np]=fa[q];</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=np;</span><br><span class="line">				fa[cur]=fa[q]=np;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur;</span><br><span class="line">		<span class="keyword">return</span> las;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> T2&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> dfl[N],dfr[N],tim,f[N][<span class="number">18</span>],len[N],p[N],id[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addtree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pre_dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfl[u]=++tim;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">17</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) f[v][<span class="number">0</span>]=u,<span class="built_in">pre_dfs</span>(v);</span><br><span class="line">		dfr[u]=tim;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">17</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[x][i]&amp;&amp;len[f[x][i]]&gt;=d) x=f[x][i];</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> T1&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> dfl[N],dfr[N],tim,id[N],p[N],siz[N],son[N],len[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addtree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pre_dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[u]=<span class="number">1</span>; dfl[u]=++tim;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">pre_dfs</span>(v);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[son[u]]&lt;siz[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">		dfr[u]=tim;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> _w[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> dd)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(id[u]) BIT::<span class="built_in">add</span>(c,T2::dfl[T2::p[id[u]]],dd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> t=id[u],v=T2::p[t],w=T2::<span class="built_in">jump</span>(v,k);</span><br><span class="line">		_w[u]=w;</span><br><span class="line">		ans[t]+=BIT::<span class="built_in">ask</span>(c,T2::dfl[w],T2::dfr[w]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add_dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">add</span>(u,d);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">add_dfs</span>(v,d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ask_dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">ask</span>(u,k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">ask_dfs</span>(v,k);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc_d</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> t=id[u],w=_w[u];</span><br><span class="line">		ans[t]+=BIT::<span class="built_in">ask</span>(d,T2::dfl[w],T2::dfr[w]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_d</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> dd)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(id[u]) BIT::<span class="built_in">add</span>(d,T2::dfl[T2::p[id[u]]],dd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add_d_dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">add_d</span>(u,d);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">add_d_dfs</span>(v,d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">calc_d_dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">calc_d</span>(u);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">calc_d_dfs</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">		<span class="type">int</span> l,r,d;</span><br><span class="line">	&#125;;</span><br><span class="line">	vector&lt;query&gt; q[N];</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> w=_w[u];</span><br><span class="line">		q[l].<span class="built_in">pb</span>((query)&#123;T2::dfl[w],T2::dfr[w],<span class="number">1</span>&#125;);</span><br><span class="line">		q[r+<span class="number">1</span>].<span class="built_in">pb</span>((query)&#123;T2::dfl[w],T2::dfr[w],<span class="number">-1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins_dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">ins</span>(u);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">ins_dfs</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> tot=adj[u].<span class="built_in">size</span>(),v,k=m<span class="number">-1</span>-len[u];</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(v,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u],<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ask</span>(u,k);</span><br><span class="line">		<span class="built_in">add</span>(u,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">ask_dfs</span>(v,k); <span class="built_in">add_dfs</span>(v,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">add</span>(u,<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add_dfs</span>(v,<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fd</span>(i,tot<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">ask_dfs</span>(v,k); <span class="built_in">add_dfs</span>(v,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ask</span>(u,k);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add_dfs</span>(v,<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">calc_d</span>(u);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">calc_d_dfs</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">add_d</span>(u,<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">			&#123;</span><br><span class="line">				v=adj[u][i];</span><br><span class="line">				<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">add_d_dfs</span>(v,<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(son[u]) <span class="built_in">add_d_dfs</span>(son[u],<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line">		l=dfl[son[u]],r=dfr[son[u]];</span><br><span class="line">		<span class="built_in">ins</span>(u);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			v=adj[u][i];</span><br><span class="line">			<span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">ins_dfs</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> g[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n-m+<span class="number">1</span>) g[dfl[p[i]]]=i;</span><br><span class="line">		<span class="type">int</span> si=tim;</span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,si)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> x:q[i]) BIT::<span class="built_in">add</span>(c,x.l,x.r,x.d);</span><br><span class="line">			<span class="keyword">if</span>(!g[i]) <span class="keyword">continue</span>;</span><br><span class="line">			ans[g[i]]+=BIT::<span class="built_in">ask</span>(c,T2::dfl[T2::p[g[i]]]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	SAM::<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		x=SAM::<span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=m) T1::p[i-m+<span class="number">1</span>]=x,T1::id[x]=i-m+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,SAM::siz) T1::<span class="built_in">addtree</span>(SAM::fa[i],i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,SAM::siz) T1::len[i]=SAM::len[i];</span><br><span class="line">	SAM::<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=SAM::<span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>(i+m<span class="number">-1</span>&lt;=n) T2::p[i]=x,T2::id[x]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,SAM::siz) T2::<span class="built_in">addtree</span>(SAM::fa[i],i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,SAM::siz) T2::len[i]=SAM::len[i];</span><br><span class="line">	cnt=SAM::siz;</span><br><span class="line">	T1::<span class="built_in">pre_dfs</span>(<span class="number">1</span>);</span><br><span class="line">	T2::<span class="built_in">pre_dfs</span>(<span class="number">1</span>);</span><br><span class="line">	T1::<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n-m+<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>SAM</tag>
        <tag>树状数组</tag>
        <tag>倍增</tag>
        <tag>扫描线</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>夕张的改造[FJWC2020Day4]</title>
    <url>/2020/05/30/%E5%A4%95%E5%BC%A0%E7%9A%84%E6%94%B9%E9%80%A0-FJWC2020Day4/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://gmoj.net/senior/#main/show/6569">jzoj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>提督们惊奇地发现，2019 年实装的改造非常少。</p>
<p>经调查，原来是改造厂的厂长于八日克扣了其他舰娘改造的图纸，并且在 2020 年的第一个月利用这些图纸进行了华丽的改造，一共有三种形态，于八日改二，于八日改二特，于八日改二丁，对空、对陆、对潜、开幕雷、五装备格，无所不能。镇守府雪菜八万钢惨遭退役。</p>
<p>舰娘的结构可以看成一棵 $n$ 个点的树，点编号为 $0 \sim n−1$。使用一张图纸可以把树中的某一条边去掉，再加上一条边，使得它依然是一棵树。</p>
<p>现在，于八日想在 2020 年继续拿走别的舰娘的图纸对自己进行改造，她一共拿走了 $k$ 张图纸。她想知道，自己经过接下来的改造之后，总共会有多少种形态。两个形态不同，表示有一条边 $(x,y)$ 在第一棵树中出现，在另一棵树中不出现。</p>
<p>$k\leq n\leq 50$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题还挺简单的。。。</p>
<p>刚开始在想树形DP，结果毫无思路，那么剩下的就只有矩阵树定理了。</p>
<p>题目实际上要求的是至多有不超过 $k$ 条边不出现在原树中的生成树。</p>
<p>我们知道，矩阵树定理求的是生成树的边权的乘积。</p>
<p>那么对于所有不在原树的边，边权为 $x$，否则为 $1$。求出来的行列式是一个 $n-1$ 次多项式。</p>
<p>然后想到暴力算多项式乘法，时间复杂度 $O(n^5)$。（应该过不了）</p>
<p>哪有人这么蠢的。既然是一个多项式，那么把 $x=1,2\cdots n$ 代进去，算出来后暴力拉格朗日差值就好了。</p>
<p>时间复杂度 $O(n^4)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   y%=(mod<span class="number">-1</span>);ll f=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) f=f*x%mod;</span><br><span class="line">   <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll a[N][N];</span><br><span class="line"><span class="type">bool</span> bo[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">guass</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>,tmp;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> j=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(k,i,n) <span class="keyword">if</span>(a[k][i]) &#123;j=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(j!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			ans=mod-ans;</span><br><span class="line">			<span class="built_in">ff</span>(k,i,n) <span class="built_in">swap</span>(a[j][k],a[i][k]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ff</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp=<span class="built_in">Pow</span>(a[i][i],mod<span class="number">-2</span>)*a[j][i]%mod;</span><br><span class="line">			<span class="built_in">ff</span>(k,i,n) a[j][k]=<span class="built_in">Dec</span>(a[j][k],tmp*a[i][k]%mod);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) ans=<span class="built_in">Mul</span>(ans,a[i][i]);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) <span class="built_in">ff</span>(j,<span class="number">0</span>,n) a[i][j]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> v;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		<span class="built_in">ff</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			v=bo[i][j]?<span class="number">1</span>:x;</span><br><span class="line">			a[i][j]-=v; a[j][i]-=v;</span><br><span class="line">			a[i][i]+=v; a[j][j]+=v;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,n) <span class="built_in">ff</span>(j,<span class="number">0</span>,n) a[i][j]=(a[i][j]+mod)%mod;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">guass</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll h[N],f[N],g[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>();</span><br><span class="line">		bo[x][i]=bo[i][x]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		ll tmp=<span class="built_in">calc</span>(i),d;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,n) g[j]=<span class="number">0</span>;</span><br><span class="line">		g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(j!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp=<span class="built_in">Mul</span>(tmp,(i&lt;j)?(mod-<span class="built_in">Pow</span>(j-i,mod<span class="number">-2</span>)):<span class="built_in">Pow</span>(i-j,mod<span class="number">-2</span>));</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				h[k]=<span class="built_in">Mul</span>(mod-j,g[k]);</span><br><span class="line">				<span class="keyword">if</span>(k) h[k]=<span class="built_in">Add</span>(h[k],g[k<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,n) g[k]=h[k],h[k]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,n) f[j]=<span class="built_in">Add</span>(f[j],<span class="built_in">Mul</span>(g[j],tmp));</span><br><span class="line">	&#125;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m) sum=<span class="built_in">Add</span>(sum,f[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>拉格朗日插值</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Honorable Mention[gym102331H]</title>
    <url>/2020/05/29/Honorable-Mention-gym102331H/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/gym/102331/problem/H">CF</a></p>
<p><a href="https://gmoj.net/senior/#main/show/6664">jzoj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个长度为 $n$ 的序列，$m$ 个询问，每次询问在 $[l,r]$ 内选出 $k$ 段互不相交的子段，使得子段和最大。</p>
<p>$n,m\leq 35000,k\leq r-l+1,|a_i|\leq 35000$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这跟之前某道题有点像啊。</p>
<p>$k$ 很小时，一个非常简单的做法是模拟费用流，每次在线段树中找出区间内的最大子段，然后加进答案里，再把这个子段的所有数变成其相反数。</p>
<p>这样的单次询问时间复杂度是 $O(k\log n)$ 的。</p>
<p>能在jzoj上获得大概 $28\sim 40$ 的分数。</p>
<p>这个做法无法再扩展下去了，我们考虑换另一种。</p>
<p>考虑DP，设 $f_i$ 表示在该区间中选 $i$ 段的最大值。</p>
<p>显然有 $f_{i+1}-f_i\leq f_i-f_{i-1}$，也就是说，$f_i$ 会形成一个上凸包的形式。</p>
<p>考虑如何将两个区间合并到一起。</p>
<p>设这两个区间为 $a,b$，假设先不考虑两个区间衔接的地方是否将选两次合成一次，那么就有：</p>
<p>$$f_{ab}(i)=\max_{j+k=i}\{f_a(j)+f_b(k)\}$$</p>
<p>又由于这个 $f$ 是一个上凸包的形式，这个式子相当于是对 $f_a$ 和 $f_b$ 两个凸包做了一次闵科夫斯基和。</p>
<p>那么就可以用归并的思路，将 $f_a,f_b$ 合并到一起。</p>
<p>考虑两个区间衔接的地方是否将选两次合成一次：对于每个区间，记录 $g_{0/1,0/1}$ 表示左右端点是否选择时的 $f$ 数组，当 $a$ 的右端点和 $b$ 的左端点均选择的时候，实际上就是将 $f_{ab}$ 向左移了一位。</p>
<p>那么就可以将这两个区间在线性时间内的答案合并到一起。</p>
<p>可以开一个线段树。预处理出线段树中区间的答案。</p>
<p>这一部分的时间复杂度是 $O(n\log n)$ 的，有个 $2^4$ 的常数。</p>
<p>然后考虑如何计算一个区间的答案。</p>
<p>显然这个区间可以表示成线段树中 $O(\log n)$ 的区间。</p>
<p>显然我们不能直接将这写区间合并到一起。</p>
<p>由于斜率是单调不增的，我们可以考虑使用wqs二分，二分答案对应的斜率，然后对于线段树中的每个区间，再来一次二分，找到斜率所对应的贡献即可。</p>
<p>时间复杂度是 $O(q\log^ n\log V)$ 的，还有至少是 $8$ 的常数。</p>
<p>这个显然过不了。</p>
<p>因为可以离线，我们使用整体二分也应是可以的。</p>
<p>但我们也可以一起二分，将这些询问的 $mid$ 值从大到小排序，然后对于每个那样的上凸包，都记录一个指针表示当前在哪里。对于每次外面的二分，这个指针只会向右移动。因此，每次外面的二分，所有的指针移动次数是 $O(n\log n)$ 级别的。</p>
<p>那么这样就不需要线段树里面的二分了。</p>
<p>时间复杂度 $O(n\log n+q\log v\log q+n\log n\log v)$，有个 $16$ 左右的常数。</p>
<p><strong>二分范围搞错了，导致调了好久。。。</strong></p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">35004</span>;</span><br><span class="line">ll sum;</span><br><span class="line"><span class="type">const</span> ll inf=N*N;</span><br><span class="line"><span class="type">const</span> ll INF=inf*N;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Vec vector<span class="string">&lt;ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">Vec g[N&lt;&lt;<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(Vec &amp;A,Vec b,Vec c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=b.<span class="built_in">size</span>()<span class="number">-1</span>,m=c.<span class="built_in">size</span>()<span class="number">-1</span>,nl=<span class="number">0</span>,ml=<span class="number">0</span>,tot=<span class="number">1</span>;</span><br><span class="line">	A.<span class="built_in">resize</span>(n+m+<span class="number">1</span>);</span><br><span class="line">	ll dec;</span><br><span class="line">	dec=A[<span class="number">0</span>]=b[<span class="number">0</span>]+c[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(;nl&lt;n&amp;&amp;ml&lt;m;tot++)</span><br><span class="line">		<span class="keyword">if</span>(b[nl+<span class="number">1</span>]-b[nl]&gt;c[ml+<span class="number">1</span>]-c[ml])</span><br><span class="line">		&#123;</span><br><span class="line">			dec+=b[nl+<span class="number">1</span>]-b[nl];</span><br><span class="line">			nl++; A[tot]=dec;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			dec+=c[ml+<span class="number">1</span>]-c[ml];</span><br><span class="line">			ml++; A[tot]=dec;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(;nl&lt;n;tot++,nl++) dec+=b[nl+<span class="number">1</span>]-b[nl],A[tot]=dec;</span><br><span class="line">	<span class="keyword">for</span>(;ml&lt;m;tot++,ml++) dec+=c[ml+<span class="number">1</span>]-c[ml],A[tot]=dec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(Vec &amp;A,Vec B,<span class="type">bool</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		A[i]=<span class="built_in">max</span>(A[i],B[i]);</span><br><span class="line">		<span class="keyword">if</span>(opt&amp;&amp;i) A[i<span class="number">-1</span>]=<span class="built_in">max</span>(A[i<span class="number">-1</span>],B[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			g[x][i][j].<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>) g[x][i][j][k]=-inf;</span><br><span class="line">		&#125;</span><br><span class="line">		g[x][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>; t=g[x][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">read</span>();</span><br><span class="line">		sum+=<span class="built_in">abs</span>(t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">	Vec A;</span><br><span class="line">	<span class="type">int</span> len=r-l+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(u,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(v,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		g[x][u][v].<span class="built_in">resize</span>(len+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,len) g[x][u][v][i]=-INF;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(u,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(v,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(w,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(t,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		A.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">get</span>(A,g[lc][u][v],g[rc][w][t]);</span><br><span class="line">		<span class="built_in">merge</span>(g[x][u][t],A,v&amp;&amp;w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//calc(g)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll x; <span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.x!=B.x) <span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">		<span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (node)&#123;A.x+B.x,A.y+B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> now,pos[N&lt;&lt;<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">node f[<span class="number">2</span>],pre[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">find</span><span class="params">(Vec &amp;A,<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;p&lt;A.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;A[p+<span class="number">1</span>]-A[p]&gt;=now;p++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcf</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) pre[i]=f[i],f[i]=(node)&#123;-inf,-inf&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(x,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(y,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">find</span>(g[u][x][y],pos[u][x][y]);</span><br><span class="line">		node tmp=(node)&#123;g[u][x][y][pos[u][x][y]],pos[u][x][y]&#125;,las;</span><br><span class="line">		<span class="built_in">fo</span>(z,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			las=tmp+pre[z]; las.x-=<span class="number">1ll</span>*tmp.y*now;</span><br><span class="line">			f[y]=<span class="built_in">max</span>(f[y],las);</span><br><span class="line">			<span class="keyword">if</span>(z&amp;&amp;x)</span><br><span class="line">			&#123;</span><br><span class="line">				las.y--; las.x+=now;</span><br><span class="line">				f[y]=<span class="built_in">max</span>(f[y],las);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> (<span class="type">void</span>)(<span class="built_in">calcf</span>(x));</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">ask</span>(ls,L,R);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">ask</span>(rs,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,k,L,R;</span><br><span class="line">&#125;q[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="type">int</span> id[N],mid[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) mid[i]=((ll)q[i].L+q[i].R)&gt;&gt;<span class="number">1</span>,id[i]=i;</span><br><span class="line">	<span class="built_in">sort</span>(id+<span class="number">1</span>,id+m+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> mid[x]&gt;mid[y];&#125;);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n&lt;&lt;<span class="number">2</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>) pos[i][j][k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x,flag;;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">init</span>(); flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			x=id[i];</span><br><span class="line">			<span class="keyword">if</span>(q[x].L&gt;q[x].R) <span class="keyword">continue</span>;</span><br><span class="line">			flag=<span class="number">0</span>; now=mid[x];</span><br><span class="line">			f[<span class="number">0</span>]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; f[<span class="number">1</span>]=(node)&#123;-inf,inf&#125;;</span><br><span class="line">			<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,q[x].l,q[x].r);</span><br><span class="line">			f[<span class="number">0</span>]=<span class="built_in">max</span>(f[<span class="number">0</span>],f[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(f[<span class="number">0</span>].y&gt;=q[x].k) q[x].L=mid[x]+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> q[x].R=mid[x]<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) mid[i]=q[i].L<span class="number">-1</span>,id[i]=i;</span><br><span class="line">	<span class="built_in">sort</span>(id+<span class="number">1</span>,id+m+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> mid[x]&gt;mid[y];&#125;);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n&lt;&lt;<span class="number">2</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>) pos[i][j][k]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=id[i];</span><br><span class="line">		now=mid[x];</span><br><span class="line">		f[<span class="number">0</span>]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; f[<span class="number">1</span>]=(node)&#123;-inf,inf&#125;;</span><br><span class="line">		<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,q[x].l,q[x].r);</span><br><span class="line">		f[<span class="number">0</span>]=<span class="built_in">max</span>(f[<span class="number">0</span>],f[<span class="number">1</span>]);</span><br><span class="line">		ans[x]=f[<span class="number">0</span>].x+<span class="number">1ll</span>*q[x].k*now;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		q[i].l=<span class="built_in">read</span>(),q[i].r=<span class="built_in">read</span>(),q[i].k=<span class="built_in">read</span>();</span><br><span class="line">		q[i].L=<span class="number">-35000</span>; q[i].R=sum/q[i].k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>网络流</tag>
        <tag>闵科夫斯基和</tag>
        <tag>线段树</tag>
        <tag>wqs二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Easy Win[gym102331E]</title>
    <url>/2020/05/29/Easy-Win-gym102331E/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://codeforces.com/gym/102331/problem/E">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$m$ 条边，有边权 $a$ 和价值 $v$。在前 $i$ 条边中选出若干条，使得不存在一个环，边权的异或和为 $0$。求选的边的价值之和的最大值。</p>
<p>$n\leq 64,a_i&lt; 2^{60},v_i\leq 10^9$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>边权的异或和不为 $0$，可以看成是这些向量都线性无关。</p>
<p>但现在加多了一个环的条件。发现 $n$ 非常小，可以从中搞些事情。</p>
<p>对于一条边 $(x,y,a)$，我们只需要把边权改为 $a+2^{60}(2^x+2^y)$。</p>
<p>那么成环且异或和为 $0$ 的条件就变为了这些边权形成的向量线性相关。</p>
<p>题目转换成，求在前 $i$ 个向量里，选出一些使得它们线性无关，且向量的权值和最大。</p>
<p>如果不是求前缀，则可以排个序，然后从大到小插入线性基里。</p>
<p>现在可以对于线性基里的每个数，记录它是由哪些向量异或得来的。</p>
<p>加入一个向量，如果最后无法插入线性基里，变成了 $0$，则替换掉表示这个向量的所有向量中，权值最小的那个，然后更新由哪些向量得来的数组即可。</p>
<p>时间复杂度 $O(q\frac{(n+60)^2}{w})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">128</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Bit bitset<span class="string">&lt;M&gt;</span></span></span><br><span class="line">ll ans;</span><br><span class="line">Bit b[M],a[M];</span><br><span class="line"><span class="type">bool</span> vis[M];</span><br><span class="line">ll val[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(Bit u,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Bit now; now.<span class="built_in">reset</span>();</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">125</span>,<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">if</span>(u[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				vis[i]=<span class="number">1</span>; ans+=v; val[i]=v;</span><br><span class="line">				b[i]=u; a[i]=now;</span><br><span class="line">				a[i][i]=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			u^=b[i]; now^=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">125</span>)</span><br><span class="line">		<span class="keyword">if</span>(vis[i]&amp;&amp;now[i])</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="number">-1</span>||val[i]&lt;val[t]) t=i;</span><br><span class="line">	<span class="keyword">if</span>(v&gt;val[t])</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=v-val[t];</span><br><span class="line">		now[t]=<span class="number">0</span>; val[t]=v;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">125</span>) <span class="keyword">if</span>(vis[i]&amp;&amp;a[i][t]) a[i]^=now;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>();</span><br><span class="line">	Bit b;</span><br><span class="line">	<span class="type">int</span> x,y,v;</span><br><span class="line">	ll a;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>()<span class="number">-1</span>,y=<span class="built_in">read</span>()<span class="number">-1</span>; a=<span class="built_in">read</span>(); v=<span class="built_in">read</span>();</span><br><span class="line">		b.<span class="built_in">reset</span>();</span><br><span class="line">		b[x]=<span class="number">1</span>; b[y]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,<span class="number">60</span>) <span class="keyword">if</span>((a&gt;&gt;i)&amp;<span class="number">1</span>) b[<span class="number">64</span>+i]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">ins</span>(b,v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
        <category>jzoj</category>
      </categories>
      <tags>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>图[FJWC2020Day3]</title>
    <url>/2020/05/28/%E5%9B%BE-FJWC2020Day3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一张 $n$ 个点，$m$ 条边的无向图，你想选出一个非空点集，使得仅保留这个点集中的点和两个端点都在这个点集里的边后得到的图是连通的。你想知道有多少种可能的选点集的方案。</p>
<p>对 $2$ 取模。</p>
<p>$n\leq 50$，对于所有的边 $(x,y)$，均有 $|x-y|\leq 12$。</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这种毒瘤题谁想得到啊qwq。</p>
<p>看到 $|x-y|\leq 12$，能想到状压，也就是 $f_{i,s}$ 表示前 $i$ 位，$[i-11,i]$ 状态为 $s$ 的答案是什么。</p>
<p>导出子图连通，也就是连通块个数为 $1$，否则大于 $1$。</p>
<p>又看到答案对 $2$ 取模。如果用 $cnt$ 表示连通块个数，那么计算 $\sum 2^{cnt}\mod 4$ 就可以了。（这谁想得到啊qwq）</p>
<p>因为当连通块个数大于 $1$ 时，$2^{cnt}\equiv 0\pmod 4$。</p>
<p>而我们知道，连通块个数是非常难统计的。我们转换一下，对于一个导出子图，变成求将点分成两个部分，不同部分的点之间没有连边的方案数。</p>
<p>那么就可以状压了，一个点有三个状态，分别是不在导出子图里，在第一部分，在第二部分。</p>
<p>转移很简单。</p>
<p>最后记得将空集去掉。</p>
<p>时间复杂度 $O(n\times 12\times 3^{12})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">531442</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">bool</span> bo[N][N];</span><br><span class="line"><span class="type">int</span> pw[<span class="number">13</span>],f[N][M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">bit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x/pw[y]%<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(graph);</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		bo[x][y]=bo[y][x]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">12</span>) pw[i]=pw[i<span class="number">-1</span>]*<span class="number">3</span>;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> w,t,b[<span class="number">4</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="built_in">ff</span>(s,<span class="number">0</span>,pw[<span class="number">12</span>])</span><br><span class="line">			<span class="keyword">if</span>(w=f[i<span class="number">-1</span>][s])</span><br><span class="line">			&#123;</span><br><span class="line">				t=s/<span class="number">3</span>;</span><br><span class="line">				(f[i][t]+=w)&amp;=<span class="number">3</span>;</span><br><span class="line">				b[<span class="number">1</span>]=b[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">ff</span>(j,<span class="built_in">max</span>(<span class="number">13</span>-i,<span class="number">0</span>),<span class="number">12</span>)</span><br><span class="line">					<span class="keyword">if</span>(bo[i][i<span class="number">-12</span>+j])</span><br><span class="line">						b[<span class="number">3</span>-<span class="built_in">bit</span>(s,j)]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(b[<span class="number">1</span>]) (f[i][t+pw[<span class="number">11</span>]]+=w)&amp;=<span class="number">3</span>;</span><br><span class="line">				<span class="keyword">if</span>(b[<span class="number">2</span>]) (f[i][t+<span class="number">2</span>*pw[<span class="number">11</span>]]+=w)&amp;=<span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">3</span>;</span><br><span class="line">	<span class="built_in">ff</span>(s,<span class="number">0</span>,pw[<span class="number">12</span>]) (ans+=f[n][s])&amp;=<span class="number">3</span>;</span><br><span class="line">	ans&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>挖宝[FJWC2020Day3]</title>
    <url>/2020/05/28/%E6%8C%96%E5%AE%9D-FJWC2020Day3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个挖宝游戏，它在一棵 n 个点的树上进行，宝藏埋在某个未知的点 $𝑥$ 。每次挖掘一个点 $u$，玩家得到的反馈信息是一个数值 $d$，表示 $u$ 号点到 $𝑥$ 号点简单路径上的边数。这个游戏会进行 $q$ 次，每次游戏藏宝的位置不一定相同。</p>
<p>你作为一名优秀的 OIer，对自己无比自信。你希望用最少的挖掘次数来找出宝藏。于是你挑了两个不同的点 $a,b$ 进行挖掘，并得到了反馈信息，分别为 $d_a,d_b$。接下来的第三次挖掘中，你想要直接奔着一个可能的 $𝑥$ 进行挖掘。由于树太大了，凭借人眼无法找出 $𝑥$ 的确切位置，你便转向了电脑，开始写一个程序，帮助你解决这个问题。</p>
<p>$n,q\leq 10^6,1\leq d \leq n$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道这么简单的lca写完后都调了1个多小时。。。</p>
<p>主要还是有一些细节没有考虑到。</p>
<p>首先通过树上倍增，我们可以在 $O(\log n)$ 的时间内，求出两点的 $lca$，某个点到根节点路径中距离为 $d$ 的点，某个点到另外一点的路径中距离为 $d$ 的点。</p>
<p>设 $k=\frac{d_a+d_b-dist(a,b)}{2}$，这个 $k$ 表示的是，$a$ 到 $x$ 和 $b$ 到 $x$ 这两条路径在最后面的重合的长度。</p>
<p>显然如果 $k$ 不为整数或者 $&lt;0$ 就一定无解。</p>
<p>那么就可以找到从 $a$ 出发到 $b$ 的路径中第 $d_a-k$ 个点，设为 $z$。（显然如果 $d_a-k&lt;0$ 或者 $d_a-k&gt;dist(a,b)$ 也无解。）</p>
<p>转换成求任意一点 $x$，满足从 $z$ 出发，不经过 $a,b$ 两点的方向到达 $x$，且距离为 $k$。</p>
<p>那么就可以先判断满足条件的最远的点到 $z$ 的距离是否大于等于 $k$，如果存在，那么就从 $z$ 往这个点跳 $k$ 步即可。</p>
<p>假定 $1$ 为根，然后dfs找出子树中路径前 $3$ 长的路径，以及往根方向走的最长的路径。这样就可以枚举这 $4$ 个方向，然后判断这四个方向到 $z$ 的路径是否符合条件，分类讨论一下即可。</p>
<p>时间复杂度 $O(n\log n)$，常数有点大。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,dep[N],f[N][<span class="number">21</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> u,d;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.d&gt;=B.d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!B.u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!A.u) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> A.d&lt;B.d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> <span class="type">int</span> &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (node)&#123;A.u,A.d+B&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	node a[<span class="number">3</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(node b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		b.d++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span>(b&gt;=a[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fd</span>(j,<span class="number">1</span>,i) a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">				a[i]=b;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;mx[N];</span><br><span class="line">node h[N];</span><br><span class="line"><span class="type">int</span> tim,l[N],r[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	l[u]=++tim;</span><br><span class="line">	dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">	f[u][<span class="number">0</span>]=pre;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">20</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		mx[u].<span class="built_in">ins</span>(mx[v].a[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	mx[u].<span class="built_in">ins</span>((node)&#123;u,<span class="number">-1</span>&#125;);</span><br><span class="line">	r[u]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span>(dep[f[y][i]]&gt;=dep[x]) y=f[y][i];</span><br><span class="line">	<span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">	<span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> dep[x]+dep[y]-(dep[<span class="built_in">lca</span>(x,y)]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) x=f[x][i];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,node g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	h[u]=g;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(mx[u].a[<span class="number">0</span>].d==<span class="built_in">dist</span>(v,mx[u].a[<span class="number">0</span>].u)+<span class="number">1</span>) <span class="built_in">dfs2</span>(v,u,<span class="built_in">max</span>(g+<span class="number">1</span>,mx[u].a[<span class="number">1</span>]+<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs2</span>(v,u,<span class="built_in">max</span>(g+<span class="number">1</span>,mx[u].a[<span class="number">0</span>]+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> z=<span class="built_in">lca</span>(x,y);</span><br><span class="line">	<span class="keyword">if</span>(dep[x]-dep[z]&gt;=d) <span class="keyword">return</span> <span class="built_in">jump</span>(x,d);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">jump</span>(y,(dep[x]+dep[y]-(dep[z]&lt;&lt;<span class="number">1</span>))-d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">dist</span>(x,y)+<span class="built_in">dist</span>(y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> l[x]&lt;=l[a]&amp;&amp;l[a]&lt;=r[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k,<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	node u;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">if</span>(mx[x].a[i].d&gt;=k)</span><br><span class="line">	&#123;</span><br><span class="line">		u=mx[x].a[i];</span><br><span class="line">		<span class="comment">//DEBUG(u.u);</span></span><br><span class="line">		<span class="keyword">if</span>((!<span class="built_in">check</span>(x,a)||<span class="built_in">lca</span>(u.u,a)==x)&amp;&amp;(!<span class="built_in">check</span>(x,b)||<span class="built_in">lca</span>(u.u,b)==x)) <span class="keyword">return</span> <span class="built_in">jump</span>(x,u.u,k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cerr&lt;&lt;&quot;FUCK&quot;&lt;&lt;h[x].d;</span></span><br><span class="line">	<span class="keyword">if</span>(h[x].d&gt;=k)</span><br><span class="line">	&#123;</span><br><span class="line">		u=h[x];</span><br><span class="line">		<span class="comment">//DEBUG(u.u);</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(x,a)&amp;&amp;<span class="built_in">check</span>(x,b))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//DEBUG(k);</span></span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">jump</span>(x,u.u,k);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(hunting);</span><br><span class="line">	n=<span class="built_in">read</span>(); <span class="type">int</span> q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>); <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x,y,dx,dy,dis,k,z;q--;)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(); dx=<span class="built_in">read</span>(); y=<span class="built_in">read</span>(); dy=<span class="built_in">read</span>();</span><br><span class="line">		z=<span class="built_in">lca</span>(x,y); dis=dep[x]+dep[y]-(dep[z]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		k=dx+dy-dis;</span><br><span class="line">		<span class="keyword">if</span>(k&lt;<span class="number">0</span>||(k&amp;<span class="number">1</span>)) &#123;<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		k/=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(dx-k&lt;<span class="number">0</span>||dx-k&gt;dis) &#123;<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(dep[x]-dep[z]&gt;=dx-k) z=<span class="built_in">jump</span>(x,dx-k);</span><br><span class="line">		<span class="keyword">else</span> z=<span class="built_in">jump</span>(y,dy-k);</span><br><span class="line">		<span class="comment">//DEBUG(z); DEBUG(k);</span></span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,z);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">work</span>(z,k,x,y));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>LCA</tag>
        <tag>倍增</tag>
        <tag>换根DP</tag>
      </tags>
  </entry>
  <entry>
    <title>黑红兔[FJWC2020Day1]</title>
    <url>/2020/05/27/%E9%BB%91%E7%BA%A2%E5%85%94-FJWC2020Day1/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/%E9%BB%91%E7%BA%A2%E5%85%94-FJWC2020Day1/problem.png" alt="problem"></p>
<p>$n\leq 5\times 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>（好神仙的一道题）</p>
<p>首先经过一波分析，我得到了以下几个性质：</p>
<p>1，必定存在一种最优方案，使得子串的长度依次递减 1。即若答案为 $k$，则必有一种选法使得从左往右的子串大小为 $k,k-1\cdots2,1$。</p>
<p>2，答案不会超过 $\sqrt n$。</p>
<p>那么就可以进行DP，设 $f_i$ 表示从后往前考虑到第 $i$ 位时，以这一位开头的字符串作为第一个字符串，答案最大能是多少。</p>
<p>那么可以二分，考虑长度为 $mid$ 的字符串是否可行。</p>
<p>需要看在 $[i+mid,n]$ 内，是否存在一个 $j$，满足 $f_j\geq mid-1$，且 $s[j,n]$ 和 $s[i,i+mid-1]$ 的最长公共子串的长度是否大于等于 $mid-1$。</p>
<p>后面的部分就是：$lcp(i,j)\geq mid-1$ 或 $lcp(i+1,j)\geq mid-1$。</p>
<p>对于这两部分分开来考虑，而 $lcp(i,j)\geq mid-1$ 相当于 $rank_j$ 需要满足在某段区间内，这个区间可以用SA+RMQ+二分轻易求出，设这个区间为 $[l,r]$。</p>
<p><del>转换成二维数点求最大值</del>转换成求 $\max_{i+mid\leq j \leq n,l\leq rank_j\leq r}\{f_j\}$。</p>
<p>考虑到 $n$ 是固定的，那么维护一个可持久化线段树，表示 $i\leq j \leq n$ 的答案，每次询问时找 $rt_{i+mid}$ 即可。</p>
<p>时间复杂度是 $O(n\log^2n)$ 的。收获80pts。</p>
<p><del>那么我们开始卡常</del>考虑继续分析性质。</p>
<p>参考题解，我们发现一个及其神奇的和SA的height数组极像的性质：$f_i\leq f_{i+1}+1$。</p>
<p>不会证明，感性理解下。。。</p>
<p>那么就不需要二分 $f_i$ 的答案了，直接搞就好。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>没测过，但应该没啥问题qwq。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=N*<span class="number">60</span>;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">namespace</span> SA&#123;</span><br><span class="line">	<span class="type">int</span> base[N],rk[N],t[N],sa[N],height[N],f[N][<span class="number">20</span>],l2[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (t[x]==t[y])&amp;&amp;(t[x+l]==t[y+l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[n+<span class="number">1</span>]=<span class="number">254</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) rk[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>,t[i]=i;</span><br><span class="line">		<span class="built_in">rsort</span>(n,m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			p=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">			<span class="built_in">rsort</span>(n,p);</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">			rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=(<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">			<span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rk[i]<span class="number">-1</span>];s[i+k]==s[j+k];k++);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i];</span><br><span class="line">		l2[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="number">19</span>)</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> l=l2[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">min</span>(f[x][l],f[y-(<span class="number">1</span>&lt;&lt;l)+<span class="number">1</span>][l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k,<span class="type">int</span> &amp;L,<span class="type">int</span> &amp;R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		L=R=x; k--;</span><br><span class="line">		<span class="type">int</span> l,r,mid;</span><br><span class="line">		<span class="keyword">for</span>(l=<span class="number">1</span>,r=x<span class="number">-1</span>;l&lt;=r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ask</span>(mid+<span class="number">1</span>,x)&gt;=k) L=mid,r=mid<span class="number">-1</span>; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(l=x+<span class="number">1</span>,r=n;l&lt;=r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ask</span>(x+<span class="number">1</span>,mid)&gt;=k) R=mid,l=mid+<span class="number">1</span>; <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> SA::rk;</span><br><span class="line"><span class="type">int</span> rt[N];</span><br><span class="line"><span class="keyword">namespace</span> PST&#123;</span><br><span class="line">	<span class="type">int</span> ls[M],rs[M],mx[M],cnt;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> v,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		u=++cnt; ls[u]=ls[v]; rs[u]=rs[v]; mx[u]=<span class="built_in">max</span>(mx[v],x);</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		(p&lt;=mid)?<span class="built_in">add</span>(ls[u],ls[v],l,mid,p,x):<span class="built_in">add</span>(rs[u],rs[v],mid+<span class="number">1</span>,r,p,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> mx[u];</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(ls[u],l,mid,L,R));</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(rs[u],mid+<span class="number">1</span>,r,L,R));</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i+k&lt;=n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l,r,mx=<span class="number">0</span>;</span><br><span class="line">		SA::<span class="built_in">work</span>(rk[i],k,l,r);</span><br><span class="line">		mx=PST::<span class="built_in">ask</span>(rt[i+k],<span class="number">1</span>,n,l,r);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;n)</span><br><span class="line">		&#123;</span><br><span class="line">			SA::<span class="built_in">work</span>(rk[i+<span class="number">1</span>],k,l,r);</span><br><span class="line">			mx=<span class="built_in">max</span>(mx,PST::<span class="built_in">ask</span>(rt[i+k],<span class="number">1</span>,n,l,r));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mx&gt;=k<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;!<span class="built_in">check</span>(i,k);k--);</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(brr);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	SA::<span class="built_in">build</span>(s,n,<span class="number">255</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=<span class="built_in">calc</span>(i,f[i+<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">		PST::<span class="built_in">add</span>(rt[i],rt[i+<span class="number">1</span>],<span class="number">1</span>,n,rk[i],f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jzoj</category>
        <category>FJWC</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
        <tag>线段树</tag>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>我们的 CPU 遭到攻击[loj558]</title>
    <url>/2020/05/25/%E6%88%91%E4%BB%AC%E7%9A%84-CPU-%E9%81%AD%E5%88%B0%E6%94%BB%E5%87%BB-loj558/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/558">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>毒瘤lct。。。</p>
<p>显然先建一个lct，然后看看对于一个节点怎么维护。</p>
<p>我们知道，lct中一棵splay代表的是树上的一条链，中序遍历就是链从上往下的节点。</p>
<p>那么对于一个节点 $x$，它的左儿子就是到根路径的第一个点。</p>
<p>考虑如何维护答案。</p>
]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>事情的相似度[loj6041]</title>
    <url>/2020/05/24/%E4%BA%8B%E6%83%85%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6-loj6041/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6041">链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>多次询问前缀在 $[l,r]$ 中选两个的最长公共后缀。</p>
<p>$n\leq 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先你显然先建一个SAM，然后构造出 fail 树。</p>
<p>接着我想了一个 $n\sqrt n\log n$ 的做法，也就是用莫队，然后每次增加或删除一个点用个 set 去维护它，这个过程需要求个 lca。</p>
<p>不过不需要这么麻烦（也不知能不能过）。</p>
<p>显然将所有的询问离线，按 $r$ 从小到大排序。</p>
<p>对于两个前缀 $a,b$ 的贡献，不妨在 $a$ 那里统计它，那么假设考虑到右端点到 $r$ 时，$a$ 的最大值为 $mx_a$，那么答案就是 $\max_{l\leq i \leq r}\{mx_i\}$。</p>
<p>现在只需要看这个 $mx_i$ 怎么求。</p>
<p>考虑新加一个节点 $pos_i$ 上去，然后将它到根中所有的点都染成颜色 $i$。那么这条路径中的点之前的颜色就能有贡献，对于一种颜色 $j$，显然染成 $j$ 的节点形成了一条到根的连续的路径。那么颜色 $j$ 的需要跟 $mx_j$ 比较的数就是 $pos_i$ 往根跳的路径中，第一个为颜色 $j$ 的节点的 $len$。</p>
<p>但是你会发现，有些颜色会被覆盖掉，$mx$ 的值不对。不过这是没有关系的，因为是按顺序加进去的，其他颜色会统计这个贡献。</p>
<p>那么就能用上面这种方法了，维护一个不换根的lct，加一个树状数组求单点修改后缀最值即可。</p>
<p>时间复杂度 $O(n\log n)$ 左右？</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line">    <span class="type">int</span> mx[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) mx[x]=<span class="built_in">max</span>(mx[x],d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) ans=<span class="built_in">max</span>(ans,mx[x]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">    <span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],col[N],len[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isroot</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>]!=x&amp;&amp;ch[fa[x]][<span class="number">1</span>]!=x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">son</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> y=fa[x],z=fa[y],d=<span class="built_in">son</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) ch[z][<span class="built_in">son</span>(y)]=x; fa[x]=z;</span><br><span class="line">        ch[y][d]=ch[x][<span class="number">1</span>-d]; fa[ch[y][d]]=y;</span><br><span class="line">        ch[x][<span class="number">1</span>-d]=y; fa[y]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">0</span>]) col[ch[x][<span class="number">0</span>]]=col[x];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">1</span>]) col[ch[x][<span class="number">1</span>]]=col[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(!<span class="built_in">isroot</span>(x)) <span class="built_in">push</span>(fa[x]); <span class="built_in">pushdown</span>(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=fa[x];!<span class="built_in">isroot</span>(x);<span class="built_in">rotate</span>(x),y=fa[x])</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) <span class="built_in">rotate</span>((<span class="built_in">son</span>(x)^<span class="built_in">son</span>(y))?x:y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;x;y=x,x=fa[x])</span><br><span class="line">            <span class="built_in">splay</span>(x),ch[x][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">access</span>(x); <span class="built_in">splay</span>(y); <span class="built_in">splay</span>(x);</span><br><span class="line">        fa[y]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;x;y=x,x=fa[x])</span><br><span class="line">            <span class="built_in">splay</span>(x),BIT::<span class="built_in">add</span>(col[x],len[x]),col[x]=c,ch[x][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">    <span class="type">int</span> ne[N][<span class="number">2</span>],fa[N],len[N],siz,las;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz=las=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur=++siz,p=las;</span><br><span class="line">        len[cur]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">        <span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> q=ne[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> clone=++siz;</span><br><span class="line">                <span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">                len[clone]=len[p]+<span class="number">1</span>; fa[clone]=fa[q];</span><br><span class="line">                <span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">                fa[q]=fa[cur]=clone;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        las=cur;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">2</span>,siz) LCT::<span class="built_in">link</span>(fa[i],i);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,siz) LCT::len[i]=len[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> query &amp;A,<span class="type">const</span> query &amp;B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> A.r&lt;B.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> pos[N],ans[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    SAM::<span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) pos[i]=SAM::<span class="built_in">extend</span>(s[i]^<span class="number">48</span>);</span><br><span class="line">    SAM::<span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) q[i].l=<span class="built_in">read</span>(),q[i].r=<span class="built_in">read</span>(),q[i].id=i;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCT::<span class="built_in">add</span>(pos[i],i);</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;=m&amp;&amp;q[j].r==i;j++) ans[q[j].id]=BIT::<span class="built_in">ask</span>(q[j].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>SAM</tag>
        <tag>树状数组</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>反回文串[SDOI2018]</title>
    <url>/2020/05/22/%E5%8F%8D%E5%9B%9E%E6%96%87%E4%B8%B2-SDOI2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/P4607">luogu</a></p>
<p><a href="https://loj.ac/problem/2563">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求字符集大小为 $k$ 的，长度为 $n$ 的所有字符串，满足存在至少一种旋转同构的情况，使得旋转后该串为回文串。</p>
<p>$k\leq n\leq 10^{18}$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>假设我们先枚举回文串，然后计算这个回文串有多少种情况。这个方案数相当于就是，你一直将这个回文串旋转，直到变成了另外一个回文串，此时旋转的次数就是方案数。</p>
<p>可以发现，对于一个回文串，这旋转的次数和它最小的循环节有关（此处的循环节指倍长后相等）。</p>
<p>如果最小的循环节 $d$ 是偶数，那么旋转的次数为 $\frac{d}{2}$，否则旋转的次数为 $d$。</p>
<p>那么试着枚举这个 $d$。设 $f(d)$ 表示长度为 $n$，字符集大小为 $k$，最小循环节的长度为 $d$ 的回文串个数，设 $g(n)=k^{\lceil \frac{n}{2}\rceil}$ 表示长度为 $n$，字符集大小为 $k$ 的回文串个数。</p>
<p>显然有：$\sum_{d|n}f(d)=g(n)$。</p>
<p>莫比乌斯反演：$\sum_{d|n}\mu(\frac{n}{d})g(d)=f(n)$</p>
<p>设 $h(d)$ 为当循环节为 $d$ 时的旋转次数，即 $h(d)=\frac{d}{1+[2|d]}$。</p>
<p>那么最终答案就是：</p>
<p>$$\sum_{d|n}f(d)h(d)\=\sum_{d|n}h(d)\sum_{m|d}\mu(\frac{d}{m})g(m)\=\sum_{m|n}g(m)\sum_{d|\frac{n}{m}}\mu(d)h(dm)$$</p>
<p>下面来看看 $W(k,m)=\sum_{d|k}\mu(d)h(dm)$ 怎样求？</p>
<p>可以发现，当 $m$ 为奇数，$k$ 为偶数的时候，$W(k,m)=0$。</p>
<p>其他情况，则有：$W(k,m)=h(m)\sum_{d|k}\mu(d)d$</p>
<p>那么答案就是：$\sum_{m|n}g(m)h(m)[m\equiv 1&amp; \frac{n}{m}\equiv 0]\sum_{d|\frac{n}{m}}\mu(d)d$</p>
<p>然后再来看看 $\sum_{d|k}\mu(d)d$ 怎么求。</p>
<p>显然只需要考虑 $\mu(d)\not =0$ 的项。那么就是枚举哪个质因子选不选，即 $\prod_{p\in \mathbb{P},p|k}(1-p)$。</p>
<p>剩下的就用pollard_rho分解下质因数，然后枚举 $\frac{n}{m}$ 即可。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x,ll y,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x*y-(ll)((lb)x*y/n)*n+n)%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y,ll p=mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="built_in">mul</span>(x,x,p)) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,x,p);</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;ll&gt; d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PollardRho&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> prime[<span class="number">7</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">61</span>,<span class="number">31</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m=<span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> t; ll r;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">witness</span><span class="params">(<span class="type">int</span> a,ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll b=<span class="built_in">Pow</span>(a,r,n);</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++,b=<span class="built_in">mul</span>(b,b,n)) <span class="keyword">if</span>(b==n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isprime</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ff</span>(i,<span class="number">0</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n==prime[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(t=<span class="number">0</span>;!(r&amp;<span class="number">1</span>);r&gt;&gt;=<span class="number">1</span>) t++;</span><br><span class="line">        <span class="built_in">ff</span>(i,<span class="number">0</span>,m) <span class="keyword">if</span>(!<span class="built_in">witness</span>(prime[i],n)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pollard_rho</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll c=<span class="built_in">rand</span>()%(n<span class="number">-1</span>),x=<span class="built_in">rand</span>()%n,y=x,d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,k=<span class="number">2</span>;i++;)</span><br><span class="line">        &#123;</span><br><span class="line">            x=(<span class="built_in">mul</span>(x,x,n)+c)%n;</span><br><span class="line">            d=__gcd(<span class="built_in">abs</span>(y-x),n);</span><br><span class="line">            <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=n) <span class="keyword">return</span> d;</span><br><span class="line">            <span class="keyword">if</span>(y==x) <span class="keyword">return</span> n;</span><br><span class="line">            <span class="keyword">if</span>(i==k) y=x,k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isprime</span>(n)) <span class="keyword">return</span> (<span class="type">void</span>)(d.<span class="built_in">pb</span>(n));</span><br><span class="line">        ll x=n; <span class="keyword">for</span>(;x==n;x=<span class="built_in">pollard_rho</span>(n));</span><br><span class="line">        <span class="built_in">find</span>(x); <span class="built_in">find</span>(n/x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PollardRho::find;</span><br><span class="line"></span><br><span class="line">ll n,k,ans;</span><br><span class="line"><span class="type">int</span> m,cnt,t[<span class="number">100</span>];</span><br><span class="line">ll po[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,ll d,ll s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u&gt;cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((d&amp;<span class="number">1</span>)==<span class="number">0</span>&amp;&amp;((n/d)&amp;<span class="number">1</span>)) <span class="keyword">return</span>;</span><br><span class="line">        ll nd=n/d;</span><br><span class="line">        ans=<span class="built_in">Add</span>(ans,<span class="built_in">Pow</span>(k,(nd+<span class="number">1</span>)/<span class="number">2</span>)*(((nd&amp;<span class="number">1ll</span>)?nd:(nd/<span class="number">2</span>))%mod)%mod*((s%mod+mod)%mod)%mod);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>,d,s);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,t[u]) <span class="built_in">dfs</span>(u+<span class="number">1</span>,d*po[u][i],s*(<span class="number">1ll</span>-po[u][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(;T--;)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k&gt;&gt;mod;</span><br><span class="line">        k%=mod;</span><br><span class="line">        d.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">find</span>(n);</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">all</span>(d));</span><br><span class="line">        <span class="comment">//for(auto v:d) DEBUG(v);</span></span><br><span class="line">        m=d.<span class="built_in">size</span>(); cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j;i&lt;m;i=j)</span><br><span class="line">        &#123;</span><br><span class="line">            po[++cnt][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            po[cnt][<span class="number">1</span>]=d[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">                <span class="keyword">if</span>(d[j]!=d[i]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> po[cnt][j-i+<span class="number">1</span>]=po[cnt][j-i]*d[i];</span><br><span class="line">            t[cnt]=j-i;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>PollardRho</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>异或图[bzoj4671]</title>
    <url>/2020/05/21/%E5%BC%82%E6%88%96%E5%9B%BE-bzoj4671/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://darkbzoj.tk/problem/4671">darkbzoj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义两个结点数相同的图 $G_1$ 与图 $G_2$ 的异或为一个新的图 $G$，其中如果 $(u, v)$ 在 $G_1$ 与 $G_2$ 中的出现次数之和为 $1$，那么边 $(u, v)$ 在 $G$ 中，否则这条边不在 $G$ 中。</p>
<p>现在给定 $s$ 个结点数相同的图 $G_{1\cdots s}$, 设 $S = \{G_1,G_2, \cdots , G_s\}$ ，请问 $S$ 有多少个子集的异或为一个连通图？</p>
<p>$n\leq 10,s\leq 60$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设 $f_i$ 表示恰好有 $i$ 个连通块的方案数。</p>
<p>这个显然比较难求，那么再设一个 $g_i$ 表示至少有 $i$ 个连通块的方案数。</p>
<p>考虑用 $f_j$ 表示 $g_i$，系数就是将 $j$ 个不同的连通块放到 $i$ 个相同的盒子里方案数，即第二类斯特林数 $S_2(j,i)$。</p>
<p>那么有：$g_i=\sum_{j=i}^nS_2(j,i)f_j$。</p>
<p>斯特林反演一下得到：$f_i=\sum_{j=i}^nS_1(j,i)(-1)^{j-i}g_j$。</p>
<p>我们需要求的是 $f_1=\sum_{i=1}^n(i-1)!(-1)^{i-1}g_i$。</p>
<p>因此题目可转换成求 $g_i$。</p>
<p>由于点数比较少，我们可以枚举所有的集合划分，每个集合内的点可以随便连，不同集合之间的点不存在连边。</p>
<p>然后我们只考虑不同集合之间的边，对于每个图，是否存在这些边可以写成一个二进制数，需要在 $s$ 个数中选一些，使得异或起来为 $0$，这个用线性基统计一下即可。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">12</span>];</span><br><span class="line"><span class="type">bool</span> g[<span class="number">62</span>][<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line">ll ans,fac[<span class="number">12</span>],base[<span class="number">64</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> siz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(base,<span class="number">0</span>,<span class="built_in">sizeof</span>(base));</span><br><span class="line">    <span class="type">int</span> cnt,tot=<span class="number">0</span>; ll sum;</span><br><span class="line">    <span class="built_in">ff</span>(k,<span class="number">0</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">            <span class="built_in">ff</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">                <span class="keyword">if</span>(a[i]!=a[j])</span><br><span class="line">                    sum|=((ll)g[k][i][j]&lt;&lt;cnt),cnt++;</span><br><span class="line">        <span class="built_in">fd</span>(i,cnt<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>((sum&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!base[i]) &#123;tot++,base[i]=sum; <span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> sum^=base[i];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(siz&amp;<span class="number">1</span>) ans+=(<span class="number">1ll</span>&lt;&lt;(m-tot))*fac[siz<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> ans-=(<span class="number">1ll</span>&lt;&lt;(m-tot))*fac[siz<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u&gt;=n) <span class="keyword">return</span> <span class="built_in">calc</span>(k);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,k+<span class="number">1</span>) a[u]=i,<span class="built_in">dfs</span>(u+<span class="number">1</span>,<span class="built_in">max</span>(i,k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">ff</span>(k,<span class="number">0</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s); <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!n) n=(<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="number">1</span>+<span class="number">8</span>*<span class="built_in">strlen</span>(s)))/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">            <span class="built_in">ff</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">                g[k][i][j]=(s[t++]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>线性基</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客挑战赛40</title>
    <url>/2020/05/20/%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B40/</url>
    <content><![CDATA[<p>自闭了。。。B一直卡在那，赛后把链表改成vector就过了。。。</p>
<span id="more"></span>

<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>对 $m$ 进行分解以后，变成 $a\sqrt b$ 的形式。</p>
<p>然后变成整数拆分，问 $x_1+x_2+\cdots+x_n=a$ 有多少组本质不同的非负整数解。</p>
<p>那么DP，设 $f_{i,j}$ 表示用了 $i$ 个数，和为 $j$ 的方案数。</p>
<p>$f_{i,j}=f_{i-1,j-1}+f_{i,j-i}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> n,m,sum;</span><br><span class="line">ll f[N][N],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); sum=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,<span class="built_in">sqrt</span>(m)+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m%(i*i)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(;m%(i*i)==<span class="number">0</span>;m/=(i*i)) sum*=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m=sum+n;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">0</span>,i)</span><br><span class="line">            f[i][j]=<span class="built_in">Add</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i-j][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[m][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>由于那些数是随机的，跟 GDOI2017 一样，我们将这些数按位拆分成 $4$ 份，每份 $16$ 位。如果异或后不相同的位数小于等于 $3$ 的话，那么至少有一份是相同的。</p>
<p>那么枚举相同的那份，用一个vector将那一份相同的数列出来，然后一一比较是否满足条件。</p>
<p>这样做，每个 vector 的期望长度就是 $\frac{n}{2^{16}}$，每次需要枚举 $4$ 份，每次判断的次数是 $3$ 次，那么期望时间复杂度就是 $O(\frac{n}{2^{16}}\times 12m)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ull x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ull x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=x&amp;-x) <span class="keyword">if</span>(++t&gt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> t&lt;=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">G</span><span class="params">(ull x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x^=(x&lt;&lt;<span class="number">13</span>);</span><br><span class="line">    x^=(x&gt;&gt;<span class="number">7</span>);</span><br><span class="line">    x^=(x&lt;&lt;<span class="number">17</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ull a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[<span class="number">4</span>][<span class="number">1</span>&lt;&lt;<span class="number">17</span>]; </span><br><span class="line"><span class="type">int</span> ne[N][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">20030403</span>);</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    cin&gt;&gt;a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) a[i]=<span class="built_in">G</span>(a[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">random_shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    ull x,k=(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)<span class="number">-1</span>,t;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        t=a[i];</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            adj[j][t&amp;k].<span class="built_in">pb</span>(i);</span><br><span class="line">            t&gt;&gt;=<span class="number">16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ull y,z;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">bool</span> flag;m--;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>,&amp;y);</span><br><span class="line">        z=y;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=y&amp;k;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[j][x])</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(a[v]^z))</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            y&gt;&gt;=<span class="number">16</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=ans+ans+flag;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;=mod) ans-=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>对于两个长度为 $n$ 的 01 串，当且仅当 $1$ 的个数相同才能配对。</p>
<p>对 $1$ 的个数作前缀和，记为 $s_i$，那么两个串 $s_1,s_2$ 的贡献就是 $\sum_{i=1}^n|s_{1_i}-s_{2_i}|$。</p>
<p>根据这个就可以进行数位DP了。</p>
<p>设 $f_{i,j,x,y}$ 表示考虑到第 $i$ 位，当前两个串的 $1$ 的个数的差为 $j$，$x,y$ 为这两个串是否一直取最大值。</p>
<p>转移的时候分 $4$ 类讨论。</p>
<p>时间复杂度 $O(n^2)$。有个大常数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Abs(x) ((x)&gt;0?(x):-(x))</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x+=y; (x&lt;mod)?<span class="number">0</span>:(x-=mod);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1003</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1000</span>;</span><br><span class="line">ll f[N][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>],g[N][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>][M][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>; g[<span class="number">0</span>][M][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> nx,ny;</span><br><span class="line">    ll sg,sf;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        <span class="built_in">fo</span>(j,-i,i)</span><br><span class="line">            <span class="built_in">fo</span>(x,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(y,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nx=x?(s[i]-<span class="string">&#x27;0&#x27;</span>):<span class="number">1</span>; ny=y?(s[i]-<span class="string">&#x27;0&#x27;</span>):<span class="number">1</span>;</span><br><span class="line">                sg=g[i<span class="number">-1</span>][j+M][x][y],sf=f[i<span class="number">-1</span>][j+M][x][y];</span><br><span class="line">                <span class="comment">//0,0</span></span><br><span class="line">                    <span class="built_in">Add</span>(g[i][j+M][x&amp;!nx][y&amp;!ny],(sf*<span class="built_in">Abs</span>(j)+sg)%mod),</span><br><span class="line">                    <span class="built_in">Add</span>(f[i][j+M][x&amp;!nx][y&amp;!ny],sf);</span><br><span class="line">                <span class="comment">//1,0</span></span><br><span class="line">                <span class="keyword">if</span>(nx)</span><br><span class="line">                    <span class="built_in">Add</span>(g[i][j+<span class="number">1</span>+M][x][y&amp;!ny],(sf*<span class="built_in">Abs</span>(j+<span class="number">1</span>)+sg)%mod),</span><br><span class="line">                    <span class="built_in">Add</span>(f[i][j+<span class="number">1</span>+M][x][y&amp;!ny],sf);</span><br><span class="line">                <span class="comment">//0,1</span></span><br><span class="line">                <span class="keyword">if</span>(ny)</span><br><span class="line">                    <span class="built_in">Add</span>(g[i][j<span class="number">-1</span>+M][x&amp;!nx][y],(sf*<span class="built_in">Abs</span>(j<span class="number">-1</span>)+sg)%mod),</span><br><span class="line">                    <span class="built_in">Add</span>(f[i][j<span class="number">-1</span>+M][x&amp;!nx][y],sf);</span><br><span class="line">                <span class="comment">//1,1</span></span><br><span class="line">                <span class="keyword">if</span>(nx&amp;&amp;ny)</span><br><span class="line">                    <span class="built_in">Add</span>(g[i][j+M][x][y],(sf*<span class="built_in">Abs</span>(j)+sg)%mod),</span><br><span class="line">                    <span class="built_in">Add</span>(f[i][j+M][x][y],sf);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">Add</span>(ans,g[n][M][i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>set大力搞，启发式合并就好了。</p>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>随便暴力一下就好了。</p>
]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
        <tag>启发式合并</tag>
        <tag>平衡树</tag>
        <tag>随机</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏[AHOI/HNOI2018]</title>
    <url>/2020/05/20/%E6%B8%B8%E6%88%8F-AHOI-HNOI2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2508">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一开始看错题了。。。浪费了好久的时间。</p>
<p>首先经过胡乱分析发现，一个点能走到的点集是一个区间。</p>
<p>因此对于每个点 $i$，求出这个 $[l_i,r_i]$ 区间，然后就可以 $O(1)$ 判断了。</p>
<p>对于一个门，我们假设 $x$ 向 $y$ 连一条边。</p>
<p>前 $20\%$ 的很简单，我们只需考虑 $y\leq x$ 的 $40$ 分。</p>
<h4 id="y-leq-x"><a href="#y-leq-x" class="headerlink" title="$y\leq x$"></a>$y\leq x$</h4><p>这一部分保证了钥匙一定在门的左侧。</p>
<p>也就是说，如果你往左走，碰到了一扇门，那么你就没了，你一定走不过这扇门。那么，$l_i$ 的值就很容易求出来了。</p>
<p>现在来看看 $r_i$ 怎么求。如果某个点 $i$ 能走到 $r_i$，且另外一个点 $j$ 能走到 $i$，那么 $r_j$ 就至少是 $r_i$ 了。</p>
<p>可以用一个单调栈，里面存当前情况下，被门隔开的所有区间。从后往前枚举每个线段，判断这个区间是否能和栈顶的区间合并（也就是这个门能否被打开），如果可以就并到一起。</p>
<p>判断一个门能否打开相当于判断这个钥匙是否在当前区间内。</p>
<p>时间复杂度 $O(n)$。</p>
<h4 id="100"><a href="#100" class="headerlink" title="$100\%$"></a>$100\%$</h4><p>这时候，如果按照上面的方法从右往左做，$l_i$ 是会发生改变。</p>
<p>但是，你发现它还是不能从右往左跨过 $y\leq x$ 的门。</p>
<p>那么当一个 $[l_i,r_i]$ 的右端点变大之后，$l_i$ 能去到哪里呢？</p>
<p>显然最多最多不会超过第一个 $y\leq x$ 的门，记这个为 $le_i$。</p>
<p>那么在 $[le_i,l_i)$ 里面，这些门都是向右指的。</p>
<p>对于当前离 $l_i$ 最近的门（其实就是 $l_i$），如果它的钥匙在 $\leq r$ 处，那么这扇门就可以开。</p>
<p>也就是在 $[le_i,l_i)$ 中找到第一个离 $l_i$ 最近的，且钥匙 $&gt;r$ 的门。</p>
<p>用个线段树即可。时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,key[N],l[N],r[N],le[N];</span><br><span class="line"><span class="type">int</span> st[N],top;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mx[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(mx[u]=key[l]);</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lc,l,mid); <span class="built_in">build</span>(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">    mx[u]=<span class="built_in">max</span>(mx[lc],mx[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R&amp;&amp;mx[rc]&gt;x) ans=<span class="built_in">ask</span>(rc,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line">    <span class="keyword">if</span>(!ans&amp;&amp;L&lt;=mid&amp;&amp;mx[lc]&gt;x) ans=<span class="built_in">ask</span>(lc,l,mid,L,R,x);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,le[x],l[x]<span class="number">-1</span>,r[x]);</span><br><span class="line">    l[x]=tmp?tmp+<span class="number">1</span>:le[x];</span><br><span class="line">    <span class="keyword">return</span> l[x]&lt;=key[r[x]]&amp;&amp;key[r[x]]&lt;=r[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); <span class="type">int</span> T=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),key[x]=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;n&amp;&amp;!key[j];j++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++) l[k]=i,r[k]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n;le[i++]=j)</span><br><span class="line">        <span class="keyword">if</span>(key[i<span class="number">-1</span>]&amp;&amp;key[i<span class="number">-1</span>]&lt;i)</span><br><span class="line">            j=i;</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) <span class="keyword">for</span>(st[++top]=r[i];top&amp;&amp;<span class="built_in">check</span>(i);r[i]=st[--top]);</span><br><span class="line">    <span class="keyword">for</span>(;T--;<span class="built_in">puts</span>((l[x]&lt;=y&amp;&amp;y&lt;=r[x])?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>)) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制[BJOI2018]</title>
    <url>/2020/05/19/%E4%BA%8C%E8%BF%9B%E5%88%B6-BJOI2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2492">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个长为 $n$ 的 $01$ 串，每次单调修改，或询问某个区间内，有多少个子区间，满足这个子区间存在一种方案，使得经过重排后为 $3$ 的倍数。</p>
<p>$n,m\leq 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>线段树神奇操作qwq。</p>
<p>首先容斥，变成求有多少个子区间不满足，发现当且仅当区间中（ $1$ 的个数只有 $1$ ）或者（ $1$ 的个数出现奇数次且 $0$ 的次数小于 $2$）时，这个区间不满足条件。</p>
<p>那么我们只需要上面这算两种情况就好了，注意两种情况的重合部分（即 $1,01,10$ 三种情况）。</p>
<p>对于这两种情况，在线段树中存强制选左/右端点，主体部分是 $0/1$，到这个端点里有 $0/1$ 个其他数的区间有多少种。</p>
<p>合并的时候大力分类讨论即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l0,l1,r0,r1,len;</span><br><span class="line">    <span class="type">int</span> zl0,zl1,zr0,zr1;</span><br><span class="line">    ll sum;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        len=<span class="number">1</span>,sum=x;</span><br><span class="line">        l0=r0=zl1=zr1=x;</span><br><span class="line">        l1=r1=zl0=zr0=!x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum=<span class="number">1</span>-sum;</span><br><span class="line">        l0=r0=zl1=zr1=sum;</span><br><span class="line">        l1=r1=zl0=zr0=!sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">    &#123;</span><br><span class="line">        node S;</span><br><span class="line">        S.len=A.len+B.len;</span><br><span class="line">        S.sum=A.sum+B.sum;</span><br><span class="line">        S.sum+=<span class="number">1ll</span>*A.zr0*B.zl1+<span class="number">1ll</span>*A.zr1*B.zl0;</span><br><span class="line">        ll le[<span class="number">2</span>],ri[<span class="number">2</span>];</span><br><span class="line">        le[<span class="number">0</span>]=A.r0&gt;&gt;<span class="number">1</span>; le[<span class="number">1</span>]=A.r0-le[<span class="number">0</span>];</span><br><span class="line">        ri[<span class="number">0</span>]=B.l0&gt;&gt;<span class="number">1</span>; ri[<span class="number">1</span>]=B.l0-ri[<span class="number">0</span>];</span><br><span class="line">        S.sum+=le[<span class="number">0</span>]*ri[<span class="number">1</span>]+le[<span class="number">1</span>]*ri[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(A.r1)</span><br><span class="line">        &#123;</span><br><span class="line">            le[<span class="number">0</span>]=(A.r1+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>; le[<span class="number">1</span>]=A.r1-le[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(A.r0&amp;<span class="number">1</span>) <span class="built_in">swap</span>(le[<span class="number">0</span>],le[<span class="number">1</span>]);</span><br><span class="line">            ri[<span class="number">0</span>]=B.l0&gt;&gt;<span class="number">1</span>; ri[<span class="number">1</span>]=B.l0-ri[<span class="number">0</span>];</span><br><span class="line">            S.sum+=le[<span class="number">0</span>]*ri[<span class="number">1</span>]+le[<span class="number">1</span>]*ri[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(!A.r0&amp;&amp;B.l0) S.sum--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(B.l1)</span><br><span class="line">        &#123;</span><br><span class="line">            le[<span class="number">0</span>]=A.r0&gt;&gt;<span class="number">1</span>; le[<span class="number">1</span>]=A.r0-le[<span class="number">0</span>];</span><br><span class="line">            ri[<span class="number">0</span>]=(B.l1+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>; ri[<span class="number">1</span>]=B.l1-ri[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(B.l0&amp;<span class="number">1</span>) <span class="built_in">swap</span>(ri[<span class="number">0</span>],ri[<span class="number">1</span>]);</span><br><span class="line">            S.sum+=le[<span class="number">0</span>]*ri[<span class="number">1</span>]+le[<span class="number">1</span>]*ri[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(!B.l0&amp;&amp;A.r0) S.sum--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!A.l1) S.l0=A.l0+B.l0,S.l1=B.l1;</span><br><span class="line">        <span class="keyword">else</span> S.l0=A.l0,S.l1=A.l1+((A.l1+A.l0==A.len)?B.l0:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!B.r1) S.r0=B.r0+A.r0,S.r1=A.r1;</span><br><span class="line">        <span class="keyword">else</span> S.r0=B.r0,S.r1=B.r1+((B.r1+B.r0==B.len)?A.r0:<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!A.zl1) S.zl0=A.zl0+B.zl0,S.zl1=B.zl1;</span><br><span class="line">        <span class="keyword">else</span> S.zl0=A.zl0,S.zl1=A.zl1+((A.zl1+A.zl0==A.len)?B.zl0:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!B.zr1) S.zr0=B.zr0+A.zr0,S.zr1=A.zr1;</span><br><span class="line">        <span class="keyword">else</span> S.zr0=B.zr0,S.zr1=B.zr1+((B.zr1+B.zr0==B.len)?A.zr0:<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">400010</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> tr[u].<span class="built_in">init</span>(<span class="built_in">read</span>());</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">    tr[u]=tr[lc]+tr[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> tr[u].<span class="built_in">change</span>();</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    (p&lt;=mid)?<span class="built_in">update</span>(ls,p):<span class="built_in">update</span>(rs,p);</span><br><span class="line">    tr[u]=tr[lc]+tr[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(rs,L,R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(ls,L,R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(ls,L,R)+<span class="built_in">query</span>(rs,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,l,r,len;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    CASET</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">read</span>()==<span class="number">1</span>) <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="built_in">read</span>());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>(); len=r-l+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1ll</span>*len*(len+<span class="number">1</span>)/<span class="number">2</span>-<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r).sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[loj6198]谢特</title>
    <url>/2020/05/18/loj6198-%E8%B0%A2%E7%89%B9/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6198">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>主要是为了练练SA。。。</p>
<h4 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h4><p>两个后缀的最长公共前缀是两个点的 lca 处，那么枚举这个 $lca$ 进行统计，建一个Trie存子树中的 $w_i$，每次合并时启发式合并。</p>
<h4 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h4><p>两个后缀的最长公共前缀是后缀数组中的一段区间的最小值。</p>
<p>那么从大到小枚举这个最小值的位置，还是跟SAM那样启发式合并Trie即可。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>SA做法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> base[N],rk[N],sa[N],t[N],height[N],f[N][<span class="number">18</span>],l2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rsort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) base[rk[t[i]]]++;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) sa[base[rk[t[i]]]--]=t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t[x]==t[y])&amp;&amp;(t[x+l]==t[y+l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SA</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m=<span class="number">27</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) rk[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>,t[i]=i;</span><br><span class="line">    <span class="built_in">rsort</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">1</span>,p;p&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,n-w+<span class="number">1</span>,n) t[++p]=i;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(sa[i]&gt;w) t[++p]=sa[i]-w;</span><br><span class="line">        <span class="built_in">rsort</span>(n,p);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) t[i]=rk[i];</span><br><span class="line">        rk[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">2</span>,n) rk[sa[i]]=(<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j,k=<span class="number">0</span>;i&lt;=n;height[rk[i++]]=k)</span><br><span class="line">        <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rk[i]<span class="number">-1</span>];s[i+k]==s[j+k];k++);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][<span class="number">0</span>]=height[i];</span><br><span class="line">    l2[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) l2[i]=l2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(j,<span class="number">1</span>,l2[n])</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)&lt;=n) f[i][j]=<span class="built_in">min</span>(f[i][j],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=rk[x]; y=rk[y];</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    x++; <span class="type">int</span> l=l2[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(f[x][l],f[y-(<span class="number">1</span>&lt;&lt;l)+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">5</span>][<span class="number">2</span>],rt[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=++cnt,rt=u;</span><br><span class="line">    <span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ne[u][(x&gt;&gt;i)&amp;<span class="number">1</span>]=++cnt;</span><br><span class="line">        u=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//if(!ne[x][0]&amp;&amp;!ne[x][1]) return v;</span></span><br><span class="line">    <span class="type">int</span> ans=v;</span><br><span class="line">    <span class="keyword">if</span>(ne[x][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ne[y][<span class="number">1</span>]) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(ne[x][<span class="number">0</span>],ne[y][<span class="number">1</span>],(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(ne[x][<span class="number">0</span>],ne[y][<span class="number">0</span>],v&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ne[x][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ne[y][<span class="number">0</span>]) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(ne[x][<span class="number">1</span>],ne[y][<span class="number">0</span>],(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(ne[x][<span class="number">1</span>],ne[y][<span class="number">1</span>],v&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ne[x][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ne[y][<span class="number">0</span>]) <span class="built_in">merge</span>(ne[x][<span class="number">0</span>],ne[y][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">else</span> ne[y][<span class="number">0</span>]=ne[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ne[x][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ne[y][<span class="number">1</span>]) <span class="built_in">merge</span>(ne[x][<span class="number">1</span>],ne[y][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> ne[y][<span class="number">1</span>]=ne[x][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[N],siz[N],id[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val[N],ans,n;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">SA</span>(s,n);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) val[i]=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) id[i]=i,fa[i]=i,siz[i]=<span class="number">1</span>,rt[i]=<span class="built_in">build</span>(val[sa[i]]);</span><br><span class="line">    <span class="built_in">sort</span>(id+<span class="number">2</span>,id+n+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> height[x]&gt;height[y];&#125;);</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        x=id[i]; y=x<span class="number">-1</span>;</span><br><span class="line">        x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(siz[x]&lt;siz[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(rt[y],rt[x],<span class="number">0</span>)+height[id[i]]);</span><br><span class="line">        siz[x]+=siz[y]; fa[y]=x;</span><br><span class="line">        <span class="built_in">merge</span>(rt[y],rt[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>后缀数组</tag>
        <tag>SAM</tag>
        <tag>并查集</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>Bipartite Blanket[bzoj4788]</title>
    <url>/2020/04/21/Bipartite-Blanket-bzoj4788/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个 $n+m$ 个点的二分图，求有多少个点集，满足存在至少一个二分图匹配，使得该点集都在这个匹配中，且该点集的权值和大于某个值 $D$。</p>
<p>$n,m\leq 20,D\leq 4\times 10^8$。</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>假设我们只考虑一边的点的情况。那么由Hall定理，我们就可以暴力判断某个点集是否存在完美匹配。只需要枚举一个子集，这是 $O(3^n)$ 的，显然不行。</p>
<p>不过枚举子集干嘛。。。直接来个高维前缀与和就好了，时间复杂度 $O(n2^n)$。</p>
<p>现在考虑两边点的情况，如果两边的两个点集都满足Hall定理的话，那么一定由一个匹配使得该点集在这个匹配中。只会爆猜结论，并不会证明qwq。。。</p>
<p>那么对两边的点分别做上面的做法，然后按权值和从小到大排序，然后two-pointer扫一遍。</p>
<p>时间复杂度 $O(n2^n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fa,fb;</span><br><span class="line"><span class="type">int</span> a[N],b[N],n,m,T,bit[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="type">int</span> va[N],vb[N],h[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;g,<span class="type">int</span> *val,<span class="type">int</span> *v,<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> f,s;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;n))</span><br><span class="line">    &#123;</span><br><span class="line">        f=s=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,n)</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;i)</span><br><span class="line">                f|=v[j],s+=val[j];</span><br><span class="line">        h[i]=(bit[i]&lt;=bit[f]);</span><br><span class="line">        <span class="keyword">if</span>(h[i])</span><br><span class="line">            <span class="built_in">ff</span>(j,<span class="number">0</span>,n)</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;i)</span><br><span class="line">                    h[i]&amp;=h[i^(<span class="number">1</span>&lt;&lt;j)];</span><br><span class="line">        <span class="keyword">if</span>(h[i]) g.<span class="built_in">pb</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(g));       </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;n) <span class="built_in">ff</span>(j,<span class="number">0</span>,n) bit[i]+=((i&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">init</span>(<span class="built_in">max</span>(n,m));</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        <span class="built_in">ff</span>(j,<span class="number">0</span>,m) <span class="keyword">if</span>(s[j]==<span class="string">&#x27;1&#x27;</span>) va[i]|=(<span class="number">1</span>&lt;&lt;j),vb[j]|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">ff</span>(i,<span class="number">0</span>,m) b[i]=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> T=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">dp</span>(fa,a,va,n,m);</span><br><span class="line">    <span class="built_in">dp</span>(fb,b,vb,m,n);</span><br><span class="line">    <span class="type">int</span> i=fb.<span class="built_in">size</span>()<span class="number">-1</span>,cnt=fb.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:fa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>&amp;&amp;fb[i]+v&gt;=T;i--);</span><br><span class="line">        ans+=cnt-i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>Hall定理</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>经典题[20200415模拟]</title>
    <url>/2020/04/15/%E7%BB%8F%E5%85%B8%E9%A2%98-20200415%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$m$ 个整数变量，求满足一下条件的正整数解的个数对 $998244353$ 取模后的结果。</p>
<ul>
<li>$\forall i\in [1,n],1\leq x_i\leq T$</li>
<li>$\sum_{i=1}^m\leq S$。</li>
</ul>
<p>$n\leq 10^{18},n\leq 10^9,nT\leq S,m-n\leq 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考场上只能做到 $m-n=1$ 的情况。</p>
<p>这题太毒瘤了…</p>
<p>由于 $nT\leq S$，那么考虑暴力枚举前 $n$ 个数选了 $x_i$，那么这时，后面 $m-n$ 个数就有 $\binom{S-\sum_{i=1}^nx_i}{m-n}$ 种情况。</p>
<p>这个东西显然没法直接求，考虑这个组合数，我们把它转换成上升幂的形式。</p>
<p>$$ans=\frac{1}{(m-n)!}\sum_{x_1,x_2,\cdots,x_n}(S-(m-n)+1-\sum_{x=1}^mx_i)^{\overline{m-n}}$$</p>
<p>然后由第一类斯特林数的性质得到：</p>
<p>$$ans=\frac{1}{(m-n)!}\sum_{i=0}^{m-n}\left <a href="S-(m-n)+1-\sum_{i=1}^nx_i"> ^{m-n} _{\ \ \ i}\right </a>^{i}$$</p>
<p>而第一类斯特林数可以 $O(n\log n)$ 求出来。</p>
<p>以下为了方便，设 $k=m-n$，用 $S$ 代表原来的 $S-(m-n)+1$。</p>
<p>那么原式就变为：</p>
<p>$$\frac{1}{k!}\sum_{i=0}^k\left <a href="S-\sum_{j=1}^nx_j"> ^{k} _{i} \right </a>^{i}$$</p>
<p>由多项式定理暴力展开： </p>
<p>$$(S-\sum_{j=1}^nx_j)^i=\sum_{a_0+a_1+\cdots+a_n=i}\frac{i!}{a_0!a_1!\cdots a_n!}S^{a_0}(-x_1)^{a_1}\cdots (-x_n)^{a_n}$$</p>
<p>那么就可以用EGF来算一下。</p>
<p>设 $G(x)=\sum \frac{S^i}{i!}x^i,F(x)=\sum_{i=0}^{\infty}\frac{(-1)^i\sum_{j=1}^{T}j^i}{i!}x^i$</p>
<p>那么 $i$ 次方的答案就是 $[x^i] i!G(x)F^n(x)$。</p>
<p>也就是说，如果搞出了 $F(x)$，然后多项式快速幂就可以了。</p>
<p>剩下的问题是，对于所有的 $k$，计算 $\sum_{i=1}^Ti^k$。</p>
<p>可以用伯努利数来算。</p>
<p>由伯努利数的性质可以得到：</p>
<p>$$\sum_{i=0}^{n-1}i^k=\frac{1}{k+1}\sum_{i=0}^k\binom{k+1}{i}B_in^{k+1-i}$$</p>
<p>伯努利数可以用多项式求逆 $O(n\log n)$ 求出前几项。</p>
<p>上式也是一个卷积形式，很容易算出。</p>
<p>所以你只需要，求出第一类斯特林数的其中一列，多项式快速幂，以及伯努利数前 $n$ 项。</p>
<p>多项式快速幂用ln+exp搞，那么总的时间复杂度就是 $O(n\log n)$。</p>
<p>代码6k…</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">ll W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">    A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Mul</span>(A[i],k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">    B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">    Poly g,h;</span><br><span class="line">    g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">    <span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">        <span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">        <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">    <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">ln</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">    A=<span class="built_in">jf</span>((~A)*<span class="built_in">df</span>(A));</span><br><span class="line">    A.<span class="built_in">resize</span>(n); <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">exp</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">1</span>; <span class="keyword">for</span>(;n&lt;A.<span class="built_in">size</span>();n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    Poly B,C,D; B.<span class="built_in">clear</span>(); B.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">2</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        C=B; C.<span class="built_in">resize</span>(m); D=A; D.<span class="built_in">resize</span>(m);</span><br><span class="line">        C=D-<span class="built_in">ln</span>(C); C[<span class="number">0</span>]=<span class="built_in">Add</span>(C[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">        B=B*C; B.<span class="built_in">resize</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    B.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ^(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!A.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">    ll tmp=A[<span class="number">0</span>],w=<span class="built_in">Pow</span>(tmp,k);</span><br><span class="line">    tmp=<span class="built_in">Pow</span>(tmp,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Mul</span>(A[i],tmp);</span><br><span class="line">    A=<span class="built_in">exp</span>(<span class="built_in">ln</span>(A)*k);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Mul</span>(A[i],w);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll fc[N],fv[N],iv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PolyInit</span>();</span><br><span class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fc[i]=fc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    fv[n]=<span class="built_in">Pow</span>(fc[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) fv[i<span class="number">-1</span>]=fv[i]*i%mod;</span><br><span class="line">    iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll S,T,n,m,s[N];</span><br><span class="line">Poly G,F,B;</span><br><span class="line"></span><br><span class="line">ll d[M],c[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcS</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) &#123;s[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;s[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">calcS</span>(n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fd</span>(i,n,<span class="number">1</span>) s[i]=<span class="built_in">Add</span>(s[i<span class="number">-1</span>],<span class="built_in">Mul</span>(s[i],n<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">calcS</span>(n&gt;&gt;<span class="number">1</span>); <span class="type">int</span> l=n&gt;&gt;<span class="number">1</span>,len;</span><br><span class="line">        <span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">        d[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,l) d[i]=d[i<span class="number">-1</span>]*l%mod;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) d[i]=d[i]*fv[i]%mod,c[i]=s[i]*fc[i]%mod;</span><br><span class="line">        <span class="built_in">reverse</span>(&amp;d[<span class="number">0</span>],&amp;d[l+<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">1</span>); <span class="built_in">ntt</span>(c,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=d[i]*c[i]%mod;</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) d[i]=d[i+l]*fv[i]%mod;</span><br><span class="line">        <span class="built_in">fo</span>(i,l+<span class="number">1</span>,len<span class="number">-1</span>) d[i]=c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,l) c[i]=s[i];</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">1</span>); <span class="built_in">ntt</span>(c,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=d[i]*c[i]%mod;</span><br><span class="line">        <span class="built_in">ntt</span>(d,len,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n) s[i]=d[i];</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=c[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcB</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n+=<span class="number">2</span>;</span><br><span class="line">    B.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) B[i]=fv[i+<span class="number">1</span>];</span><br><span class="line">    B=~B;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n) B[i]=B[i]*fc[i]%mod;</span><br><span class="line">    B.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calcF</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=(T+<span class="number">1</span>)%mod;</span><br><span class="line">    ll tmp=T;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n+<span class="number">1</span>) d[i]=<span class="built_in">Mul</span>(tmp,fv[i]),tmp=<span class="built_in">Mul</span>(tmp,T);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n) c[i]=<span class="built_in">Mul</span>(B[i],fv[i]);</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1</span>; <span class="keyword">for</span>(;len&lt;=n+n+<span class="number">1</span>;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(d,len,<span class="number">1</span>); <span class="built_in">ntt</span>(c,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) d[i]=d[i]*c[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(d,len,<span class="number">-1</span>);</span><br><span class="line">    F.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(j,<span class="number">0</span>,n) F[j]=<span class="built_in">Mul</span>(d[j+<span class="number">1</span>],fc[j]);</span><br><span class="line">    F[<span class="number">0</span>]=<span class="built_in">Dec</span>(F[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(j,<span class="number">0</span>,n) F[j]=<span class="built_in">Mul</span>(F[j],(j&amp;<span class="number">1</span>)?(mod-fv[j]):fv[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    S=(S-(m-n)+<span class="number">1</span>)%mod;</span><br><span class="line">    n=m-n;</span><br><span class="line">    <span class="built_in">calcS</span>(n); <span class="built_in">calcB</span>(n+<span class="number">1</span>);</span><br><span class="line">    G.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    ll tmp=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n) G[i]=<span class="built_in">Mul</span>(tmp,fv[i]),tmp=<span class="built_in">Mul</span>(tmp,S);</span><br><span class="line">    <span class="built_in">calcF</span>(n);</span><br><span class="line">    F=(F^(m-n))*G;</span><br><span class="line">    F.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(F[i],<span class="built_in">Mul</span>(fc[i],s[i])));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Mul</span>(ans,fv[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">FO</span>(count);</span><br><span class="line">    cin&gt;&gt;S&gt;&gt;T&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">init</span>(m-n+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">solve</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>FFT</tag>
        <tag>斯特林数</tag>
        <tag>伯努利数</tag>
      </tags>
  </entry>
  <entry>
    <title>合唱队形[uoj214]</title>
    <url>/2020/04/15/%E5%90%88%E5%94%B1%E9%98%9F%E5%BD%A2-uoj214/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/214">uoj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以说这道题超级超级毒瘤了。</p>
<p>刚开始还以为 $n,m\leq 30$ 是折半搜索，谁知道是这么毒瘤的。</p>
<p>既然 $n,m\leq 30$ 暂时看起来不可做，那就先试试80pts的部分分吧。</p>
<p>首先直接统计显然不可做。设这些长度为 $m$ 的集合为 $S$，现在需要统计的是最小值的期望。</p>
<p>由Min-Max容斥得到：</p>
<p>$$E(\min(S))=\sum_{T\not =\varnothing,T\in S}(-1)^{|T|-1}E(\max(T))$$</p>
<p>那么设 $g(T)$ 表示要使得 $T$ 集合中的点满足条件需要多少个覆盖，设总覆盖数为 $s$，那么现在需要求在 $s$ 个覆盖中，每次随机选择一个，问第一次出现 $T$ 集合中所有数时的期望次数。</p>
<p>然后你就可以枚举 $t$，表示当操作次数 $\leq t$ 时已经全部覆盖的期望。</p>
<p>还是容斥一下，枚举至少有 $i$ 个数没覆盖，那么就有：</p>
<p>$$ans=\sum_{T=\varnothing,T\in S}(-1)^{|T|-1}\sum_{t=0}^{\infty}\sum_{i=0}^{g(T)}(-1)^{i-1}\binom{g(T)}{i}(\frac{s-i}{s})^t$$</p>
<p>把 $t$ 移过去，化简得到：</p>
<p>$$ans=\sum_{T=\varnothing,T\in S}(-1)^{|T|-1}\sum_{i=0}^{g(T)}(-1)^{i-1}\binom{g(T)}{i}(\frac{s}{i})$$</p>
<p>时间复杂度 $O(2^{n-m+1}n)\sim O(2^{n-m+1}n^2)$。</p>
<p>这样子就有 80分了。<del>也就只想到这里了。</del></p>
<p>可以发现，一旦 $g(T)$ 知道是多少了，那么也就可以算了。</p>
<p>因此转换为统计使得 $g(T)=j$ 的集合 $T$ 的 $(-1)^{|T|-1}$ 的和。</p>
<p>而对于一个点而言，他需要学哪些字母是由前面 $m$ 个点所决定的，如果前面 $m$ 个点中某个点 $i$ ，满足 $[i,i+m-1]$ 在 $T$ 中，那么这个点就需要选择对应的字母。</p>
<p>根据这个性质，状压DP即可。</p>
<p>时间复杂度 $O(2^mn^3)$。</p>
<p>跟前一个算法结合就可以100分了。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,ss;</span><br><span class="line"><span class="type">bool</span> bo[<span class="number">31</span>][<span class="number">31</span>],b[<span class="number">31</span>];</span><br><span class="line"><span class="type">char</span> t[<span class="number">31</span>];</span><br><span class="line">ll fac[<span class="number">905</span>],inv[<span class="number">905</span>],s[<span class="number">905</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span> </span>&#123;<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Part1&#123;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="type">bool</span> vis[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> w=n-m+<span class="number">1</span>,cnt=<span class="number">1</span>&lt;&lt;w;</span><br><span class="line">        <span class="built_in">fo</span>(sta,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">int</span> sum=<span class="number">0</span>,tim=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">25</span>) vis[j][k]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">0</span>,w<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;sta)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!b[j]) flag=<span class="number">0</span>;</span><br><span class="line">                    tim++;</span><br><span class="line">                    <span class="built_in">fo</span>(k,<span class="number">1</span>,m)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!vis[j+k][t[k]-<span class="string">&#x27;a&#x27;</span>]) sum++;</span><br><span class="line">                        vis[j+k][t[k]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">continue</span>;</span><br><span class="line">            ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">Pow</span>(mod<span class="number">-1</span>,tim),s[sum]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Part2&#123;</span><br><span class="line">    ll g[<span class="number">1</span>&lt;&lt;<span class="number">12</span>],f[<span class="number">2</span>][<span class="number">1</span>&lt;&lt;<span class="number">12</span>][<span class="number">905</span>],ans;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">1</span>&lt;&lt;m,w=n-m+<span class="number">1</span>,d=<span class="number">0</span>,tot=(<span class="number">1</span>&lt;&lt;(m<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">fo</span>(sta,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g[sta]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))&amp;sta) g[sta]|=(<span class="number">1</span>&lt;&lt;(t[i]-<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">            g[sta]=__builtin_popcount(g[sta]);</span><br><span class="line">        &#125;</span><br><span class="line">        f[d=<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            d=<span class="number">1</span>-d;</span><br><span class="line">            <span class="built_in">memset</span>(f[d],<span class="number">0</span>,<span class="built_in">sizeof</span>(f[d]));</span><br><span class="line">            <span class="built_in">fo</span>(sta,<span class="number">0</span>,tot<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">fo</span>(j,<span class="number">0</span>,i*m)</span><br><span class="line">                    <span class="keyword">if</span>(f[<span class="number">1</span>-d][sta][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        (f[d][(sta&lt;&lt;<span class="number">1</span>)&amp;(tot<span class="number">-1</span>)][j+g[sta&lt;&lt;<span class="number">1</span>]]+=f[<span class="number">1</span>-d][sta][j])%=mod;</span><br><span class="line">                        <span class="keyword">if</span>(b[i<span class="number">-1</span>]) (f[d][(sta&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&amp;(tot<span class="number">-1</span>)][j+g[sta&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]]+=mod-f[<span class="number">1</span>-d][sta][j])%=mod;</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">0</span>,w*m)</span><br><span class="line">            ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(f[d][<span class="number">0</span>][j],s[j]));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">900</span>);</span><br><span class="line">    CASET</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); ss=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="built_in">strlen</span>(t+<span class="number">1</span>)) bo[i][t[j]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">            ss=ss+<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n*m)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,i) s[i]=<span class="built_in">Add</span>(s[i],<span class="built_in">Mul</span>(<span class="built_in">Pow</span>(mod<span class="number">-1</span>,j),<span class="built_in">Mul</span>(<span class="built_in">C</span>(i,j),<span class="built_in">Pow</span>(j,mod<span class="number">-2</span>))));</span><br><span class="line">            s[i]=<span class="built_in">Mul</span>(s[i],ss);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> w=n-m+<span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,w<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,m) <span class="keyword">if</span>(!bo[i+j][t[j]-<span class="string">&#x27;a&#x27;</span>]) &#123;b[i]=<span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">            flag|=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(n-m)&lt;=<span class="number">18</span>?Part1::<span class="built_in">work</span>():Part2::<span class="built_in">work</span>());</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">25</span>) bo[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,w<span class="number">-1</span>) b[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>uoj</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>状压DP</tag>
        <tag>Min-Max容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>烷基计数 加强版 加强版[loj6538]</title>
    <url>/2020/04/14/%E7%83%B7%E5%9F%BA%E8%AE%A1%E6%95%B0-%E5%8A%A0%E5%BC%BA%E7%89%88-%E5%8A%A0%E5%BC%BA%E7%89%88-loj6538/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6185">烷基计数</a></p>
<p><a href="https://loj.ac/problem/6269">烷基计数 加强版</a></p>
<p><a href="https://loj.ac/problem/6538">烷基计数 加强版 加强版</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>主要是想记录下自己第一道牛顿迭代的题qwq</del></p>
<p>设 $f_i$ 表示 $i$ 个节点时的答案，那么有：</p>
<p>$f_0=1,f_i=\sum_{j+k+l+1=i}f_j f_k f_l$。</p>
<p>显然这个是错的。因为没有考虑树同构的情况。</p>
<p>设 $F(x)$ 表示 $f$ 的OGF。</p>
<p>这里有 $3!=6$ 种置换。</p>
<p>由Burnside引理得，总方案数=每个置换的不动点个数的平均数。</p>
<ul>
<li>对于 $(1,2,3)$ 这种情况，随你便，也就是 $F^3(x)$。</li>
<li>对于 $(2,1,3),(3,2,1),(1,3,2)$ 这三种情况，有两个是需要一样的，也就是 $F(x^2)F(x)$。</li>
<li>对于剩下两种情况，三个都必须一样，也就是 $F(x^3)$。</li>
</ul>
<p>那么就有：</p>
<p>$$F(x)=x\frac{F^3(x)+3F(x^2)F(x)+2F(x^3)}{6}+1$$</p>
<p>设 $G(F(x))=x\frac{F^3(x)+3F(x^2)F(x)+2F(x^3)}{6}+1-F(x)$</p>
<p>假设求出了在模 $x^{\frac{n}{2}}$ 意义下的 $F(x)$，由牛顿迭代得：</p>
<p>$$F_{new}(x)=F(x)-\frac{G(F(x))}{G’(F(x))}$$</p>
<p>而如果求出了在模 $x^{\frac{n}{2}}$ 意义下的 $F(x)$，那么模 $x^n$ 意义下的 $F(x^2),F(x^3)$ 也已经知道了。</p>
<p>对 $G(F(x))$ 求导得：</p>
<p>$$\frac{G(F(x))}{G’(F(x))}=\frac{x(F^3(x)+3F(x^2)F(x)+2F(x^3))-6F(x)-6}{x(3F^2(x)+3F(x^2))-6}$$</p>
<p>那么有：</p>
<p>$$F_{new}(x)=F(x)-\frac{x(F^3(x)+3F(x^2)F(x)+2F(x^3))-6F(x)-6}{x(3F^2(x)+3F(x^2))-6}$$</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line"><span class="keyword">namespace</span> NTT&#123;</span><br><span class="line">    <span class="type">int</span> R[M]; ll W[M];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll wn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            W[i]=<span class="number">1</span>; wn=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                    w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                    a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                    a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">        w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,opt);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> NTT::ntt;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*x%mod;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;=k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">    B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">    A.<span class="built_in">resize</span>(k);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">    Poly g,h;</span><br><span class="line">    g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">    <span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">        g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">        <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">    <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Poly <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Poly f; f.<span class="built_in">clear</span>(); f.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="type">int</span> m=<span class="number">1</span>;</span><br><span class="line">    Poly f2,f3,g,h,a;</span><br><span class="line">    <span class="keyword">for</span>(;m&lt;(n&lt;&lt;<span class="number">1</span>);m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(m); f2.<span class="built_in">resize</span>(m); f3.<span class="built_in">resize</span>(m);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) f2[i]=f3[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i+=<span class="number">2</span>) f2[i]=f[i/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i+=<span class="number">3</span>) f3[i]=f[i/<span class="number">3</span>];</span><br><span class="line">        a=f*f; a.<span class="built_in">resize</span>(m);</span><br><span class="line">        h=(a+f2)*<span class="number">3</span>; h.<span class="built_in">insert</span>(h.<span class="built_in">begin</span>(),mod<span class="number">-6</span>);</span><br><span class="line">        a=f*a; a.<span class="built_in">resize</span>(m);</span><br><span class="line">        g=a+((f2*f)*<span class="number">3</span>)+(f3*<span class="number">2</span>);</span><br><span class="line">        g.<span class="built_in">insert</span>(g.<span class="built_in">begin</span>(),<span class="number">6</span>);</span><br><span class="line">        g=g-(f*<span class="number">6</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">        g=g*(~h); g.<span class="built_in">resize</span>(m);</span><br><span class="line">        f=f-g;</span><br><span class="line">    &#125;</span><br><span class="line">    f.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT::<span class="built_in">init</span>();</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    Poly f=<span class="built_in">solve</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>FFT</tag>
        <tag>牛顿迭代</tag>
        <tag>Burnside引理</tag>
      </tags>
  </entry>
  <entry>
    <title>小Z的礼物[集训队作业2018]</title>
    <url>/2020/04/14/%E5%B0%8FZ%E7%9A%84%E7%A4%BC%E7%89%A9-%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://uoj.ac/problem/422">uoj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现，最大值这种东西一般都不太好做。考虑转换成最小值（即第一次被覆盖）。</p>
<p>由期望下的Min-Max容斥得到：</p>
<p>$$E(\max(S))=\sum_{T\in S,T\not= \varnothing }E(\min(T))(-1)^{|T|+1}$$</p>
<p>其中 $E(\min(T))$ 表示 $T$ 集合中物品中的其中一个，第一次被覆盖的期望时间。</p>
<p>设选一次相邻的两个物品中至少含有一个 $T$ 集合中物品的概率为 $P$。</p>
<p>设 $f(i)$ 表示前 $i$ 次覆盖都没有覆盖成功的概率，显然有：$f(i)=(1-P)^i$。</p>
<p>那么 $T$ 集合中物品第一次被覆盖的期望时间为：$\sum_{i=0}^{\infty} f(i)=\sum_{i=0}^{\infty}(1-P)^i$</p>
<p>由于 $P\not =0$，那么 $1-P&lt;1$，则上式收敛，那么有：$E(\min (T))=\frac{1}{1-(1-P)}=\frac{1}{P}$</p>
<p>这个 $P=\frac{W_T}{2nm-n-m}$，其中 $W_T$ 为选两个相邻物品至少包含一个 $T$ 集合中物品的方案数。</p>
<p>$n$ 这么小，那么就可以考虑轮廓线DP了。</p>
<p>设 $f_{i,j,s,k}$ 表示考虑到第 $i$ 列第 $j$ 行，状态为 $s$，$W_T=k$ 的容斥系数和。</p>
<p>最后的答案为 $\sum_{s}\sum_{k}\frac{f_{m,n,s,k}\times (2nm-n-m)}{k}$。</p>
<p>这个DP很好转移，考虑4个方向的情况就好了。</p>
<p>时间复杂度 $O(2^nn^2m^2)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">int</span> cnt,sum,d,t;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> S[<span class="number">7</span>][<span class="number">105</span>];</span><br><span class="line">ll f[<span class="number">2</span>][<span class="number">70</span>][<span class="number">1205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;<span class="keyword">return</span> (x&gt;&gt;k)&amp;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S[i]+<span class="number">1</span>);</span><br><span class="line">    cnt=<span class="number">1</span>&lt;&lt;n; sum=<span class="number">2</span>*n*m-n-m;</span><br><span class="line">    f[d=<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=mod<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            d=<span class="number">1</span>-d;</span><br><span class="line">            <span class="built_in">memset</span>(f[d],<span class="number">0</span>,<span class="built_in">sizeof</span>(f[d]));</span><br><span class="line">            <span class="built_in">fo</span>(s,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">fo</span>(k,<span class="number">0</span>,sum)</span><br><span class="line">                    <span class="keyword">if</span>(f[d^<span class="number">1</span>][s][k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        t=s&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                        f[d][t][k]=<span class="built_in">Add</span>(f[d][t][k],f[d^<span class="number">1</span>][s][k]);</span><br><span class="line">                        t=t|(<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>));</span><br><span class="line">                        <span class="keyword">if</span>(S[j][i]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            w=<span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;!<span class="built_in">bit</span>(s,<span class="number">0</span>))   w++;</span><br><span class="line">                            <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;!<span class="built_in">bit</span>(s,n<span class="number">-1</span>)) w++;</span><br><span class="line">                            <span class="keyword">if</span>(j&lt;n) w++; <span class="keyword">if</span>(i&lt;m) w++;</span><br><span class="line">                            f[d][t][k+w]=<span class="built_in">Dec</span>(f[d][t][k+w],f[d^<span class="number">1</span>][s][k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">0</span>,sum)</span><br><span class="line">            ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(f[d][i][j],<span class="built_in">Pow</span>(j,mod<span class="number">-2</span>)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Mul</span>(sum,ans));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uoj</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>Min-Max容斥</tag>
        <tag>轮廓线DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Fake bullions[CF804F]</title>
    <url>/2020/04/14/Fake-bullions-CF804F/</url>
    <content><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://codeforces.com/problemset/problem/804/F">CF</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道二合一码农题。。。</p>
<p>不难发现如果我们算出一个点最多能有多少个人有金条，那么似乎可以组合数学去计算它。</p>
<p>然后此题就分为了两部分。</p>
<h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>第一部分是算出一个点最多或者最少有几个人有多少金条。</p>
<p>最少很容易求，下面只考虑最多的如何求。</p>
<p>考虑图中的一条边 $(u,v)$，可以发现，某个点的第 $j$ 个人能有金条当且仅当这两个点中存在一个人 $i$ 有金条且 $i\equiv j\pmod {\gcd(s_u,s_v)}$。</p>
<p>考虑图中的一条链，后面这个 $\gcd$ 就变为链中所有的 $s_u$ 的 $\gcd$ 了。</p>
<p>那么对于一个强连通分量，我们就可以在上面xjb走，因此上面的所有点中，上式的 $\gcd$ 就是强联通分量中所有的 $s_u$ 的 $\gcd$ 了。</p>
<p>考虑缩点，看看会变成什么样子。</p>
<p>由于原图中两个点中有且只有一条有向边，那么缩点之后还是会满足这个性质。但是又不能有环，因此这个缩点之后的图就可以看成一条链，链上一个点跟后面所有点都有连边的图。</p>
<p>然后你会发现不走链上的路径一定是不优的，因为走链的路径 $\gcd$ 不会变大。</p>
<p>那么最后就只剩下一条链了，拓扑排序依次计算即可。</p>
<p>这一部分时间复杂度为 $O(n^2+\sum s_i)$。</p>
<h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h4><p>这一部分相当于是给你两个长度为 $n$ 的数组 $l_i,r_i$。$n$ 个整数变量，第 $i$ 个变量取值在 $[l_i,r_i]$ 间。问在前 $A$ 大的数中选出 $B$ 个组成的下标集合的种类数。</p>
<p>枚举这些变量中，最小的且下标最大的一个下标 $i$。</p>
<p>贪心得考虑，为了让可以调剂的人数尽量多，这个人去 $r_i$ 的时候是最优的，这样就能有少一点人必须在 $B$ 中。</p>
<p>然后统计出来有多少个人必须比这个 $i$ 大的人数 $x$，有多少个人既可以比 $i$ 大，亦可以比 $i$ 小的人数 $y$。枚举 $y$ 中选了 $j$ 个人在 $B$ 集合中，那么方案数就是 $\binom{y}{j}\binom{x}{B-j-1}$。需要注意 $A$ 的限制就可以了。</p>
<p>这一部分时间复杂度为 $O(n^2)$。</p>
<p>$$ \$$</p>
<p>总的复杂度就是 $O(n^2+\sum s_i)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">2e6</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Part1&#123;</span><br><span class="line">    string s[N]; <span class="type">char</span> t[N];</span><br><span class="line">    <span class="type">int</span> m[N];</span><br><span class="line">    <span class="type">int</span> st[N],dfn[N],low[N],top,cnt,belong[N],tim,in[N],g[N],now[N];</span><br><span class="line">    <span class="type">bool</span> instack[N],vi[M];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; adj[N],vec[N],p[N];</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; vis[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        adj[x].<span class="built_in">pb</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        instack[u]=<span class="number">1</span>;</span><br><span class="line">        st[++top]=u;</span><br><span class="line">        dfn[u]=low[u]=++tim;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">            <span class="keyword">if</span>(!dfn[v]) <span class="built_in">dfs</span>(v,u),low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(instack[v]) low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">        <span class="keyword">if</span>(low[u]==dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="type">int</span> d=<span class="number">0</span>,v;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                v=st[top--];</span><br><span class="line">                instack[v]=<span class="number">0</span>;</span><br><span class="line">                d=__gcd(d,m[v]);</span><br><span class="line">                belong[v]=cnt;</span><br><span class="line">                p[cnt].<span class="built_in">pb</span>(v);</span><br><span class="line">            &#125;<span class="keyword">while</span>(u!=v);</span><br><span class="line">            g[cnt]=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[i])</span><br><span class="line">                <span class="keyword">if</span>(belong[v]!=belong[i])</span><br><span class="line">                    vec[belong[i]].<span class="built_in">pb</span>(belong[v]);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="built_in">sort</span>(<span class="built_in">all</span>(vec[i])),vec[i].<span class="built_in">resize</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(vec[i]))-vec[i].<span class="built_in">begin</span>());</span><br><span class="line">        <span class="built_in">fo</span>(u,<span class="number">1</span>,cnt) <span class="keyword">for</span>(<span class="keyword">auto</span> v:vec[u]) in[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> *mn,<span class="type">int</span> *mx)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(t[j]==<span class="string">&#x27;1&#x27;</span>) <span class="built_in">add</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i]=<span class="built_in">read</span>();</span><br><span class="line">            cin&gt;&gt;s[i];</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">0</span>,m[i]<span class="number">-1</span>) mn[i]+=(s[i][j]==<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">        <span class="built_in">fo</span>(u,<span class="number">1</span>,cnt) <span class="keyword">if</span>(!in[u]) q.<span class="built_in">push</span>(u);</span><br><span class="line">        <span class="built_in">fo</span>(u,<span class="number">1</span>,cnt) now[u]=g[u],vis[u].<span class="built_in">resize</span>(g[u]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">        &#123;</span><br><span class="line">            u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:p[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fo</span>(j,<span class="number">0</span>,m[i]<span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">if</span>(s[i][j]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                        vis[u][j%g[u]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:vec[u])</span><br><span class="line">            &#123;</span><br><span class="line">                --in[v];</span><br><span class="line">                <span class="keyword">if</span>(!in[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    now[v]=__gcd(now[u],now[v]);</span><br><span class="line">                    <span class="built_in">fo</span>(i,<span class="number">0</span>,g[u]<span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">if</span>(vis[u][i])</span><br><span class="line">                            vi[i%now[v]]=<span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">fo</span>(i,<span class="number">0</span>,now[v]<span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">if</span>(vi[i])</span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;g[v];j+=now[v])</span><br><span class="line">                                vis[v][j]=<span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">fo</span>(i,<span class="number">0</span>,now[v]<span class="number">-1</span>) vi[i]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">0</span>,g[i]<span class="number">-1</span>) <span class="keyword">if</span>(vis[i][j]) sum++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:p[i]) mx[v]=(<span class="number">1ll</span>*m[v]*sum)/g[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Part2&#123;</span><br><span class="line">    ll fac[N],inv[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="type">int</span> *l,<span class="type">int</span> *r,<span class="type">int</span> A,<span class="type">int</span> B)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        A=<span class="built_in">min</span>(A,n);</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        ll x,y,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            x=y=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(l[j]&gt;r[i]) x++;</span><br><span class="line">                <span class="keyword">if</span>(l[j]&lt;=r[i]&amp;&amp;((r[i]&lt;r[j])||(r[i]&lt;=r[j]&amp;&amp;i&gt;j))) y++;<span class="comment">//???</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=A) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> tmp=<span class="built_in">min</span>(y,A<span class="number">-1</span>-x);</span><br><span class="line">            tmp=<span class="built_in">min</span>(B<span class="number">-1</span>,tmp);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">0</span>,tmp)</span><br><span class="line">                <span class="keyword">if</span>(B-j<span class="number">-1</span>&lt;=x)</span><br><span class="line">                    ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">C</span>(y,j),<span class="built_in">C</span>(x,B-j<span class="number">-1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A,B;</span><br><span class="line"><span class="type">int</span> mi[N],mx[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//FO(na);</span></span><br><span class="line">    n=<span class="built_in">read</span>(); A=<span class="built_in">read</span>(); B=<span class="built_in">read</span>();</span><br><span class="line">    Part1::<span class="built_in">solve</span>(mi,mx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Part2::<span class="built_in">solve</span>(mi,mx,A,B));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>yww与树上的回文串[loj6681]</title>
    <url>/2020/04/11/yww%E4%B8%8E%E6%A0%91%E4%B8%8A%E7%9A%84%E5%9B%9E%E6%96%87%E4%B8%B2-loj6681/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/6681">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好神仙的一道题啊qwq…</p>
<p>首先统计路径嘛，那么点分治。</p>
<p>考虑经过重心的合法路径的方案数。先把所有子树合在一起算，最后容斥减掉各子树的贡献。</p>
<p>那么剩下就是如何计算的问题。考虑经过重心的字符串只有两种情况：</p>
<ul>
<li>被分成一样的两部分。建个Trie统计一下即可。</li>
<li>被分成不同的两部分，即：</li>
</ul>
<p><img src="/yww%E4%B8%8E%E6%A0%91%E4%B8%8A%E7%9A%84%E5%9B%9E%E6%96%87%E4%B8%B2-loj6681/1.png" alt="1"></p>
<p>其中 $S$ 是一个字符串，$T$ 为非空回文串。</p>
<p>那么你建一个AC自动机，上面的形式相当于统计AC自动机上的某个节点的fail树的祖先中，减去该祖先所代表的字符串的长度后的前缀是回文串的个数。</p>
<p>我们知道，一个字符串的前缀回文串可以看成 $O(\log n)$ 个等差数列。</p>
<p>那么对于每个字符串记录下这些等差数列以后，相当于统计该节点跳fail链中的一些等差数列的和。</p>
<p>根据套路：</p>
<ul>
<li><p>当公差 $\geq \sqrt{n}$ 的时候暴力往上跳。</p>
</li>
<li><p>当公差 $&lt;\sqrt{n}$ 的时候，开个数组，记录下当前节点中，祖先字符串的长度模 $i$ 后为 $k$ 的有多少个，然后进行离线统计。</p>
</li>
</ul>
<p>时间复杂度 $T(n)=2T(\frac{n}{2})+O(n\log n+n\sqrt{n})=O(n\sqrt{n})$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">43</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> B=<span class="number">100</span>;</span><br><span class="line">ll pw[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> l,r,d;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;node&gt; s[N],q[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">    <span class="type">int</span> ne[N][<span class="number">2</span>],fail[N],siz[N],len[N],cnt;</span><br><span class="line">    ll ans,h1[N],h2[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) len[i]=h1[i]=h2[i]=ne[i][<span class="number">0</span>]=ne[i][<span class="number">1</span>]=fail[i]=siz[i]=<span class="number">0</span>,s[i].<span class="built_in">clear</span>(),q[i].<span class="built_in">clear</span>(),adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        cnt=<span class="number">0</span>; ans=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> &amp;p=ne[u][c];</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">        &#123;</span><br><span class="line">            p=++cnt; len[p]=len[u]+<span class="number">1</span>;</span><br><span class="line">            h1[p]=(h1[u]*base+c)%mod;</span><br><span class="line">            h2[p]=(h2[u]+pw[len[u]]*c)%mod;</span><br><span class="line">            s[p]=s[u];</span><br><span class="line">            <span class="keyword">if</span>(h1[p]==h2[p])<span class="comment">//is a plalindrome string</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[u].<span class="built_in">empty</span>()) s[p].<span class="built_in">pb</span>((node)&#123;len[p],len[p],inf&#125;);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">auto</span> las=s[u].<span class="built_in">back</span>();</span><br><span class="line">                    <span class="keyword">if</span>(las.d==inf) s[p].<span class="built_in">back</span>()=(node)&#123;las.l,len[p],len[p]-las.l&#125;;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(las.d==len[p]-las.r) s[p].<span class="built_in">back</span>().r=len[p];</span><br><span class="line">                    <span class="keyword">else</span> s[p].<span class="built_in">pb</span>((node)&#123;len[p],len[p],inf&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[p]++; <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> f[N],g[N],m;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">        &#123;</span><br><span class="line">            u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span>(v=ne[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!u) fail[v]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> fail[v]=ne[fail[u]][i];</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> ne[u][i]=ne[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) adj[fail[i]].<span class="built_in">pb</span>(i),f[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f[len[u]]=u;</span><br><span class="line">        g[++m]=len[u];</span><br><span class="line">        <span class="type">int</span> l,r,L,R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:s[u])</span><br><span class="line">        &#123;</span><br><span class="line">            l=len[u]-v.l; r=len[u]-v.r;</span><br><span class="line">            <span class="built_in">swap</span>(l,r);</span><br><span class="line">            <span class="keyword">if</span>(v.d&gt;B)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i+=v.d) <span class="keyword">if</span>(f[i]!=<span class="number">-1</span>) ans+=<span class="number">1ll</span>*siz[f[i]]*siz[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L=<span class="built_in">lower_bound</span>(g+<span class="number">1</span>,g+m+<span class="number">1</span>,l)-g<span class="number">-1</span>;<span class="comment">//&lt;</span></span><br><span class="line">                R=<span class="built_in">upper_bound</span>(g+<span class="number">1</span>,g+m+<span class="number">1</span>,r)-g<span class="number">-1</span>;<span class="comment">//&lt;=</span></span><br><span class="line">                <span class="keyword">if</span>(L==R) <span class="keyword">continue</span>;</span><br><span class="line">                q[f[g[R]]].<span class="built_in">pb</span>((node)&#123;v.d,r%v.d, siz[u]&#125;);</span><br><span class="line">                <span class="keyword">if</span>(L) q[f[g[L]]].<span class="built_in">pb</span>((node)&#123;v.d,r%v.d,-siz[u]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:adj[u]) <span class="built_in">dfs1</span>(v);</span><br><span class="line">        f[len[u]]=<span class="number">-1</span>;</span><br><span class="line">        g[m--]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum[B+<span class="number">3</span>][N/B+<span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,B) sum[i][len[u]%i]+=siz[u];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:q[u]) ans+=<span class="number">1ll</span>*p.d*sum[p.l][p.r];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:adj[u]) <span class="built_in">dfs2</span>(v);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,B) sum[i][len[u]%i]-=siz[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tle</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f[len[u]]=u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=u;i;i=fail[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l=len[u]=len[i];</span><br><span class="line">            <span class="keyword">if</span>(f[l]!=<span class="number">-1</span>&amp;&amp;h1[f[l]]==h2[f[l]]) ans+=<span class="number">1ll</span>*siz[i]*siz[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">tle</span>(v);</span><br><span class="line">        f[len[u]]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">getfail</span>();</span><br><span class="line">        <span class="comment">//tle(0); return ans;</span></span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) ans+=<span class="number">1ll</span>*siz[i]*(siz[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(<span class="number">0</span>); <span class="built_in">dfs2</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],val[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> z,<span class="type">int</span> y,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">        ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rt,siz[N],mx[N]; <span class="type">bool</span> vis[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> S)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz[u]=<span class="number">1</span>; mx[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">            <span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;!vis[ver[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">getroot</span>(v,u,S);</span><br><span class="line">                siz[u]+=siz[v];</span><br><span class="line">                mx[u]=<span class="built_in">max</span>(mx[u],siz[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        mx[u]=<span class="built_in">max</span>(mx[u],S-siz[u]);</span><br><span class="line">        <span class="keyword">if</span>(mx[rt]&gt;mx[u]) rt=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!vis[ver[i]]&amp;&amp;(v=ver[i])!=pre)</span><br><span class="line">                <span class="built_in">build</span>(v,u,AC::<span class="built_in">insert</span>(rt,val[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> opt,<span class="type">int</span> val=<span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AC::<span class="built_in">init</span>();</span><br><span class="line">        <span class="type">int</span> v=(opt==<span class="number">1</span>)?<span class="number">0</span>:(AC::<span class="built_in">insert</span>(<span class="number">0</span>,val));</span><br><span class="line">        AC::siz[v]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u,<span class="number">0</span>,v);</span><br><span class="line">        ans+=AC::<span class="built_in">work</span>()*opt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> Siz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Siz==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//DEBUG(u);</span></span><br><span class="line">        <span class="built_in">calc</span>(u,<span class="number">1</span>);</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!vis[v=ver[i]])</span><br><span class="line">                <span class="built_in">calc</span>(v,<span class="number">-1</span>,val[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v,S;i;i=ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!vis[v=ver[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                S=siz[v]&gt;siz[u]?Siz-siz[u]:siz[v];</span><br><span class="line">                rt=<span class="number">0</span>; <span class="built_in">getroot</span>(v,u,S);</span><br><span class="line">                <span class="built_in">divide</span>(rt,S);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;mx[<span class="number">0</span>]=inf;</span><br><span class="line">        <span class="built_in">getroot</span>(<span class="number">1</span>,<span class="number">0</span>,n);</span><br><span class="line">        <span class="built_in">divide</span>(rt,n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) pw[i]=pw[i<span class="number">-1</span>]*base%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) Tree::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Tree::<span class="built_in">work</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2020 US Open Platinum</title>
    <url>/2020/04/09/USACO-2020-US-Open-Platinum/</url>
    <content><![CDATA[<p>USACO 2020 US Open Platinum部分题解。</p>
<span id="more"></span>

<h3 id="Sprinklers-2-Return-of-the-Alfalfa"><a href="#Sprinklers-2-Return-of-the-Alfalfa" class="headerlink" title="Sprinklers 2: Return of the Alfalfa"></a>Sprinklers 2: Return of the Alfalfa</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3283">loj</a></p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>显然被C覆盖的点是及其有规律的，是被一条从左上到右下，只会往下和右走的折线切成两半，左下方的部分全覆盖给C。</p>
<p>那么就可以根据这个轮廓线进行DP了，设 $f_{i,j,0/1}$ 表示考虑到第 $i$ 行第 $j$ 列，是在向下走还是向右走，且这个位置填C的方案数。</p>
<p>那么转移分两类讨论一下即可。</p>
<p>时间复杂度 $O(n^3)$。</p>
<p>然后发现这是一个前缀和，那么就是 $O(n^2)$ 的了。</p>
<p>细节初始化什么的注意一下。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2005</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line">ll a[N][N],b[N][N],sa[N][N],sb[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">FO</span>(sprinklers2);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n+<span class="number">1</span>) <span class="keyword">if</span>(s[i<span class="number">-1</span>][<span class="number">1</span>]==<span class="string">&#x27;.&#x27;</span>) sb[i][<span class="number">0</span>]=b[i][<span class="number">0</span>]=inv2;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(s[<span class="number">1</span>][i]==<span class="string">&#x27;.&#x27;</span>) sa[<span class="number">1</span>][i]=a[<span class="number">1</span>][i]=inv2;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n+<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">&#x27;.&#x27;</span>) a[i][j]=<span class="built_in">Mul</span>(inv2,sb[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(j!=n&amp;&amp;s[i<span class="number">-1</span>][j+<span class="number">1</span>]==<span class="string">&#x27;.&#x27;</span>) b[i][j]=<span class="built_in">Mul</span>(inv2,sa[i<span class="number">-1</span>][j]);</span><br><span class="line">            sa[i][j]=<span class="built_in">Add</span>(sa[i<span class="number">-1</span>][j],a[i][j]);</span><br><span class="line">            sb[i][j]=<span class="built_in">Add</span>(sb[i][j<span class="number">-1</span>],b[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    ll sum=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(s[i][j]==<span class="string">&#x27;.&#x27;</span>) sum=<span class="built_in">Mul</span>(sum,<span class="number">2</span>);</span><br><span class="line">    sum=<span class="built_in">Mul</span>(sum,<span class="built_in">Add</span>(sb[n+<span class="number">1</span>][n],sa[n][n]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3284">loj</a></p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>似乎有 $O(n\log n)$ 的神奇做法。。。</p>
<p>对于一个排列我们求的是所有的环长的LCM，那么考虑对于每个质因数分开来求。</p>
<p>记 $F_{x}(p)$ 表示最大的 $k$ 满足 $p^k|x$。那么对于一个拆分 $(x_1,x_2\cdots x_m)$ 及一个质数 $p$ 而言，$p$ 的次数就是 $\max\{F_{x_i}(p)\}$。</p>
<p>这个 $\max$ 显然不好求，我们用Min-Max容斥进行转换，得到答案为：</p>
<p>$$\sum_{S\in\{1,2\cdots m\},S\not =\varnothing}(-1)^{|S|-1}\min\{F_{S_i}(p)\}$$</p>
<p>然后可以枚举这个min是否大于等于某个值 $k$：</p>
<p>$$\sum_{k=1}^{n}\sum_{S\in\{1,2\cdots m\},S\not =\varnothing}(-1)^{|S|-1}[\min\{F_{S_i}(p)\}\geq k]$$</p>
<p>注意，上面的式子显然要从 $k=1$ 开始。</p>
<p>要使得最小值大于等于 $k$，这些环长都必须是 $p^k$ 的倍数。</p>
<p>那么现在就是枚举 $x=p^k$，然后看有多少个这样的集合符合情况。</p>
<p>假设这个集合所对应的排列的大小为 $ix$，符合条件的集合有 $F(i)$ 个，那么我们可以从 $n$ 个数中选出 $ix$ 个数，剩下的 $n-ix$ 个随便连，也就是 $F(i)\binom{n}{ix}(n-ix)!$。</p>
<p>现在来看对于一个 $x$，如何求出这个 $F(i)$。$F(i)$ 的定义为从 $[1,i]$ 中选择 $j$ 个长度均为 $x$ 的倍数，那么贡献就是 $(-1)^{j-1}$ 的贡献和。</p>
<p>考虑枚举长度为 $jx$ 的环有多少个，那么复杂度为 $O(\frac{n^2}{x^2}\log \frac{n}{x})$。</p>
<p>考虑枚举当前最小的点所在的环中有多少个点，那么有：$F(i)=-\sum_{j=1}^iF(j)\binom{ix-1}{jx-1}(jx-1)!$。就可以做到时间复杂度 $O(\frac{n^2}{x^2})$。</p>
<p>总的时间复杂度 $O(\sum_{p^k}\frac{n^2}{(p^{k})^2})\leq O(n^2\sum_{i=1}^n\frac{1}{i^2}=O(n^2\zeta(2)))=O(n^2)$</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">7505</span>;</span><br><span class="line">ll m1,m2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%m1)</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%m1;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fac[N],c[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> bo[N];</span><br><span class="line"><span class="type">int</span> pri[N],cnt,p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%m2;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>; c[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i][j]=c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            c[i][j]&gt;=m2?c[i][j]-=m2:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!bo[i])</span><br><span class="line">        &#123;</span><br><span class="line">            pri[++cnt]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j*=i) p[j]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;pri[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            bo[pri[j]*i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N],sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    f[<span class="number">0</span>]=m2<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> m=n/x;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i)</span><br><span class="line">            f[i]=(f[i]-(f[i-j]*c[i*x<span class="number">-1</span>][j*x<span class="number">-1</span>]%m2*fac[j*x<span class="number">-1</span>])%m2+m2)%m2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,m) sum=(sum+(f[i]*c[n][i*x]%m2*fac[n-i*x]))%m2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//FO(exercise);</span></span><br><span class="line">    n=<span class="built_in">read</span>(); m1=<span class="built_in">read</span>(); m2=m1<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">        <span class="keyword">if</span>(p[i])</span><br><span class="line">            ans=ans*<span class="built_in">Pow</span>(p[i],<span class="built_in">solve</span>(i))%m1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>容斥原理</tag>
        <tag>组合数学</tag>
        <tag>Min-Max容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>K Paths[CF981H]</title>
    <url>/2020/04/08/K-Paths-CF981H/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/981/problem/H">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵树，选 $k$ 条路径，使得每条边在这 $k$ 条路径中的出现次数只能是 $0,1,k$ 中的其中一种。</p>
<p>路径点数至少为 $2$，可以选重复的路径，且路径有顺序。求满足条件的方案数模 $998244353$。</p>
<p>$n\leq 10^5$，时限4s。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题比上一题友好一点。</p>
<p>显然枚举这 $k$ 条路径的并集的两个端点 $u,v$，假设他们不是祖先关系。</p>
<p>那么要在 $u,v$ 的子树中选 $k$ 个点，设方案数为 $f_u,f_v$，那么这条路径的贡献就是 $f_u\times f_v$。</p>
<p>如果不考虑祖先关系，所有路径的贡献就是：</p>
<p>$$\sum_{i\not = j}f_i\times f_j=\frac{(\sum f_i)^2-\sum {(f_i^2)}}{2}$$</p>
<p>转换成求每个 $f_u$。</p>
<p>为了满足题意，这 $k$ 个点不能有某两个在其中一个儿子 $v$ 的子树中。</p>
<p>那么对于 $u$ 的每个儿子 $v$，最多能选一个点，剩下的点只能是 $u$ 。那么如果在子树中选了 $w$ 个点，由基础的组合数学可得贡献为 $P_{k}^w$。</p>
<p>对于每个儿子 $v$ 的贡献写成生成函数就是 $(1+siz_vx)$。</p>
<p>那么在子树中选 $w$ 个的方案数为 $[x^w]\prod_{v\in son_u}(1+siz_vx)$。</p>
<p>这一部分可以用分治ntt解决。</p>
<p>接下来考虑是祖先关系的情况。假设 $u$ 是 $v$ 的祖先，$w$ 是 $u$ 的儿子和 $v$ 的祖先。</p>
<p>那么 $u$ 的生成函数就变成了：</p>
<p>$$\frac{(\prod (1+siz_{son}x))(1+(n-siz_u)x)}{1+siz_wx}$$</p>
<p>在 $u$ 处产生的贡献就是：<br>$$\sum_v f_v\sum_{i=0}^kP_{k}^i[x^i]\frac{(\prod (1+siz_{son}x))(1+(n-siz_u)x)}{1+siz_wx}\=\sum_{i=0}^kP_{k}^i[x^i]\frac{(\prod (1+siz_{son}x))(1+(n-siz_u)x)}{(\sum_v f_v)(1+siz_{w(v)}x)}\=\sum_{i=0}^kP_{k}^i<a href="\sum_vf_v">x^i</a>(1+(n-siz_u)x)\prod_{son\not =w}(1+siz_{son}x)$$</p>
<p>这个十分经典，还是在分治FFT的时候算一下就可以了。</p>
<p>最后注意 $k=1$ 的特判。</p>
<p>时间复杂度 $O(n\log^2n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line">ll W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll wn;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        W[i]=<span class="number">1</span>; wn=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">    ll s1,s2,s,h[N],sh[N];</span><br><span class="line">    <span class="type">int</span> siz[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; w; <span class="type">int</span> now;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,Poly &amp;f,Poly &amp;g)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            f.<span class="built_in">clear</span>(); f.<span class="built_in">pb</span>(<span class="number">1</span>); f.<span class="built_in">pb</span>(siz[w[l]]);</span><br><span class="line">            ll sum=<span class="built_in">Add</span>(sh[w[l]],h[w[l]]);</span><br><span class="line">            g.<span class="built_in">clear</span>(); g.<span class="built_in">pb</span>(sum); g.<span class="built_in">pb</span>(<span class="built_in">Mul</span>(sum,now));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        Poly lf,lg,rf,rg;</span><br><span class="line">        <span class="built_in">solve</span>(l,mid,lf,lg); <span class="built_in">solve</span>(mid+<span class="number">1</span>,r,rf,rg);</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>,m=lf.<span class="built_in">size</span>()+rf.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;len&lt;m;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">        lf.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(lf,len,<span class="number">1</span>);</span><br><span class="line">        lg.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(lg,len,<span class="number">1</span>);</span><br><span class="line">        rf.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(rf,len,<span class="number">1</span>);</span><br><span class="line">        rg.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(rg,len,<span class="number">1</span>);</span><br><span class="line">        f.<span class="built_in">resize</span>(len); g.<span class="built_in">resize</span>(len);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>)</span><br><span class="line">            f[i]=lf[i]*rf[i]%mod,</span><br><span class="line">            g[i]=<span class="built_in">Add</span>(<span class="built_in">Mul</span>(lf[i],rg[i]),<span class="built_in">Mul</span>(lg[i],rf[i]));</span><br><span class="line">        <span class="built_in">ntt</span>(f,len,<span class="number">-1</span>); <span class="built_in">ntt</span>(g,len,<span class="number">-1</span>);</span><br><span class="line">        f.<span class="built_in">resize</span>(m); g.<span class="built_in">resize</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        w.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            siz[u]+=siz[v];</span><br><span class="line">            w.<span class="built_in">pb</span>(v);</span><br><span class="line">            sh[u]=<span class="built_in">Add</span>(sh[u],<span class="built_in">Add</span>(h[v],sh[v]));</span><br><span class="line">        &#125;</span><br><span class="line">        now=n-siz[u];</span><br><span class="line">        <span class="keyword">if</span>(!w.<span class="built_in">size</span>()) w.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">        Poly f,g;</span><br><span class="line">        <span class="built_in">solve</span>(<span class="number">0</span>,w.<span class="built_in">size</span>()<span class="number">-1</span>,f,g);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="built_in">min</span>(k,(<span class="type">int</span>)f.<span class="built_in">size</span>()<span class="number">-1</span>))</span><br><span class="line">            h[u]=<span class="built_in">Add</span>(h[u],<span class="built_in">Mul</span>(fac[k]*inv[k-i]%mod,f[i]));</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="built_in">min</span>(k,(<span class="type">int</span>)g.<span class="built_in">size</span>()<span class="number">-1</span>))</span><br><span class="line">            s=<span class="built_in">Add</span>(s,<span class="built_in">Mul</span>(fac[k]*inv[k-i]%mod,g[i]));</span><br><span class="line">        s1=<span class="built_in">Add</span>(s1,h[u]); s2=<span class="built_in">Add</span>(s2,h[u]*h[u]%mod);</span><br><span class="line">        s=<span class="built_in">Dec</span>(s,sh[u]*h[u]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Add</span>(s,<span class="built_in">Mul</span>(<span class="built_in">Pow</span>(<span class="number">2</span>,mod<span class="number">-2</span>),<span class="built_in">Dec</span>(s1*s1%mod,s2)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">1ll</span>*n*(n<span class="number">-1</span>)/<span class="number">2</span>%mod)&amp;<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">PolyInit</span>();</span><br><span class="line">    <span class="built_in">init</span>(k);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) Tree::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Tree::<span class="built_in">work</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree[CF1010F]</title>
    <url>/2020/04/07/Tree-CF1010F/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1010/problem/F">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一棵有根二叉树，现在你要在上面填数。</p>
<p>根节点为 $1$，且已经填上了数字 $x$。</p>
<p>树边可以任意断掉，最后保留存在能到根节点路径的节点所形成的子树。</p>
<p>对于子树中的这些节点 $u$，满足它所有儿子所填的数之和小于等于 $u$ 填的数。</p>
<p>问最后有多少种形态。两种形态不同当且仅当子树的节点集合不同；或者集合相同，但存在一个节点 $u$，使得在两种方案中所填之数不同。</p>
<p>模 $998244353$。</p>
<p>$n\leq 10^5$，时限7s。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题也是够毒瘤了QwQ。</p>
<p>先来看看不能断树边该怎么算。</p>
<p>设 $a_u$ 为节点 $u$ 所填的数字。对于所有的 $u$ ，要使得满足它所有儿子所填的数之和小于等于 $u$ 填的数，我们转换条件，设：$b_u=a_u-\sum_{v\in son_u}a_v$。</p>
<p>那么就会有 $b_u\geq 0$，且可以发现，每个不同的 $b$ 一一对应这不同的 $a$。</p>
<p>并且还有 $\sum_{i=1}^nb_i=n$。</p>
<p>那么有插板法可得总方案数为 $\binom{n+x-1}{n}$。这个 $n$ 表示树的节点个数。</p>
<p>现在题目转换成，对于每个 $i$，求有多少个包含 $1$ 号点的连通子图，且大小为 $i$。</p>
<p>显然我们可以树形DP，设 $f_{u,i}$ 表示子树 $u$ 中节点个数为 $i$ 的方案数。</p>
<p>当有两个儿子的时候，有：$f_{u,i}=\sum_{j+k=i-1}f_{v,j}\times f_{w,k},f_{u,0}=1$。</p>
<p>设 $f_u$ 的OGF为 $F_u$，上式写成生成函数的形式是：$F_u=xF_vF_w+1$。</p>
<p>当 $u$ 为空的时候，$F_u=1$。</p>
<p>显然上式用FFT优化，但显然还是没有用的。</p>
<p>那就先考虑链吧？这个很简单。</p>
<p>链中每个点插多一个子树呢？</p>
<p>那么我对于每个点 $u$，设插进去的这个子树算出来的生成函数乘以 $x$ 后的式子为 $g_u$。</p>
<p>对于这条链，考虑从上往下计算，则有：$F_u=F_{son_u}g_u+1$</p>
<p>我们不妨将这条链从上往下标号为 $1,2\cdots k$。那么最终的生成函数就是：</p>
<p>$$F=(g_1(g_2(g_3\cdots)+1))+1\=\sum_{i=0}^k\prod_{j=1}^ig_j$$</p>
<p>考虑分治计算这个东西，设当前的分治结构为 $[l,r]$，$s=\prod_{i=l}^rg_i$，$F=\sum_{i=l-1}^r\prod_{j=l}^ig_j$，那么有：</p>
<p>$$s_{[l,r]}=s_{[l,mid]}\times s_{[mid+1,r]}\\F_{[l,r]}=(F_{[l,mid]}-1)\times s_{[mid+1,r]}+F_{[mid+1,r]}$$</p>
<p>可以用ntt优化上面的乘法。</p>
<p>那么可以先树链剖分进行链分治，对于每条链，我们按照上面的方法算。设链顶的节点的子树大小为 $siz$ ，那么上面的方法的复杂度就是 $O(siz\log ^2siz)$。</p>
<p>由于每个节点往上跳只会统计最多 $\log n$ 次，那么总的复杂度就是 $O(n\log ^3n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;W&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="keyword">namespace</span> P&#123;</span><br><span class="line">    <span class="type">int</span> R[M]; ll W[M];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll wn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            W[i]=<span class="number">1</span>; wn=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                    w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">                    a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">                    a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">        w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> opt)</span> </span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,opt);&#125;</span><br><span class="line">    <span class="keyword">inline</span> Poly <span class="keyword">operator</span>*(Poly A,Poly B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;len&lt;=k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">        A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">        <span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=<span class="number">1ll</span>*A[i]*B[i]%mod;</span><br><span class="line">        <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">        A.<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;A,<span class="type">const</span> Poly &amp;B)</span><br><span class="line">    &#123;</span><br><span class="line">        Poly C=A;</span><br><span class="line">        C.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) C[i]=<span class="built_in">Add</span>(C[i],B[i]);</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> P;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">    <span class="type">int</span> son[N],siz[N],oth[N]; </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">            oth[u]^=v;</span><br><span class="line">            siz[u]+=siz[v];</span><br><span class="line">            <span class="keyword">if</span>(siz[son[u]]&lt;siz[v]) son[u]=v;</span><br><span class="line">        &#125;</span><br><span class="line">        oth[u]^=son[u];</span><br><span class="line">    &#125;</span><br><span class="line">    Poly p[N],w[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,Poly &amp;f,Poly &amp;g)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;f=g=w[l]; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        Poly lf,lg,rf,rg;</span><br><span class="line">        <span class="built_in">solve</span>(l,mid,lf,lg); <span class="built_in">solve</span>(mid+<span class="number">1</span>,r,rf,rg);</span><br><span class="line">        g=lg*rg; f=rf*lg+lf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=u;v;v=son[v])</span><br><span class="line">        &#123;</span><br><span class="line">            p[v].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">if</span>(oth[v]) p[v]=<span class="built_in">dfs2</span>(oth[v]);</span><br><span class="line">            <span class="keyword">if</span>(p[v].<span class="built_in">empty</span>()) p[v].<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">            p[v][<span class="number">0</span>]++; p[v].<span class="built_in">insert</span>(p[v].<span class="built_in">begin</span>(),<span class="number">0</span>);</span><br><span class="line">            w[++m].<span class="built_in">swap</span>(p[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        Poly f,g;</span><br><span class="line">        <span class="built_in">solve</span>(<span class="number">1</span>,m,f,g);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly f;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        f=<span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">        ll ans=<span class="number">0</span>,now=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(now,f[i]));</span><br><span class="line">            now=<span class="built_in">Mul</span>(now,<span class="built_in">Mul</span>(<span class="built_in">Add</span>(x,i),<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PolyInit</span>();</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    ll x; <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x); x%=mod;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) Tree::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Tree::<span class="built_in">work</span>(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
        <tag>组合数学</tag>
        <tag>树链剖分</tag>
        <tag>链分治</tag>
      </tags>
  </entry>
  <entry>
    <title>氪金手游[CTS2019]</title>
    <url>/2020/04/07/%E6%B0%AA%E9%87%91%E6%89%8B%E6%B8%B8-CTS2019/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3124">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>mdzz…刚开始没看到权值只能在 $[1,3]$ 之间…导致自闭了很久…</p>
<p>这题还挺简单的。</p>
<p>首先如果把题目的有向变成无向，那么就是一棵无根树。</p>
<p>假设权值已经固定了。</p>
<p>再假设它是一个外向树的结构，那么显然可以树形DP一下：</p>
<p>设 $f_u$ 表示子树内答案，有：$f_u=\prod_{v\in son_u}f_v\frac{w_u}{\sum_{v\in tree_u} w_v}$。</p>
<p>但是现在权值 $w_i$ 不固定，那么 $\sum_{v\in tree_u} w_v$ 也不固定，那么在DP的时候还需要记多一维表示子树的 $w_v$ 的和，这个还是 $O(n)$ 级别。那么时间复杂度 $O(n^2)$。</p>
<p>想到这里，你就会获得0分的好成绩。。。</p>
<p>那么当这棵树不是外向树的时候的概率该怎么算呢？</p>
<p>考虑容斥原理，假设你至少有 $i$ 条内向边改成了外向，其他内向边随意，那么对答案的贡献为 $(-1)^i$。</p>
<p>那么随意的外向边相当于断开，那么 $\sum_{v\in tree_u} w_v$ 这里就不需要算这棵断开了的子树。</p>
<p>只需要在树形DP的时候容斥，遇到一条内向边就考虑它是否改成外向，还是断开两种情况就可以了。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3005</span>;</span><br><span class="line">ll inv[N],a[N][<span class="number">4</span>];</span><br><span class="line">ll f[N][N],g[N];</span><br><span class="line"><span class="type">int</span> n,num[N],siz[N];</span><br><span class="line"><span class="type">int</span> ver[N],val[N],ne[N],head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ver[++tot]=y; val[tot]=<span class="number">1</span>; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">    ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">3</span>) f[u][i]=a[u][i]*i%mod;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; V; ll t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">           <span class="built_in">dfs</span>(v,u),V.<span class="built_in">pb</span>(v),num[v]=val[i];</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">all</span>(V),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> siz[x]&lt;siz[y];&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:V)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u]*<span class="number">3</span>) <span class="built_in">fo</span>(j,<span class="number">1</span>,siz[v]*<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t=f[u][i]*f[v][j]%mod;</span><br><span class="line">            <span class="keyword">if</span>(num[v]) g[i+j]=<span class="built_in">Add</span>(g[i+j],t);</span><br><span class="line">            <span class="keyword">else</span> g[i+j]=<span class="built_in">Dec</span>(g[i+j],t),g[i]=<span class="built_in">Add</span>(g[i],t);</span><br><span class="line">        &#125;</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u]*<span class="number">3</span>) f[u][i]=g[i],g[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,siz[u]*<span class="number">3</span>) f[u][i]=<span class="built_in">Mul</span>(f[u][i],inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) inv[i]=<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>);</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="number">3</span>) s+=(a[i][j]=<span class="built_in">read</span>());</span><br><span class="line">        s=<span class="built_in">Pow</span>(s,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">fo</span>(j,<span class="number">1</span>,<span class="number">3</span>) a[i][j]=<span class="built_in">Mul</span>(a[i][j],s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n*<span class="number">3</span>) ans=<span class="built_in">Add</span>(ans,f[<span class="number">1</span>][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>CTSC</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>珍珠[CTS2019]</title>
    <url>/2020/04/06/%E7%8F%8D%E7%8F%A0-CTS2019/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3120">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设第 $i$ 个颜色出现了 $a_i$ 次，那么当且仅当 $\sum_{i=1}^d\left \lfloor \frac{a_i}{2}\right \rfloor\leq m$ 时满足条件。</p>
<p>原式经转换得：$\sum a_i-a_i\bmod 2\leq 2m$。</p>
<p>因为有 $\sum_{i=1}^da_i=n$，那么有 $\sum_{i=1}^da_i\bmod 2\leq n-2m$。</p>
<p>那么设 $g_j$ 表示 $\sum_{i=1}^da_i\bmod 2=j$ 的方案数，最后 $\sum_{j=0}^{n-2m}g_j$ 就是答案。</p>
<p>这个 $g_j$ 很不好求，可以容斥一下，变成求至少为 $j$ 的方案数，设为 $f_i$。</p>
<p>那么有：$f_i=\sum_{j=i}^d\binom{j}{i}g_j$。</p>
<p>二项式反演得到：$g_i=\sum_{j=i}^d(-1)^{j-i}\binom{j}{i}f_j$，即：</p>
<p>$$g_i=\frac{1}{i!}\sum_{j=i}^d\frac{(-1)^{j-i}}{(j-i)!}\times j!f_j$$</p>
<p>显然是一个卷积形式，ntt即可，转换为求所有的 $f_i$。</p>
<p>那么就是在 $d$ 个颜色中钦定 $i$ 个，使得这 $i$ 个颜色都选了奇数个，其他任意的方案数。这里有 $\binom{d}{i}$ 种情况。</p>
<p>如果只要出现这 $i$ 个颜色当中出现了一个选了偶数，则这个方案贡献为 $0$，否则为 $1$。</p>
<p>如果颜色的出现次数为 $a_1,a_2\cdots,a_d$，则一共有 $\frac{n!}{\prod_{i=1}^da_i!}$ 种情况。这启发我们可以使用EGF来进行计数。</p>
<p>考虑那 $i$ 个颜色的EGF对应的序列是这样的：$\{0,1,0,1,0\cdots\}$，也就是 $\frac{e^x-e^{-x}}{2}$。</p>
<p>其他颜色的EGF对应的序列是这样的：$\{1,1,1,1\cdots\}$，为 $e^x$。</p>
<p>那么这一部分的答案为 $n! \left [ x ^ n \right ] (\frac{e^x-e^{-x}}{2})^i(e^x)^{d-i}$。</p>
<p>那么有：</p>
<p>$$f_i=\binom{d}{i}n<img src="%5Cfrac%7Be%5Ex-e%5E%7B-x%7D%7D%7B2%7D" alt="x^n">^i(e^x)^{d-i}\=\frac{d!}{2^ii!(d-i)!}n<img src="e%5Ex-e%5E%7B-x%7D" alt="x^n">^ie^{(d-i)x}\=\frac{d!}{2^ii!(d-i)!}n![x^n]\sum_{j=0}^i(-1)^{i-j}\binom{i}{j}e^{jx}e^{-(i-j)x}e^{(d-i)x}\=\frac{d!}{2^ii!(d-i)!}n![x^n]\sum_{j=0}^i(-1)^{i-j}\binom{i}{j}e^{(d-2(i-j))x}\=\frac{d!}{2^ii!(d-i)!}n!\sum_{j=0}^i(-1)^{i-j}\binom{i}{j}\frac{(d-2(i-j))^n}{n!}\=\frac{d!}{2^ii!(d-i)!}\sum_{j=0}^i(-1)^{i-j}\binom{i}{j}(d-2(i-j))^n\=\frac{d!}{2^i(d-i)!}\sum_{j=0}^i\frac{1}{j!}\times \frac{(-1)^{i-j}(d-2(i-j))^n}{(i-j)!}$$</p>
<p>这一部分也是一个卷积形式，ntt计算出 $f_i$ 即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;W&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> ll g=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">270000</span>;</span><br><span class="line"><span class="keyword">namespace</span> Poly&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line">    <span class="type">int</span> R[M]; ll W[M];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll wn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            W[i]=<span class="number">1</span>; wn=<span class="built_in">Pow</span>(g,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">            <span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n/<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    w=W[i+k]*a[i+j+k]%mod;</span><br><span class="line">                    a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w);</span><br><span class="line">                    a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">        w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=<span class="built_in">Mul</span>(a[i],w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Poly;</span><br><span class="line"><span class="type">int</span> d,n,m;</span><br><span class="line">ll A[N],B[N],fac[N],inv[N],f[N],C[N],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PolyInit</span>();</span><br><span class="line">    d=<span class="built_in">read</span>(); n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(n<span class="number">-2</span>*m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>)&amp;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n<span class="number">-2</span>*m&gt;=d) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Pow</span>(d,n))&amp;<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;=d+d+<span class="number">2</span>;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,d) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[d]=<span class="built_in">Pow</span>(fac[d],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,d,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,d) A[i]=inv[i],B[i]=<span class="built_in">Mul</span>(<span class="built_in">Pow</span>(mod<span class="number">-1</span>,i),<span class="built_in">Mul</span>(inv[i],<span class="built_in">Pow</span>(<span class="built_in">Dec</span>(d,<span class="number">2</span>*i),n)));</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len) A[i]=A[i]*B[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,d) f[i]=<span class="built_in">Mul</span>(fac[d],inv[d-i])*<span class="built_in">Mul</span>(A[i],<span class="built_in">Pow</span>(<span class="built_in">Pow</span>(<span class="number">2</span>,i),mod<span class="number">-2</span>))%mod*fac[i]%mod;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,d) C[d-i]=<span class="built_in">Mul</span>(<span class="built_in">Pow</span>(mod<span class="number">-1</span>,i),inv[i]);</span><br><span class="line">    <span class="built_in">ntt</span>(f,len,<span class="number">1</span>); <span class="built_in">ntt</span>(C,len,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">0</span>,len) f[i]=f[i]*C[i]%mod;</span><br><span class="line">    <span class="built_in">ntt</span>(f,len,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">fo</span>(i,d,d+n<span class="number">-2</span>*m) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(f[i],inv[i-d]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>CTSC</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>生成函数</tag>
        <tag>FFT</tag>
        <tag>组合数学</tag>
        <tag>二项式反演</tag>
      </tags>
  </entry>
  <entry>
    <title>随机立方体[CTS2019]</title>
    <url>/2020/04/06/%E9%9A%8F%E6%9C%BA%E7%AB%8B%E6%96%B9%E4%BD%93-CTS2019/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个 $n\times m\times l$ 的立方体，立方体中每个格子上都有一个数，如果某个格子上的数比三维坐标<strong>至少有一维</strong>相同的其他格子上的数都要大的话，我们就称它是极大的。</p>
<p>现在将 $1\sim n\times m\times l$ 这 $n\times m\times l$ 个数等概率随机填入 $n\times m\times l$ 个格子（即任意数字出现在任意格子上的概率均相等），使得每个数恰出现一次，求恰有 $k$ 个极大的数的概率。对 $998244353$ 取模。</p>
<p>$T\leq 10,n,m,l\leq 5\times 10^6,k\leq 100$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$k\leq100$？似乎就是用来迷惑人的吧。。。</p>
<p>“恰有”非常难搞，那就考虑容斥，变成钦定 $k$ 个为极大，设此时答案为 $f_k$。</p>
<p>那么二项式反演一下，可得到最后的答案为 ：$\sum_{i=k}^{\min\{n,m,l\}}(-1)^{i-k}\binom{i}{k}f_i$。</p>
<p>设 $w=\min\{n,m,l\}$，接下来考虑如何求 $f _ k$。</p>
<p>第一步是要钦定 $k$ 个极大的点，且这 $k$ 个极大的点已经按从小到大的顺序排好。</p>
<p>显然，这 $k$ 个极大的点的 $x$ 坐标都互不相同，$y,z$ 同理。那么也就是有 $\binom{n}{i}\binom{m}{i}\binom{l}{i}(i!)^3$ 种情况。</p>
<p>然后在 $1\sim nml$ 中选一些数，填到跟这 $k$ 个点有关系的点上去。什么叫有关系，就是坐标跟这 $k$ 个中的任意一点至少有一维相同的点就能有关系。这些点有多少个呢？显然用总方案减去不合法的，即没有一维和这 $k$ 个点相同。设为 $s_k$，则有：$s_k=nml-(n-k)(m-k)(l-k)$。那么选的方案数就是 $\binom{nml}{s_k}$。</p>
<p>接着，除了这 $s_k$ 个点以外的点就可以乱选了，也就是 $(nml-s_k)!$ 种。</p>
<p>最后要把这 $s_k$ 中颜色填上去，使得钦定的 $k$ 个点为极大点，设这时的答案为 $g_k$。</p>
<p>那么有：</p>
<p>$$f_i=\frac{\binom{nml}{s_k}(nml-s_k)!\binom{n}{i}\binom{m}{i}\binom{l}{i}(i!)^3g_i}{(nml)!}$$</p>
<p>除以 $(nml)!$ 是因为我们算的是概率。</p>
<p>接下来就只需要看这个 $g_k$ 如何算了，考虑有 $g_{k-1}$ 递推过来</p>
<p>考虑从大到小填这个极大值进去。首先极大值这个位置已经确定了，现在我们还有 $s_k-1$ 个数可以选择，需要选一些数使得最后剩下 $s_{k-1}$ 个数，那么就有 $\frac{(s_k-1)!}{s_{k-1}!}$ 种情况。</p>
<p>最后有 $g_k=\prod_{i=1}^k{\frac{(s_i-1)!}{s_{i-1}!}}$。</p>
<p>代入答案，化简得：</p>
<p>$$Ans=\sum_{i=k}^{w}(-1)^{i-k}\binom{i}{k}\binom{n}{i}\binom{m}{i}\binom{l}{i}(i!)^3\prod_{j=1}^i\frac{1}{s_j}$$</p>
<p>线性处理 $\prod_{j=1}^is_j$ 的逆元即可。</p>
<p>时间复杂度 $O(Tw)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n-m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Mul</span>(fac[n],<span class="built_in">Mul</span>(inv[m],inv[n-m]));</span><br><span class="line">&#125;</span><br><span class="line">ll sum,ss,ans,s[N],g[N];</span><br><span class="line"><span class="type">int</span> n,m,l,k,w;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inv[n-i]*inv[m-i]%mod*inv[l-i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">5000000</span>);</span><br><span class="line">    CASET</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); l=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">        sum=<span class="built_in">Mul</span>(l,<span class="built_in">Mul</span>(n,m));</span><br><span class="line">        w=<span class="built_in">min</span>(<span class="built_in">min</span>(n,m),l);</span><br><span class="line">        ss=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,<span class="number">1</span>,w) s[i]=<span class="built_in">Dec</span>(sum,<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(n-i,m-i),l-i)),ss=<span class="built_in">Mul</span>(ss,s[i]);</span><br><span class="line">        ss=<span class="built_in">Pow</span>(ss,mod<span class="number">-2</span>); g[w]=ss;</span><br><span class="line">        <span class="built_in">fd</span>(i,w,<span class="number">1</span>) g[i<span class="number">-1</span>]=g[i]*s[i]%mod;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fo</span>(i,k,w) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(((i-k)&amp;<span class="number">1</span>)?mod<span class="number">-1</span>:<span class="number">1</span>,<span class="built_in">C</span>(i,k)),g[i])*<span class="built_in">calc</span>(i)%mod);</span><br><span class="line">        ans=<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(ans,fac[n]),<span class="built_in">Mul</span>(fac[m],fac[l]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
        <category>CTSC</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>组合数学</tag>
        <tag>二项式反演</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2020 US Open Gold</title>
    <url>/2020/04/04/USACO-2020-US-Open-Gold/</url>
    <content><![CDATA[<p>USACO 2020 US Open Gold题解。</p>
<span id="more"></span>

<h3 id="Haircut"><a href="#Haircut" class="headerlink" title="Haircut"></a>Haircut</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>一个数组，对于每个 $i\in[0,n)$，若将 $\geq i$  的数全部变成 $i$，求逆序对个数。</p>
<p>$n\leq 10^5$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>考虑一个逆序对 $(a_j,a_k)$ 在哪些 $i$ 有贡献，显然是在 $[a_k+1,n)$ 处会产生贡献，然后树状数组随便算就好了。</p>
<h3 id="Favorite-Colors"><a href="#Favorite-Colors" class="headerlink" title="Favorite Colors"></a>Favorite Colors</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>一个有向图，需要给点染上颜色。颜色从 $1$ 开始标号。若存在边 $(b,a),(c,a)$，则 $b,c$ 必须颜色相同。</p>
<p>求在满足颜色数最大的时候，的最大字典序。</p>
<p>$n\leq 2\times 10^5$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>考虑在 $a$ 处考虑，对于连向 $a$ 的两个点 $b,c$ 而言，我们可以把他们看成一个点。把这两个点的信息合并到一起。然后如果合并后这个点也有两个或以上连向它的点，则也要把这些点合并。因此开一个队列记录有哪些 $a$ 是需要对连向它的点进行合并的。</p>
<p>合并用启发式合并即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> fa[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s[x].<span class="built_in">size</span>()&lt;s[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:s[y]) s[x].<span class="built_in">insert</span>(v),fa[v]=x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[y]) adj[x].<span class="built_in">pb</span>(v);</span><br><span class="line">	adj[y].<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span>(adj[x].<span class="built_in">size</span>()&gt;<span class="number">1</span>) q.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(fcolor);</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		fa[i]=i; s[i].<span class="built_in">insert</span>(i);</span><br><span class="line">		<span class="keyword">if</span>(adj[i].<span class="built_in">size</span>()&gt;<span class="number">1</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u,v,w;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>();</span><br><span class="line">		<span class="keyword">if</span>(adj[u].<span class="built_in">size</span>()&lt;=<span class="number">1</span>) &#123;q.<span class="built_in">pop</span>(); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		v=fa[adj[u].<span class="built_in">back</span>()];</span><br><span class="line">		adj[u].<span class="built_in">pop_back</span>();</span><br><span class="line">		w=fa[adj[u].<span class="built_in">back</span>()];</span><br><span class="line">		<span class="keyword">if</span>(v==w) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">merge</span>(v,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[fa[i]]) vis[fa[i]]=++cnt;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,vis[fa[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>一个 $n$ 阶置换，定义这个置换的次数为 $(1,2,\cdots,n)$ 按照该置换进行操作，用最少的大于 $0$ 的操作数，使得所有的 $i$ 最后都回到原来的位置上。</p>
<p>问所有的 $k$ 的和，满足存在至少一个置换的次数为 $k$。答案对 $m$ 取模。</p>
<p>$n\leq 10^4$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>显然一个置换的次数为所有环长的LCM。</p>
<p>刚开始想的时候还以为要搞什么Min-Max容斥之类的。</p>
<p>结果你发现只需要一个贪心，对于某个 $p^k$ 而言，假设出现在了LCM中，那么只需要一个单独的环，长度为 $p^k$ 即可。其他的环大可不必有 $p$ 的倍数，而多出来的用自环就可以搞定。</p>
<p>也就是判断一个 $k$ 是否合法可以先将其质因数分解：$k=\prod_{i=1}^mp_i^{q_i}$。然后判断是否满足 $\sum_{i=1}^mp_i^{q_i}\leq n$ 即可。</p>
<p>那么考虑枚举质因子进行 DP，设 $f_{i,j}$ 表示考虑到第 $i$ 个质数，当前总和为 $j$ 的所有的 $k$ 的和，然后枚举 $i^l$ 进行转移。</p>
<p>时间复杂度 $O(\frac{n}{\ln n}n\log n)=O(n^2)$。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10002</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">2000</span>;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">ll f[N][M];</span><br><span class="line"><span class="type">int</span> pri[M],cnt,n;</span><br><span class="line"><span class="type">bool</span> bo[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!bo[i]) &#123;pri[++cnt]=i;&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*pri[j]&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			bo[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(exercise);</span><br><span class="line">	n=<span class="built_in">read</span>(); mod=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">init</span>(n);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,cnt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j]=<span class="built_in">Add</span>(f[i][j],f[i][j<span class="number">-1</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>,t=pri[j];t&lt;=i;k++,t*=pri[j])</span><br><span class="line">				f[i][j]=<span class="built_in">Add</span>(f[i][j],<span class="built_in">Mul</span>(f[i-t][j<span class="number">-1</span>],t));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans=<span class="built_in">Add</span>(ans,f[i][cnt]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Add</span>(ans,<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>树状数组</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>IIIDX[九省联考2018]</title>
    <url>/2020/04/02/IIIDX-%E4%B9%9D%E7%9C%81%E8%81%94%E8%80%832018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2472">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵树，$i$ 的父亲是 $\left\lfloor \frac{i}{k}\right\rfloor$ 一个乱序的数组 $d$，大小均为 $n$。将数组中的数扔进树中的点做点权，使得 $d_i\geq d_{fa_i}$。输出满足条件的最大字典序。</p>
<p>$n\leq 5\times 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果 $d_i$ 互不相同，那么对于相同层数的点从小到大贪心一下即可。50pts。</p>
<p>但是如果 $d_i$ 有相同的，因为可以有等于的限制，所以上面的贪心就行不通了。</p>
<p>考虑换一种贪心，对于一棵子树 $u$，我们需要选择最大 $d_i$ 满足剩下的还能选择的 $d$ 中至少有 $siz_u$ 个。那也就是将 $d_i$ 从大到小排序，设 $f_i$ 表示还剩下 $f_i$ 个大于等于 $d_i$ 的 $d$ 可以选择，初始时 $f_i=i$。对于子树 $u$ 而言，需要找到最小的 $i$ 满足 $f_i\geq siz_u$，但是这个 $i$ 并不一定是最优的，显然最优的是最大的 $j$ 满足 $d_i=d_j$（实际上就是把所有的 $d_i$ 相同的搞到一起考虑）。然后将 $f[j,n]$ 都减去 $siz_u$，表示我会先预留 $siz_u$ 个位置给子树 $u$ 中的所有点。然后继续处理 $u+1$。</p>
<p>需要用的操作是区间加，查询第一个大于某个值的下标。这个用线段树即可实现。</p>
<p>需要注意的是处理到 $u$ 时，需要把 $fa_u$ 预留的位置所做的贡献删掉。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> n; db k;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="type">int</span> mi[N&lt;&lt;<span class="number">2</span>],tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mi[u]+=d; tag[u]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[u]==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">pushtag</span>(lc,tag[u]); <span class="built_in">pushtag</span>(rc,tag[u]);</span><br><span class="line">	tag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;mi[u]=l,tag[u]=<span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(ls); <span class="built_in">build</span>(rs);</span><br><span class="line">	mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,d);</span><br><span class="line">	<span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">add</span>(ls,L,R,d);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">add</span>(rs,L,R,d);</span><br><span class="line">	mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> mi[u]&gt;=d?l:l+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> d&lt;=mi[rc]?<span class="built_in">ask</span>(ls,d):<span class="built_in">ask</span>(rs,d); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> bo[N];</span><br><span class="line"><span class="type">int</span> fa[N],d[N],siz[N],las[N],ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> x&gt;y;&#125;);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		fa[i]=<span class="number">1.</span>*i/k;</span><br><span class="line">		++siz[i];</span><br><span class="line">		siz[fa[i]]+=siz[i];</span><br><span class="line">		las[i]=i;</span><br><span class="line">		<span class="keyword">if</span>(i!=n&amp;&amp;d[i]==d[i+<span class="number">1</span>]) las[i]=las[i+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=fa[i];</span><br><span class="line">		<span class="keyword">if</span>(u&amp;&amp;!bo[u]) bo[u]=<span class="number">1</span>,<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,ans[u],n,siz[u]<span class="number">-1</span>);</span><br><span class="line">		ans[i]=las[<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,siz[i])];</span><br><span class="line">		<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,ans[i],n,-siz[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,d[ans[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>林克卡特树[九省联考2018]</title>
    <url>/2020/04/02/%E6%9E%97%E5%85%8B%E5%8D%A1%E7%89%B9%E6%A0%91-%E4%B9%9D%E7%9C%81%E8%81%94%E8%80%832018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2478">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>稍微转换一下，考虑 $k$ 比较小的情况，发现就是找 $k+1$ 条互不相交的路径，使得链的权值之和最大。</p>
<p>那么60分的DP做法就呼之欲出了，设 $f_{i,j,0/1/2}$ 表示以 $i$ 为根节点的子树中，选了 $j$ 条路径，没有一条链传给父亲，有一条链传给父亲，子树有两条链在 $i$ 处结合的最大价值。</p>
<p>然后转移只需要分三种情况讨论一下。</p>
<p>这种选 $k$ 次的一般都会满足单调性，也就是设答案为 $f(k)$，则 $f(k)-f(k-1)$ 不递减。证明并不会，只能意会QwQ。</p>
<p>那么就可以用wqs二分了，二分斜率 $mid$，然后转换成只需要判断是否可以选出 $k+1$ 条路径，满足路径都大于等于这个斜率 $mid$，那么将每条路径的贡献减去 $mid$，变成判断是否可以选出 $k+1$ 条大于等于 $0$ 的路径，且价值和最大，就可以了。</p>
<p>这个可以用60分的DP解决，少了 $j$ 这一维的转移即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">ll l,r,mid;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	ll v; <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.v==B.v) <span class="keyword">return</span> A.k&lt;B.k;</span><br><span class="line">		<span class="keyword">return</span> A.v&lt;B.v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B) &#123;<span class="keyword">return</span> (node)&#123;A.v+B.v,A.k+B.k&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;A,<span class="type">const</span> ll &amp;B) &#123;<span class="keyword">return</span> (node)&#123;A.v+B,A.k&#125;;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">change</span><span class="params">(<span class="type">const</span> node &amp;A)</span> </span>&#123;<span class="keyword">return</span> (node)&#123;A.v-mid,A.k+<span class="number">1</span>&#125;;&#125;</span><br><span class="line">node f[N][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],val[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> z,<span class="type">int</span> y,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[u][<span class="number">0</span>]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	f[u][<span class="number">1</span>]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	f[u][<span class="number">2</span>]=(node)&#123;-mid,<span class="number">1</span>&#125;;<span class="comment">//!!!</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		f[u][<span class="number">2</span>]=<span class="built_in">max</span>(f[u][<span class="number">2</span>]+f[v][<span class="number">0</span>],<span class="built_in">change</span>(f[u][<span class="number">1</span>]+f[v][<span class="number">1</span>]+val[i]));</span><br><span class="line">		f[u][<span class="number">1</span>]=<span class="built_in">max</span>(f[u][<span class="number">1</span>]+f[v][<span class="number">0</span>],f[u][<span class="number">0</span>]+f[v][<span class="number">1</span>]+val[i]);</span><br><span class="line">		f[u][<span class="number">0</span>]=f[u][<span class="number">0</span>]+f[v][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	f[u][<span class="number">0</span>]=<span class="built_in">max</span>(<span class="built_in">max</span>(f[u][<span class="number">0</span>],f[u][<span class="number">2</span>]),<span class="built_in">change</span>(f[u][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	r=<span class="number">1000000ll</span>*n; l=-r;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;=r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][<span class="number">0</span>].k&gt;k) l=mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mid=l; <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[<span class="number">1</span>][<span class="number">0</span>].v+mid*k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>wqs二分</tag>
      </tags>
  </entry>
  <entry>
    <title>遗迹[JOISC 2020 Day2]</title>
    <url>/2020/03/30/%E9%81%97%E8%BF%B9-JOISC-2020-Day2/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3276">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先来看看给一个 $a_i$，最后柱子的高度 $b_i$ 可以怎么算。</p>
<p>显然可以从后面倒着枚举 $i$，然后从 $a_i$ 倒着枚举到 $0$ 找到一个 $j$ ，使得 $[1,j]$ 已经全部在 $i$ 后面使用过了。那么这个$b_i=j$。</p>
<p>这样就可以进行DP了，显然是倒着来的。</p>
<p>为了方便，我们设两个 $i$ 是不相同的，这样做就不需要处理是否出现过 $i$，那么只要最后答案除以 $2^n$ 就可以了。</p>
<p>设 $f _ {i,j} $ 表示从后往前考虑到第 $i$ 位时，$[1,j]$ 已经全部使用过，$j+1$ 没有使用的方案数。</p>
<ul>
<li>若这一位的 $b_i$ 为 $0$：</li>
</ul>
<p>那么这一位的 $a_i$ 则必须选在 $[1,j]$ 中的数，假设后面有 $m$ 个位置答案为 $0$，也就是说，已经有 $m$ 个位置选了 $[1,j]$ 中的数，且 $[1,j]$ 中所有数至少过一次（不然不可能 $[1,j]$ 全部数都使用过），也就是还有 $2j-(m+j)=j-m$ 个数可以选。</p>
<p>因此有：$f_{i,j}=f_{i+1,j}\times (j-m)$。</p>
<ul>
<li>若这一位最后不为 $0$：</li>
</ul>
<p>如果这一位最终不为 $j+1$，则只能以后再考虑。</p>
<p>如果这一位最终的 $b_i$ 为 $j+1$，那么再枚举这个 $j$ 转移到的 $j+k$，也就是当 $j+1$ 已经使用过后，$[1,j+k]$ 都将被使用过。下面考虑这个系数是什么。</p>
<p>设 $m$ 为 $[i+1,2n]$ 中，$b$ 不为 $0$ 的数的个数。</p>
<p>此时需要把 “如果这一位最终不为 $j+1$，则只能以后再考虑。”​的情况考虑进去。也就是需要搞出后面的数是如何让 $[j+1,j+k]$ 都使用过的方案数。那么 $[i+1,2n]$ 最终的 $b_i$ 中，$[j+2,j+k]$ 的数都只能且必须出现 $1$ 次，也就是 $\binom{m-j}{k-1}$。</p>
<p>然后考虑 $a_i$ 能选的方案数，显然是 $2+((j+k)-(j+2)+1)=k+1$ 中情况。</p>
<p>然后还剩下一个 $s_{k-1}$，其中 $s_{m}$ 表示在 $[1,m]$ ，每个数能选两次，一共选 $m$ 个，最终的 $b_i$ 在 $[1,m]$ 均出现的方案数。</p>
<p>这个 $s_{m}$ 显然也可以DP解决。设 $g_{i,j}$ 表示考虑到第 $i$ 个数，最终的 $b_i$ 在 $[1,j]$ 均出现的方案数。</p>
<p>那么考虑第 $i$ 个数选了多少个，有： $g_{i,j}=g_{i-1,j}+g_{i-1,j-1}\times 2j+g_{i-1,j-2}\times j(j-1)$。</p>
<p>则有：$s_m=g_{m,m}$。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1205</span>;</span><br><span class="line"><span class="type">int</span> n,p[N],cnt[N];</span><br><span class="line">ll fac[N],inv[N],g[N][N],f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>); <span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc_g</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,i)</span><br><span class="line">	&#123;</span><br><span class="line">		g[i][j]=g[i<span class="number">-1</span>][j];</span><br><span class="line">		<span class="keyword">if</span>(j&gt;<span class="number">0</span>) g[i][j]=<span class="built_in">Add</span>(g[i][j],<span class="built_in">Mul</span>(g[i<span class="number">-1</span>][j<span class="number">-1</span>],<span class="number">2</span>*j));</span><br><span class="line">		<span class="keyword">if</span>(j&gt;<span class="number">1</span>) g[i][j]=<span class="built_in">Add</span>(g[i][j],<span class="built_in">Mul</span>(g[i<span class="number">-1</span>][j<span class="number">-2</span>],j*(j<span class="number">-1</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc_f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[<span class="number">2</span>*n+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">2</span>*n,<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span>(!p[i])</span><br><span class="line">		&#123;</span><br><span class="line">			m=<span class="number">2</span>*n-i-cnt[i+<span class="number">1</span>];</span><br><span class="line">			<span class="built_in">fo</span>(j,m,n) f[i][j]=<span class="built_in">Mul</span>(f[i+<span class="number">1</span>][j],j-m);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,n) f[i][j]=f[i+<span class="number">1</span>][j];</span><br><span class="line">			m=cnt[i+<span class="number">1</span>];</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,m)</span><br><span class="line">				<span class="keyword">if</span>(f[i+<span class="number">1</span>][j])</span><br><span class="line">					<span class="built_in">fo</span>(k,<span class="number">1</span>,n-j)</span><br><span class="line">						f[i][j+k]=<span class="built_in">Add</span>(f[i][j+k],<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(f[i+<span class="number">1</span>][j],<span class="built_in">C</span>(m-j,k<span class="number">-1</span>)),<span class="built_in">Mul</span>(k+<span class="number">1</span>,g[k<span class="number">-1</span>][k<span class="number">-1</span>])));</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[<span class="built_in">read</span>()]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">2</span>*n,<span class="number">0</span>) cnt[i]=cnt[i+<span class="number">1</span>]+p[i];</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">2</span>*n); <span class="built_in">calc_g</span>(n); <span class="built_in">calc_f</span>(n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Mul</span>(f[<span class="number">1</span>][n],<span class="built_in">Pow</span>((mod+<span class="number">1</span>)/<span class="number">2</span>,n)));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>治疗计划[JOISC 2020 Day4]</title>
    <url>/2020/03/27/%E6%B2%BB%E7%96%97%E8%AE%A1%E5%88%92-JOISC-2020-Day4/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3282">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看起来似乎无从下手，那么就考虑一个类似DP的东东吧。</p>
<p>设 $d_i$ 表示 $[1,r_i]$ 中所有人都没有被感染的最小花费。</p>
<p>那么 $d_i$ 能对 $d_j$ 产生贡献当且仅当 $r_i-l_j+1\geq |T_i-T_j|$。</p>
<p>满足条件的 $i,j$ 连一条边，剩下的是一个形如最短路的形式。</p>
<p>因此如果可以优化这个建图，问题就不大了。</p>
<p>绝对值比较恶心，那么先按 $T_i$  从小到大排好序。</p>
<p>然后枚举 $i$，根据限制在线段树上套个set优化连边就好了。</p>
<p>时间复杂度 $O(n\log^2n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>为什么我比别人慢这么多QwQ</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">4e18</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">	<span class="type">int</span> t,l,r,v;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;A,<span class="type">const</span> query &amp;B) &#123;<span class="keyword">return</span> A.t&lt;B.t;&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> u; ll dis;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B) &#123;<span class="keyword">return</span> A.dis&gt;B.dis;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">ll dis[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tnode</span>&#123;</span><br><span class="line">	<span class="type">int</span> i,val;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Tnode &amp;A,<span class="type">const</span> Tnode &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.val!=B.val) <span class="keyword">return</span> A.val&lt;B.val;</span><br><span class="line">		<span class="keyword">return</span> A.i&lt;B.i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SGT</span>&#123;</span><br><span class="line">	set&lt;Tnode&gt; s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[u].<span class="built_in">insert</span>((Tnode)&#123;p,v&#125;);</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		p&lt;=mid?<span class="built_in">add</span>(ls,p,v):<span class="built_in">add</span>(rs,p,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v,<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> w;s[u].<span class="built_in">size</span>()&amp;&amp;(*s[u].<span class="built_in">begin</span>()).val&lt;=v;s[u].<span class="built_in">erase</span>(s[u].<span class="built_in">begin</span>()))</span><br><span class="line">			&#123;</span><br><span class="line">				w=s[u].<span class="built_in">begin</span>()-&gt;i;</span><br><span class="line">				<span class="keyword">if</span>(dis[w]&gt;dis[i]+p[w].v)</span><br><span class="line">				&#123;</span><br><span class="line">					dis[w]=dis[i]+p[w].v;</span><br><span class="line">					q.<span class="built_in">push</span>((node)&#123;w,dis[w]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">ask</span>(ls,L,R,v,i);</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">ask</span>(rs,L,R,v,i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">SGT t[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(p[i].l==<span class="number">1</span>) q.<span class="built_in">push</span>((node)&#123;i,p[i].v&#125;),dis[i]=p[i].v; </span><br><span class="line">		<span class="keyword">else</span> dis[i]=inf;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">top</span>().u; q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[u]=<span class="number">1</span>;</span><br><span class="line">		t[<span class="number">0</span>].<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,u<span class="number">-1</span>,p[u].r-p[u].t+<span class="number">1</span>,u);</span><br><span class="line">		t[<span class="number">1</span>].<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,u+<span class="number">1</span>,n,p[u].r+p[u].t+<span class="number">1</span>,u);</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=inf;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(p[i].r==m) ans=<span class="built_in">min</span>(ans,dis[i]);</span><br><span class="line">	<span class="keyword">if</span>(ans==inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="built_in">read</span>(); n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i].t=<span class="built_in">read</span>(),p[i].l=<span class="built_in">read</span>(),p[i].r=<span class="built_in">read</span>(),p[i].v=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		t[<span class="number">0</span>].<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,p[i].l-p[i].t),</span><br><span class="line">		t[<span class="number">1</span>].<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,i,p[i].l+p[i].t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">dijkstra</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>变色龙之恋[JOISC 2020 Day2]</title>
    <url>/2020/03/26/%E5%8F%98%E8%89%B2%E9%BE%99%E4%B9%8B%E6%81%8B-JOISC-2020-Day2/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3274">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>刚开始觉得似乎无从下手。</p>
<p>那就从最简单的开始搞吧。假设我现在只询问两只变色龙。</p>
<p>那么这个询问的答案只能是 $1$ 或者 $2$。</p>
<p>当且仅当 $x,y$ 颜色相同，或只有某个喜欢另一个时答案为 $1$。也就是说， 若 $x$ 和其他点都询问一次，答案为 $1$ 则向这个点连一条边，则 $x$ 只会连出去 $1$ 或 $3$ 条边。</p>
<p>当只连出去 $1$ 条边的时候，这条边所对应的点就是原色相同的点啦。</p>
<p>当连出去 $3$ 条边的时候，假设是 $y_1,y_2,y_3$。我们询问 $(x,y_i,y_j)$，那么 $y_i$ 当且仅当喜欢 $x$，$y_j$ 和 $x$ 同颜色的时候答案为 $1$。然后我们可以把这两条边都标记一次。对于每个点都这样做，最后被标记 $2$ 次的边所连接的两个点就是同色的了。</p>
<p>现在得到了一个询问次数 $O(n^2)$ 的做法。</p>
<p>考虑这个算法的瓶颈在于第一部分，即查询每个点 $x$ 与其相连的所有 $y$。</p>
<p>考虑优化这一部分。</p>
<p>这个图是一个二分图，试试用一下这个性质？</p>
<p>假设你已经知道了所有点属于二分图的哪个集合。</p>
<p>考虑对于一个独立集 $A$ 询问的结果，这个答案一定等于 $|A|$。否则这个答案一定不为 $|A|$。</p>
<p>那也就是说明对于一个点 $x$，和一个独立集，可以判断点 $x$ 是否和独立集有边相连了。</p>
<p>那么可以二分处理即可。</p>
<p>但是我们不知道所有点属于二分图的哪个集合哇？也就是说不能直接来，因为不满足询问的点是独立集这个条件。</p>
<p>那么边做边黑白染色就好了。</p>
<p>询问次数 $O(n\log n)$，常数有点小大。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chameleon.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans[N][N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; Q,w[<span class="number">2</span>],v[N];</span><br><span class="line"><span class="type">int</span> now,t;</span><br><span class="line"><span class="type">int</span> fa[N]; <span class="type">bool</span> c[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">col</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?<span class="number">0</span>:c[x]^<span class="built_in">col</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	c[<span class="built_in">find</span>(x)]=<span class="number">1</span>^<span class="built_in">col</span>(x)^<span class="built_in">col</span>(y);</span><br><span class="line">	fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">bool</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v[now].<span class="built_in">size</span>()&gt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!opt)</span><br><span class="line">	&#123;</span><br><span class="line">		Q.<span class="built_in">clear</span>(),Q.<span class="built_in">pb</span>(now); <span class="built_in">fo</span>(k,l,r) Q.<span class="built_in">pb</span>(w[t][k]);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">Query</span>(Q)&gt;r-l+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		v[now].<span class="built_in">pb</span>(w[t][l]);</span><br><span class="line">		v[w[t][l]].<span class="built_in">pb</span>(now);</span><br><span class="line">		<span class="built_in">merge</span>(now,w[t][l]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">rand</span>()&amp;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">dfs</span>(l,mid,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">dfs</span>(mid+<span class="number">1</span>,r,!opt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">dfs</span>(mid+<span class="number">1</span>,r,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">dfs</span>(l,mid,!opt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="number">2</span>*n;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) fa[i]=i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">20030227</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) id[i]=i;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">swap</span>(id[i],id[<span class="built_in">rand</span>()%m+<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">//fo(i,1,m) cerr&lt;&lt;id[i]&lt;&lt;endl;</span></span><br><span class="line">	<span class="built_in">fo</span>(tim,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i=id[tim];</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>) w[k].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,tim<span class="number">-1</span>) w[<span class="built_in">col</span>(id[j])].<span class="built_in">pb</span>(id[j]);</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">1</span>) t=k,now=i,<span class="built_in">dfs</span>(<span class="number">0</span>,w[k].<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(v[i].<span class="built_in">size</span>()==<span class="number">1</span>)</span><br><span class="line">			ans[i][v[i][<span class="number">0</span>]]=ans[v[i][<span class="number">0</span>]][i]=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">				<span class="built_in">fo</span>(k,j+<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</span><br><span class="line">					Q.<span class="built_in">clear</span>(),Q.<span class="built_in">pb</span>(i),Q.<span class="built_in">pb</span>(v[i][j]),Q.<span class="built_in">pb</span>(v[i][k]);</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">Query</span>(Q)==<span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						ans[i][v[i][j]]++,ans[v[i][j]][i]++,</span><br><span class="line">						ans[i][v[i][k]]++,ans[v[i][k]][i]++;</span><br><span class="line">						flag=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">fo</span>(j,i+<span class="number">1</span>,m) <span class="keyword">if</span>(ans[i][j]&gt;=<span class="number">2</span>) <span class="built_in">Answer</span>(i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>交互题</tag>
      </tags>
  </entry>
  <entry>
    <title>首都城市[JOISC 2020 Day4]</title>
    <url>/2020/03/25/%E9%A6%96%E9%83%BD%E5%9F%8E%E5%B8%82-JOISC-2020-Day4/</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>一棵 $n$ 个节点的树，点有 $k$ 种颜色。</p>
<p>现在要求选出最小的颜色集合，使得在颜色集合中的点形成一个连通块。输出该集合的大小。</p>
<p>$n,k\leq 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="做法1"><a href="#做法1" class="headerlink" title="做法1"></a>做法1</h4><p>一个显然的 $O(k^2)$ 做法是将颜色当成点，如果选了某个颜色 $i$ 之后必须选颜色 $j$，则 $i$ 向 $j$ 连一条有向边。</p>
<p>然后跑Tarjan缩点，答案就是缩点后的图中出度为 $0$ 的点的 $size-1$ 的最小值。</p>
<p>对于每种颜色，我们发现，它要连出去的颜色显然是对该颜色的点建虚树后，在虚树中的节点颜色。</p>
<p>然后就可以用树上倍增来优化一下建图。发现你这样建图还是会满足和原图的强联通分量的形状是相同的。这样建完之后再一样的跑Tarjan即可。</p>
<h4 id="做法2"><a href="#做法2" class="headerlink" title="做法2"></a>做法2</h4><p>一个点分治神仙做法，并不太会。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="做法1-1"><a href="#做法1-1" class="headerlink" title="做法1"></a>做法1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">10000010</span>;</span><br><span class="line"><span class="type">int</span> n,k,cnt,col[N];</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> ver[M],ne[M],tot,head[M];</span><br><span class="line">	<span class="type">int</span> dfn[M],low[M],tim,sum[M];</span><br><span class="line">	<span class="type">int</span> st[M],top,bel[M],scc_cnt;</span><br><span class="line">	<span class="type">bool</span> in[M],bo[M];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dfn[u]=low[u]=++tim;</span><br><span class="line">		in[u]=<span class="number">1</span>; st[++top]=u;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=ver[i];</span><br><span class="line">			<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">dfs</span>(v,u);</span><br><span class="line">				low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(in[v]) low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(low[u]==dfn[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v;</span><br><span class="line">			++scc_cnt;</span><br><span class="line">			<span class="keyword">do</span></span><br><span class="line">			&#123;</span><br><span class="line">				v=st[top--]; in[v]=<span class="number">0</span>;</span><br><span class="line">				bel[v]=scc_cnt;</span><br><span class="line">			&#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(u,<span class="number">1</span>,cnt)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(bel[u]!=bel[ver[i]])</span><br><span class="line">					bo[bel[u]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k) sum[bel[i]]++;</span><br><span class="line">		<span class="type">int</span> ans=k;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,scc_cnt) <span class="keyword">if</span>(!bo[i]) ans=<span class="built_in">min</span>(ans,sum[i]<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">tarjan</span>();</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> tim,dfn[N],dep[N];</span><br><span class="line">	<span class="type">int</span> f[N][<span class="number">19</span>],id[N][<span class="number">19</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dep[u]=dep[pre]+<span class="number">1</span>; dfn[u]=++tim;</span><br><span class="line">		f[u][<span class="number">0</span>]=pre;</span><br><span class="line">		id[u][<span class="number">0</span>]=++cnt;</span><br><span class="line">		Graph::<span class="built_in">add</span>(id[u][<span class="number">0</span>],col[u]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];i++)</span><br><span class="line">		&#123;</span><br><span class="line">			id[u][i]=++cnt;</span><br><span class="line">			Graph::<span class="built_in">add</span>(id[u][i],id[u][i<span class="number">-1</span>]);</span><br><span class="line">			Graph::<span class="built_in">add</span>(id[u][i],id[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>) <span class="keyword">if</span>(dep[f[y][i]]&gt;=dep[x]) y=f[y][i];</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>) <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">		<span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Gadd</span><span class="params">(<span class="type">int</span> col,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> z=<span class="built_in">lca</span>(x,y);</span><br><span class="line">		Graph::<span class="built_in">add</span>(col,id[z][<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">fd</span>(i,<span class="number">18</span>,<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(f[x][i]&amp;&amp;dep[f[x][i]]&gt;=dep[z])</span><br><span class="line">			&#123;</span><br><span class="line">				Graph::<span class="built_in">add</span>(col,id[x][i]);</span><br><span class="line">				x=f[x][i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(f[y][i]&amp;&amp;dep[f[y][i]]&gt;dep[z])</span><br><span class="line">			&#123;</span><br><span class="line">				Graph::<span class="built_in">add</span>(col,id[y][i]);</span><br><span class="line">				<span class="comment">//DEBUG(i);</span></span><br><span class="line">				y=f[y][i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sort</span>(<span class="built_in">all</span>(v[i]),[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">			<span class="comment">//DEBUG(v[i].size());</span></span><br><span class="line">			<span class="keyword">if</span>(!v[i].<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">			v[i].<span class="built_in">pb</span>(v[i][<span class="number">0</span>]);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,v[i].<span class="built_in">size</span>()<span class="number">-2</span>) <span class="built_in">Gadd</span>(i,v[i][j],v[i][j+<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); cnt=k;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) Tree::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) Tree::v[col[i]=<span class="built_in">read</span>()].<span class="built_in">pb</span>(i);</span><br><span class="line">	Tree::<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	Tree::<span class="built_in">solve</span>();</span><br><span class="line">	Graph::<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>倍增</tag>
        <tag>点分治</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 84[CF1327]</title>
    <url>/2020/03/24/Educational-Codeforces-Round-84-CF1327/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>小学数学题。</p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>并不会证明？</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>移到角落然后一起移上去就可以了。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>每个段分开来考虑就好了。</p>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>小数数学题。</p>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>考虑每一位的贡献，最后乘起来就好了。</p>
<p>现在题目变成 $m$ 个限制，每个限制形如 $[l,r]$ 不全为 $1$ 或者必须全为 $1$。</p>
<p>那么设 $f_i$ 表示考虑到第 $i$ 位，且该位选 $0$ 的方案数。若该位必须选 $1$，则 $f_i=0$。</p>
<p>然后two-pointer维护合法区间即可。</p>
<p>时间复杂度 $O(k(n+m))$。</p>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>为什么会有这么sb的题。。。</p>
<p>AC自动机上状压DP即可。太智障了，懒得写了。</p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>状压DP</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>星座3[JOISC 2020 Day3]</title>
    <url>/2020/03/23/%E6%98%9F%E5%BA%A73-JOISC-2020-Day3/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3277">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个 $n\times n$ 的坐标系，每个横坐标上从小往上有一些高楼，高度为 $a_i$。有 $m$ 个星星，给出坐标及价值。现在删掉一些星星使得不存在一个平行于坐标轴的长方形，满足该长方形内有两个以上的星星，且没有高楼出现。求出最少的价值和。</p>
<p>$n,m\leq 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>补集转换，变成求出最大的价值和，使得不存在一个长方形。</p>
<p>考虑最高的那个高楼的 $a_i$，然后你会发现如果存在星星的纵坐标高于 $a_i$，那么最多只能有一个。</p>
<p>否则就会分成左右两边互不干扰的两部分。</p>
<p>这样就可以建出笛卡尔树，然后就可以在上面进行DP了。</p>
<p>设 $f_{u,i}$ 表示节点 $u$ 的子树内，保留第 $i$ 个星星的最大值。$g_u$ 表示节点 $u$ 的子树中，不保留纵坐标大于 $a_u$ 的最大值。</p>
<p>然后 $f_{u}$ 用线段树合并即可转移。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="type">int</span> ls[K],rs[K],rt[N],cnt;</span><br><span class="line">	ll t[K];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,ll d)</span></span>&#123;<span class="keyword">if</span>(u) t[u]+=d;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u||!t[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushtag</span>(ls[u],t[u]);</span><br><span class="line">		<span class="built_in">pushtag</span>(rs[u],t[u]);</span><br><span class="line">		t[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[u];</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">return</span> p&lt;=mid?<span class="built_in">ask</span>(ls[u],l,mid,p):<span class="built_in">ask</span>(rs[u],mid+<span class="number">1</span>,r,p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="built_in">pushdown</span>(x); <span class="built_in">pushdown</span>(y);</span><br><span class="line">		ls[x]=<span class="built_in">merge</span>(ls[x],ls[y]);</span><br><span class="line">		rs[x]=<span class="built_in">merge</span>(rs[x],rs[y]);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) u=++cnt;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(t[u]=<span class="built_in">max</span>(t[u],d));</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		p&lt;=mid?<span class="built_in">add</span>(ls[u],l,mid,p,d):<span class="built_in">add</span>(rs[u],mid+<span class="number">1</span>,r,p,d);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="type">int</span> f[N][M],fa[N][M],a[N],ne[N][<span class="number">2</span>],Lg[N];</span><br><span class="line">ll g[N];</span><br><span class="line">vector&lt;pii&gt; s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="keyword">return</span> a[x]&gt;a[y]?x:y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> k=Lg[r-l+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">cmp</span>(f[l][k],f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> u=<span class="built_in">getmax</span>(l,r);</span><br><span class="line">	ne[u][<span class="number">0</span>]=<span class="built_in">build</span>(l,u<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(ne[u][<span class="number">0</span>]) fa[ne[u][<span class="number">0</span>]][<span class="number">0</span>]=u;</span><br><span class="line">	ne[u][<span class="number">1</span>]=<span class="built_in">build</span>(u+<span class="number">1</span>,r);</span><br><span class="line">	<span class="keyword">if</span>(ne[u][<span class="number">1</span>]) fa[ne[u][<span class="number">1</span>]][<span class="number">0</span>]=u;</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">getf</span>(ne[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">dfs</span>(ne[u][i]);</span><br><span class="line">	g[u]=g[ne[u][<span class="number">0</span>]]+g[ne[u][<span class="number">1</span>]];</span><br><span class="line">	<span class="built_in">pushtag</span>(rt[ne[u][<span class="number">0</span>]],g[ne[u][<span class="number">1</span>]]);</span><br><span class="line">	<span class="built_in">pushtag</span>(rt[ne[u][<span class="number">1</span>]],g[ne[u][<span class="number">0</span>]]);</span><br><span class="line">	rt[u]=<span class="built_in">merge</span>(rt[ne[u][<span class="number">0</span>]],rt[ne[u][<span class="number">1</span>]]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:s[u]) <span class="built_in">add</span>(rt[u],<span class="number">1</span>,q,v.fi,g[u]+v.se);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:p[u]) g[u]=<span class="built_in">max</span>(g[u],<span class="built_in">ask</span>(rt[u],<span class="number">1</span>,q,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) Lg[i]=Lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">	m=Lg[n];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),f[i][<span class="number">0</span>]=i;</span><br><span class="line">	<span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>)</span><br><span class="line">			f[i][j]=<span class="built_in">cmp</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> rt=<span class="built_in">build</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">getf</span>(rt);</span><br><span class="line">	<span class="type">int</span> z,x,y,v;</span><br><span class="line">	q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		z=x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">		s[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(i,v));</span><br><span class="line">		<span class="built_in">fd</span>(j,m,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">if</span>(fa[z][j]&amp;&amp;y&gt;a[fa[z][j]])</span><br><span class="line">				z=fa[z][j];</span><br><span class="line">		p[z].<span class="built_in">pb</span>(i);</span><br><span class="line">		ans+=v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(rt);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans-g[rt]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>倍增</tag>
        <tag>启发式合并</tag>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforce Global Round 7[CF1326]</title>
    <url>/2020/03/23/Codeforce-Global-Round-7-CF1326/</url>
    <content><![CDATA[<p>Codeforce Global Round 7总结。</p>
<span id="more"></span>

<h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h3><p>23333…</p>
<h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h3><p>直接递推即可。</p>
<h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一个长度为 $n$ 的排列 $a_n$。要求将这个序列分成互不相交的 $k$ 段。记第 $p$ 段的左端点和右端点分别为 $l_p,r_p$。要求最大化 $\sum_{i=1}^k\max_{j=l_i}^{r_i}\{a_j\}$。</p>
<p>输出<strong>最大化的值</strong>和<strong>可以最大化该值的方案数</strong>。方案数对 $998244353$ 取模。</p>
<p>$n\leq 2\times 10^5$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>最大化的值显然是 $\sum_{i=n-k+1}^ni$。</p>
<p>也就是说，每一段中肯定包含且仅包含一个这 $k$ 个点中的其中一个。</p>
<p>然后乘法原理。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>在一个字符串中，选一个前缀和后缀，满足其拼接起来是回文串，输出一个长度不超过 $n$ 的最长的回文串。</p>
<p>$|S|\leq 10^5$。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>枚举前后缀当中的最小值，满足前缀的反串等于后缀。这时候变成查询以某个串结尾的最长的不超过某个值的回文串长度。PAM上倍增跳fail链即可。</p>
<h3 id="Problem-E"><a href="#Problem-E" class="headerlink" title="Problem E"></a>Problem E</h3><h3 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h3><a href="/2020/03/23/Wise-Men-CF1326F/" title="链接">链接</a>]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Wise Men[CF1326F]</title>
    <url>/2020/03/23/Wise-Men-CF1326F/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.ml/contest/1326/problem/F1">F1</a></p>
<p><a href="https://codeforces.ml/contest/1326/problem/F2">F2</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个人，告诉你这 $n$ 个人互相之间是否认识，然后将这 $n$ 个人排成一列，记为 $p_i$，设 $b_i=[p_{i}\ know \ p_{i+1}]$，对于 $b$ 的 $2^{n-1}$ 种情况，求有多少个排列对应这种情况。</p>
<p>$n\leq 2^{18}$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这毒瘤数数题谁想得到啊。。</p>
<p>不过这种一般都能想到是容斥。难道真的是要比谁想象力丰富吗qwq</p>
<p>那就容斥吧。设 $f_s$ 表示当 $s$ 的第 $i$ 位为 $1$ 时，$i$ 和 $i+1$ 必须认识，当 $s$ 的第 $i$ 位为 $0$ 时，$i$ 和 $i+1$ 不必须认识。</p>
<p>那么最终的答案就是这个 $f$ 的超集和反演/高维差分。</p>
<p>这样子容斥的好处是，每一段 $1$ 之间的计算就不会受影响了。因为 $0$ 的条件变成了可以随便选。因此我们考虑每一个连续的段分开计算，最后再合并在一起。</p>
<p>而连续的 $k$ 个 $1$ 代表的是 $k+1$ 个点，这些点相邻之间认识，所形成的一条链。</p>
<p>而这些连续段代表的节点个数加起来是 $n$。这显然是一个整数划分的形式，当 $n=18$ 时为 $P_{18}=385$。</p>
<p>也就是说我们实际上只需要考虑 $385$ 种情况即可。</p>
<p>设 $g_s$ 表示对于集合 $s$ 中的点，有多少种排列使得相邻之间认识，这个可以用状压DP算出。</p>
<p>那么对于整数划分 $\sum_{i=1}^kx_i=n$ 而言，答案为 $\sum <em>{|S_i|=x_i}[|\bigcup S_i|=n]\prod</em>{i=1}^k g_{S_i}$。</p>
<p>这就很像WC2018的州区划分了。</p>
<p>设新的 $g_{i,s}=g_s\times [|s|=i]$，去掉其中一个限制。那么答案就是若干个 $g_{x_i}$ 做或卷积后对应位置相乘，然后再逆变换回来后的第 $2^n-1$ 位。</p>
<p>显然 $g_i$ 可以预先FWT好。</p>
<p>可以发现，最后的IFWT只需要求的是其中一位。用子集反演稍微理解一下/死记硬背/找规律可以发现：</p>
<p>$IFWT_A[n]=\sum A_i\times (-1)^{|n\ xor\ i|}$</p>
<p>那么对于一个整数划分 $\sum_{i=1}^kx_i=n$，就可以在 $O((k+1)2^n)$ 的时间内求出答案。</p>
<p>状压DP和预处理 $FWT_{g_i}$ 的时间都是 $O(n^22^n)$ 的。</p>
<p>设 $n$ 的整数划分的个数总和为 $S_n$，则时间复杂度为 $O((S_n+n^2)2^n)$。</p>
<p>当 $n=18$ 时打表可得 $S_{18}=1596$。CF时限4s，不慌不慌。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=(<span class="number">1</span>&lt;&lt;<span class="number">19</span>)+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,cnt,cnt2;</span><br><span class="line"><span class="type">bool</span> bo[N][N];</span><br><span class="line">ll dp[M][N]; <span class="type">int</span> num[M];</span><br><span class="line">ll f[N][M],g[N][M],ans[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fwt</span><span class="params">(ll *a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				a[i+j+k]+=a[j+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt<span class="number">-1</span>) num[i]=num[i-<span class="built_in">lowbit</span>(i)]+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) dp[<span class="number">1</span>&lt;&lt;i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;i)</span><br><span class="line">				<span class="built_in">fo</span>(k,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">					<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;k)&amp;i)</span><br><span class="line">						<span class="keyword">if</span>(k!=j&amp;&amp;bo[k][j])</span><br><span class="line">							dp[i][j]+=dp[i^(<span class="number">1</span>&lt;&lt;j)][k];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt<span class="number">-1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;i) g[num[i]][i]+=dp[i][j];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fwt</span>(g[i],cnt+<span class="number">1</span>);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; <span class="built_in">fwt</span>(f[<span class="number">0</span>],cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> b[N],a[N],tot;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;tot)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> s=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,tot)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,b[i]<span class="number">-2</span>) s|=(<span class="number">1</span>&lt;&lt;now),now++;</span><br><span class="line">			now++;</span><br><span class="line">		&#125;</span><br><span class="line">		v.<span class="built_in">pb</span>(s);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,tot)</span><br><span class="line">		<span class="keyword">if</span>(!used[i])</span><br><span class="line">			<span class="keyword">if</span>(!(i&amp;&amp;a[i]==a[i<span class="number">-1</span>]&amp;&amp;!used[i<span class="number">-1</span>]))</span><br><span class="line">			&#123;</span><br><span class="line">				used[i]=<span class="number">1</span>;</span><br><span class="line">				b[k]=a[i];</span><br><span class="line">				<span class="built_in">find</span>(k+<span class="number">1</span>);</span><br><span class="line">				b[k]=<span class="number">0</span>;</span><br><span class="line">				used[i]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot=m;</span><br><span class="line">	v.<span class="built_in">clear</span>(); <span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt<span class="number">-1</span>) sum+=f[m][i]*(((n-num[i])&amp;<span class="number">1</span>)?(<span class="number">-1</span>):<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:v) ans[u]=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> res,<span class="type">int</span> top,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!res)<span class="keyword">return</span> <span class="built_in">solve</span>(top<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,m,res)</span><br><span class="line">	&#123;</span><br><span class="line">		Sum++;</span><br><span class="line">		a[top]=i;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,cnt<span class="number">-1</span>) f[top][j]=f[top<span class="number">-1</span>][j]*g[i][j];</span><br><span class="line">		<span class="built_in">dfs</span>(res-i,top+<span class="number">1</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	a[top]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); cnt=(<span class="number">1</span>&lt;&lt;n); cnt2=<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>);</span><br><span class="line">	<span class="type">char</span> ss[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//scanf(&quot;%s&quot;,ss);</span></span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,n<span class="number">-1</span>) bo[i][j]=ss[j]==<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">dfs</span>(n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">DEBUG</span>(Sum);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-2</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,cnt2<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>(!(j&gt;&gt;i&amp;<span class="number">1</span>))</span><br><span class="line">				ans[j]-=ans[j^(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt2<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>状压DP</tag>
        <tag>FWT</tag>
        <tag>高维前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的 Joitter 交友[JOISC 2020 Day2]</title>
    <url>/2020/03/22/%E6%9C%89%E8%B6%A3%E7%9A%84-Joitter-%E4%BA%A4%E5%8F%8B-JOISC-2020-Day2/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3275">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$n$ 个点的有向图，$m$ 次加边。对于每次加边后，求图经过尽可能多的转换后，图的边数。</p>
<p>一次转换为：选择三个不同的点 $x,y,z$，使得 $(x,y),(y,z),(z,y)$ 在当前的图中存在，那么在当前的图中，如果没有 $(x,z)$ 这一条边，则新加一条。</p>
<p>$n\leq 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>JOI的题好毒瘤啊。。。不过看起来也不是很难？</p>
<p>考虑一个连通块，在这里两个点相连当且仅当他们之间两个方向的路径都存在。那么这个连通块中的点在转换后都会互相连了。因此一个块中，块内的点的贡献就是 $Size\times (Size-1)$。</p>
<p>可以发现，如果两个块之间存在方向不同的两条边，那么就会合成一个块。</p>
<p>因此下面只需要考虑只单条路径的贡献，以及如何合并两个连通块。</p>
<p>思考一下发现，如果存在一条 $(x,y)$ 的路径，那么贡献就是 $Size_y$。有很多条连向 $y$ 的路径，$Size_y$ 就会被算多次。设集合 $v_y$ 表示有多少个点跟连通块 $y$ 中的点相连，那么贡献就是 $Size_y\times |v_y|$。</p>
<p>下面考虑合并两个连通块，假设这两个连通块是 $x,y$，且 $y$ 合并到 $x$ 中。</p>
<p>可以发现，合并之后：</p>
<p>1，$x,y$ 之间的边不能留，先删掉再说。</p>
<p>2，连接 $y$ 的点，会变成连 $x$，这时需要枚举连接 $y$ 的点。</p>
<p>3，连接 $y$ 的连通块，会变成连 $x$，这时需要枚举连接 $y$ 的连通块。</p>
<p>4，若存在另一个连通块 $u$，使得 $(u,x),(y,u)$ 或者 $(u,y),(x,u)$ 之间有连边，那么合并以后，$x+y$ 的连通块就会和 $u$ 之间有两个方向的边，而这样这两个连通块也会合并。因此还需记多一个 $y$ 连出去的连通块集合，然后递归处理。</p>
<p>综上，对于每个连通块 $x$，我们需要记录：$x$ 内的集合，连向 $x$ 的点的集合，连向 $x$ 的连通块集合，被 $x$ 连向的连通块集合。</p>
<p>合并的话启发式合并即可。</p>
<p>集合不需要比较大小，因此可用哈希表，直接上 unordered_set 就好了。</p>
<p>时间复杂度 $O(n\log n)$，假设 $n,m$ 同阶。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> fa[N],siz[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; v[N],g[N],t[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1ll</span>*siz[x]*(siz[x]<span class="number">-1</span>+v[x].<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ans-=<span class="built_in">calc</span>(x)+<span class="built_in">calc</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(siz[x]+v[x].<span class="built_in">size</span>()&lt;siz[y]+v[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:t[y]) <span class="keyword">if</span>(t[u].<span class="built_in">count</span>(x)) q.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:g[y]) <span class="keyword">if</span>(g[u].<span class="built_in">count</span>(x)) q.<span class="built_in">pb</span>(u);</span><br><span class="line"></span><br><span class="line">	g[x].<span class="built_in">erase</span>(y); g[y].<span class="built_in">erase</span>(x);</span><br><span class="line">	t[x].<span class="built_in">erase</span>(y); t[y].<span class="built_in">erase</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:t[y]) t[x].<span class="built_in">insert</span>(u),g[u].<span class="built_in">erase</span>(y),g[u].<span class="built_in">insert</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:g[y]) g[x].<span class="built_in">insert</span>(u),t[u].<span class="built_in">erase</span>(y),t[u].<span class="built_in">insert</span>(x);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:v[y]) <span class="keyword">if</span>(<span class="built_in">find</span>(u)!=x) v[x].<span class="built_in">insert</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:s[y]) <span class="keyword">if</span>(v[x].<span class="built_in">count</span>(u)) v[x].<span class="built_in">erase</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:s[y]) s[x].<span class="built_in">insert</span>(u);</span><br><span class="line"></span><br><span class="line">	siz[x]+=siz[y];</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	ans+=<span class="built_in">calc</span>(x);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> u:q) <span class="keyword">if</span>(<span class="built_in">find</span>(u)!=<span class="built_in">find</span>(x)) <span class="built_in">merge</span>(<span class="built_in">find</span>(u),<span class="built_in">find</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(fx==fy) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(!v[fy].<span class="built_in">count</span>(x)) v[fy].<span class="built_in">insert</span>(x),ans+=siz[fy];<span class="comment">//v</span></span><br><span class="line">	<span class="keyword">if</span>(t[fx].<span class="built_in">count</span>(fy)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!t[fy].<span class="built_in">count</span>(fx)) t[fx].<span class="built_in">insert</span>(fy),g[fy].<span class="built_in">insert</span>(fx);<span class="comment">//t,g</span></span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">merge</span>(fx,fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fa[i]=i,siz[i]=<span class="number">1</span>,s[i].<span class="built_in">insert</span>(i);</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">update</span>(x,y);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>哈希</tag>
        <tag>并查集</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>淳平的形态形成场[牛客挑战赛33F]</title>
    <url>/2020/03/20/%E6%B7%B3%E5%B9%B3%E7%9A%84%E5%BD%A2%E6%80%81%E5%BD%A2%E6%88%90%E5%9C%BA-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B33F/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/1115/F">链接</a></p>
<span id="more"></span>

<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>$n$ 个点带点权的简单无向图，定义这张图的权值：一个连通块的权值为这个连通块里的点的点权的最大值，而这张图的权值为这张图所有连通块的权值的最小值。</p>
<p>求对于图所有的连边情况的权值之和。 模 $998244353$。</p>
<p>$n\leq 5\times 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>好毒瘤啊。。。这种多项式题还是需要多做才行。 </p>
<p>为了方便，将权值排序。然后假设第 $i$ 个权值就是 $i$。设 $h_n=2^{\binom{n}{2}}$ 表示 $n$ 个点的无向图个数。</p>
<p>设 $g_i$ 表示图的权值为 $i$ 的时候的答案。然后你会发现这样非常不好算。</p>
<p>考虑改一下状态，设 $g_i$ 表示权值大于 $i$ 时的答案。</p>
<p>也就是说，没有一个连通块的权值小于等于 $i$。</p>
<p>那么再容斥一下，假设一个图中出现了 $k$ 个连通块，且它们的权值都小于等于 $i$。显然这张图的贡献是 $(-1)^k$。然后设 $f_i$ 表示 $\sum_{|V|=i}(-1)^{|V|_k}$，也就是统计节点个数为 $i$ 的，有 $k$ 个连通块，则贡献是 $(-1)^k$ 的情况。</p>
<p>那么 $g_i=\sum_{j=0}^i\binom{i}{j}f_jh_{n-j}$</p>
<p>转移一下得：$\frac{g_i}{i!}=\sum_{j=0}^{i}\frac{1}{(i-j)!}\frac{f_jh_{n-j}}{j!}$。</p>
<p>那么求出了 $f_i$ 之后，就只剩一个fft了。</p>
<p>这个 $f_i$ 跟无向连通图的求法似乎差不多呢。设 $t_n$ 为 $n$ 个点无向连通图的个数。</p>
<p>那么根据生成函数那套理论，会有 $\sum_{i=0}\frac{t^i}{i!}=h,\sum_{i=0}\frac{(-1)^it^i}{i!}=f$</p>
<p>也就是：$e^t=h,e^{-t}=f$，即：$h\times f=1$。</p>
<p>多项式求逆即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353ll</span>;</span><br><span class="line"><span class="type">const</span> ll G=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">int</span> R[N];</span><br><span class="line">ll A[N],B[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre_ntt</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m,L;</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">1</span>,L=<span class="number">0</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>) L++;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>) R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line">	<span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> len,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++) <span class="keyword">if</span>(i&gt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn=<span class="built_in">Pow</span>(G,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">-1</span>) wn=<span class="built_in">Pow</span>(wn,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ll w=<span class="number">1</span>,x,y;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++,w=w*wn%mod)</span><br><span class="line">                x=a[j+k],y=a[i+j+k]*w%mod,</span><br><span class="line">                a[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    ll invn=<span class="built_in">Pow</span>(len,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++) a[i]=a[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Pmul</span><span class="params">(ll *c,ll *a,ll *b,<span class="type">int</span> na,<span class="type">int</span> nb,<span class="type">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="built_in">pre_ntt</span>(na+nb);</span><br><span class="line">	k=na+nb;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,na) A[i]=a[i]; <span class="built_in">fo</span>(i,na+<span class="number">1</span>,len) A[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,nb) B[i]=b[i]; <span class="built_in">fo</span>(i,nb+<span class="number">1</span>,len) B[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,k) c[i]=A[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pinv</span><span class="params">(ll *a,ll *b,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> (<span class="type">void</span>)(b[<span class="number">0</span>]=<span class="built_in">Pow</span>(a[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">	<span class="built_in">Pinv</span>(a,b,(n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> len=<span class="built_in">pre_ntt</span>(n&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) A[i]=a[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>) B[i]=b[i];</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) B[i]=(<span class="number">2ll</span>-A[i]*B[i]%mod+mod)%mod*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(B,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) b[i]=B[i];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll fac[N],inv[N],a[N],b[N],c[N],g[N],h[N],ans;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) a[i]=<span class="built_in">Pow</span>(<span class="number">2</span>,<span class="number">1ll</span>*i*(i<span class="number">-1</span>)/<span class="number">2</span>)*inv[i]%mod;</span><br><span class="line">	<span class="built_in">Pinv</span>(a,h,<span class="number">1</span>+n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) b[i]=h[i]*a[n-i]%mod*fac[n-i]%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) c[i]=inv[i];</span><br><span class="line">	<span class="built_in">Pmul</span>(g,b,c,n,n,m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) g[i]=g[i]*fac[i]%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(p[i],g[i<span class="number">-1</span>]-g[i]+mod));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>Cow at Large[USACO 2018 January Platinum]</title>
    <url>/2020/03/18/Cow-at-Large-USACO-2018-January-Platinum/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2386">loj</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>假设先固定根节点。如果根节点是一个叶节点，显然答案为 $1$。因此下面考虑的是根节点的度数不为 $1$ 的情况。</p>
<p>显然根节点的最优策略为一直往某个叶子结点走。</p>
<p>假设某个叶节点上有农民，就说明，这条路径一定不能经过这个叶节点到根路径的中点。</p>
<p>那么就会有一个贪心的策略，每次选一个离根节点最近的叶子结点，然后在中点处做个标记，且这个中点的子树中所有的叶节点都不能选了。最后的答案就是标记点的个数。</p>
<p>这样我们就得到了一个 $O(n^2)$ 做法。</p>
<p>下面来看看那些到根的路径中有标记点的点满足什么性质。记 $f_i$ 表示离点 $i$ 最近的叶节点，那么当且仅当 $f_i\leq dep_i$ 时，点 $i$ 在某个标记点的子树中。</p>
<p>但是我们统计的是标记点的个数啊。考虑是否可以转换成跟标记点子树中的点有关的东西。</p>
<p>可以发现，这些标记点不会存在祖先关系。也就是说，一棵子树的贡献是 $1$。</p>
<p>但是怎么在不知道这个树是什么样的情况下，给节点定点权，使得所有点的权值加起来为 $1$ 呢？</p>
<p>考虑度数 $d_i$，当一棵树有 $x$ 个点的时候，$\sum d_i=2x-2$，这个树的根节点会多统计一条，也就是说，子树中是：$\sum d_i=2x-1$，即：$\sum(2-d_i)=1$。</p>
<p>这个做法也太清奇了。。。</p>
<p>那么现在就变成，每个点的点权 $a_i$ 为 $2-d_i$，对于每个节点 $x$，计算 $\sum_{f_y\leq dis_{x,y}}a_i$ 的和。</p>
<p>剩下的就很简单了。点分治，然后做个前缀和，对于每个子树点的贡献减去即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">70005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> d[N],ans[N],f[N];</span><br><span class="line"><span class="type">int</span> siz[N],mx[N],dep[N],rt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	d[x]++; d[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; mx[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;!vis[ver[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">getroot</span>(v,u,s);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			mx[u]=<span class="built_in">max</span>(mx[u],siz[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[u],s-siz[u]);</span><br><span class="line">	<span class="keyword">if</span>(mx[rt]&gt;mx[u]) rt=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum[N],st[N],top;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;!vis[ver[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,top) sum[<span class="built_in">min</span>(<span class="built_in">max</span>(<span class="number">0</span>,f[st[i]]-dep[st[i]]),s+<span class="number">1</span>)]+=d[st[i]];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,s) sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,top) ans[st[i]]+=opt*sum[dep[st[i]]];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,s+<span class="number">1</span>) sum[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	top=<span class="number">0</span>; dep[u]=<span class="number">0</span>; <span class="built_in">dfs</span>(u,<span class="number">0</span>); <span class="built_in">calc</span>(s,<span class="number">1</span>);</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v,Siz;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v=ver[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			Siz=siz[v]&gt;siz[u]?s-siz[u]:siz[v];</span><br><span class="line">			top=<span class="number">0</span>; dep[v]=<span class="number">1</span>; <span class="built_in">dfs</span>(v,u); <span class="built_in">calc</span>(Siz,<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v,Siz;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v=ver[i]])</span><br><span class="line">		&#123;</span><br><span class="line">			Siz=siz[v]&gt;siz[u]?s-siz[u]:siz[v];</span><br><span class="line">			rt=<span class="number">0</span>; <span class="built_in">getroot</span>(v,<span class="number">0</span>,Siz); <span class="built_in">divide</span>(rt,Siz);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(d[i]==<span class="number">1</span>) q.<span class="built_in">push</span>(i),f[i]=<span class="number">0</span>,vis[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(!vis[v=ver[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				f[v]=f[u]+<span class="number">1</span>;</span><br><span class="line">				vis[v]=<span class="number">1</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); mx[<span class="number">0</span>]=inf;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">bfs</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[i]=<span class="number">2</span>-d[i];</span><br><span class="line">	rt=<span class="number">0</span>; <span class="built_in">getroot</span>(<span class="number">1</span>,<span class="number">0</span>,n); <span class="built_in">divide</span>(rt,n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(d[i]==<span class="number">1</span>) ans[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>USACO</category>
        <category>loj</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>牛牛喜欢看小姐姐[牛客挑战赛37F]</title>
    <url>/2020/03/17/%E7%89%9B%E7%89%9B%E5%96%9C%E6%AC%A2%E7%9C%8B%E5%B0%8F%E5%A7%90%E5%A7%90-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B37F/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/4381/F">牛客</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>毒瘤数学题。</p>
<p>由裴蜀定理，不定方程 $ax+by=c$ 有整数解当且仅当 $\gcd(a,b)|c$。那么当一个小姐姐的步长为 $a_i$，能否走到 $x$ 的充要条件为 $\gcd(a_i,m)|x$。为了方便，下面的 $a_i$ 都变为 $\gcd(a_i,m)$。注意到 $a_i$ 都是 $m$ 的因子。而 $10^{18}$ 以内的因子个数是 $10^5$ 级别的。</p>
<p>考虑到只选 $s$ 个比较难统计。我们容斥一下，变成统计选至少 $s$ 个的答案。那么最后的答案就是至少 $s$ 个减去至少 $s+1$ 个。</p>
<p>那么现在就变成从 $n$ 个 $a_i$ 中选出 $s$ 个不同的数，记为 $b_i$。判断一个 $x$ 是否合法，当且仅当 $lcm(a_{b_1},a_{b_2}\cdots a_{b_s})|x$。我们需要统计出所有的满足条件的 $x$。对于这样一种方案，我们记集合： $A(lcm(a_{b_1},a_{b_2},\cdots,a_{b_s}))=\{lcm(a_{b_1},a_{b_2}\cdots a_{b_s})|x,x\in[1,k]\}$。也就是所有满足条件的集合。</p>
<p>此时答案为：$\left | \bigcup_{b_1,b_2\cdots b_s}A(lcm(a_{b_1},a_{b_2}\cdots a_{b_s})) \right |$</p>
<p>集合的并集比较难处理。试试考虑用最普通的容斥原理，变成处理交集的情况？</p>
<p>一个点 $x$ 同时在一堆 $A(y_i)$ 中当且仅当 $lcm(y_i)|x$。</p>
<p>那么就有：$\left | \bigcap A(x_i) \right |=\left |A(lcm(x_i))  \right |$。因此交集的情况就好处理了。</p>
<p>只需要对于每个 $x$，算出容斥系数 $f_x$，答案就是 $\sum_{x|m}f_x|A_x|=\sum_{x|m}f_x\left \lfloor \frac{k}{x} \right \rfloor$。</p>
<p>这个 $x$ 实际上只有在 $x|m$ 的情况时才有意义，也就是 $10^5$ 级别。</p>
<p>现在的情况是，每次在 $\binom{n}{s}$ 个数中选出 $k$ 个数，这些数的lcm必须等于 $x$，贡献是 $(-1)^{k+1}$。</p>
<p>这个必须等于 $x$ 非常烦，考虑设 $g_x$ 为选出 $k$ 个数，这些数的lcm必须为 $x$ 的因数的答案。</p>
<p>发现这个 $f$ 的高维前缀和就是 $g$，那么算出 $g$ 之后高维差分一下就可以了。</p>
<p>显然，设 $y$ 为这 $\binom{n}{s}$ 个数中，是 $x$ 因数的个数。</p>
<p>那么有 $g_x=\sum_{i=1}^y\binom{y}{i}(-1)^{i+1}=(-1)(\sum_{i=0}^y\binom{y}{i}(-1)^i)+1=[y\not=0]$</p>
<p>考虑这个 $y$ 到底是什么，这 $\binom{n}{s}$ 个数是 $s$ 个数的lcm，这个 $lcm(a_{b_1},a_{b_2}\cdots a_{b_s})$ 要是 $x$ 的因数，也就是 $a_{b_i}$ 都要是 $x$ 的因数。显然当 $\sum_{i=1}^n[a_i|x]\geq s$ 时， $y\not =0$。</p>
<p>而这个 $\sum_{i=1}^n[a_i|x]$ 显然是一个高维前缀和的形式。</p>
<p>那么我们只需要用Pollard-Rho对 $m$ 进行质因数分解，暴力枚举出所有的因数，用哈希或者unordered_map 存起来。然后算高维前缀和以及高维差分就可以了。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,<span class="type">const</span> ll &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(a%=p,b%=p;b;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) &#123;ans+=a; <span class="keyword">if</span>(ans&gt;=p) ans-=p;&#125;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>; a+=a; <span class="keyword">if</span>(a&gt;=p) a-=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll a,ll b,<span class="type">const</span> ll &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=<span class="built_in">mul</span>(a,a,p)) <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,a,p);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> !y?x:<span class="built_in">gcd</span>(y,x%y);&#125;</span><br><span class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>; y=<span class="number">0</span>; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    ll d=<span class="built_in">ex_gcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x; <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll a,ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y,d;</span><br><span class="line">    d=<span class="built_in">ex_gcd</span>(a,m,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+m)%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> MillerRabin&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> prime[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">61</span>,<span class="number">7</span>,<span class="number">41</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">19</span>&#125;;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> t; ll r;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">witness</span><span class="params">(<span class="type">int</span> a,ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll b=<span class="built_in">Pow</span>(a,r,n);</span><br><span class="line">		<span class="keyword">if</span>(b==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++,b=<span class="built_in">mul</span>(b,b,n)) <span class="keyword">if</span>(b==n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isprime</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(n==prime[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		r=n<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(t=<span class="number">0</span>;!(r&amp;<span class="number">1</span>);r&gt;&gt;=<span class="number">1</span>) t++;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) <span class="keyword">if</span>(!<span class="built_in">witness</span>(prime[i],n)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span>(!<span class="built_in">witness</span>(<span class="built_in">rand</span>()%(n<span class="number">-1</span>)+<span class="number">1</span>,n)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> MillerRabin::isprime;</span><br><span class="line">ll p[<span class="number">70</span>]; <span class="type">int</span> w[<span class="number">70</span>]; <span class="type">int</span> pn;</span><br><span class="line"><span class="keyword">namespace</span> PollardRho&#123;</span><br><span class="line">    <span class="function">ll <span class="title">rho</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        ll c=<span class="built_in">rand</span>()%(n<span class="number">-2</span>)+<span class="number">2</span>,x=<span class="built_in">rand</span>()%n,y=x,d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,k=<span class="number">2</span>;i++;)</span><br><span class="line">        &#123;</span><br><span class="line">            x=(<span class="built_in">mul</span>(x,x,n)+c)%n;</span><br><span class="line">            d=<span class="built_in">gcd</span>(<span class="built_in">abs</span>(y-x),n);</span><br><span class="line">            <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=n) <span class="keyword">return</span> d;</span><br><span class="line">            <span class="keyword">if</span>(y==x) <span class="keyword">return</span> n;</span><br><span class="line">            <span class="keyword">if</span>(i==k) y=x,k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isprime</span>(n)) <span class="keyword">return</span> (<span class="type">void</span>)(p[++pn]=n);</span><br><span class="line">        ll d=n; <span class="keyword">for</span>(;d==n;) d=<span class="built_in">rho</span>(n);</span><br><span class="line">        <span class="built_in">find</span>(d); <span class="built_in">find</span>(n/d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PollardRho::find;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">unordered_map&lt;ll,<span class="type">int</span>&gt; ma;</span><br><span class="line"></span><br><span class="line">ll d[N]; <span class="type">int</span> dn;</span><br><span class="line">ll n,m,k,s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k,ll now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;pn) &#123;d[++dn]=now; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,w[k]) <span class="built_in">dfs</span>(k+<span class="number">1</span>,now),now*=p[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(m);</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+pn+<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j;i&lt;=pn;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i;j&lt;pn&amp;&amp;p[j+<span class="number">1</span>]==p[i];j++);</span><br><span class="line">		w[++k]=j-i+<span class="number">1</span>; p[k]=p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,k+<span class="number">1</span>,pn) p[i]=<span class="number">0</span>;</span><br><span class="line">	pn=k;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(d+<span class="number">1</span>,d+dn+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,dn) ma[d[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N],h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,dn) x=ma[d[i]],f[x]=(h[x]&gt;=s);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,pn)</span><br><span class="line">		<span class="built_in">fd</span>(j,dn,<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">if</span>(d[j]%p[i]==<span class="number">0</span>)</span><br><span class="line">				f[ma[d[j]]]-=f[ma[d[j]/p[i]]];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,dn) ans+=f[ma[d[i]]]*(k/d[i]);</span><br><span class="line">	<span class="keyword">return</span> ans+(n&gt;=s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc_h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) h[ma[<span class="built_in">gcd</span>(<span class="built_in">read</span>(),m)]]++;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,pn)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,dn)</span><br><span class="line">			<span class="keyword">if</span>(d[j]%p[i]==<span class="number">0</span>)</span><br><span class="line">				h[ma[d[j]]]+=h[ma[d[j]/p[i]]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); s=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">get</span>(m);</span><br><span class="line">	<span class="built_in">calc_h</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>(s)-<span class="built_in">solve</span>(s+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>数论</tag>
        <tag>哈希</tag>
        <tag>高维前缀和</tag>
        <tag>PollardRho</tag>
      </tags>
  </entry>
  <entry>
    <title>独特的城市[JOI 2019 Final]</title>
    <url>/2020/03/17/%E7%8B%AC%E7%89%B9%E7%9A%84%E5%9F%8E%E5%B8%82-JOI-2019-Final/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/3014">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>似乎跟树的直径有点关系。不管了，先画出一条直径。</p>
<p>先考虑比较简单的，假设我们不考虑颜色的限制，只需维护有几个点满足条件。</p>
<p>可以发现，对于一个点 $i$，对该点有所贡献的所有点都会出现在 $i$ 到直径某个端点中的路径中。那么就可以尝试对于这两个端点dfs，那么满足条件的点必然在他到根的路径中。然后拿一个什么东西去维护这些点。</p>
<p>假设当前dfs到点 $u$，准备去dfs点 $v$。那么对于这个 $v$ 而言，$u$ 是有可能有贡献的，把它加到那个集合里。但是这时 $v$ 的兄弟会对 $v$ 的答案产生限制。记 $v$ 的所有兄弟离他们的子树中叶子结点的最大值为 $mx$，那么答案集合中的距离 $v$ 小于等于 $mx$ 的点都变得不合法，并且都 $v$ 的子树的所有点也会不合法。那么就可以把这些点从这个集合删去。</p>
<p>对于一个点统计答案的时候，记 $u$ 的所有儿子离其子树中叶节点的距离最大值为 $x$，那么答案集合中的距离 $u$ 小于等于 $x$ 的点都变得不合法，也同样删去。</p>
<p>这个集合可以用栈来维护。</p>
<p>离子树叶节点的距离最大值用长链剖分即可。</p>
<p>最后来考虑颜色的限制，也就是满足条件的集合中有多少种不同的颜色。</p>
<p>用个桶维护一下不就好了嘛。。。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,s,t,ans[N];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) d[i]=<span class="number">0</span>;</span><br><span class="line">	d[u]=<span class="number">1</span>; q.<span class="built_in">push</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=ver[i];</span><br><span class="line">			<span class="keyword">if</span>(!d[v]) &#123;d[v]=d[u]+<span class="number">1</span>; q.<span class="built_in">push</span>(v);&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	s=u;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(d[i]&gt;d[s]) s=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">bfs</span>(<span class="number">1</span>,s);</span><br><span class="line">	<span class="built_in">bfs</span>(s,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[N],len[N],son[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	len[u]=<span class="number">1</span>; dep[u]=dep[pre]+<span class="number">1</span>; son[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			len[u]=<span class="built_in">max</span>(len[u],len[v]+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(!son[u]||len[son[u]]&lt;len[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[N],top;</span><br><span class="line"><span class="type">int</span> w[N],col[N],now;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st[++top]=x;</span><br><span class="line">	w[col[x]]++;</span><br><span class="line">	<span class="keyword">if</span>(w[col[x]]==<span class="number">1</span>) now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(w[col[st[top]]]==<span class="number">1</span>) now--;</span><br><span class="line">	w[col[st[top]]]--;</span><br><span class="line">	top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!son[u]) &#123;ans[u]=<span class="built_in">max</span>(ans[u],now); <span class="built_in">add</span>(u); <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		<span class="keyword">if</span>(v==son[u]||v==pre) <span class="keyword">continue</span>;</span><br><span class="line">		mx=<span class="built_in">max</span>(mx,len[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(;top&amp;&amp;dep[u]-dep[st[top]]&lt;=mx;) <span class="built_in">del</span>();</span><br><span class="line">	<span class="built_in">add</span>(u);</span><br><span class="line">	<span class="built_in">solve</span>(son[u],u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		<span class="keyword">if</span>(v==son[u]||v==pre) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(;top&amp;&amp;dep[u]-dep[st[top]]&lt;=len[son[u]];) <span class="built_in">del</span>();</span><br><span class="line">		<span class="built_in">add</span>(u);</span><br><span class="line">		<span class="built_in">solve</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(;top&amp;&amp;dep[u]-dep[st[top]]&lt;=len[son[u]];) <span class="built_in">del</span>();</span><br><span class="line">	ans[u]=<span class="built_in">max</span>(ans[u],now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(s,t);</span><br><span class="line">	top=now=<span class="number">0</span>; <span class="built_in">dfs</span>(s,<span class="number">0</span>); <span class="built_in">solve</span>(s,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m) w[i]=<span class="number">0</span>;</span><br><span class="line">	top=now=<span class="number">0</span>; <span class="built_in">dfs</span>(t,<span class="number">0</span>); <span class="built_in">solve</span>(t,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">find</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) col[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>州区划分[WC2018]</title>
    <url>/2020/03/16/%E5%B7%9E%E5%8C%BA%E5%88%92%E5%88%86-WC2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2340">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>懒得写了。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>判断是否有欧拉回路随便做。</p>
<p>然后设 $g_s=\sum_{i\in s}val_i$，$h_s=[无回路]\times \sum_{i\in s}val_i$</p>
<p>那么状压DP，有 $f_s=\frac{1}{g_s}\sum_{t\subseteq s}f_th_{s-t}$</p>
<p>这个自己卷自己看起来有点难搞啊。</p>
<p>可以发现： $t\subseteq s$ 等价于枚举 $i,j$，使得 $i \ or \ j=s,|i|+|j|=|s|$。</p>
<p>那么就可以对于每个 $|i|$，都搞一个FMT或卷积就好了。</p>
<p>时间复杂度 $O(n^22^n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353ll</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> x[N*N],y[N*N];</span><br><span class="line"><span class="type">int</span> fa[N],d[N];</span><br><span class="line">ll w[<span class="number">1</span>&lt;&lt;N],iw[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="type">int</span> n,m,p,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x!=fa[x]?fa[x]=<span class="built_in">find</span>(fa[x]):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(x!=y) fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(d[i]&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> rt=<span class="number">-1</span>,x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s)</span><br><span class="line">		&#123;</span><br><span class="line">			x=<span class="built_in">find</span>(i);</span><br><span class="line">			<span class="keyword">if</span>(rt==<span class="number">-1</span>) rt=x;</span><br><span class="line">			<span class="keyword">if</span>(rt!=x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll g[N+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;N],f[N+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FWT</span><span class="params">(ll *f,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				(f[i+j+k]+=opt*f[j+k]+mod)%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="built_in">fo</span>(s,<span class="number">1</span>,cnt<span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;s)</span><br><span class="line">			&#123;</span><br><span class="line">				w[s]=w[s^(<span class="number">1</span>&lt;&lt;i)]+w[<span class="number">1</span>&lt;&lt;i];</span><br><span class="line">				sum[s]=sum[s^(<span class="number">1</span>&lt;&lt;i)]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">fo</span>(s,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) fa[i]=i,d[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(((<span class="number">1</span>&lt;&lt;x[i])&amp;s)&amp;&amp;((<span class="number">1</span>&lt;&lt;y[i])&amp;s))</span><br><span class="line">		&#123;</span><br><span class="line">			d[x[i]]++; d[y[i]]++;</span><br><span class="line">			<span class="built_in">merge</span>(x[i],y[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		w[s]=<span class="built_in">Pow</span>(w[s],p); iw[s]=<span class="built_in">Pow</span>(w[s],mod<span class="number">-2</span>);</span><br><span class="line">		f[sum[s]][s]=w[s]*<span class="built_in">check</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); p=<span class="built_in">read</span>(); cnt=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x[i]=<span class="built_in">read</span>()<span class="number">-1</span>,y[i]=<span class="built_in">read</span>()<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) w[<span class="number">1</span>&lt;&lt;i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">FWT</span>(g[<span class="number">0</span>],cnt,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">FWT</span>(f[i],cnt,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(s,<span class="number">0</span>,cnt<span class="number">-1</span>)</span><br><span class="line">				g[i][s]=<span class="built_in">Add</span>(g[i][s],<span class="built_in">Mul</span>(g[j][s],f[i-j][s]));</span><br><span class="line">		<span class="built_in">FWT</span>(g[i],cnt,<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(s,<span class="number">0</span>,cnt<span class="number">-1</span>) g[i][s]=(sum[s]==i?<span class="built_in">Mul</span>(g[i][s],iw[s]):<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(i!=n) <span class="built_in">FWT</span>(g[i],cnt,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,g[n][cnt<span class="number">-1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>NOIWC</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
        <tag>FWT</tag>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title>通道[WC2018]</title>
    <url>/2020/03/13/%E9%80%9A%E9%81%93-WC2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2339">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>三棵树，求 $d_1(i,j)+d_2(i,j)+d_3(i,j)$ 的最大值。其中 $d$ 表示距离。</p>
<p>$n\leq 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>似乎有乱搞做法。。不管了。</p>
<h4 id="一棵树"><a href="#一棵树" class="headerlink" title="一棵树"></a>一棵树</h4><p>是个OIer都会。</p>
<h4 id="两棵树"><a href="#两棵树" class="headerlink" title="两棵树"></a>两棵树</h4><p>$d(i,j)$ 可以表示为 $dis_i+dis_j-2\times dis_{lca(i,j)}$，其中 $dis_i$ 表示点 $i$ 到根节点的距离。</p>
<p>考虑枚举 $T_1$ 中的 $lca$，那么 $i,j$ 需要从以 $lca$ 为根的子树中选出来，且不能是同一棵子树，或者有一个是 $lca$。</p>
<p>类似于树形DP，考虑每次将一个子树添加进去，然后维护答案。</p>
<p>这时答案为：$dis_i+dis_j+d_2(i,j)-2\times dis_{lca}$。后面是个常数，我们只需要维护前面的最大值。</p>
<p>考虑树的直径的一个重要性质，若记集合中任意两个最远的点为 $u,v$，那么对于两个集合 $A,B$，$A\bigcup B$ 的 $u,v$ 一定出自于 $A_u,A_v,B_u,B_v$ 中的任意两个。证明的话可以先证明连通的情况，不连通情况的建个虚树。</p>
<p>那么如果没有 $dis_i$ 和 $dis_j$，$d_2(i,j)$ 的最大值用个结构体维护一下就好了。</p>
<p>可以看做在 $T_2$ 中，新建一个点 $i’$，由 $i$ 和 $i’$ 连一条权值为 $dis_i$ 的边，这样就变成树的直径了。因此加上 $dis_i+dis_j$ 也是正确的。</p>
<p>时间复杂度 $O(n)$。</p>
<p><strong>以我的水平就只能想到这里了。</strong></p>
<h4 id="三棵树"><a href="#三棵树" class="headerlink" title="三棵树"></a>三棵树</h4><p>对 $T_3$ 考虑分治。</p>
<p>然而点分治合并两个子树信息的时候不一定搞得了。</p>
<p>然后就考虑边分治。。。</p>
<p>枚举一条边 $i$，将树拆成两部分，然后黑白染色。黑白两部分间的贡献递归去算。</p>
<p>那么题目转换成黑白两集合各选一个点 $x,y$，那么这棵树的贡献就是 $d_1x+d_1y-val_i$。</p>
<p>看看 $T_1,T_2$ 能不能沿用前面的方法。</p>
<p>但是现在多了一个 $d1$，还有黑白的颜色，以及能不能选上这个点的限制条件。</p>
<p>考虑设 $w_x=d_1x+d_2x$，那么 $T_2$ 中的贡献则变为 $w_x+w_y-2\times d_2lca$。</p>
<p>而黑白集合还是可以一样的维护。即用 $f_{u,0/1}$ 表示两个集合的直径。</p>
<p>但是一次dp是 $O(n)$ 的。</p>
<p>那么建个虚树就好了。</p>
<p>还有一个问题，边分治在菊花图的时候会死得很惨。</p>
<p>此时需要用到多叉树转二叉树，并且不能改变距离的限制，因此不能用左二子右兄弟法。</p>
<p>对于每个度数大于2（除父亲节点）的节点 $i$，添加两个点 $l,r$，连边 $(i,l/r,0)$，然后将子节点分成一半连向 $l,r$，然后再处理 $l,r$ 即可。</p>
<p>这样复杂度就能有保证了。</p>
<p>因此我们需要：</p>
<ul>
<li>将 $T_1$ 转成二叉树，然后边分治。</li>
<li>在 $T_2$ 中建虚树，然后枚举虚树中的点作为 $lca$ ，然后将子树信息 $O(1)$ 合并。建虚树求LCA需要用 $O(n\log n)-O(1)$ 的ST表做法。</li>
<li>在 $T_3$ 中用 $O(n\log n)-O(1)$ 的ST表做法快速求LCA即可。</li>
</ul>
<p>若用 $O(n)$ 时间建虚树，时间复杂度 $O(n\log n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>写了我一个上午…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">600010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">2e9</span>;</span><br><span class="line"><span class="type">const</span> ll Inf=<span class="number">4e18</span>;</span><br><span class="line"><span class="type">int</span> lg[N];</span><br><span class="line"><span class="keyword">namespace</span> T3&#123;</span><br><span class="line">	<span class="type">int</span> ne[N],head[N],ver[N],tot=<span class="number">1</span>,dep[N];</span><br><span class="line">	ll val[N],dis[N];</span><br><span class="line">	<span class="type">int</span> cnt,fir[N],f[M][N/<span class="number">3</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(ll z,<span class="type">int</span> y,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dep[u]=dep[pre]+<span class="number">1</span>; f[<span class="number">0</span>][++cnt]=u; fir[u]=cnt;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+val[i];</span><br><span class="line">				<span class="built_in">dfs</span>(v,u);</span><br><span class="line">				f[<span class="number">0</span>][++cnt]=u;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,M<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">				f[j][i]=<span class="built_in">cmp</span>(f[j<span class="number">-1</span>][i],f[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x=fir[x]; y=fir[y];</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="type">int</span> k=lg[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">cmp</span>(f[k][x],f[k][y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">d</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> -Inf; <span class="keyword">return</span> dis[x]+dis[y]-(dis[<span class="built_in">lca</span>(x,y)]&lt;&lt;<span class="number">1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top[<span class="number">2</span>],s[<span class="number">2</span>][N];</span><br><span class="line">ll w[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">namespace</span> T2&#123;</span><br><span class="line">	ll ans;</span><br><span class="line">	<span class="type">int</span> ne[N],head[N],ver[N],tot=<span class="number">1</span>,dep[N];</span><br><span class="line">	<span class="type">int</span> dfn[N],tim,low[N];</span><br><span class="line">	ll val[N],dis[N];</span><br><span class="line">	<span class="type">int</span> cnt,fir[N],f[M][N/<span class="number">3</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(ll z,<span class="type">int</span> y,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">void</span> _add(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span><br><span class="line">	&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dep[u]=dep[pre]+<span class="number">1</span>; f[<span class="number">0</span>][++cnt]=u; fir[u]=cnt;</span><br><span class="line">		dfn[u]=++tim;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+val[i];</span><br><span class="line">				<span class="built_in">dfs</span>(v,u);</span><br><span class="line">				f[<span class="number">0</span>][++cnt]=u;</span><br><span class="line">			&#125;</span><br><span class="line">		low[u]=tim;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,M<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">				f[j][i]=<span class="built_in">cmp</span>(f[j<span class="number">-1</span>][i],f[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">		<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">		tot=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x=fir[x]; y=fir[y];</span><br><span class="line">		<span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="type">int</span> k=lg[y-x+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">cmp</span>(f[k][x],f[k][y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> b[N],m,opt[N],st[N];</span><br><span class="line">	ll va[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		ll dis;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!A.u) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!B.u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> A.dis&lt;B.dis;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> node <span class="title">make_node</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (node)&#123;<span class="built_in">min</span>(u,v),<span class="built_in">max</span>(u,v),d&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> node <span class="title">make_node</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (node)&#123;<span class="built_in">min</span>(u,v),<span class="built_in">max</span>(u,v),T3::<span class="built_in">d</span>(u,v)+va[u]+va[v]&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> node <span class="title">merge</span><span class="params">(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		node ans=<span class="built_in">max</span>(A,B);</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">make_node</span>(A.u,B.u),<span class="built_in">make_node</span>(A.u,B.v)),<span class="built_in">max</span>(<span class="built_in">make_node</span>(A.v,B.u),<span class="built_in">make_node</span>(A.v,B.v))));</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">diameter</span><span class="params">(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!A.u&amp;&amp;!A.v) <span class="keyword">return</span> -Inf; <span class="keyword">if</span>(!B.u&amp;&amp;!B.v) <span class="keyword">return</span> -Inf;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">make_node</span>(A.u,B.u),<span class="built_in">make_node</span>(A.u,B.v)),<span class="built_in">max</span>(<span class="built_in">make_node</span>(A.v,B.u),<span class="built_in">make_node</span>(A.v,B.v))).dis;</span><br><span class="line">	&#125;</span><br><span class="line">	node dp[N][<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		dp[u][<span class="number">0</span>]=dp[u][<span class="number">1</span>]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(vis[u]) dp[u][opt[u]]=(node)&#123;u,u,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		&#123;</span><br><span class="line">			v=ver[i];</span><br><span class="line">			<span class="built_in">dfs</span>(v);</span><br><span class="line">			ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">diameter</span>(dp[u][<span class="number">0</span>],dp[v][<span class="number">1</span>]),<span class="built_in">diameter</span>(dp[u][<span class="number">1</span>],dp[v][<span class="number">0</span>]))-dis[u]*<span class="number">2</span>);</span><br><span class="line">			dp[u][<span class="number">0</span>]=<span class="built_in">merge</span>(dp[u][<span class="number">0</span>],dp[v][<span class="number">0</span>]);</span><br><span class="line">			dp[u][<span class="number">1</span>]=<span class="built_in">merge</span>(dp[u][<span class="number">1</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build_tree</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(i,<span class="number">1</span>,top[j]) b[++m]=s[j][i];</span><br><span class="line">		<span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) vis[b[i]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(i,<span class="number">1</span>,top[j]) opt[s[j][i]]=j;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(i,<span class="number">1</span>,top[j]) va[s[j][i]]=w[j][i]+dis[s[j][i]];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>) b[++m]=<span class="built_in">lca</span>(b[i],b[i+<span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> dfn[x]&lt;dfn[y];&#125;);</span><br><span class="line">		m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) head[b[i]]=<span class="number">0</span>; tot=<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(;top&amp;&amp;low[st[top]]&lt;dfn[b[i]];--top);</span><br><span class="line">			<span class="keyword">if</span>(top) _add(st[top],b[i],dis[b[i]]-dis[st[top]]);</span><br><span class="line">			st[++top]=b[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) va[b[i]]=opt[b[i]]=vis[b[i]]=head[b[i]]=<span class="number">0</span>;</span><br><span class="line">		m=<span class="number">0</span>; tot=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">build_tree</span>();</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(b[<span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">namespace</span> T1&#123;</span><br><span class="line">	<span class="type">int</span> pre_n;</span><br><span class="line">	<span class="type">int</span> ne[N],head[N],ver[N],tot=<span class="number">1</span>;</span><br><span class="line">	ll val[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=z; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; son[N]; ll value[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">dfs</span>(v,u);</span><br><span class="line">				son[u].<span class="built_in">pb</span>(v); value[v]=val[i];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) head[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> N=n,w[<span class="number">2</span>],d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">			<span class="keyword">if</span>(son[i].<span class="built_in">size</span>()&lt;=<span class="number">2</span>) <span class="keyword">for</span>(<span class="keyword">auto</span> v:son[i]) <span class="built_in">add</span>(i,v,value[v]);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				w[<span class="number">0</span>]=++N; w[<span class="number">1</span>]=++N;</span><br><span class="line">				<span class="built_in">add</span>(i,w[<span class="number">0</span>],<span class="number">0</span>); <span class="built_in">add</span>(i,w[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> v:son[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d=<span class="number">1</span>-d; son[w[d]].<span class="built_in">pb</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		n=N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> siz[N],minn,edge;</span><br><span class="line">	ll dis[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v,tmp;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;!vis[i&gt;&gt;<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">getroot</span>(v,u,s);</span><br><span class="line">				siz[u]+=siz[v];</span><br><span class="line">				tmp=<span class="built_in">max</span>(siz[v],s-siz[v]);</span><br><span class="line">				<span class="keyword">if</span>(tmp&lt;minn) minn=tmp,edge=i;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> now;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">getdis</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u&lt;=pre_n)</span><br><span class="line">		&#123;</span><br><span class="line">			++top[now];</span><br><span class="line">			s[now][top[now]]=u;</span><br><span class="line">			w[now][top[now]]=dis[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(!vis[i&gt;&gt;<span class="number">1</span>]&amp;&amp;(v=ver[i])!=pre)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+val[i];</span><br><span class="line">				<span class="built_in">getdis</span>(v,u);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		minn=inf; <span class="built_in">getroot</span>(u,<span class="number">0</span>,s);</span><br><span class="line">		<span class="keyword">if</span>(minn&gt;=inf) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> j=edge,s1=siz[ver[j]],s2=s-s1;</span><br><span class="line">		vis[j&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>; top[<span class="number">0</span>]=top[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		dis[ver[j]]=dis[ver[j^<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">		now=<span class="number">0</span>; <span class="built_in">getdis</span>(ver[j],<span class="number">0</span>);</span><br><span class="line">		now=<span class="number">1</span>; <span class="built_in">getdis</span>(ver[j^<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">		ll tmp=val[j]+T2::<span class="built_in">solve</span>();</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,tmp);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">fo</span>(i,<span class="number">1</span>,top[j]) w[j][i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">divide</span>(ver[j],s1); <span class="built_in">divide</span>(ver[j^<span class="number">1</span>],s2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		pre_n=n;</span><br><span class="line">		<span class="built_in">rebuild</span>();</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">divide</span>(<span class="number">1</span>,n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n&lt;&lt;<span class="number">1</span>) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> x,y; ll z;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>(),T1::<span class="built_in">add</span>(x,y,z);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) T2::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) T3::<span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	T3::<span class="built_in">pre</span>(); T2::<span class="built_in">pre</span>(); T1::<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
        <category>NOIWC</category>
      </categories>
      <tags>
        <tag>虚树</tag>
        <tag>边分治</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>Border 的四种求法[BJWC2018]</title>
    <url>/2020/03/13/Border-%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%B1%82%E6%B3%95-BJWC2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/P4482">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求 $S[l,r]$ 的border。$n,m\leq 2\times 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>码农题。。</p>
<h4 id="重要的性质"><a href="#重要的性质" class="headerlink" title="重要的性质"></a>重要的性质</h4><ul>
<li>题目允许离线。</li>
<li>判断一个子串 $S[l,i]$ 是否是 $S[l,r]$ 的border的方法为：$i-l+1\leq lcp(i,r)$ 且 $i\in[l,r)$</li>
</ul>
<h4 id="分析做法"><a href="#分析做法" class="headerlink" title="分析做法"></a>分析做法</h4><p>$lcp(i,r)$ 显然是SAM的fail树中 $i,r$ 的LCA的 $len$ 值。</p>
<p>假设我们枚举LCA，那么判断条件就变为 $i-l+1\leq len_{lca}$ ， $l\leq i &lt; r$，也就是 $l\leq i \leq \min\{len_{lca}+l-1,r-1\}$。除此之外还要满足 $i$ 在 $lca$ 的子树内。</p>
<p>我们需要在 $lca$ 的子树中找到一个 $i$，使得满足上述条件且值最大。那么在fail树上用线段树合right集合，然后在线段树上二分就好了。</p>
<p>但是枚举 $lca$ 的复杂度是 $O(n)$ 的。</p>
<p>考虑树链剖分，然后进行链分治。</p>
<p>考虑在 $r$ 处一直向根跳，跳到的点就是需要进行枚举LCA的点。</p>
<p>显然他跳过最多 $\log n$ 条轻链。</p>
<p>对于每条重链而言，这个 $r$ 所经过的点的是一个前缀。</p>
<p>假设你现在只有一条重链，一个询问。那么分两类讨论：对于这个询问所在的点 $r$ 而言，能贡献给他的 $i$ 都满足在他的子树内，因此用上面所说的线段树合并去处理即可；对于这条重链中，在这个点 $r$ 上面的每个点 $j$，考虑哪些 $i$ 是能对这个 $j$ 有贡献的。显然只有 $j$ 本身，或者是他轻儿子的子树中的所有点。</p>
<p>假设你现在只有一条重链，很多个询问。那么就可以把询问离线，对于重链从上往下做：</p>
<p>考虑第二种情况怎么算。考虑最暴力的方法，将 $j$ 的所有轻儿子的子树的所有点赋予某个权值，然后加进去某个数据结构里，然后询问的时候在这个数据结构里搞搞。实际上这个暴力是没有问题的，因为一个点往上最多有 $\log n$ 条轻链，也就是最多会被加进数据结构里 $\log n$ 次。</p>
<p>再看看这个数据结构能是什么。这个点实际上有两个权值，一个是 $i+len_j-1$，另一个是 $i$。满足 $i-len_j+1\leq l$，且 $l\leq i \leq r-1$，需要找最大的 $i$。</p>
<p><del>那么用树套树随便搞一下就好了。</del>有这种想法的怕不是数据结构学傻了（</p>
<p>用 $i$ 做下标，$i-len_j+1$ 做权值，开个线段树，询问的时候在线段树上记录一个区间最小值，在不超过 $\log n$ 个线段树的节点中用线段树上二分就可以了。</p>
<p>所以我们需要：SAM+树链剖分+线段树+线段树合并<del>就可以了</del>。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>也就4k嘛。接下来那篇更长。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">7.5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">2e9</span>;</span><br><span class="line"><span class="type">int</span> ans[N&gt;&gt;<span class="number">1</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> S1&#123;</span><br><span class="line">	<span class="type">int</span> ls[M],rs[M],mx[M],cnt;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		u=++cnt;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(mx[u]=p);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		p&lt;=mid?<span class="built_in">ins</span>(ls[u],l,mid,p):<span class="built_in">ins</span>(rs[u],mid+<span class="number">1</span>,r,p);</span><br><span class="line">		mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="type">int</span> u=++cnt;</span><br><span class="line">		ls[u]=<span class="built_in">merge</span>(ls[x],ls[y]);</span><br><span class="line">		rs[u]=<span class="built_in">merge</span>(rs[x],rs[y]);</span><br><span class="line">		mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u||L&gt;R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> mx[u];</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R&amp;&amp;rs[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=<span class="built_in">query</span>(rs[u],mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">			<span class="keyword">return</span> tmp?tmp:<span class="built_in">query</span>(ls[u],l,mid,L,R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> L&lt;=mid?<span class="built_in">query</span>(ls[u],l,mid,L,R):<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> S2&#123;</span><br><span class="line">	<span class="type">int</span> mi[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n&lt;&lt;<span class="number">2</span>) mi[i]=inf;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&lt;l||p&gt;r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(l==r) &#123;mi[u]=v; <span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		p&lt;=mid?<span class="built_in">add</span>(ls,p,v):<span class="built_in">add</span>(rs,p,v);</span><br><span class="line">		mi[u]=<span class="built_in">min</span>(mi[lc],mi[rc]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		mi[u]=inf;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		p&lt;=mid?<span class="built_in">del</span>(ls,p):<span class="built_in">del</span>(rs,p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(mi[u]&gt;L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> mi[u]&lt;=L?l:<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R&amp;&amp;mi[rc]&lt;=L)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=<span class="built_in">query</span>(rs,L,R);</span><br><span class="line">			<span class="keyword">return</span> tmp?tmp:<span class="built_in">query</span>(ls,L,R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> L&lt;=mid?<span class="built_in">query</span>(ls,L,R):<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> lc</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> rc</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> ls</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> rs</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> l,r,id;</span><br><span class="line">	&#125;;</span><br><span class="line">	vector&lt;node&gt; q[N];</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	<span class="type">int</span> siz[N],top[N],son[N],fa[N],val[N],rt[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(p[u]) S1::<span class="built_in">ins</span>(rt[u],<span class="number">1</span>,n,p[u]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[v]=u;</span><br><span class="line">			<span class="built_in">dfs</span>(v);</span><br><span class="line">			rt[u]=S1::<span class="built_in">merge</span>(rt[u],rt[v]);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[son[u]]&lt;=siz[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> tp)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		top[u]=tp; <span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u],tp);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=son[u]) <span class="built_in">dfs</span>(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x;x=fa[top[x]]) q[x].<span class="built_in">pb</span>((node)&#123;l,r,id&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[u]) S2::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[u],p[u]-len+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">ins</span>(v,len);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[u]) S2::<span class="built_in">del</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[u]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="built_in">del</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">		<span class="type">int</span> l,r,id,tmp;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v=u;v;v=son[v]) vec.<span class="built_in">pb</span>(v);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(p[v]) S2::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[v],p[v]-val[v]+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> w:adj[v]) <span class="keyword">if</span>(son[v]!=w) <span class="built_in">ins</span>(w,val[v]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> qu:q[v])</span><br><span class="line">			&#123;</span><br><span class="line">				l=qu.l,r=qu.r,id=qu.id;</span><br><span class="line">				tmp=S1::<span class="built_in">query</span>(rt[v],<span class="number">1</span>,n,l,<span class="built_in">min</span>(l+val[v]<span class="number">-1</span>,r<span class="number">-1</span>));</span><br><span class="line">				<span class="keyword">if</span>(l&lt;=tmp&amp;&amp;tmp&lt;r) ans[id]=<span class="built_in">max</span>(ans[id],tmp-l+<span class="number">1</span>);</span><br><span class="line">				tmp=S2::<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">if</span>(l&lt;=tmp&amp;&amp;tmp&lt;r) ans[id]=<span class="built_in">max</span>(ans[id],tmp-l+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(p[v]) S2::<span class="built_in">del</span>(<span class="number">1</span>,<span class="number">1</span>,n,p[v]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> w:adj[v]) <span class="keyword">if</span>(son[v]!=w) <span class="built_in">del</span>(w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:vec) <span class="keyword">for</span>(<span class="keyword">auto</span> w:adj[v]) <span class="keyword">if</span>(son[v]!=w) <span class="built_in">solve</span>(w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],len[N],fa[N],siz,las;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz=las=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> p=las,cur=++siz;</span><br><span class="line">		len[cur]=len[p]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> clone=++siz;</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">				fa[clone]=fa[q];</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">				fa[q]=fa[cur]=clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur; ::p[las]=id;</span><br><span class="line">		<span class="keyword">return</span> las;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,siz) Tree::<span class="built_in">add</span>(fa[i],i);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz) Tree::val[i]=len[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> m,pos[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	SAM::<span class="built_in">init</span>();</span><br><span class="line">	n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pos[i]=SAM::<span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>,i);</span><br><span class="line">	SAM::<span class="built_in">build_tree</span>();</span><br><span class="line">	Tree::<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	Tree::<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	S2::<span class="built_in">init</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">		Tree::<span class="built_in">jump</span>(pos[r],l,r,i);</span><br><span class="line">	&#125;</span><br><span class="line">	Tree::<span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(); <span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>SAM</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>String Set Queries[CF710F]</title>
    <url>/2020/03/11/String-Set-Queries-CF710F/</url>
    <content><![CDATA[<p>fflush(stdout) 搞了我好久。。。</p>
<span id="more"></span>

<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/710/problem/F">链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>维护一个字符串集合，支持：</p>
<ul>
<li><p>插入一个字符串</p>
</li>
<li><p>删除一个原有的字符串</p>
</li>
<li><p>询问一个字符串，问字符串集合中的元素在该字符串中出现次数之和。</p>
</li>
</ul>
<p>强制在线。</p>
<p>$\sum |S|\leq 3\times 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个trick真的太妙了…</p>
<p>首先删除是假的，因为满足可减性，把删掉的字符串形成的集合的贡献删掉就可以了。</p>
<p>这个东东显然可以用AC自动机/SAM维护。</p>
<p>但是不支持强制在线啊。。。</p>
<p><del>那么你就可以写一个广义SAM+LCT就好了</del></p>
<p>trick：对字符串进行二进制分组。</p>
<p>也就是说，我们维护 $\log |S|$ 个AC自动机，第 $i$ 个自动机中存 $2^i$ 个字符串。</p>
<p>每次插入时维护一个自动机。</p>
<p>枚举第 $i$ 个自动机，看是否为空，若为空，则插入，然后getfail。</p>
<p>否则将当前自动机和第 $i$ 个自动机合并。合并AC自动机跟合并Trie类似。</p>
<p>每个字符串都只会改变 $\log |S|$ 个位置。</p>
<p>因此时间复杂度 $O(|S|\log |S|)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">19</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AC_Auto</span>&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],fail[N],cnt,val[N],rt[M]; <span class="type">bool</span> bo[N];</span><br><span class="line">	<span class="built_in">AC_Auto</span>() &#123;cnt=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		bo[x]|=bo[y];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!ne[y][i]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(!ne[x][i]) ne[x][i]=ne[y][i];</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">dfs</span>(ne[x][i],ne[y][i]); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		q.<span class="built_in">push</span>(x); fail[x]=val[x]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u,p,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)</span><br><span class="line">				<span class="keyword">if</span>(v=ne[u][i])</span><br><span class="line">				&#123;</span><br><span class="line">					q.<span class="built_in">push</span>(v); p=fail[u];</span><br><span class="line">					<span class="keyword">for</span>(;p&amp;&amp;!ne[p][i];p=fail[p]);</span><br><span class="line">					fail[v]=p?ne[p][i]:x;</span><br><span class="line">					val[v]=val[fail[v]]+bo[v];</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),u=++cnt,p=u;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			ne[u][s[i]-<span class="string">&#x27;a&#x27;</span>]=++cnt;</span><br><span class="line">			u=ne[u][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		bo[u]=<span class="number">1</span>; u=p;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,M<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>(!rt[i])&#123;rt[i]=u; <span class="built_in">getfail</span>(rt[i]); <span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="built_in">dfs</span>(u,rt[i]); rt[i]=<span class="number">0</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),c,u;</span><br><span class="line">		ll ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,M<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>(rt[j])</span><br><span class="line">			&#123;</span><br><span class="line">				u=rt[j];</span><br><span class="line">				<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">				&#123;</span><br><span class="line">					c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">					<span class="keyword">if</span>(ne[u][c]) u=ne[u][c];</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">for</span>(;u&amp;&amp;!ne[u][c];u=fail[u]);</span><br><span class="line">						u=u?ne[u][c]:rt[j];</span><br><span class="line">					&#125;</span><br><span class="line">					ans+=val[u];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;A,B;</span><br><span class="line"><span class="type">char</span> t[<span class="number">300010</span>]; <span class="type">int</span> opt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>) A.<span class="built_in">ins</span>(t);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) B.<span class="built_in">ins</span>(t);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,A.<span class="built_in">ask</span>(t)-B.<span class="built_in">ask</span>(t));</span><br><span class="line">		<span class="built_in">fflush</span>(stdout);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>二进制分组</tag>
      </tags>
  </entry>
  <entry>
    <title>密涅瓦的谜题[牛客挑战赛31E]</title>
    <url>/2020/03/11/%E5%AF%86%E6%B6%85%E7%93%A6%E7%9A%84%E8%B0%9C%E9%A2%98-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B31E/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/880/E">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个长度为 $n$ 的串，$q$ 次询问，给定一个 $m$：每次在 $n$ 的所有子串中（包括空串）选出一个，然后按顺序拼接起来形成一个大字符串。一共进行 $m$ 次，求形成了多少个不同的大字符串。对 $10^9+7$ 取模。</p>
<p>$n,q\leq 10^5,m\leq 10^{10}$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>为了不重复计数，对于一个字符串，我们要让它匹配到尽量远。也就是说，若有 $T=s_1s_2\cdots s_m$，那么对于某个 $s_is_{i+1}$ 这个片段来说，我们要让 $s_i$ 伸展的尽量远。</p>
<p>那么接下来就可以DP了。设字符集为 $\sigma$。</p>
<p>用 $f_{i,j}$ 表示考虑到第 $i$ 个串时，最后的字母为 $j$ 的方案数是多少。为了方便，当 $j=\sigma$ 时表示最后的字母为空的答案。</p>
<p>得出DP方程：$f_{i,j}=\sum f_{i-1,k}\times A_{k,j}$，其中 $A_{k,j}$ 为从字母 $k$ 转移到字母 $j$ 有多少种情况。</p>
<p>初始状态为 $f_{0,\sigma}=1$，答案为 $\sum f_{n,i}$。</p>
<p>这个 $A_{k,j}$ 可以在SAM上用 $O(n\sigma)$ 的时间用一个简单的DP算出来。</p>
<p>那么就得到了一个 $O(nm\sigma)$ 的做法。</p>
<p>这个转移显然是个矩阵乘法的形式。可以用快速幂做到 $O(n\sigma+m\sigma^3)$。仍然过不了。</p>
<p>复杂度瓶颈主要出现在询问上，考虑优化这部分。</p>
<p>显然答案可以表示为：</p>
<p>$Ans=\begin{bmatrix}0 &amp; \cdots &amp; 0 &amp; 1\end{bmatrix}\times A^n\times \begin{bmatrix}1\\ 1\\ \vdots\\ 1\end{bmatrix}$</p>
<p>分块，预处理出当 $n=0,1,2\cdots\sqrt m$ 时前半部分的答案，以及当 $n=0,\sqrt m,2\sqrt m\cdots$ 时后半部分的答案。</p>
<p>那么对于一个询问 $k$，设 $k=x\sqrt m+y$，就可以用这两部分在 $O(\sigma)$ 的时间内合并了。</p>
<p>时间复杂度 $O(n\sigma+\sqrt m\sigma^2+q\sigma)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7ll</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span>&#123;y%=(mod<span class="number">-1</span>);ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	ll a[S+<span class="number">1</span>][S+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">matrix</span>() &#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">	ll *<span class="keyword">operator</span> [](<span class="type">int</span> x)&#123;<span class="keyword">return</span> a[x];&#125;</span><br><span class="line">&#125;A,B;</span><br><span class="line">matrix <span class="keyword">operator</span> *(matrix A,matrix B)</span><br><span class="line">&#123;</span><br><span class="line">	matrix C;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,S) <span class="built_in">fo</span>(j,<span class="number">0</span>,S) <span class="built_in">fo</span>(k,<span class="number">0</span>,S) C[i][j]=<span class="built_in">Add</span>(C[i][j],<span class="number">1ll</span>*A[i][k]*B[k][j]%mod);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">Pow</span><span class="params">(matrix A,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	matrix C;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,S) C[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,A=A*A) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) C=C*A;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> las=<span class="number">1</span>,siz=<span class="number">1</span>,len[N],ne[N][S],fa[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=siz;i++) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),fa[i]=len[i]=<span class="number">0</span>;</span><br><span class="line">		las=siz=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> cur=++siz;</span><br><span class="line">		len[cur]=len[las]+<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> p=las;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> clone=++siz;</span><br><span class="line">				len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				fa[clone]=fa[q];</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">				fa[cur]=fa[q]=clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> base[N],a[N],f[N][S+<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz) ++base[len[i]];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz) base[i]+=base[i<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,siz) a[base[len[i]]--]=i;</span><br><span class="line">		<span class="type">int</span> u;</span><br><span class="line">		<span class="built_in">fd</span>(i,siz,<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			u=a[i]; f[u][S]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,S<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">if</span>(ne[u][j])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">fo</span>(k,<span class="number">0</span>,S) f[u][k]=<span class="built_in">Add</span>(f[u][k],f[ne[u][j]][k]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> f[u][j]=<span class="built_in">Add</span>(f[u][j],<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S<span class="number">-1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,S) A[j][i]=ne[<span class="number">1</span>][i]?f[ne[<span class="number">1</span>][i]][j]:<span class="number">0</span>;</span><br><span class="line">		A[S][S]=<span class="number">1</span>; B=<span class="built_in">Pow</span>(A,M);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</span><br><span class="line">ll p[M+<span class="number">1</span>][S+<span class="number">1</span>],s[M+<span class="number">1</span>][S+<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n; <span class="type">char</span> t[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">	SAM::<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) SAM::<span class="built_in">extend</span>(t[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	<span class="built_in">dp</span>(n);</span><br><span class="line">	</span><br><span class="line">	p[<span class="number">0</span>][S]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,M<span class="number">-1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,S) <span class="built_in">fo</span>(k,<span class="number">0</span>,S) p[i][k]=<span class="built_in">Add</span>(p[i][k],p[i<span class="number">-1</span>][j]*A[j][k]%mod);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,S) s[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,M) <span class="built_in">fo</span>(j,<span class="number">0</span>,S) <span class="built_in">fo</span>(k,<span class="number">0</span>,S) s[i][j]=<span class="built_in">Add</span>(s[i][j],s[i<span class="number">-1</span>][k]*B[j][k]%mod);</span><br><span class="line">	<span class="type">int</span> x,y; ll ans,k;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		k=<span class="built_in">read</span>(); x=k/M; y=k%M; ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,S) ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(p[y][i],s[x][i]));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>SAM</tag>
        <tag>矩阵乘法</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 83[CF1312]</title>
    <url>/2020/03/10/Educational-Codeforces-Round-83-CF1312/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1312">链接</a></p>
<span id="more"></span>

<p>这场比赛问题简单，但还是暴露的很多问题的。</p>
<p>G和E都花了太长时间了。证明自己的思维还是太慢。</p>
<h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h3><p>求正 $n$ 边形中选出 $m$ 个顶点是否能组成正 $m$ 边形。</p>
<p>显然：$m|n$。</p>
<h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h3><p>构造一种方案，将数组重排后，使得不存在 $i-a_i = j-a_j$ 的情况。</p>
<p>显然从大到小输出即可。</p>
<p>求方案数？</p>
<h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h3><p>一个数组，可以选择一个 $m$，然后对于每个 $i\in[1,m]$，将数组的某个位置减去 $k^i$。问是否存在一个 $m$，使得数组全为 $0$？</p>
<p>从大到小暴力即可。</p>
<h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h3><p>太长了，懒得写了。</p>
<p>先特判 $n=2$ 的情况。</p>
<p>枚举最大的那个的值以及位置，再枚举左右相等的那个点谁，然后组合数化简一下即可。</p>
<h3 id="Problem-E"><a href="#Problem-E" class="headerlink" title="Problem E"></a>Problem E</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>一个数列 $a$，每次可以将两个相邻且相等的数合成一个，权值加 $1$。</p>
<p>问数列 $a$ 最短能变成多少。</p>
<p>$n\leq 500$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>区间DP，看区间 $[i,j]$ 能否合成一个数 $k$，然后再一次 DP/bfs 就可以了。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h3 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h3><p>留坑。。。</p>
<h3 id="Problem-G"><a href="#Problem-G" class="headerlink" title="Problem G"></a>Problem G</h3><p>为什么最后这道题这么简单啊。。。</p>
<h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>太长了，不写了。</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>设在 $S$ 中的点为关键点。</p>
<p>显然考虑按dfs进行DP，设 $f_i$ 表示到 $i$ 这个节点的最短时间， $d_i$ 为深度，$s_i$ 为到考虑到当前的dfs序为止时，$i$ 的子树中的有多少个关键点。</p>
<p>若点 $i$ 不是关键点，有：$f_i=\min\{f_j+d_i-d_j\}$，其中 $j$ 为 $i$ 祖先。</p>
<p>若点 $i$ 是关键点，就会多一种转移： $f_i=\min\{f_j+s_j\}$，其中 $j$ 为 $i$ 祖先。</p>
<p>第二种转移需要支持区间 $+1$。即遇到一个关键点的时候需要令 $s_j$ 加上 $1$。</p>
<p>因此只需要实现一个单点覆盖和区间加，查询区间最大值的数据结构即可。</p>
<p>线段树/set/可删堆可以很轻松的维护。</p>
<p>时间复杂度 $O(n\log n)$。</p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>树形DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 82[CF1303]</title>
    <url>/2020/03/02/Educational-Codeforces-Round-82-CF1303/</url>
    <content><![CDATA[<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.ml/contest/1303">链接</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Problem-A-C"><a href="#Problem-A-C" class="headerlink" title="Problem A~C"></a>Problem A~C</h3><p>SB题，不写了。</p>
<h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>懒得写了。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>显然贪心地从低位到高位维护当前能组成多少个 $2^i$ 即可。</p>
<h3 id="Problem-E"><a href="#Problem-E" class="headerlink" title="Problem E"></a>Problem E</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给两个字符串 $s,t$，要求在 $s$ 中选出至多两个互不重合的子序列，按顺序排列后组成 $t$。问是否可行。</p>
<p>$|S|,|T|\leq 400$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>显然先枚举 $t$ 在哪个位置断开。</p>
<p>然后DP，设 $f[i][j][k]$ 表示前 $i$ 位两个子串分别匹配到第 $j,k$ 位是否可行。</p>
<p>时间复杂度 $O(n^4)$。需要优化。</p>
<p>因为DP值只有 $0,1$ 两种情况，因此可以降一维，设 $f[i][j]$ 为前 $i$ 为第一个子串匹配到第 $j$ 位时，第二个子串最大匹配到的位置。</p>
<p>时间复杂度 $O(n^3)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">405</span>;</span><br><span class="line"><span class="type">int</span> n,m,f[N][N];</span><br><span class="line"><span class="type">char</span> s[N],t[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> y)</span></span>&#123;x=<span class="built_in">max</span>(x,y);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">		n=<span class="built_in">strlen</span>(s+<span class="number">1</span>); m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">		<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(k,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,n+<span class="number">1</span>) <span class="built_in">fo</span>(j,<span class="number">0</span>,m+<span class="number">1</span>) f[i][j]=<span class="number">-1</span>;</span><br><span class="line">			f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="built_in">min</span>(k,i))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(i&gt;j&amp;&amp;f[i<span class="number">-1</span>][j]&gt;=<span class="number">0</span>) <span class="built_in">getmax</span>(f[i][j],f[i<span class="number">-1</span>][j]+(f[i<span class="number">-1</span>][j]&gt;=m-k?<span class="number">0</span>:(t[k+<span class="number">1</span>+f[i<span class="number">-1</span>][j]]==s[i]?<span class="number">1</span>:<span class="number">0</span>)));</span><br><span class="line">					<span class="keyword">if</span>(j&amp;&amp;f[i<span class="number">-1</span>][j<span class="number">-1</span>]&gt;=<span class="number">0</span>&amp;&amp;s[i]==t[j]) <span class="built_in">getmax</span>(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			flag|=(f[n][k]==m-k);</span><br><span class="line">			<span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(flag?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>懒得写了。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>考虑某个点改变颜色后，对于原来的颜色集合，相当于删除操作，对于改变后的颜色的集合，相当于添加操作。</p>
<p>删除操作可以用时间倒流，变成添加操作，因此只需考虑添加。</p>
<p>对于每种颜色分开考虑，若加上一个点，考虑此时连通块数量的变化情况。</p>
<p>若这个点有 $x$ 个连通块与之相邻，则新增的连通块数为 $1-x$。</p>
<p>并查集+时间倒流即可。</p>
<h3 id="Problem-G"><a href="#Problem-G" class="headerlink" title="Problem G"></a>Problem G</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>一棵树，有点权。任选 $u,v$，求从 $u$ 到 $v$ 路径所形成的点权的序列的后缀和的和的最大值。</p>
<p>$n\leq 1.5\times 10^5$，时限 $6s$。</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>一个序列 $\{a_1,a_2,\cdots,a_k\}$ 的权值为：$\sum_{i=1}^ki\times a_i$。考虑如何在树上求最大值。</p>
<p>跟树上路径有关系的，显然点分治。</p>
<p>这时只需考虑一个序列，在某根节点处被截成两段，且统计最大值。</p>
<p>考虑在 $m$ 处被截断，截成 $\{a_1,a_2,\cdots,a_m\}$ 和 $\{a_{m+1},a_{m+2},\cdots,a_k\}$。</p>
<p>考虑如何用两段的信息合并成一段的，有：</p>
<p>$$\sum_{i=1}^ki\times a_i\=\sum_{i=1}^mi\times a_i+\sum_{i=m+1}^{k}i\times a_i\=\sum_{i=1}^mi\times a_i+\sum_{i=m+1}^k(i-m)\times a_i+m\sum_{i=m+1}^ka_i$$</p>
<p>对于某一序列 $\{a_1,a_2,\cdots,a_k\}$，设 $s=\sum_{i=1}^ki\times a_i,v=\sum_{i=1}^ka_i$。</p>
<p>那么两段序列的信息合成一段就是：$s_1+s_2+m_1v_2$。</p>
<p>考虑点分治时，需要从某两棵不同的子树中统计答案。</p>
<p>如图所示：</p>
<p><img src="/Educational-Codeforces-Round-82-CF1303/G1.png" alt="G1"></p>
<p>将子树按顺序从左到右排成一列，假设枚举到某棵子树，不妨设序列的前半部分出现在后面的子树中（否则反过来再做一遍即可）。</p>
<p>那么如果把后半部分的 $(s_2,v_2)$ 看做插入；把前半部分看做询问 $s_2+m_1v_2$ 的最大值，最后加上 $s_1$ 的值。显然 $s_2+m_1v_2$ 是一个直线的形式。将 $m_1$ 看作 $x$，$v_2$ 为斜率 $k$，$s_2$ 为纵截距 $b$。</p>
<p>也就是求若干条线段在 $x=m_1$ 处的最大值。 </p>
<p>李超线段树，插入整个线段维护即可。</p>
<p>点分治时间复杂度 $O(n\log n)$，李超线段树复杂度 $O(\log n)$，总复杂度 $O(n\log ^2n)$。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">150010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">	ll k,b;</span><br><span class="line">	<span class="function">ll <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> k*x+b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	line mx[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		mx[u].k=mx[u].b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">init</span>(ls); <span class="built_in">init</span>(rs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> mx[u].<span class="built_in">f</span>(x);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">max</span>(mx[u].<span class="built_in">f</span>(x),(x&lt;=mid)?<span class="built_in">ask</span>(ls,x):<span class="built_in">ask</span>(rs,x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,line A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(mx[u].<span class="built_in">f</span>(l)&lt;=A.<span class="built_in">f</span>(l)&amp;&amp;mx[u].<span class="built_in">f</span>(r)&lt;=A.<span class="built_in">f</span>(r)) &#123;mx[u]=A; <span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(mx[u].<span class="built_in">f</span>(l)&gt;=A.<span class="built_in">f</span>(l)&amp;&amp;mx[u].<span class="built_in">f</span>(r)&gt;=A.<span class="built_in">f</span>(r)) <span class="keyword">return</span>;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mx[u].<span class="built_in">f</span>(mid)&lt;A.<span class="built_in">f</span>(mid)) <span class="built_in">swap</span>(mx[u],A);</span><br><span class="line">		<span class="keyword">if</span>(A.k&lt;mx[u].k) <span class="built_in">add</span>(ls,A);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">add</span>(rs,A);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll val[N],ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> siz[N],mxsiz[N],rt;</span><br><span class="line"><span class="type">int</span> dep[N],fa[N],cnt;</span><br><span class="line"><span class="type">int</span> st[N],len[N],from[N],top;</span><br><span class="line">ll sum[N],val1[N],val2[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; mxsiz[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v]&amp;&amp;v!=fa[u])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[v]=u;</span><br><span class="line">			<span class="built_in">getroot</span>(v,cnt);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			mxsiz[u]=<span class="built_in">max</span>(mxsiz[u],siz[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	mxsiz[u]=<span class="built_in">max</span>(mxsiz[u],cnt-siz[u]);</span><br><span class="line">	<span class="keyword">if</span>(mxsiz[rt]&gt;mxsiz[u]) rt=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,ll v1,ll v2,ll s,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dep[u]=dep[fa[u]]+<span class="number">1</span>;</span><br><span class="line">	siz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		<span class="keyword">if</span>(!vis[v]&amp;&amp;v!=fa[u])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[v]=u; flag=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(v,v1+s+val[v],v2+<span class="number">1ll</span>*dep[u]*val[v],s+val[v],id);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(!flag)</span><br><span class="line">	&#123;</span><br><span class="line">		st[++top]=u; cnt=<span class="built_in">max</span>(cnt,dep[u]);</span><br><span class="line">		len[top]=dep[u]; val1[top]=v1; val2[top]=v2; from[top]=id; sum[top]=s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	st[top=<span class="number">0</span>]=<span class="number">-1</span>; dep[u]=<span class="number">1</span>; cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!vis[v]) fa[v]=u,<span class="built_in">dfs</span>(v,<span class="number">0ll</span>+val[u]*<span class="number">2</span>+val[v],val[v],val[v]+val[u],v);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,top) sum[i]-=val[u],ans=<span class="built_in">max</span>(ans,val1[i]),ans=<span class="built_in">max</span>(ans,val2[i]+sum[i]+val[u]);</span><br><span class="line">	st[top+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">	SGT::<span class="built_in">init</span>(<span class="number">1</span>,<span class="number">1</span>,cnt);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j;i&lt;=top;i=j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i;from[i]==from[j];j++) ans=<span class="built_in">max</span>(ans,SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,len[j])+val1[j]);</span><br><span class="line">		<span class="keyword">for</span>(j=i;from[i]==from[j];j++) SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,(line)&#123;sum[j],val2[j]&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	SGT::<span class="built_in">init</span>(<span class="number">1</span>,<span class="number">1</span>,cnt);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=top,j;i;i=j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i;from[i]==from[j];j--) ans=<span class="built_in">max</span>(ans,SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,len[j])+val1[j]);</span><br><span class="line">		<span class="keyword">for</span>(j=i;from[i]==from[j];j--) SGT::<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,(line)&#123;sum[j],val2[j]&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">calc</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[v]||siz[v]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		fa[v]=<span class="number">0</span>; rt=<span class="number">0</span>; <span class="built_in">getroot</span>(v,siz[v]); <span class="built_in">solve</span>(rt);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) val[i]=<span class="built_in">read</span>();</span><br><span class="line">	mxsiz[rt=<span class="number">0</span>]=(<span class="type">int</span>)<span class="number">1e9</span>;</span><br><span class="line">	<span class="built_in">getroot</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">solve</span>(rt);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
        <tag>点分治</tag>
        <tag>并查集</tag>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Easy Math Problem[hdu6607]</title>
    <url>/2020/02/28/Easy-Math-Problem-hdu6607/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6607">链接</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求 $\sum_{i=1}^n\sum_{j=1}^n\gcd(i,j)^k\text{lcm}(i,j)[\gcd(i,j)\in \mathbb{P}]\pmod{10^9+7}$.</p>
<p>$n\leq 10^{10}$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h4><p>化简一波：</p>
<p>$$\sum_{i=1}^n\sum_{j=1}^n\gcd(i,j)^k\text{lcm}(i,j)[\gcd(i,j)\in \mathbb{P}]\=\sum_{d=1}^nd^{k-1}[d\in \mathbb{P}]\sum_{i=1}^n\sum_{j=1}^nij[\gcd(i,j)==d]\=\sum_{d=1}^nd^{k+1}[d\in \mathbb{P}]\sum_{i=1}^{\frac{n}{d}}\sum_{j=1}^{\frac{n}{d}}ij[\gcd(i,j)==1]$$</p>
<p>设 $f(n)=\sum_{i=1}^n\sum_{j=1}^{n}ij[\gcd(i,j)==1]$。</p>
<p>则会有：$f(n)=2\sum_{i=1}^ni\sum_{j=1}^{i-1}j[\gcd(i,j)==1]+\sum_{i=1}^ni^2[\gcd(i,i)==1]$</p>
<p>由经典恒等式：$\sum_{j=1}^{n-1}j[\gcd(n,j)==1]=\frac{n\varphi(n)-[n==1]}{2}$ 可得：</p>
<p>$$f(n)=2(\sum_{i=1}^ni\frac{i\varphi(i)-[i==1]}{2})-1=\sum_{i=1}^{n}i^2\varphi(i)$$</p>
<p>故原式可化简为 ：$\sum_{d=1}^nd^{k+1}[d\in \mathbb{P}]f(\left \lfloor \frac{n}{d} \right \rfloor)$</p>
<p>显然整除分块。现在变成求两部分。</p>
<h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>对于所有的 $\left \lfloor \frac{n}{i} \right \rfloor$，求 $f(\left \lfloor \frac{n}{i} \right \rfloor)$。</p>
<p>显然杜教筛。</p>
<p>设函数 $g(i)=i^2$，则有：</p>
<p>$$(f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})=\sum_{d|n}d^2\varphi(i)\frac{n^2}{d^2}=n^2\sum_{d|n}\varphi(d)=n^3$$</p>
<p>设 $S(i)=\sum_{i=1}^nf(i)$，那么就有：$S(n)g(1)=\sum_{i=1}^n(f*g)(i)-\sum_{i=2}^ng(i)S(\left \lfloor \frac{n}{i} \right \rfloor)$</p>
<p>即：$S(n)=\sum_{i=1}^ni^3-\sum_{i=1}^ni^2S(\left \lfloor \frac{n}{i} \right \rfloor)$。</p>
<p>这样就可以求出来了。</p>
<p>时间复杂度 $O(n^{\frac{2}{3}})$。</p>
<h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><p>对于所有的 $\left \lfloor \frac{n}{i} \right \rfloor$，求 $\sum_{i=1}^ni^{k+1}[i\in \mathbb{P}]$。</p>
<p>Min25筛模板题。</p>
<p>求 $g(n,0)$ 的时候需要求自然数的 $k+1$ 次幂和，拉格朗日插值即可。</p>
<p>时间复杂度 $O(k\sqrt{n}+\frac{n^{\frac{3}{4}}}{\log n})$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y%mod; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll inv4=<span class="built_in">Pow</span>(<span class="number">4</span>,mod<span class="number">-2</span>);</span><br><span class="line"><span class="type">const</span> ll inv6=<span class="built_in">Pow</span>(<span class="number">6</span>,mod<span class="number">-2</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4100000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">111</span>;</span><br><span class="line">ll pri[N&gt;&gt;<span class="number">3</span>],phi[N],sg[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	ll t;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;pri[++tot]=i; phi[i]=i<span class="number">-1</span>;&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;(t=(ll)pri[j]*i)&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[t]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) &#123;phi[t]=phi[i]*pri[j]; <span class="keyword">break</span>;&#125;</span><br><span class="line">			phi[t]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) sg[i]=<span class="built_in">Add</span>(sg[i<span class="number">-1</span>],<span class="number">1ll</span>*i*i%mod*phi[i]%mod);</span><br><span class="line">&#125;</span><br><span class="line">ll fac[K],inv[K];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_fac</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll n,ans,Sqr; <span class="type">int</span> k;</span><br><span class="line">map&lt;ll,ll&gt; ma;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">S3</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n%=mod;</span><br><span class="line">	n=n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">	<span class="keyword">return</span> n*n%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">S2</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n%=mod;</span><br><span class="line">	<span class="keyword">return</span> n*(n+<span class="number">1</span>)%mod*(n*<span class="number">2</span>+<span class="number">1</span>)%mod*inv6%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">S</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> sg[n];</span><br><span class="line">	<span class="keyword">if</span>(ma[n]!=<span class="number">0</span>) <span class="keyword">return</span> ma[n];</span><br><span class="line">	ll ans=<span class="built_in">S3</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j=n/(n/i);</span><br><span class="line">		ans=<span class="built_in">Dec</span>(ans,<span class="built_in">S</span>(n/i)%mod*(<span class="built_in">S2</span>(j)-<span class="built_in">S2</span>(i<span class="number">-1</span>)+mod)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ma[n]=ans;</span><br><span class="line">&#125;</span><br><span class="line">ll pre[K],suf[K],y[K];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Lagrange</span><span class="params">(ll n,<span class="type">int</span> k,ll sum=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n%=mod; pre[<span class="number">0</span>]=<span class="number">1</span>; suf[k+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) pre[i]=<span class="built_in">Mul</span>(pre[i<span class="number">-1</span>],(n-i+mod)%mod);</span><br><span class="line">	<span class="built_in">fd</span>(i,k,<span class="number">1</span>) suf[i]=<span class="built_in">Mul</span>(suf[i+<span class="number">1</span>],(n-i+mod)%mod);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) sum=<span class="built_in">Add</span>(sum,<span class="built_in">Mul</span>(pre[i<span class="number">-1</span>],suf[i+<span class="number">1</span>])*<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(y[i],inv[i<span class="number">-1</span>]),<span class="built_in">Mul</span>(inv[k-i],((k-i)&amp;<span class="number">1</span>)?mod<span class="number">-1</span>:<span class="number">1</span>))%mod);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> id1[M],id2[M];</span><br><span class="line">ll g[M],w[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Min25</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k+<span class="number">2</span>) y[i]=<span class="built_in">Add</span>(y[i<span class="number">-1</span>],<span class="built_in">Pow</span>(i,k));</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j=n/(n/i); w[++m]=n/i;</span><br><span class="line">		<span class="keyword">if</span>(w[m]&lt;=Sqr) id1[w[m]]=m; <span class="keyword">else</span> id2[n/w[m]]=m;</span><br><span class="line">		g[m]=<span class="built_in">Lagrange</span>(w[m],k+<span class="number">2</span>)<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll qm=<span class="number">0</span>;</span><br><span class="line">	g[m+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,tot)</span><br><span class="line">	&#123;</span><br><span class="line">		ll tmp=pri[i]*pri[i],p=<span class="built_in">Pow</span>(pri[i],k),t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;tmp&lt;=w[j];j++)</span><br><span class="line">		&#123;</span><br><span class="line">			t=w[j]/pri[i];</span><br><span class="line">			t=(t&lt;=Sqr)?id1[t]:id2[n/t];</span><br><span class="line">			g[j]=<span class="built_in">Dec</span>(g[j],p*(g[t]-qm+mod)%mod);</span><br><span class="line">		&#125;</span><br><span class="line">		qm=<span class="built_in">Add</span>(qm,p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init_prime</span>(N<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">init_fac</span>(K<span class="number">-5</span>);</span><br><span class="line">	CASET</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>()+<span class="number">1</span>;</span><br><span class="line">		Sqr=<span class="built_in">sqrt</span>(n); ans=<span class="number">0</span>; ma.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">Min25</span>();</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>,j,l=m,h;i&lt;=n;i=j+<span class="number">1</span>,l--)</span><br><span class="line">		&#123;</span><br><span class="line">			j=n/(n/i);</span><br><span class="line">			h=(g[l]-g[l+<span class="number">1</span>]+mod)%mod;</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">S</span>(n/i),h));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>拉格朗日插值</tag>
        <tag>Min25筛</tag>
        <tag>杜教筛</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的函数[loj6053]</title>
    <url>/2020/02/27/%E7%AE%80%E5%8D%95%E7%9A%84%E5%87%BD%E6%95%B0-loj6053/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义一函数 $f$：</p>
<p>$$f(n)=\begin{cases}<br>1 &amp; \text{ if } n=1 \\<br>p \bigoplus c &amp; \text{ if } n=p^c,p\in \mathbb{P} \\<br>f(a)f(b) &amp; \text{ if } n=ab,\gcd(a,b)=1<br>\end{cases}$$</p>
<p>求 $\sum_{i=1}^{n}f(i)$ 的值。</p>
<p>$n\leq 10^{10}$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然是Min25筛。</p>
<p>来看看Min25筛的前提条件：</p>
<ul>
<li>$f$ 是积性函数。这个显然。</li>
<li>$f(p^k)$ 可以很快算出来，这个也显然。</li>
<li>$\sum_{i=1}^n[i\in \mathbb{P}]f(i)$ 能被 $\sum_{i=1}^n[i\in \mathbb{P}] i^k$ 表示出来。显然当 $i&gt;2,i\in \mathbb{P}$ 时，有：$f(i)=i-1$。那么把 $f(2)$ 也当做 $2-1$，最后加上 $2$。因此有：$\sum_{i=1}^n[i\in \mathbb{P}]f(i)=\sum_{i=1}^n[i\in \mathbb{P}]i^1-i^0$。算两个 $i^k$ 即可。</li>
</ul>
<p>时间复杂度 $O(\frac{n^{\frac{3}{4}}}{\log n})$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000000</span>;</span><br><span class="line">ll n,m,Sqr,pri[N],sp[N],id1[N],id2[N],w[N];</span><br><span class="line">ll h[N],g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;pri[++tot]=i; sp[tot]=(sp[tot<span class="number">-1</span>]+i)%mod;&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;<span class="number">1ll</span>*i*pri[j]&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll n,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">1</span>||pri[j]&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll t=(n&lt;=Sqr)?id1[n]:id2[::n/n];</span><br><span class="line">	ll ans=(mod+(g[t]-sp[j<span class="number">-1</span>])-(h[t]-(j<span class="number">-1</span>))%mod)%mod;</span><br><span class="line">	<span class="keyword">if</span>(j==<span class="number">1</span>) ans+=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;=tot&amp;&amp;pri[k]*pri[k]&lt;=n;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll tmp=pri[k];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> q=<span class="number">1</span>;tmp*pri[k]&lt;=n;q++,tmp*=pri[k])</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,<span class="built_in">Add</span>(pri[k]^(q+<span class="number">1</span>),<span class="built_in">Mul</span>(pri[k]^q,<span class="built_in">S</span>(n/tmp,k+<span class="number">1</span>))));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n); Sqr=<span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="built_in">init_prime</span>(Sqr);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j=n/(n/i); w[++m]=n/i;</span><br><span class="line">		h[m]=(w[m]<span class="number">-1</span>)%mod;</span><br><span class="line">		g[m]=(w[m]%mod)*((w[m]+<span class="number">1</span>)%mod)%mod*inv2%mod<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(w[m]&lt;=Sqr) id1[w[m]]=m;</span><br><span class="line">		<span class="keyword">else</span> id2[j]=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll k=pri[i]*pri[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;k&lt;=w[j];j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> t=(w[j]/pri[i]&lt;=Sqr)?id1[w[j]/pri[i]]:id2[n/(w[j]/pri[i])];</span><br><span class="line">			h[j]=<span class="built_in">Add</span>(h[j],(mod-(h[t]-(i<span class="number">-1</span>)%mod))%mod);</span><br><span class="line">			g[j]=<span class="built_in">Add</span>(g[j],mod<span class="number">-1ll</span>*pri[i]*(g[t]-sp[i<span class="number">-1</span>]+mod)%mod);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(<span class="built_in">S</span>(n,<span class="number">1</span>)+<span class="number">1</span>)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>loj</category>
      </categories>
      <tags>
        <tag>Min25筛</tag>
      </tags>
  </entry>
  <entry>
    <title>破忒头的匿名信[2020 CCPC Wannafly WC Day2]</title>
    <url>/2020/02/27/%E7%A0%B4%E5%BF%92%E5%A4%B4%E7%9A%84%E5%8C%BF%E5%90%8D%E4%BF%A1-2020-CCPC-Wannafly-WC-Day2/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/4010/K">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然DP，设 $f_i$ 为考虑前 $i$ 位的最小值是什么。</p>
<p>考虑AC自动机上一直跳fail链，遇到一个是结尾的点就说明存在一个后缀在词典中出现。</p>
<p>但是这样时间复杂度是 $O(n^2)$ 的，然而过了。。。</p>
<p>这里有一个很重要的性质：一条fail链中，是结尾的节点不超过 $\sqrt n$ 个。</p>
<p>证明显然。最差的情况是：$a,aa,aaa,\cdots$。</p>
<p>那么只需在AC自动机中记录fail链中最早遇到的节点就可以了。</p>
<p>时间复杂度 $O(n\sqrt n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],val[N],len[N],fail[N],cnt,anc[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="number">0</span>,c,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">			<span class="keyword">if</span>(!ne[u][c]) ne[u][c]=++cnt;</span><br><span class="line">			u=ne[u][c];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!val[u]) val[u]=v;</span><br><span class="line">		<span class="keyword">else</span> val[u]=<span class="built_in">min</span>(val[u],v);</span><br><span class="line">		len[u]=n;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u,v;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			anc[u]=val[fail[u]]?fail[u]:anc[fail[u]];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)</span><br><span class="line">				<span class="keyword">if</span>(v=ne[u][i])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(!u) fail[v]=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">else</span> fail[v]=ne[fail[u]][i];</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> ne[u][i]=ne[fail[u]][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll f[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i]=inf;</span><br><span class="line">			u=ne[u][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=u;j;j=anc[j])</span><br><span class="line">				f[i]=<span class="built_in">min</span>(f[i],f[i-len[j]]+val[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f[n]==inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">return</span> f[n];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s); AC::<span class="built_in">ins</span>(s,<span class="built_in">read</span>());&#125;</span><br><span class="line">	AC::<span class="built_in">getfail</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,AC::<span class="built_in">work</span>(s));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 621[CF1307]</title>
    <url>/2020/02/26/Codeforces-Round-621-CF1307/</url>
    <content><![CDATA[<p><a href="<http://codeforces.com/contest/1307">链接</a></p>
<span id="more"></span>

<h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h3><p>暴力贪心即可。</p>
<h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h3><p>显然一直用最大值跳，跳到总和大于 $x$ 就可以了。</p>
<p>注意特判最大值 $&gt;x$ 的情况。</p>
<h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h3><p>显然出现次数最多时，该字符串的长度只为 $1$ 或 $2$。</p>
<p>前缀和计算一下就好了。</p>
<h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h3><p>一道好题。</p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给 $n$ 个点 $m$ 条边的无向图。现在你需要在图中加上一条不是自环的边，使得最短路最大。这条边的两个顶点必须在给定的集合 $S$ 内。</p>
<p>$n,m\leq 2\times 10^5,|S|\leq n$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>分类讨论：</p>
<p>1，这条边无法影响添加前的答案，此时答案为 $dis_{1,n}$</p>
<p>2，这条能影响答案：</p>
<p>设 $f_i$ 表示点 $i$ 到 $1$ 的距离，$g_i$ 表示点 $i$ 到 $n$ 的距离。这个可以用BFS求出。</p>
<p>题目转换成，给 $|S|$ 个点，每个点有两个值 $f_i,g_i$ ，需要选两个点，使得 $\min(f_i+g_j,f_j+g_i)+1$ 最大。</p>
<p>不妨假设 $f_i+g_j\leq f_j+g_i$，亦即 $f_i-g_i\leq f_j-g_j$。</p>
<p>因此对于每个点，按 $f_i-g_i$ 从小到大排序。枚举点 $i$，求出前缀最大的 $g_j$即可。</p>
<p>时间复杂度 $O(n\log n+m)$。</p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> f[N],g[N],a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> *dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) dis[i]=inf;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(q.<span class="built_in">push</span>(s);!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">			<span class="keyword">if</span>(dis[v]==inf)</span><br><span class="line">				dis[v]=dis[u]+<span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans,mx;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,k) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">bfs</span>(<span class="number">1</span>,f); <span class="built_in">bfs</span>(n,g);</span><br><span class="line">	ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+k+<span class="number">1</span>,[&amp;](<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;<span class="keyword">return</span> f[x]-g[x]&lt;f[y]-g[y];&#125;);</span><br><span class="line">	mx=f[a[<span class="number">1</span>]];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,k)</span><br><span class="line">	&#123;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,mx+g[a[i]]);</span><br><span class="line">		mx=<span class="built_in">max</span>(mx,f[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">min</span>(ans+<span class="number">1</span>,f[n]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Problem-E"><a href="#Problem-E" class="headerlink" title="Problem E"></a>Problem E</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>令一道好题。</p>
<p>$m$ 头奶牛，每头奶牛的类型为 $f_i$，能吃 $h_i$ 个草。$n$ 个草坪从左到右排列，每个草坪当中长了类型为 $g_i$ 的奶牛才能吃的一单位的草，被牛吃后不再长草。</p>
<p>奶牛从左或者从右边出发，一直吃下去，直到吃了 $h_i$ 个草后，睡在那个位置。</p>
<p>一种合法的吃草方案为安排一些奶牛吃草，每只奶牛走的时候不能跨过睡着的奶牛。</p>
<p>两种方案不同当且仅当存在某只奶牛在一种方案出现而在另一种方案不出现或者某只奶牛的出发点不同。</p>
<p>求出合法的吃草方案中，最多能选出多少奶牛，以及此时的情况总数对 $10^9+7$ 取模后的值。</p>
<p>$n,m\leq 5000$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>听说有 $O(n)$ 或 $O(n\log n)$ 做法。。。</p>
<p>显然的是，相同类型的奶牛只能最多放两只。</p>
<p>不妨试试枚举分界点 $k$。</p>
<p>从左边走的和从右边走的都不能跨过 $k$。然后对于每种奶牛的类型算方案数，相乘起来加进贡献里。</p>
<p>设 $l$ 为只能从左边走的奶牛数量，$r$ 为只能从右边走的奶牛数量，$b$ 为都能走的奶牛数量。</p>
<p>分类讨论一下：</p>
<ul>
<li><p>用两只奶牛走的方案数，$l\cdot b+r\cdot b+b\cdot (b-1)$。</p>
</li>
<li><p>只用一只奶牛走的方案数，$l+r+2b$。</p>
</li>
</ul>
<p>当 $l\cdot b+r\cdot b+b\cdot (b-1)&gt;0$ 的时候就必须用两只。</p>
<p>暴力计算，时间复杂度 $O(n^2)$。</p>
<p>但是这样算会算重，因为一种方案可能对应多个分界点。</p>
<p>强行将分界点靠左，也就是枚举左边的集合中，跑得最远的奶牛是哪个，这样就不会算重了。</p>
<p>需要注意一些细节。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5003</span>;</span><br><span class="line"><span class="type">int</span> n,m,w[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f[N],L[N],R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) w[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),f[x].<span class="built_in">pb</span>(<span class="built_in">read</span>());</span><br><span class="line">	f[<span class="number">0</span>].<span class="built_in">pb</span>(<span class="number">0</span>); L[<span class="number">0</span>].<span class="built_in">pb</span>(<span class="number">0</span>); R[<span class="number">0</span>].<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(f[i].<span class="built_in">size</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sort</span>(<span class="built_in">all</span>(f[i]));</span><br><span class="line">			<span class="type">int</span> k,l;</span><br><span class="line">			k=<span class="number">0</span>; l=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">				<span class="keyword">if</span>(w[j]==i&amp;&amp;l&lt;f[i].<span class="built_in">size</span>())</span><br><span class="line">				&#123;</span><br><span class="line">					k++;</span><br><span class="line">					<span class="keyword">if</span>(f[i][l]==k) L[i].<span class="built_in">pb</span>(j),l++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,l,f[i].<span class="built_in">size</span>()<span class="number">-1</span>) L[i].<span class="built_in">pb</span>(n+<span class="number">1</span>);</span><br><span class="line">			k=<span class="number">0</span>; l=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">fd</span>(j,n,<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">if</span>(w[j]==i&amp;&amp;l&lt;f[i].<span class="built_in">size</span>())</span><br><span class="line">				&#123;</span><br><span class="line">					k++;</span><br><span class="line">					<span class="keyword">if</span>(f[i][l]==k) R[i].<span class="built_in">pb</span>(j),l++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,l,f[i].<span class="built_in">size</span>()<span class="number">-1</span>) R[i].<span class="built_in">pb</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="type">int</span> siz=<span class="number">0</span>; ll sum=<span class="number">1</span>;</span><br><span class="line">	ll l,r,lr,s,tmp; <span class="type">int</span> sz;</span><br><span class="line">	<span class="built_in">fo</span>(x,<span class="number">0</span>,n)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> k:L[x])</span><br><span class="line">			<span class="keyword">if</span>(k!=n+<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				sz=<span class="number">0</span>; s=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">					<span class="keyword">if</span>(f[i].<span class="built_in">size</span>())</span><br><span class="line">					&#123;</span><br><span class="line">						l=r=lr=<span class="number">0</span>;</span><br><span class="line">						<span class="built_in">fo</span>(j,<span class="number">0</span>,f[i].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span>(L[i][j]&lt;k&amp;&amp;R[i][j]&gt;k) lr++;</span><br><span class="line">							<span class="keyword">else</span> <span class="keyword">if</span>(L[i][j]&lt;=k) l++;<span class="comment">//!!!</span></span><br><span class="line">							<span class="keyword">else</span> <span class="keyword">if</span>(R[i][j]&gt;k) r++;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span>(i==x) &#123;r+=lr; l=lr=<span class="number">0</span>;&#125;</span><br><span class="line">						<span class="keyword">if</span>((tmp=l*r+l*lr+r*lr+lr*(lr<span class="number">-1</span>))&gt;<span class="number">0</span>) sz+=<span class="number">2</span>,s=<span class="built_in">Mul</span>(s,tmp%mod);</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span>((tmp=l+r+lr*<span class="number">2</span>)&gt;<span class="number">0</span>) sz++,s=<span class="built_in">Mul</span>(s,tmp%mod);</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">if</span>(x) sz++;</span><br><span class="line">				<span class="keyword">if</span>(!sz) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(sz&gt;siz) siz=sz,sum=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(sz==siz) sum=<span class="built_in">Add</span>(sum,s);</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,siz,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>一棵树中，有些给定的点作为中转站，可以加满油。车的油箱容量为 $k$ ，初始是满的。每走一条边消耗 $1$。容量为 $0$ 时不能继续走。</p>
<p>$m$ 次询问，问是否能从 $u_i$ 走到 $v_i$。</p>
<p>$n,m\leq 2\times 10^5$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>记一个中转站 $i$ 向外走 $\leq \frac{k}{2}$ 步后（可以走到边上）形成的集合是 $S_i$，若 $S_i$ 和 $S_j$ 的交集不为空则两点间可以互相到达，能互相到达这个条件满足传递性，因此可以用并查集合并之。</p>
<p>每次询问的时候亦可以把起点与终点当做一个临时的中转站。</p>
<p>但是这个 $\frac{k}{2}$ 步比较麻烦，它可以走到一条边的中点上。因此在每条边的中点处多加一个点，变成走 $k$ 步即可。</p>
<p>这个走 $k$ 步可以用BFS实现。</p>
<p>那么首先判断一下两点间的距离是否 $\leq 2k$，如果是，直接输出’YES’就好了。</p>
<p>否则就都向对方跳 $k$ 步，然后判断跳完后两点是否在同一个集合内就可以了。</p>
<p>这个跳 $k$ 步可以用树剖或者倍增实现。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h4 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,anc[N],k,r,rt;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line"><span class="type">int</span> f[N],dis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	adj[x].<span class="built_in">pb</span>(y); adj[y].<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> (f[x]==x)?x:f[x]=<span class="built_in">find</span>(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(x!=y) f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n*<span class="number">2</span>) f[i]=i,dis[i]=inf;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,r) x=<span class="built_in">read</span>(),dis[x]=<span class="number">0</span>,q.<span class="built_in">push</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">merge</span>(u,v);</span><br><span class="line">			<span class="keyword">if</span>(dis[v]==inf)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(dis[v]!=k) q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> g[N][<span class="number">19</span>],siz[N],dep[N],fa[N],son[N],top[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>; dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">	fa[u]=g[u][<span class="number">0</span>]=pre;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[u];i++) g[u][i]=g[g[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(v!=pre)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">		siz[u]+=siz[v];</span><br><span class="line">		<span class="keyword">if</span>(siz[son[u]]&lt;siz[v]) son[u]=v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	top[u]=tp;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],tp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v:adj[u]) <span class="keyword">if</span>(!top[v]) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;top[x]!=top[y];x=fa[top[x]])</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			<span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line">		<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;k)</span><br><span class="line">			x=g[x][i];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&lt;=dep[x]-dep[z]) <span class="keyword">return</span> <span class="built_in">jump</span>(x,k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">jump</span>(y,dep[x]+dep[y]-(dep[z]&lt;&lt;<span class="number">1</span>)-k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>(); r=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> x,y,z,_x,_y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(); y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(x,i+n); <span class="built_in">add</span>(i+n,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">bfs</span>();</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>); <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(_,<span class="number">1</span>,<span class="built_in">read</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">lca</span>(x,y);</span><br><span class="line">		<span class="keyword">if</span>(dep[x]+dep[y]-(dep[z]&lt;&lt;<span class="number">1</span>)&lt;=k*<span class="number">2</span>) &#123;<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		_x=<span class="built_in">jump</span>(x,y,z); _y=<span class="built_in">jump</span>(y,x,z);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="built_in">find</span>(_x)==<span class="built_in">find</span>(_y)?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>贪心</tag>
        <tag>bfs</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>Clock Tree[USACO 2020 February Silver]</title>
    <url>/2020/02/25/Clock-Tree-USACO-2020-February-Silver/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个 $n$ 个点的树，点有点权 $a_i$，每次选择一个相连的点，每走一次到该点，该点的点权变为 $(a_i+1)\bmod k$。</p>
<p>可以从任意点开始，任意点结束，能重复经过多次。</p>
<p>问有多少个出发点，满足最后存在一种方案使得点权均为 $0$。</p>
<p>原题：$n\leq 2500,k=12$</p>
<p>加强版：$n\leq 2\times 10^6,k\leq 10^9$。</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="Part-0-n-leq-2500-，必须走回出发点"><a href="#Part-0-n-leq-2500-，必须走回出发点" class="headerlink" title="Part 0:$n\leq 2500$，必须走回出发点"></a>Part 0:$n\leq 2500$，必须走回出发点</h4><p>首先必须明白一点，如果一条边的两端点全是 $0$，我们也还是可以走的。因为来回走 $k$ 次不就好了嘛。 </p>
<p>假设枚举出发点，然后以该出发点为根。看子树内是否满足。</p>
<p>比较像树形DP的形式。</p>
<p>考虑DP的本质，是将一个大问题变成若干个子问题。</p>
<p>能否设置一个状态，表示子树内，除了这个点以外的点全变为 $0$ 后，该点还要变多少次才能变为 $0$。</p>
<p>转移的时候让父亲和儿子相互抵消，使得儿子变为 $0$，然后父亲此时的状态可以 $O(1)$ 计算。</p>
<p>显然是可以的。设为 $f_i$。</p>
<p>那么有：$f_u\equiv -a_u-\sum_{v\in son_u}f_v(\bmod k)$</p>
<p>最后必须满足 $f_{root}$ 为 $0$ ，$root$ 才能满足条件。</p>
<p>枚举 $root$，$O(n)$ 树形DP，计算是否可行。</p>
<h4 id="Part-1-n-leq-2500"><a href="#Part-1-n-leq-2500" class="headerlink" title="Part 1:$n\leq 2500$"></a>Part 1:$n\leq 2500$</h4><p>是否能把上面的思路转移过来呢？</p>
<p>试一下吧。</p>
<p>还是枚举根节点（出发点）。</p>
<p>考虑最后一次经过根节点的情况，如果要满足条件，那么只能剩下一条 $k-1$ 的链，且此时根节点为 $0$。</p>
<p>如图所示：</p>
<p><img src="/Clock-Tree-USACO-2020-February-Silver/1.png" alt="1"></p>
<p>那么可以发现，如果让链上最后两个 $k-1$ 相互抵消，那么一直抵消下去，最后最多剩下一个 $k-1$，再让这个 $k-1$ 和根节点相互抵消，此时根节点变为了 $1$。也就是说，根节点还需要 $k-1$ 次才变为 $0$。这种情况也是可以的，即 $f_{root}=k-1$。</p>
<p>时间复杂度 $O(n^2)$。</p>
<p><strong>到这里就做完了原题。</strong></p>
<h4 id="Part-2-n-leq-10-6"><a href="#Part-2-n-leq-10-6" class="headerlink" title="Part 2:$n\leq 10^6$"></a>Part 2:$n\leq 10^6$</h4><p>显然换根DP就好了。</p>
<p>时间复杂度 $O(n)$，需要两遍dfs，常数有点大。</p>
<h4 id="Part-3-n-leq-2-times-10-6"><a href="#Part-3-n-leq-2-times-10-6" class="headerlink" title="Part 3:$n\leq 2\times 10^6$"></a>Part 3:$n\leq 2\times 10^6$</h4><p>考虑转移方程到底是什么：$f_u\equiv -a_u-\sum_{v\in son_u}f_v(\bmod k)$。</p>
<p>假设以 $1$ 为根节点。</p>
<p>那么处于奇数层的 $u$ 的贡献是 $+a_u$，偶数层的 $u$ 的贡献是 $-a_u$。</p>
<p>而显然偶数层的点的最终答案是一样的。</p>
<p>奇数层的答案是偶数层的相反数。</p>
<p>因此直接暴算就好了，维护一下层数的奇偶性，就dfs也不用了。</p>
<p><del>这还是树形DP吗？</del></p>
<p>注意 $n=1$ 的特判。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,k,a[N];</span><br><span class="line">ll s1[<span class="number">2</span>],s2[<span class="number">2</span>],ans,tmp;</span><br><span class="line"><span class="type">bool</span> d[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(a[<span class="number">1</span>]?<span class="number">0</span>:<span class="number">1</span>))&amp;<span class="number">0</span>;</span><br><span class="line">	s1[<span class="number">0</span>]++; s2[<span class="number">0</span>]=a[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		d[i]=d[<span class="built_in">read</span>()]^<span class="number">1</span>;</span><br><span class="line">		s1[d[i]]+=i,s2[d[i]]+=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	tmp=(s2[<span class="number">1</span>]%k-s2[<span class="number">0</span>]%k+k)%k;</span><br><span class="line">	<span class="keyword">if</span>(tmp==<span class="number">0</span>||tmp==k<span class="number">-1</span>) ans+=s1[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span>(tmp==<span class="number">0</span>||tmp==  <span class="number">1</span>) ans+=s1[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans)&amp;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Min25筛</title>
    <url>/2020/02/25/Min25%E7%AD%9B/</url>
    <content><![CDATA[<p>Min25筛总结。</p>
<span id="more"></span>

<h3 id="一些记号"><a href="#一些记号" class="headerlink" title="一些记号"></a>一些记号</h3><p>1，记 $[A]$ 为表示式 $A$ 的真假。若 $A$ 为真则为 $1$，否则为 $0$。</p>
<p>2，记 $\mathbb{P}$ 为质数集合。</p>
<p>3，记 $P_i$ 为质数集合中第 $i$ 小的数。</p>
<p>4，记 $\min_i(p)$ 为 $i$ 的最小质因子。</p>
<p>5，记 $\pi(n)$ 为 $n$ 以内的质数个数。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这个东东其实不是筛法。。。只是每个人都这么叫。</p>
<p>Min25筛是用来解决一些求积性函数前缀和的问题。设该函数为 $f(i)$，前提为：1， $f(i)$ 为积性函数；2， $\sum_{i=1}^n[i\in\mathbb{P}]f(i)$ 可以通过 $\sum_{i=1}^n[i\in\mathbb{P}]i^k$ 很容易地表示出来，或者直接快速算；3，$f(p^k)$ 可以快速计算。</p>
<p>时间复杂度为 $O(\frac{n^{\frac{3}{4}}}{\log n})$，空间复杂度为 $O(\sqrt n)$。</p>
<p>大概能算一两次 $10^{11}$ 到 $10^{12}$ 的样子。</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>先来看看 $\sum_{i=1}^n[i\in \mathbb{P}]f(i)$ 怎么算。</p>
<p>根据前提条件，这个要用 $\sum_{i=1}^n[i\in \mathbb{P}]i^k$ 表示出来。</p>
<p>也就是 $\sum_{i=1}^n[i\in \mathbb{P}]i^k$ 怎么算。</p>
<p>设 $g(n,j)=\sum_{i=1}^{n}[i\in \mathbb{P}<del>or</del>\min_i(p)&gt; P_j]$，再看看这个怎么算。</p>
<p>相当于<strong>埃氏筛</strong>筛前 $n$ 个数中，筛完第 $j$ 个质数后，剩下的那些数的和。</p>
<p>考虑这个 $g(n,j)$ 是怎么转移的。如果从 $g(n,j-1)$ 转移过来的话，那么我们需要减掉第 $j$ 次埃氏筛过程中删掉的那些数的和。</p>
<p>也就是 $\min_{i}(p)=P_j$ 的 $i^k$ 的和。</p>
<p>分类讨论：</p>
<ul>
<li>若 $P_j^2 &gt; n$，那么第 $j$ 次埃氏筛就不会筛掉任何数，有 $g(n,j)=g(n,j-1)$。</li>
<li>若 $P_j^2\leq n$，那么第 $j$ 次埃氏筛筛的数就是 $\min_{i}(p)=P_j$ 的 $i^k$ 的和，也就是 $P_j^k(g(\left \lfloor \frac{n}{P_j} \right \rfloor,j-1)-g(P_{j-1},j-1))$。可以理解为先把一个 $P_j$ 提取出来，剩下的 $\left \lfloor \frac{n}{P_j} \right \rfloor$ 中 $\min_i(p)\geq P_j$ 的和。用 $g(\left \lfloor \frac{n}{P_j} \right \rfloor,j-1)$ 减掉前面的质数就好了。</li>
</ul>
<p>那么这个 $g(n,j)$ 可以通过 $g(*,j-1)$ 来算了。</p>
<p>即：</p>
<p>$$g(n,j)=\begin{cases}<br>g(n,j-1) &amp; \text{ if } P_j^2&gt;n \\<br>g(n,j-1)-P_j^k\left ( g(\left \lfloor \frac{n}{P_j} \right \rfloor,j-1)-g(P_{j-1},j-1) \right ) &amp; \text{ otherwise }<br>\end{cases}$$</p>
<p>而这个 $j$ 只需要考虑 $\sqrt n$ 以内的数就可以了。</p>
<p>考虑 $g(n,j)$ 怎么转移成 $\sum_{i=1}^n[i\in \mathbb{P}]i^k$，显然有 $\sum_{i=1}^n[i\in \mathbb{P}]i^k=g(n,\pi( \left \lfloor  \sqrt n\right \rfloor))$。</p>
<h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h4><p>现在再看看如何算 $\sum_{i=1}^nf(i)$。</p>
<p>设 $S(n,j)=\sum_{i=1}^{n}[\min_i(p)\geq P_j]f(i)$。</p>
<p>那么显然有：$\sum_{i=1}^nf(i)=S(n,1)+f(1)$。</p>
<p>考虑这个 $S(n,j)=\sum_{i=1}^{n}[\min_i(p)\geq P_j]f(i)$ 怎么算。</p>
<p>前面算质数算得这么辛苦，现在要用上了吧。。。</p>
<p>所以还是分类讨论一下。</p>
<ul>
<li>当 $i$ 是质数的时候，答案的和为 $\sum_{i=1}^{n}[i\in \mathbb{P}~and ~i\geq P_j]f(i)$，差分一下变成：$\sum_{i=1}^n[i \in \mathbb{P}]f(i)-\sum_{i=1}^{P_{j-1}}[i\in \mathbb{P}]f(i)$，前面一个显然是可以用 $g(n,\pi( \left \lfloor  \sqrt n\right \rfloor))$ 快速计算，后面一个也可以用 $g(P_{j-1},j-1)$ 快速计算。</li>
<li>当 $i$ 是合数的时候，由于 $f(i)$ 为积性函数，那么通过枚举最小质因子以及最小质因子的次数，删掉这个最小质因子，也就是：$\sum_{k=j}^{\sqrt n}\sum_{P_k^{q+1}\leq n}(f(P_k^q)S(\left \lfloor \frac{n}{P_k^q} \right \rfloor,k+1)+f(P_{k}^{q+1}))$。有一个 $f(P_{k}^{q+1})$ 是因为 $P_k^{q+1}$ 也被删掉了，需要补回来。</li>
</ul>
<p>因此，我们得到了：</p>
<p>$$S(n,j)=\left ( g(n,\pi( \left \lfloor  \sqrt n\right \rfloor)) \right )-g(P_{j-1},j-1))+ \sum_{k=j}^{\sqrt n}\sum_{P_k^{q+1}\leq n}(f(P_k^q)S(\left \lfloor \frac{n}{P_k^q} \right \rfloor,k+1)+f(P_{k}^{q+1}))$$</p>
<h4 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h4><p>最后来看看，需要的 $g$ 有哪些？</p>
<p>有两类，一类是 $g(\frac{n}{i},\pi( \left \lfloor  \sqrt \frac{n}{i}\right \rfloor))$，令一类是 $g(P_{j},j)$。第一类可以按照 Part 1 ，整除分块预处理出所有的 $g(\frac{n}{i},0)=\sum_{i=2}^{\frac{n}{i}}i^k$，然后枚举质数去计算。第二类实际上就是 $\sum_{i=1}^jf(P_i)^k$，而我们只需要用到 $\sqrt n$ 以内的质数，因此在筛的质数顺便算一算就可以了。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(\frac{n^{\frac{3}{4}}}{\log n})$</p>
<p>不会证。。。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="普通积性函数的前缀和"><a href="#普通积性函数的前缀和" class="headerlink" title="普通积性函数的前缀和"></a>普通积性函数的前缀和</h4><p>如 $\mu,\varphi$ 等。</p>
<p>$\mu$：当 $i$ 为质数时，$\mu(i)=-1$ ，</p>
<p>因此 $\sum_{i=1}^n[i\in \mathbb{P}]\mu(i)=-\sum_{i=1}^n[i\in \mathbb{P}]i^0$</p>
<p>$\varphi$：当 $i$ 为质数时，$\varphi(i)=i-1$，</p>
<p>因此 $\sum_{i=1}^n[i\in\mathbb{P}]\varphi(i)=(\sum_{i=1}^n[i\in \mathbb{P}]i^1)-(\sum_{i=1}^n[i\in \mathbb{P}]i^0)$</p>
<h4 id="LOJ-6053"><a href="#LOJ-6053" class="headerlink" title="LOJ 6053"></a><a href="https://loj.ac/problem/6053">LOJ 6053</a></h4><a href="/2020/02/27/%E7%AE%80%E5%8D%95%E7%9A%84%E5%87%BD%E6%95%B0-loj6053/" title="题解见此">题解见此</a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	y%=(mod<span class="number">-1</span>);</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000000</span>;</span><br><span class="line">ll n,m,Sqr,pri[N],sp[N],id1[N],id2[N],w[N];</span><br><span class="line">ll h[N],g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;pri[++tot]=i; sp[tot]=(sp[tot<span class="number">-1</span>]+i)%mod;&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;<span class="number">1ll</span>*i*pri[j]&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll n,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">1</span>||pri[j]&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll t=(n&lt;=Sqr)?id1[n]:id2[::n/n];</span><br><span class="line">	ll ans=(mod+(g[t]-sp[j<span class="number">-1</span>])-(h[t]-(j<span class="number">-1</span>))%mod)%mod;</span><br><span class="line">	<span class="keyword">if</span>(j==<span class="number">1</span>) ans+=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;=tot&amp;&amp;pri[k]*pri[k]&lt;=n;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll tmp=pri[k];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> q=<span class="number">1</span>;tmp*pri[k]&lt;=n;q++,tmp*=pri[k])</span><br><span class="line">			ans=<span class="built_in">Add</span>(ans,<span class="built_in">Add</span>(pri[k]^(q+<span class="number">1</span>),<span class="built_in">Mul</span>(pri[k]^q,<span class="built_in">S</span>(n/tmp,k+<span class="number">1</span>))));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n); Sqr=<span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="built_in">init_prime</span>(Sqr);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j=n/(n/i); w[++m]=n/i;</span><br><span class="line">		h[m]=(w[m]<span class="number">-1</span>)%mod;</span><br><span class="line">		g[m]=(w[m]%mod)*((w[m]+<span class="number">1</span>)%mod)%mod*inv2%mod<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(w[m]&lt;=Sqr) id1[w[m]]=m;</span><br><span class="line">		<span class="keyword">else</span> id2[j]=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll k=pri[i]*pri[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;k&lt;=w[j];j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> t=(w[j]/pri[i]&lt;=Sqr)?id1[w[j]/pri[i]]:id2[n/(w[j]/pri[i])];</span><br><span class="line">			h[j]=<span class="built_in">Add</span>(h[j],(mod-(h[t]-(i<span class="number">-1</span>)%mod))%mod);</span><br><span class="line">			g[j]=<span class="built_in">Add</span>(g[j],mod<span class="number">-1ll</span>*pri[i]*(g[t]-sp[i<span class="number">-1</span>]+mod)%mod);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(<span class="built_in">S</span>(n,<span class="number">1</span>)+<span class="number">1</span>)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>Min25筛</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客挑战赛37</title>
    <url>/2020/02/22/%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B37/</url>
    <content><![CDATA[<p>为什么打着打着溜了还能涨rating啊…</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/4381">链接</a></p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>sb 数学题，输出 $2^{2n-3}$ 即可。</p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>随便选几个质数，哈希判断一下就好了。</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>按题意递归即可，注意爆long long。</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>笛卡尔坐标系中 $n$ 个点，求三个点组成的三角形的面积在 $[L,R]$ 范围内的个数。</p>
<p>$n\leq 3000$，不存在重点或三点共线。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>整场比赛就这题蛮好的。。。</p>
<p>显然算面积用叉积即可。</p>
<p>枚举每一条线段，判断有多少个点符合条件。</p>
<p>如果其他 $n-2$ 个点和该线段的距离是有序的话，那么就可以二分了。</p>
<p>跟线段扯上关系的显然是极角。考虑从小到大枚举极角。</p>
<p>将点按 $x,y$ 为第一二关键字排序后，枚举线段，这样就可以保证线段从左到右，方向确定。再按极角排序，这样就能保证极角在 $[-\frac{\pi}{2},\frac{\pi}{2})$ 内。</p>
<p>于是按顺序枚举极角，每次用两次二分计算答案。做完这个极角以后，发现相对顺序变了的只有这两个点。因此交换这两个点在序列中的位置即可。</p>
<p>时间复杂度 $O(n^2\log n)$。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Abs(x) ((x)&gt;0?(x):-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">	ll x,y;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> point &amp;A,<span class="type">const</span> point &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.x!=B.x) <span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">		<span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> point <span class="keyword">operator</span>-(<span class="type">const</span> point &amp;A,<span class="type">const</span> point &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (point)&#123;A.x-B.x,A.y-B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(<span class="type">const</span> point &amp;A,<span class="type">const</span> point &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.x*B.y-B.x*A.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">area2</span><span class="params">(<span class="type">const</span> point &amp;A,<span class="type">const</span> point &amp;B,<span class="type">const</span> point &amp;C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Abs</span>(<span class="built_in">cross</span>(A-B,A-C));</span><br><span class="line">&#125;</span><br><span class="line">point p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j; db ang;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> line &amp;A,<span class="type">const</span> line &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> A.ang&lt;B.ang;</span><br><span class="line">		<span class="comment">//return cross(p[A.j]-p[A.i],p[B.j]-p[B.i])&gt;0;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">line a[N*N];</span><br><span class="line"><span class="type">int</span> n,m,id[N],pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pos[i]=id[i]=i;</span><br><span class="line">	<span class="type">int</span> x,y,l,r,mid,ans;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		&#123;</span><br><span class="line">		x=a[i].i, y=a[i].j;</span><br><span class="line">		<span class="keyword">if</span>(pos[x]&gt;pos[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		l=<span class="number">1</span>; r=pos[x];</span><br><span class="line">		<span class="keyword">for</span>(;l+<span class="number">1</span>&lt;r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">area2</span>(p[x],p[y],p[id[mid]])&lt;=S) r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(r&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area2</span>(p[x],p[y],p[id[r<span class="number">-1</span>]])&lt;=S) r--;</span><br><span class="line">		sum+=pos[x]-r;</span><br><span class="line">		l=pos[y]; r=n;</span><br><span class="line">		<span class="keyword">for</span>(;l+<span class="number">1</span>&lt;r;)</span><br><span class="line">		&#123;</span><br><span class="line">			mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">area2</span>(p[x],p[y],p[id[mid]])&lt;=S) l=mid;</span><br><span class="line">			<span class="keyword">else</span> r=mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;n&amp;&amp;<span class="built_in">area2</span>(p[x],p[y],p[id[l+<span class="number">1</span>]])&lt;=S) l++;</span><br><span class="line">		sum+=l-pos[y];</span><br><span class="line"></span><br><span class="line">		<span class="built_in">swap</span>(pos[x],pos[y]);</span><br><span class="line">		<span class="built_in">swap</span>(id[pos[x]],id[pos[y]]);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">ll L,R;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); L=<span class="built_in">read</span>(); R=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i].x=<span class="built_in">read</span>(),p[i].y=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,i+<span class="number">1</span>,n)</span><br><span class="line">		a[++m]=(line)&#123;i,j,<span class="built_in">atan2</span>(p[j].y-p[i].y,p[j].x-p[i].x)&#125;;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(<span class="built_in">solve</span>(R*<span class="number">2</span>)-<span class="built_in">solve</span>(L*<span class="number">2</span><span class="number">-1</span>))/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><a href="/2020/03/17/%E7%89%9B%E7%89%9B%E5%96%9C%E6%AC%A2%E7%9C%8B%E5%B0%8F%E5%A7%90%E5%A7%90-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B37F/" title="链接">链接</a>]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>绝地反击[JSOI 2018]</title>
    <url>/2020/02/20/%E7%BB%9D%E5%9C%B0%E5%8F%8D%E5%87%BB-JSOI-2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5316">bzoj</a></p>
<span id="more"></span>

<p>暂时速度排rank4..</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个平面直角坐标系上 $n$ 艘飞船，同时开始移动，需要移动到 $x^2+y^2=R^2$ 的圆中形成该圆的 $n$ 等分点。求飞船移动时间最大值的最小值，精度六位小数。</p>
<p>$n\leq 200$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最大值最小，显然先二分答案 $W$。</p>
<p>这时候，每个飞船在 $W$ 的时间内，在这个圆上的能走到的点是一个连续的区间。</p>
<p>假设固定了这 $n$ 个等分点，那么就可以把飞船看做X集合，点看做Y集合，飞船 $i$ 能到点 $j$，则 $X_i$ 向 $Y_j$ 连一条边，做二分图最大匹配即可。</p>
<p>但是这个 $n$ 等分点可以随意旋转，似乎无法判断是否可行。</p>
<p>假设某种旋转角度是可行的，那么继续随意旋转，直到某个 $n$ 等分点和某个区间的边界重合，这时候点和飞船的配对还是一样的。</p>
<p>那么就说明，一种合法的情况中，会有至少一个点在某个区间的端点中。</p>
<p>这样的点至多有 $2n$ 个，对应着至多 $2n$ 个偏转角度。</p>
<p>一个十分显然的做法是，枚举这 $2n$ 个偏转角度，然后做二分图最大匹配。</p>
<p>这样的话，时间复杂度为 $O(n^3\sqrt n \log M)$，其中 $\log M$ 为二分的次数，大约在 $25$ 左右。</p>
<p>这样就会获得 $50pts$ 。</p>
<p>但是若用扫描线，从小到大枚举这 $2n$ 个偏转角度呢？</p>
<p>这样每次的状态和前面的状态相比，相当于减少或增加了一条边。</p>
<p>显然可以利用上一次网络流算的答案。</p>
<p>那么退流，至多修改三条边，再跑一遍网络流就好了。</p>
<p>一次退流再推一次的时间复杂度好像是 $O(n)$ 的。</p>
<p>时间复杂度 $O(不会证)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">405</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line"><span class="type">const</span> db Pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> db eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">namespace</span> G&#123;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	<span class="type">int</span> val[M],ver[M],ne[M],head[N],cur[N],tot,d[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,s,t) head[i]=cur[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(;!que.<span class="built_in">empty</span>();que.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,s,t) d[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,s,t) cur[i]=head[i];</span><br><span class="line">		d[s]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(que.<span class="built_in">push</span>(s);!que.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(!d[v=ver[i]]&amp;&amp;val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>; que.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==t||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,r;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u],v;i&amp;&amp;res;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(d[v=ver[i]]==d[u]+<span class="number">1</span>&amp;&amp;(r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i]))))</span><br><span class="line">			&#123;</span><br><span class="line">				res-=r; val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> &amp;flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">bfs</span>();flow+=<span class="built_in">dfs</span>(s,inf));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> &amp;flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[y],pre;i;pre=i,i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==x)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==head[y]) head[y]=ne[i];</span><br><span class="line">				<span class="keyword">else</span> ne[pre]=ne[i];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[x],pre;i;pre=i,i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==y)</span><br><span class="line">			&#123;</span><br><span class="line">				flag=(!val[i]);</span><br><span class="line">				<span class="keyword">if</span>(i==head[x]) head[x]=ne[i];</span><br><span class="line">				<span class="keyword">else</span> ne[pre]=ne[i];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag) <span class="keyword">return</span>;</span><br><span class="line">		flow--;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[s];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==x)</span><br><span class="line">			&#123;</span><br><span class="line">				val[i]^=<span class="number">1</span>; val[i^<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[t];i;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==y)</span><br><span class="line">			&#123;</span><br><span class="line">				val[i]^=<span class="number">1</span>; val[i^<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">bfs</span>()) flow+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> G;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">db K,x[N],y[N],rad;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	db ang; <span class="type">int</span> x,y,opt;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(A.ang-B.ang)&lt;eps) <span class="keyword">return</span> A.opt&gt;B.opt;</span><br><span class="line">		<span class="keyword">return</span> A.ang&lt;B.ang;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(db W)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="number">0</span>; <span class="built_in">init</span>();</span><br><span class="line">	db dis,l,r,ang,b;</span><br><span class="line">	<span class="type">int</span> L,R;</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) <span class="built_in">add</span>(s,i,<span class="number">1</span>),<span class="built_in">add</span>(i+n,t,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		dis=<span class="built_in">sqrt</span>(x[i]*x[i]+y[i]*y[i]);</span><br><span class="line">		<span class="keyword">if</span>(K+W&lt;dis||dis&lt;K-W) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!(dis+K&gt;W))</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">1</span>,n) <span class="built_in">add</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ang=<span class="built_in">atan2</span>(x[i],y[i]);</span><br><span class="line">			b=<span class="built_in">acos</span>((dis*dis+K*K-W*W)/(dis*K*<span class="number">2</span>));</span><br><span class="line">			l=ang-b; r=ang+b;</span><br><span class="line">			<span class="keyword">for</span>(;l&lt;<span class="number">0</span>;l+=<span class="number">2</span>*Pi);</span><br><span class="line">			<span class="keyword">for</span>(;r&lt;<span class="number">0</span>;r+=<span class="number">2</span>*Pi);</span><br><span class="line">			L=l/rad; R=r/rad; L++; R++;</span><br><span class="line">			q[++m]=(node)&#123;l-rad*(L<span class="number">-1</span>),i,L,<span class="number">1</span>&#125;;</span><br><span class="line">			q[++m]=(node)&#123;r-rad*(R<span class="number">-1</span>),i,R,<span class="number">-1</span>&#125;;</span><br><span class="line">			<span class="keyword">if</span>(l&lt;=r) <span class="built_in">fo</span>(j,L+<span class="number">1</span>,R) <span class="built_in">add</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fo</span>(j,L+<span class="number">1</span>,n) <span class="built_in">add</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">fd</span>(j,R,<span class="number">1</span>) <span class="built_in">add</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">dinic</span>(flow);</span><br><span class="line">	<span class="keyword">if</span>(flow&gt;=n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">add</span>(q[i].x,q[i].y+n,<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">bfs</span>()) flow+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">			<span class="keyword">if</span>(flow&gt;=n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">del</span>(q[i].x,q[i].y+n,flow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>,&amp;n,&amp;K);</span><br><span class="line">	rad=<span class="number">2.0</span>*Pi/n;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">	db l=<span class="number">0</span>,r=<span class="number">282.8432</span>,mid;</span><br><span class="line">	s=<span class="number">0</span>,t=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;l+eps&lt;r;)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2.</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid;</span><br><span class="line">		<span class="keyword">else</span> l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.8lf&quot;</span>,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>二分</tag>
        <tag>计算几何</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>飞机调度[JSOI2016]</title>
    <url>/2020/02/19/%E9%A3%9E%E6%9C%BA%E8%B0%83%E5%BA%A6-JSOI2016/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5326">bzoj</a></p>
<p><a href="https://loj.ac/problem/2077">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑一架飞机，飞了某个航班后，还能飞哪个航班。</p>
<p>假设把一条航班看做点，能从航班 $i$ 到达航班 $j$ 的连一条有向边 $(i,j)$，则航班之间形成了一个 DAG。</p>
<p>则我们只需要求这个DAG的最小路径覆盖，这十分模板。</p>
<p>现在只需考虑两个航班 $i,j$ 之间是否存在有向边。那就是 $i$ 飞完后，在航班 $i$ 的中点加完油后，再沿着最短路飞往 $j$ 的起点，看时间是否赶得上。</p>
<p>因此只需求出两点间最短路径，Floyd 即可。</p>
<p>时间复杂度 $O(n^3)$，假设 $n,m$ 同阶。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pli pair<span class="string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pil pair<span class="string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1300010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],ne[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="type">int</span> d[N],cur[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="built_in">fo</span>(i,s,t) d[i]=<span class="number">0</span>;</span><br><span class="line">		q.<span class="built_in">push</span>(s); d[s]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(d[v=ver[i]]==<span class="number">0</span>&amp;&amp;val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==t||!flow) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="type">int</span> res=flow,r;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u],v;i&amp;&amp;res;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(d[v=ver[i]]==d[u]+<span class="number">1</span>&amp;&amp;val[i])</span><br><span class="line">			&#123;</span><br><span class="line">				r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,val[i]));</span><br><span class="line">				<span class="keyword">if</span>(!r) <span class="keyword">continue</span>;</span><br><span class="line">				res-=r;</span><br><span class="line">				val[i]-=r; val[i^<span class="number">1</span>]+=r;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">bfs</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(i,s,t) cur[i]=head[i];</span><br><span class="line">			flow+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Dinic::s;</span><br><span class="line"><span class="keyword">using</span> Dinic::t;</span><br><span class="line"><span class="keyword">using</span> Dinic::dinic;</span><br><span class="line"><span class="keyword">using</span> Dinic::add;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> tim[K][K],f[K][K],d[K],p[K],x[K],y[K];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> d[i]+tim[x[i]][y[i]]+p[y[i]]+f[y[i]][x[j]]&lt;=d[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) p[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n) tim[i][j]=<span class="built_in">read</span>(),f[i][j]=tim[i][j]+p[j];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i][i]-=p[i];</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">1</span>,n) <span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">fo</span>(j,<span class="number">1</span>,n)</span><br><span class="line">		<span class="keyword">if</span>(f[i][j]&gt;f[i][k]+f[k][j])</span><br><span class="line">			f[i][j]=f[i][k]+f[k][j];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x[i]=<span class="built_in">read</span>(),y[i]=<span class="built_in">read</span>(),d[i]=<span class="built_in">read</span>();</span><br><span class="line">	s=<span class="number">0</span>; t=<span class="number">2</span>*m+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">add</span>(s,i,<span class="number">1</span>),<span class="built_in">add</span>(i+m,t,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">fo</span>(j,<span class="number">1</span>,m)</span><br><span class="line">		<span class="keyword">if</span>(i!=j&amp;&amp;<span class="built_in">check</span>(i,j))</span><br><span class="line">			<span class="built_in">add</span>(i,j+m,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m-<span class="built_in">dinic</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>loj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>营救皮卡丘[ZJOI2011]</title>
    <url>/2020/02/18/%E8%90%A5%E6%95%91%E7%9A%AE%E5%8D%A1%E4%B8%98-ZJOI2011/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2324">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们考虑一个人从某个点 $i$ 到另外一个比该点编号大的点 $j$ 的情况。</p>
<p>但是这时候我们不能经过编号大于 $i$ 和 $j$ ，因此需预处理出不经过 编号比 $i,j$ 大的点，从 $i$ 到 $j$ 的最短路。这个用Floyd即可实现。</p>
<p>这样做就保证了答案的合法性。</p>
<p>现在问题变成有 $k$ 条从 $0$ 号点的路径，除了该点外不经过重复的点，边有边权及费用，每个点经过一次的模型。</p>
<p>这就类似于最小路径覆盖了。</p>
<p>对于每个非 $0$ 点拆点。</p>
<p>首先是 $(s,0,k,0)$，表示最多不超过 $k$ 个人在上面走。</p>
<p>然后是 $(i’,t,1,0),(s,i,1,0)$，代表每个点至少经过一遍，经过以后可以继续走。</p>
<p>接着对于 $i&lt;j$ 的情况，连边 $(i,j’,1,dis_{i,j})$，表示从 $i$ 走到 $j$ 的最小费用为 $dis_{i,j}$。</p>
<p>跑最小费用最大流即可。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pli pair<span class="string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pil pair<span class="string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">100000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">namespace</span> Graph&#123;</span><br><span class="line">	<span class="type">int</span> n,m,s,t;</span><br><span class="line">	<span class="type">int</span> ver[M],val[M],cost[M],ne[M],head[N],tot=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=v; cost[tot]=c; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; cost[tot]=-c;ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	ll h[N],dis[N];</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) h[i]=inf;</span><br><span class="line">		queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(h[s]=<span class="number">0</span>,q.<span class="built_in">push</span>(s);!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;h[v=ver[i]]&gt;h[u]+cost[i])</span><br><span class="line">				&#123;</span><br><span class="line">					h[v]=h[u]+cost[i];</span><br><span class="line">					<span class="keyword">if</span>(!vis[v]) q.<span class="built_in">push</span>(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			vis[u]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">		<span class="type">int</span> u; ll dis;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)&#123;<span class="keyword">return</span> A.dis&gt;B.dis;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> pv[N],pe[N];</span><br><span class="line">	priority_queue&lt;node&gt; q;</span><br><span class="line">	<span class="function">ll <span class="title">MCMF</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">spfa</span>(s,t);</span><br><span class="line">		<span class="type">int</span> flow=<span class="number">0</span>; ll co=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">			<span class="keyword">for</span>(dis[s]=<span class="number">0</span>,q.<span class="built_in">push</span>((node)&#123;s,dis[s]&#125;);!q.<span class="built_in">empty</span>();)</span><br><span class="line">			&#123;</span><br><span class="line">				node now=q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">				<span class="type">int</span> u=now.u;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]&lt;now.dis) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					v=ver[i];</span><br><span class="line">					<span class="keyword">if</span>(dis[v]+h[v]&gt;dis[u]+h[u]+cost[i])</span><br><span class="line">						dis[v]=dis[u]+h[u]+cost[i]-h[v],</span><br><span class="line">						q.<span class="built_in">push</span>((node)&#123;v,dis[v]&#125;),</span><br><span class="line">						pv[v]=u,pe[v]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(dis[t]==inf) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) h[i]+=dis[i];</span><br><span class="line">			<span class="type">int</span> tmp=<span class="number">0x3fffffff</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=pv[u]) tmp=<span class="built_in">min</span>(tmp,val[pe[u]]);</span><br><span class="line">			flow+=tmp; co+=h[t]*tmp;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> u=t,i;u!=s;u=pv[u]) i=pe[u],val[i]-=tmp,val[i^<span class="number">1</span>]+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> co;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,K,dis[N][N],s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); K=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) dis[i][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),dis[x][y]=dis[y][x]=<span class="built_in">min</span>(dis[x][y],<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">fo</span>(k,<span class="number">0</span>,n) <span class="built_in">fo</span>(i,<span class="number">0</span>,n) <span class="built_in">fo</span>(j,<span class="number">0</span>,n)</span><br><span class="line">		<span class="keyword">if</span>((k&lt;=i||k&lt;=j)&amp;&amp;dis[i][j]&gt;dis[i][k]+dis[k][j])</span><br><span class="line">			dis[i][j]=dis[i][k]+dis[k][j];</span><br><span class="line">	Graph::n=<span class="number">2</span>*n+<span class="number">2</span>; s=Graph::s=<span class="number">2</span>*n+<span class="number">2</span>; t=Graph::t=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) Graph::<span class="built_in">add</span>(s,i,<span class="number">1</span>,<span class="number">0</span>),Graph::<span class="built_in">add</span>(i+n,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	Graph::<span class="built_in">add</span>(s,<span class="number">0</span>,K,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) <span class="built_in">fo</span>(j,i+<span class="number">1</span>,n) Graph::<span class="built_in">add</span>(i,j+n,<span class="number">1</span>,dis[i][j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Graph::<span class="built_in">MCMF</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>奇怪的游戏[SCOI2012]</title>
    <url>/2020/02/18/%E5%A5%87%E6%80%AA%E7%9A%84%E6%B8%B8%E6%88%8F-SCOI2012/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2756">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一看到棋盘，先黑白染色再说。</p>
<p>若棋盘中格子是奇数，则答案不满足单调性。不过此时次数可以直接解出来，或判断无解。</p>
<p>下面讨论格子总数为偶数的情况：</p>
<p>若全染成 $x$ 可以，则全染成 $x+1$ 也可以。</p>
<p>因此二分答案一波，看看能不能让答案为 $x$。</p>
<p>一次染色显然会让黑和白格子的总数都加一。</p>
<p>因此若白色和黑子格子里的数总数不相等，则必定无解。</p>
<p>新建源汇，边权为 $x-a_{i,j}$，白点黑点相邻的连边，边权为 $\infty$，表示可以同时加上很多个 $1$。</p>
<p>跑最大流，看是否满流即可。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1610</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 20000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 100000000000000000ll</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">bool</span> f=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">	<span class="type">int</span> s,t;</span><br><span class="line">	<span class="type">int</span> ver[M],ne[M],head[N],tot=<span class="number">1</span>,cur[N],d[N]; ll val[M];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ver[++tot]=y; val[tot]=z; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">		ver[++tot]=x; val[tot]=<span class="number">0</span>; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;=t;i++) d[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;!q.<span class="built_in">empty</span>();q.<span class="built_in">pop</span>());</span><br><span class="line">		<span class="keyword">for</span>(q.<span class="built_in">push</span>(s),d[s]=<span class="number">1</span>;!q.<span class="built_in">empty</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">				<span class="keyword">if</span>(val[i]&amp;&amp;!d[v=ver[i]])</span><br><span class="line">				&#123;</span><br><span class="line">					d[v]=d[u]+<span class="number">1</span>; q.<span class="built_in">push</span>(v);</span><br><span class="line">					<span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,ll flow)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==t||!flow) <span class="keyword">return</span> flow;</span><br><span class="line">		ll res=flow,r; <span class="type">int</span> v;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[u];i&amp;&amp;res;i=ne[i])</span><br><span class="line">			<span class="keyword">if</span>(val[i]&amp;&amp;d[v=ver[i]]==d[u]+<span class="number">1</span>&amp;&amp;(r=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(res,(ll)val[i]))))</span><br><span class="line">				res-=r,val[i]-=r,val[i^<span class="number">1</span>]+=r;</span><br><span class="line">		<span class="keyword">return</span> flow-res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		ll flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;<span class="built_in">bfs</span>();flow+=<span class="built_in">dfs</span>(s,inf)) <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;=t;i++) cur[i]=head[i];</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;=t;i++) head[i]=<span class="number">0</span>; tot=<span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="type">int</span> n,m; ll a[<span class="number">44</span>][<span class="number">44</span>];</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> fy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="keyword">return</span> x&gt;<span class="number">0</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;<span class="number">0</span>&amp;&amp;y&lt;=m;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">build</span><span class="params">(ll tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>) <span class="built_in">add</span>(<span class="built_in">id</span>(i,j),t,tmp-a[i][j]),sum+=tmp-a[i][j];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">add</span>(s,<span class="built_in">id</span>(i,j),tmp-a[i][j]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,x,y;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">check</span>(x=i+fx[k],y=j+fy[k]))</span><br><span class="line">						<span class="built_in">add</span>(<span class="built_in">id</span>(i,j),<span class="built_in">id</span>(x,y),inf);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;ll sum=<span class="built_in">build</span>(x); <span class="keyword">return</span> <span class="built_in">dinic</span>()==sum;&#125;</span><br><span class="line">ll sum[<span class="number">2</span>],maxx;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> T=<span class="built_in">read</span>();T--;)</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		s=<span class="number">0</span>; t=n*m+<span class="number">1</span>;</span><br><span class="line">		sum[<span class="number">0</span>]=sum[<span class="number">1</span>]=maxx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">				a[i][j]=<span class="built_in">read</span>(),sum[(i+j)&amp;<span class="number">1</span>]+=a[i][j],maxx=<span class="built_in">max</span>(maxx,a[i][j]);</span><br><span class="line">		<span class="keyword">if</span>((n*m)&amp;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[<span class="number">0</span>]-sum[<span class="number">1</span>]&lt;maxx) &#123;<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			ll num1=<span class="built_in">build</span>(sum[<span class="number">0</span>]-sum[<span class="number">1</span>]);ll num2=<span class="built_in">dinic</span>();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(num1==num2)?num2:<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[<span class="number">0</span>]!=sum[<span class="number">1</span>]) &#123;<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			ll l=maxx,r=maxx+maxx+<span class="number">1</span>,mid;</span><br><span class="line">			<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">			&#123;</span><br><span class="line">				mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			l=r+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(l&gt;=maxx+maxx) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="built_in">build</span>(l);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">dinic</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2020/02/14/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<p>网络流建模总结。</p>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>网络流，费用流。</p>
<h2 id="一，简单点的"><a href="#一，简单点的" class="headerlink" title="一，简单点的"></a>一，简单点的</h2><h3 id="1，二分图相关问题"><a href="#1，二分图相关问题" class="headerlink" title="1，二分图相关问题"></a>1，二分图相关问题</h3><p>设 $|X|+|Y|=n$</p>
<p>二分图最大匹配：$(S,x_i,1),(x_i,y_j,1),(y_j,T,1)$，设答案为 $t$。</p>
<p>最大独立集：$n-t$</p>
<h3 id="2，多源多汇"><a href="#2，多源多汇" class="headerlink" title="2，多源多汇"></a>2，多源多汇</h3><p>直接新建超级源汇即可。</p>
<h3 id="3，节点容量"><a href="#3，节点容量" class="headerlink" title="3，节点容量"></a>3，节点容量</h3><p>直接拆点即可。</p>
<h3 id="4，最小路径覆盖"><a href="#4，最小路径覆盖" class="headerlink" title="4，最小路径覆盖"></a>4，最小路径覆盖</h3><p>前提：DAG。</p>
<p>对于每个点拆点，二分图中一条增广路径代表DAG上一条路径。</p>
<p>跑最大匹配，Y集合中若某个点不存在一个匹配则为一条路径的起点。</p>
<p>因此答案即为 $n$ - 最大匹配数。</p>
<h2 id="二，不那么简单的"><a href="#二，不那么简单的" class="headerlink" title="二，不那么简单的"></a>二，不那么简单的</h2><h3 id="1，无源汇有上下界可行流"><a href="#1，无源汇有上下界可行流" class="headerlink" title="1，无源汇有上下界可行流"></a>1，无源汇有上下界可行流</h3><p>首先每条边必须得跑下界。</p>
<p>然后考虑一个附加流，每条的边权为上界与下界的差。</p>
<p>每条边最终的流量=网络流中反向边权值+下界。</p>
<p>对于每个点必须满足流量平衡，设 $d_u$ 为入边下界之和-出边下界之和，若 $d_u&gt;0$ 则表明需要流多一点，$d_u&lt;0$ 则表明可以流少一点。</p>
<p>因此新建超级源汇，若 $d_u&lt;0$，则连边 $(u,t,-d_u)$，否则连边 $(s,u,d_u)$。当且仅当源点的出边满流时有解。</p>
<h3 id="2，有源汇有上下界可行流"><a href="#2，有源汇有上下界可行流" class="headerlink" title="2，有源汇有上下界可行流"></a>2，有源汇有上下界可行流</h3><p>加入一条下界为 $0$，上界为 $\infty$ 的从 $t$ 到 $s$ 的边，变成上面的做法。</p>
<h3 id="3，有源汇有上下界最大或最小流"><a href="#3，有源汇有上下界最大或最小流" class="headerlink" title="3，有源汇有上下界最大或最小流"></a>3，有源汇有上下界最大或最小流</h3><p>先按照 1,2 的方法处理。然后删掉 1,2 中新加的边，在残量网络中跑最大流，两次答案相加即为答案。</p>
<p>最小流的话就把源汇反过来跑最大流就好了。</p>
<p>费用流同理。</p>
<h3 id="4，最大权闭合子图"><a href="#4，最大权闭合子图" class="headerlink" title="4，最大权闭合子图"></a>4，最大权闭合子图</h3><p>有向无环图，选了某个节点 $i$，则 $i$ 的后继必须选。问一种选择的方案使得选了的节点权值和最大。</p>
<p>假设先全部选了正的，然后最小割建图，$s$ 连节点权值为正的点，$t$ 连节点权值为负的点，减去最小割的答案即可。</p>
<h2 id="三，比较难的"><a href="#三，比较难的" class="headerlink" title="三，比较难的"></a>三，比较难的</h2><h3 id="1，混合图的欧拉回路判定"><a href="#1，混合图的欧拉回路判定" class="headerlink" title="1，混合图的欧拉回路判定"></a>1，混合图的欧拉回路判定</h3><p>混合图：既有有向，又有无向边的图。</p>
<p>欧拉回路：每条边只能且必须经过一次，最终回到起点的路径。</p>
<p>首先随便给无向边定向。</p>
<p>然后设 $d_i=出度-入度$，每给一个无向边反向都会使得某个点的 $d$ 减二，某个点的 $d$ 加二。因此若 $d_i$ 为奇数则一定无解。</p>
<p>若所有 $d_i$ 均为偶数，则将原图的无向边建边，容量为 $1$。然后新建源汇，容量为 $|\frac{d_i}{2}|$ 即可。</p>
<h3 id="2，混合图的欧拉路径判定"><a href="#2，混合图的欧拉路径判定" class="headerlink" title="2，混合图的欧拉路径判定"></a>2，混合图的欧拉路径判定</h3><p>若这没有 $d_i$ 为奇数的点，转成 1。</p>
<p>若有且只有两个 $d_i$ 为奇数的点，且一个为整，一个为负。则连一条边，变成 1。</p>
<p>其他情况无解。</p>
<h3 id="3，最大密度子图"><a href="#3，最大密度子图" class="headerlink" title="3，最大密度子图"></a>3，最大密度子图</h3><p>每个边有边权，点有点权，要去选出一个子图，使得 $\frac{\sum_{i\in E}e_i}{\sum_{i\in V} v_i}$ 最大。</p>
<p>显然0/1分数规划，二分答案 $mid$，有：$\frac{\sum_{i\in E}e_i}{\sum_{i\in V} v_i}\geq mid$，即 $e-mid\times v\geq 0$。</p>
<p>一条边选了，则它的两个点都必须选。</p>
<p>十分像最大权闭合子图的形式！</p>
<p>对于原图的每条边看做一个点，做最大权闭合子图即可判断 $mid$ 是否合法。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>生成函数</title>
    <url>/2020/02/07/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>生成函数知识点总结。</p>
<span id="more"></span>

<h2 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h2><p>对于一个序列 $\{a_0,a_1\cdots\}$，我们想把这个数列表示出来，把它写成一个函数的形式。因此就有了以下的两种形式：</p>
<ul>
<li><p>普通型生成函数(OGF)：$f(x)=\sum_{i=0}a_ix^i$ ，主要用来解决无标号，组合问题。</p>
</li>
<li><p>指数级生成函数(EGF)：$f(x)=\sum_{i=0}\frac{a_i}{i!}x^i$ ，主要用来解决有标号，排列问题。</p>
</li>
</ul>
<p><strong>主要和多项式各种运算搭配使用。</strong></p>
<p>一些例子：</p>
<p>OGF：</p>
<ul>
<li><p>$\{ 1,1,1,\cdots\}$ 的OGF为：$\sum_{i=0}x^i=\frac{1}{1-x}$</p>
</li>
<li><p>$\{ 1,a,a^2,\cdots\}$ 的OGF为：$\sum_{i=0}a^ix^i=\frac{1}{1-ax}$</p>
</li>
<li><p>$\{ 1,-1,1,-1,\cdots\}$ 的OGF为：$\sum_{i=0}(-1)^ix^i=\frac{1}{1+x}$</p>
</li>
<li><p>$\frac{1}{1-x}$ 求 $n$ 次导得到的是杨辉三角第 $n+1$ 列的数。</p>
</li>
</ul>
<p>EGF：</p>
<ul>
<li>$\{1,1,1,\cdots\}$的EGF为：$\sum_{i=0}\frac{x^i}{i!}=e^x$</li>
<li>$\frac{e^x+e^{-x}}{2}=\sum_{i=0}\frac{x^{2i}}{(2i)!}$</li>
<li>$\frac{e^x-e^{-x}}{2}=\sum_{i=0}\frac{x^{2i+1}}{(2i+1)!}$</li>
<li>$\ln(1-x)=-\sum_{i=1}\frac{x^i}{i}$</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="图计数问题"><a href="#图计数问题" class="headerlink" title="图计数问题"></a>图计数问题</h3><p>以下问题，$n\leq 10^5$。模$998244353$。</p>
<h4 id="带标号无向图数量"><a href="#带标号无向图数量" class="headerlink" title="带标号无向图数量"></a>带标号无向图数量</h4><p>$f_i=2^{\binom{i}{2}}$</p>
<h4 id="带标号无向连通图数量"><a href="#带标号无向连通图数量" class="headerlink" title="带标号无向连通图数量"></a>带标号无向连通图数量</h4><p>设答案为$g_i$，其生成函数为$G$，第1题的生成函数是$F$，那么一个无向图就是由一些无向连通图组合起来的。</p>
<p>那么可以枚举一个无向图是由多少个连通图组成的，假设为$i$，那么答案跟$F^i(x)$所对应的系数有关系。因为无序，所以要除一个$i!$，因此有：</p>
<p>$F(x)=\sum_{i=0}^{\infty}\frac{G^i(x)}{i!}=e^{G(x)}$</p>
<p>同时求$\ln$得$G(x)=\ln F(x)$</p>
<p>多项式求$\ln$即可。</p>
<h4 id="带标号DAG数量"><a href="#带标号DAG数量" class="headerlink" title="带标号DAG数量"></a>带标号DAG数量</h4><p>很明显先dp，设$f_i$为$i$个点带标号的DAG数量。$f_0=1$。先假设有$j$个点度数为0，符合上述条件的$j$个点的集合有$\binom{i}{j}$个；这$j$个点可以任意向其他$i-j$个点连边，方案数有$2^{j(i-j)}$个；剩下的$i-j$个点也必须是个DAG，方案数为$f_{i-j}$乘法原理得方案数为$\binom{i}{j}2^{j(i-j)}f_{i-j}$，可是剩下的$i-j$个点中也还是有一些度数为0的点的，那么容斥一下就好了。</p>
<p>得到dp方程式：$f_i=\sum_{j=1}^i(-1)^{j-1}\binom{i}{j}2^{j(i-j)}f_{i-j}$</p>
<p>时间复杂度$O(n^2)$</p>
<p>考虑优化，式子右边很像一个卷积形式，但是$2^{j(i-j)}$很难化简。。。</p>
<p>可以发现，$2^{j(i-j)}={2^{j^2}}\times {2^{-ij}}$，有没有办法把$-ij$化成只跟$j$和$i-j$和$i$有关的东西乘起来呢？</p>
<p>初中知识：$(i-j)^2=i^2+j^2-2ij$</p>
<p>因此$2^{i(i-j)}={2^{i^2}}\times {2^{-ij}}=(\sqrt{2})^{i^2-(i-j)^2-j^2}$</p>
<p>那$\sqrt{2}$在模$998244353$意义下是什么来的呀？</p>
<p>不用怕，$2$在模$998244353$意义下有二次剩余的呢。</p>
<p>因此$dp$式可化成：</p>
<p>$$\frac{f_i}{(\sqrt{2})^{i^2}i!}=\sum_{j=1}^i\frac{(-1)^{j-1}}{(\sqrt{2})^{j^2}j!}\times \frac{f_{i-j}}{(\sqrt{2})^{({i-j})^2}(i-j)!}$$</p>
<p>设$F(i)=\frac{f_i}{(\sqrt{2})^{i^2}i!}$,$G(i)=\frac{(-1)^{i-1}}{(\sqrt{2})^{i^2}i!}(i\geq1)，G(0)=0$</p>
<p>那么$F=GF+1$，即$F=\frac{1}{1-G}$</p>
<p>多项式求逆，时间复杂度$O(n \log n)$</p>
<h4 id="带标号的DAG数量，要求图弱连通"><a href="#带标号的DAG数量，要求图弱连通" class="headerlink" title="带标号的DAG数量，要求图弱连通"></a>带标号的DAG数量，要求图弱连通</h4><p>和第二题是一样的。设$H(x)$为该题答案的指数型生成函数，$F(x)$为第三题的指数型生成函数，那么$F(x)=e^{H(x)}$，$H(x)=\ln F(x)$，多项式求$\ln$即可。</p>
<h3 id="拉格朗日反演"><a href="#拉格朗日反演" class="headerlink" title="拉格朗日反演"></a>拉格朗日反演</h3><p>若两个函数 $F(x),G(x)$ 满足：$F(G(x))=x$。</p>
<p>则有：$[x^n]G(x)=\frac{1}{n}[x^{n-1}] (\frac{x}{F(x)})^n$</p>
<p>证明：懒得证了，会用就行。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>序列[CCPC Wannafly WC Day7]</title>
    <url>/2020/02/06/%E5%BA%8F%E5%88%97-CCPC-Wannafly-WC-Day7/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/contest/4138/A">链接</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然考虑数对 $(i,j)$ 给哪些数字产生了贡献。</p>
<p>不妨设 $p_i &lt; p_j$（大于的同理），</p>
<p>这一数对给 $(p_i,p_j)$ 这个区间都贡献了 $w=2^{i-1}\times 2^{n-j}$。</p>
<p>因为这两个数选了以后，中间的不能选，两边的随便选。</p>
<p>因此只需维护一个差分数组 $f$，给 $f_{p_i+1}+=w,f_{p_j}-=w$。</p>
<p>那么枚举 $j$，用平衡树找到满足 $i&lt;j$ 且 $p_i&lt;p_j$ 中所有的 $i$ 。</p>
<p>对于 $f_{p_i+1}+=w$，只需要在平衡树上给 $p_i$ 打一个 $+2^{n-j}$ 的标记，最后乘上 $2^{i-1}$ 就可以了。</p>
<p>对于 $f_{p_j} -= w$，只需要在平衡树上记录 $2^{i-1}$ 的和就可以了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>听说有线段树做法？</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pli pair<span class="string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pil pair<span class="string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;<span class="comment">//module</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(T &amp;x,T y)</span></span>&#123;x+=y; <span class="keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mul</span><span class="params">(T &amp;x,T y)</span></span>&#123;(x*=y)%=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">namespace</span> Treap&#123;</span><br><span class="line">	<span class="type">int</span> son[N][<span class="number">2</span>],val[N],siz[N],rnd[N],cnt;</span><br><span class="line">	ll t[N],w[N],sz[N],Val[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> va)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> u=++cnt;</span><br><span class="line">		val[u]=v; siz[u]=<span class="number">1</span>; rnd[u]=<span class="built_in">rand</span>();</span><br><span class="line">		sz[u]=Val[u]=va;</span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,ll tag)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u) <span class="built_in">Add</span>(t[u],tag),<span class="built_in">Add</span>(w[u],tag);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!t[u]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">pushtag</span>(son[u][j],t[u]);</span><br><span class="line">		t[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		siz[u]=siz[son[u][<span class="number">0</span>]]+siz[son[u][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">		sz[u]=(Val[u]+sz[son[u][<span class="number">0</span>]]+sz[son[u][<span class="number">1</span>]])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="built_in">pushdown</span>(x); <span class="built_in">pushdown</span>(y);</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[y]) &#123;son[x][<span class="number">1</span>]=<span class="built_in">merge</span>(son[x][<span class="number">1</span>],y);<span class="built_in">pushup</span>(x);<span class="keyword">return</span> x;&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;son[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,son[y][<span class="number">0</span>]);<span class="built_in">pushup</span>(y);<span class="keyword">return</span> y;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_val</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(val[u]&lt;=k) x=u,<span class="built_in">split_val</span>(son[x][<span class="number">1</span>],k,son[x][<span class="number">1</span>],y);</span><br><span class="line">		<span class="keyword">else</span> y=u,<span class="built_in">split_val</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split_rank</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span> <span class="built_in">void</span>(x=y=<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(k&lt;=siz[son[u][<span class="number">0</span>]]) y=u,<span class="built_in">split_rank</span>(son[y][<span class="number">0</span>],k,x,son[y][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">else</span> x=u,<span class="built_in">split_rank</span>(son[x][<span class="number">1</span>],k-siz[son[u][<span class="number">0</span>]]<span class="number">-1</span>,son[x][<span class="number">1</span>],y);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> x,y,z;</span><br><span class="line">		<span class="built_in">split_val</span>(u,val[v],x,y);</span><br><span class="line">		u=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,v),y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">dfs</span>(son[u][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">print</span>(son[u][i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Treap;</span><br><span class="line">ll f[N],p2[N],i2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,ll w,<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">split_val</span>(u,l<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="built_in">split_val</span>(y,r,y,z);</span><br><span class="line">	<span class="keyword">if</span>(y&amp;&amp;siz[y]) f[pos]=(f[pos]+(mod-w)*sz[y])%mod,<span class="built_in">pushtag</span>(y,w);</span><br><span class="line">	u=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt,n,a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) siz[i]=son[i][<span class="number">0</span>]=son[i][<span class="number">1</span>]=rnd[i]=sz[i]=t[i]=w[i]=<span class="number">0</span>;</span><br><span class="line">	cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">newnode</span>(a[i],p2[i<span class="number">-1</span>]);</span><br><span class="line">	rt=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">solve</span>(rt,<span class="number">1</span>,a[i]<span class="number">-2</span>,p2[n-i],a[i]);</span><br><span class="line">		<span class="built_in">ins</span>(rt,i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(rt);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">Add</span>(f[a[i]+<span class="number">1</span>],w[i]*p2[i<span class="number">-1</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">FO</span>(A);</span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">19260817</span>+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	p2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),p2[i]=p2[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,(n&gt;&gt;<span class="number">1</span>)) <span class="built_in">swap</span>(a[i],a[n-i+<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">Add</span>(f[i],f[i<span class="number">-1</span>]),<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>异或询问[2020 CCPC Wannafly WC Day6]</title>
    <url>/2020/02/06/%E5%BC%82%E6%88%96%E8%AF%A2%E9%97%AE-2020-CCPC-Wannafly-WC-Day6/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一序列 $a$，定义 $f(x)=\sum_{i=1}^n[a_i\leq x]$，$q$ 组询问，求 $\sum_{i=l}^rf(i\ xor\ x)^2\bmod 998244353$</p>
<p>$n,q\leq 10^5,0\leq a_i,l,r,x &lt; 2^{30}$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先不考虑 $x$ 的限制。</p>
<p>设 $g(n)=\sum_{i=0}^nf(i)^2$，变成求 $g(r)-g(l-1)$。</p>
<p>这个 $g$ 可以二分算出来。时间复杂度 $O(\log n)$</p>
<p>然后考虑 $x$ 的限制。</p>
<p>发现当 $x$ 前几位相同时，$i\ xor\ x$是一段连续的区间。</p>
<p>枚举前 $k$ 位相同即可。</p>
<p>时间复杂度 $O(n\log n\log a_i)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pli pair<span class="string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pil pair<span class="string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,w) for(int i=(j),end_i=(w);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,w) for(int i=(j),end_i=(w);i&gt;=end_i;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;<span class="comment">//module</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(T &amp;x,T y)</span></span>&#123;x+=y; <span class="keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mul</span><span class="params">(T &amp;x,T y)</span></span>&#123;(x*=y)%=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line">ll s[N],b[N],a[N];</span><br><span class="line"><span class="type">int</span> n,q,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=<span class="built_in">upper_bound</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,x)-b<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(!y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll w=<span class="built_in">upper_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,b[y])-a<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> (s[y<span class="number">-1</span>]+(ll)(x-b[y]+<span class="number">1</span>)*w%mod*w)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (mod+<span class="built_in">ask</span>(y)-<span class="built_in">ask</span>(x<span class="number">-1</span>))%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> u=<span class="number">0</span>,t=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fd</span>(i,<span class="number">30</span>,<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		u=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">		t=d|(u&lt;&lt;i);</span><br><span class="line">		<span class="keyword">if</span>(r&gt;&gt;i&amp;<span class="number">1</span>) <span class="built_in">Add</span>(ans,<span class="built_in">ask</span>(t,t+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>)),d|=((<span class="number">1</span>&lt;&lt;i)^(u&lt;&lt;i));</span><br><span class="line">		<span class="keyword">else</span> d|=(u&lt;&lt;i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Add</span>(ans,<span class="built_in">ask</span>(d,d));</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=b[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">	m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		w=<span class="built_in">upper_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,b[i])-a<span class="number">-1</span>;</span><br><span class="line">		s[i]=(s[i<span class="number">-1</span>]+(ll)(b[i+<span class="number">1</span>]-b[i])*w%mod*w)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fo(i,1,m-1) printf(&quot;%d &quot;,s[i]);</span></span><br><span class="line">	<span class="type">int</span> l,r,x;</span><br><span class="line">	<span class="built_in">fo</span>(_,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>(); x=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="built_in">calc</span>(r,x)-<span class="built_in">calc</span>(l<span class="number">-1</span>,x)+mod)%mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>卡拉巴什的字符串[2020 CCPC Wannafly WC Day2]</title>
    <url>/2020/02/05/%E5%8D%A1%E6%8B%89%E5%B7%B4%E4%BB%80%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2-2020-CCPC-Wannafly-WC-Day2/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>设 $lcp(s,i,j)$ 在字符串 $s$ 中后缀 $i$ 和 后缀 $j$ 的最长公共前缀。</p>
<p>给一字符串 $s$，对于每个前缀 $s[1,k]$，求 $\mbox{mex}{(lcp(s[1,k],i,j)|1\leq i &lt; j \leq k)}$。</p>
<p>$n\leq 10^6$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>若某个 $lcp(i,j)$ 为 $x$，将前面的字符都减少一个，则变为 $x-1$。</p>
<p>因此若集合中有 $x$，则 $1,2,\cdots,x$ 都存在。</p>
<p>显然若集合中有 $0$，则答案为 $\max{(lcp(i,j)|1\leq i &lt; j\leq k)}+1$。</p>
<p>当集合中没有 $0$ 时，任意两个后缀的最长公共前缀均大于等于 $1$，只有字符串中都是一个字母的情况。</p>
<p>除去这种情况后，只需考虑结尾在 $k$ 位的字符串。假设倒序枚举 $j$，使得 $s[1,k]$ 中存在多个 $s[j,k]$。</p>
<p>考虑后缀自动机，若一个字符串所在的节点中，$right$ 集合大小 $\geq 2$ 就可以了。</p>
<p>考虑后缀自动机的性质，$fa[x]$ 的 $right$ 集合大小必定大于 $x$ 的大小，又由于刚加进去的点的 $right$ 集合一定是 $1$，因此 $len[fa[x]]$ 即为所求。</p>
<p>时间复杂度 $O(n)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S 26</span></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],fa[N],len[N],siz,las;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=siz;i++) <span class="built_in">memset</span>(ne[i],<span class="number">0</span>,<span class="built_in">sizeof</span>(ne[i])),len[i]=fa[i]=<span class="number">0</span>;</span><br><span class="line">		siz=las=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> cur=++siz,p=las;</span><br><span class="line">		len[cur]=len[p]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ne[p][c];p=fa[p]) ne[p][c]=cur;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[cur]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> q=ne[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[p]+<span class="number">1</span>==len[q]) fa[cur]=q;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> clone=++siz;</span><br><span class="line">				len[clone]=len[p]+<span class="number">1</span>;</span><br><span class="line">				fa[clone]=fa[q];</span><br><span class="line">				<span class="built_in">memcpy</span>(ne[clone],ne[q],<span class="built_in">sizeof</span>(ne[q]));</span><br><span class="line">				<span class="keyword">for</span>(;p&amp;&amp;ne[p][c]==q;p=fa[p]) ne[p][c]=clone;</span><br><span class="line">				fa[cur]=fa[q]=clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		las=cur;</span><br><span class="line">		<span class="keyword">return</span> len[fa[las]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> T,n,ans;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">for</span>(;T--;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">		SAM::<span class="built_in">init</span>();</span><br><span class="line">		n=<span class="built_in">strlen</span>(s); ans=<span class="number">0</span>;</span><br><span class="line">		<span class="type">bool</span> bo=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i) ans=<span class="built_in">max</span>(ans,SAM::<span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(s[i]!=s[<span class="number">0</span>]) bo=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans*bo);</span><br><span class="line">			<span class="built_in">printf</span>((i==n<span class="number">-1</span>)?<span class="string">&quot;\n&quot;</span>:<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Palindromic Magic[CF1081H]</title>
    <url>/2020/02/04/Palindromic-Magic-CF1081H/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给两个字符串 $A,B$，求本质不同的字符串个数，满足该字符串由 $A$ 的一个非空回文子串和 $B$ 的一个非空回文子串拼接而成。</p>
<p>$|A|,|B|\leq 2\times 10^5$</p>
<span id="more"></span>

<h3 id="记号与定义"><a href="#记号与定义" class="headerlink" title="记号与定义"></a>记号与定义</h3><p>为了方便，以下为一些记号及定义：</p>
<p>1，记两个字符串 $a,b$ 按顺序拼接而成的字符串为 $ab$.</p>
<p>2，记 $s^R$为 $s$ 按位翻转后的结果。</p>
<p>3，记 $\mbox border(a)$ 为一个最长的字符串，满足该字符串既是 $a$ 的前缀，也是 $a$ 的后缀。</p>
<p>4，记周期 $u$ 为对于任意的 $i$ 满足 $s_i=s_{i+u}$，则 $u$ 为字符串的一个周期。</p>
<p>5，定义循环串为：设最小的 $u$，满足 $u$ 为 $s$ 的周期，且 $u||S|$，$u\not = |S|$，则 $s$ 为循环串。</p>
<p>6，定义双回文串：$s=ab$，其中 $a,b$ 为非空回文串，则 $s$ 为双回文串。</p>
<p>7，定义非严格双回文串：严格双回文或者非空回文串。</p>
<h3 id="简单性质"><a href="#简单性质" class="headerlink" title="简单性质"></a>简单性质</h3><p>这些性质都比较显然。</p>
<p>1，若 $s$ 为回文串，则 $\mbox {border(s)}$ 为回文串。</p>
<p>2，若 $t=\mbox {border(s)}$，且 $2|t|\geq |s|$，则 $s$ 为回文当且仅当 $t$ 为回文。</p>
<p>3，若 $a,b$ 均为 $s$ 周期，且 $a+b\leq |s|$，则 $\gcd(a,b)$ 是 $s$ 的周期。</p>
<h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><h4 id="引理1"><a href="#引理1" class="headerlink" title="引理1"></a>引理1</h4><p>描述</p>
<p>$s=x_1x_2=y_1y_2=z_1z_2$，且 $|x_1|&lt;|y_1|&lt;|z_1|$，若 $x_2,y_1,y_2,z_1$ 均为非空回文串，则 $x_1,z_2$ 也是回文串。</p>
<p>证明：</p>
<p><img src="/Palindromic-Magic-CF1081H/1.png" alt="0"></p>
<h4 id="引理2"><a href="#引理2" class="headerlink" title="引理2"></a>引理2</h4><p>描述：</p>
<p>若 $s$ 为双回文串，设 $a$ 为最长回文前缀，$b$ 为最长回文后缀，$s=ax=yb$，则 $x,y$ 至少有一个为回文串。</p>
<p>证明：</p>
<p>由引理1推得。</p>
<h4 id="引理3"><a href="#引理3" class="headerlink" title="引理3"></a>引理3</h4><p>若 $s$ 有两种及以上不同的弱双回文拆分，则 $s$ 为循环串。</p>
<h4 id="引理4"><a href="#引理4" class="headerlink" title="引理4"></a>引理4</h4><p>设 $s=x_1y_1=x_2y_2=\cdots=x_my_m$ ， $\forall i\in[1,m)$， 若 $|x_i|&lt;|x_{i+1}|$，则 $x_i=\mbox{border}(x_{i+1})$ 和 $y_{i+1}=\mbox {border}(y_i)$ 至少一个成立。</p>
<p>不会证。。。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>好了写了这么多终于到重要部分了。。。</p>
<p>如果不是求本质不同，就是问有多少种是直接拼起来的话，那么答案就是 $a$ 和 $b$ 的本质不同的回文串的个数的乘积。</p>
<p>那么多出来的情况就是满足有多种双回文拆分的字符串。</p>
<p>由引理3可得：这个字符串是<strong>循环串</strong>。</p>
<p>由引理4可得：若这个字符串的一种拆分为 $s=xy$，且 $x$ 变为 $\mbox{border}(x)$ 或者 $y$ 变为 $\mbox{border}(y)$ 后仍能形成 $s$，就要减去这种情况。</p>
<p>所以答案就是( $a$ 和 $b$ 的本质不同的回文串的个数的乘积）- ($x$ 变为 $\mbox{border}(x)$后仍能形成 $s$ 的方案数) - ($y$ 变为 $\mbox{border}(y)$后仍能形成 $s$ 的方案数) + ($x$ 变为 $\mbox{border}(x)$ 且 $y$ 变为 $\mbox{border}(y)$ 后仍能形成 $s$ 的方案数)。</p>
<p>分三类讨论：</p>
<h4 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h4><p>此时要算： $a$ 和 $b$ 的本质不同的回文串的个数的乘积</p>
<p>这个是个人都会算，对 $a,b$ 串建出 $\mbox PAM$ 后，节点个数-2 就是本质不同的回文串个数了。</p>
<h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><p>此时要算：($x$ 变为 $\mbox{border}(x)$后仍能形成 $s$ 的方案数) + ($y$ 变为 $\mbox{border}(y)$后仍能形成 $s$ 的方案数) </p>
<p>$y$ 的情况和 $x$ 类似，我们只需考虑 $x$。</p>
<p>设 $x=\mbox{border}(x)w$，转换成求满足 $wS$，满足 $S,wS$ 为非空的回文串，且 $wS$ 在 $b$ 串中出现过的方案数。</p>
<p>由于 $w$ 为 $x$ 的最小正周期，所以 $w$ 不为循环串。</p>
<p>因此分类讨论一下可得：</p>
<h5 id="分类1"><a href="#分类1" class="headerlink" title="分类1"></a>分类1</h5><p>当 $|w|\leq |S|$ 时：</p>
<p>此时 $|w|\leq \frac{|wS|}{2}$，又因为 $wS$ 一定是循环串，因此 $w$ 为 $wS$ 的一个周期。</p>
<p>若 $S\not =\mbox{border}(wS)$，则 $wS$ 存在一个小于 $w$ 的周期，因此 $w$ 为循环串，不可能。</p>
<p>因此只需满足 $S=\mbox{border}(wS)$即可。</p>
<p>用哈希算个数即可。</p>
<h5 id="分类2"><a href="#分类2" class="headerlink" title="分类2"></a>分类2</h5><p>当 $|w|&gt;|S|$ 时：</p>
<p>因为 $w$ 不为循环串，由引理3得 $w$ 最多存在一种双回文拆分，又由于 $wS,S$ 为回文串，则$w=ST$，由引理2可得知，只需要找到 $w$ 的最长回文前后缀，就可以找到 $S$，这个显然可以正反串都建立 $PAM$ 后在 $fail$ 树上倍增即可。然后还是用哈希找到是否存在 $wS$ 就可以了。注意 $S$ 不能为空串的情况。 </p>
<h4 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h4><p>此时要算：$x$ 变为 $\mbox{border}(x)$ 且 $y$ 变为 $\mbox{border}(y)$ 后仍能形成 $s$ 的方案数。</p>
<p>设 $x=w_x\mbox{border}(x),y=\mbox{border}(y)w_y$，直接用哈希算出 $w_x=w_y$ 的情况就可以啦。</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>因此需要 $PAM$ + 哈希 + 倍增。</p>
<p>时间复杂度 $O(n\log n)$</p>
<p>代码<del>也就</del>250行<del>而已</del>。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pli pair<span class="string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pil pair<span class="string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> com complex<span class="string">&lt;db&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x,y) make_pair((x),(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bit(x,i) (((x)&gt;&gt;(i))&amp;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll m1=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> ll m2=<span class="number">998244853</span>;</span><br><span class="line"><span class="type">const</span> ll base=<span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add1</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y%m1; x%=m1; <span class="keyword">return</span> (x+m1)%m1;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec1</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y%m1; <span class="keyword">return</span> (x%m1+m1)%m1;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul1</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> ((x*y%m1)+m1)%m1;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add2</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y%m2; x%=m2; <span class="keyword">return</span> (x+m2)%m2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec2</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y%m2; <span class="keyword">return</span> (x%m2+m2)%m2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul2</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> ((x*y%m2)+m2)%m2;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hint</span>&#123;</span><br><span class="line">	ll a1,a2;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> +(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> Hint &amp;B) &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Add1</span>(A.a1,B.a1),<span class="built_in">Add2</span>(A.a2,B.a2)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> +(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> ll &amp;B)   &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Add1</span>(A.a1,B),<span class="built_in">Add2</span>(A.a2,B)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> -(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> Hint &amp;B) &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Dec1</span>(A.a1,B.a1),<span class="built_in">Dec2</span>(A.a2,B.a2)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> -(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> ll &amp;B)   &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Dec1</span>(A.a1,B),<span class="built_in">Dec2</span>(A.a2,B)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> *(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> Hint &amp;B) &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Mul1</span>(A.a1,B.a1),<span class="built_in">Mul2</span>(A.a2,B.a2)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> Hint <span class="keyword">operator</span> *(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> ll &amp;B)   &#123;<span class="keyword">return</span> (Hint)&#123;<span class="built_in">Mul1</span>(A.a1,B),<span class="built_in">Mul2</span>(A.a2,B)&#125;;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Hint &amp;A,<span class="type">const</span> Hint &amp;B) &#123;<span class="keyword">if</span>(A.a1!=B.a1) <span class="keyword">return</span> A.a1&lt;B.a1; <span class="keyword">return</span> A.a2&lt;B.a2;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HASH&#123;<span class="comment">//双哈希</span></span><br><span class="line">	Hint pw[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		pw[<span class="number">0</span>]=(Hint)&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) pw[i]=pw[i<span class="number">-1</span>]*base;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> Hint <span class="title">Hash</span><span class="params">(Hint *h,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h[r]-(h[l<span class="number">-1</span>]*pw[r-l+<span class="number">1</span>]);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> HASH::pw;</span><br><span class="line"><span class="keyword">using</span> HASH::Hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span>&#123;</span><br><span class="line">	<span class="type">int</span> ne[N][S],fail[N],len[N],cnt,las,pos[N],ri[N];</span><br><span class="line">	<span class="type">int</span> s[N],n;</span><br><span class="line">	<span class="type">int</span> f[N][M+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		fail[<span class="number">0</span>]=fail[<span class="number">1</span>]=<span class="number">1</span>; len[cnt=<span class="number">1</span>]=<span class="number">-1</span>; las=<span class="number">1</span>;</span><br><span class="line">		s[n=<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;s[n<span class="number">-1</span>-len[x]]!=s[n];x=fail[x]);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		s[++n]=c;</span><br><span class="line">		<span class="type">int</span> p=<span class="built_in">getfail</span>(las);</span><br><span class="line">		<span class="keyword">if</span>(!ne[p][c])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u=++cnt,q=<span class="built_in">getfail</span>(fail[p]);</span><br><span class="line">			len[u]=len[p]+<span class="number">2</span>; fail[u]=ne[q][c]; ne[p][c]=u;</span><br><span class="line">		&#125;</span><br><span class="line">		las=ne[p][c];</span><br><span class="line">		pos[n]=las;</span><br><span class="line">		ri[pos[n]]=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) <span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt) f[i][<span class="number">0</span>]=fail[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,M)</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,cnt)</span><br><span class="line">				f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> x=pos[r];</span><br><span class="line">		<span class="keyword">if</span>(len[x]&lt;=l) <span class="keyword">return</span> len[x];</span><br><span class="line">		<span class="built_in">fd</span>(i,M,<span class="number">0</span>) <span class="keyword">if</span>(len[f[x][i]]&gt;l) x=f[x][i];</span><br><span class="line">		<span class="keyword">return</span> len[fail[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> len)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">ask</span>(r,len)==len;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line">PAM la,ra,lb,rb;</span><br><span class="line">Hint ha[N],hb[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a+<span class="number">1</span>,b+<span class="number">1</span>);</span><br><span class="line">	n=<span class="built_in">strlen</span>(a+<span class="number">1</span>); m=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">	HASH::<span class="built_in">init</span>(<span class="built_in">max</span>(n,m)+<span class="number">2</span>);</span><br><span class="line">	ha[<span class="number">0</span>]=hb[<span class="number">0</span>]=(Hint)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		ha[i]=ha[i<span class="number">-1</span>]*base+(a[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>),hb[i]=hb[i<span class="number">-1</span>]*base+(b[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">	la.<span class="built_in">build</span>(a); lb.<span class="built_in">build</span>(b);</span><br><span class="line">	<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); <span class="built_in">reverse</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>);</span><br><span class="line">	ra.<span class="built_in">build</span>(a); rb.<span class="built_in">build</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Work1&#123;</span><br><span class="line">	<span class="comment">//x-&gt;border(x) or y-&gt;border(y)</span></span><br><span class="line">	<span class="comment">//dec</span></span><br><span class="line">	map&lt;Hint,<span class="type">int</span>&gt; ma,mb,wa,wb;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,la.cnt)<span class="comment">//A</span></span><br><span class="line">		&#123;</span><br><span class="line">			ma[<span class="built_in">Hash</span>(ha,la.ri[i]-la.len[i]+<span class="number">1</span>,la.ri[i])]++;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>((t=la.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">				<span class="keyword">if</span>(la.len[i]&lt;=(la.len[t]&lt;&lt;<span class="number">1</span>))<span class="comment">// |T|&lt;=2|S|</span></span><br><span class="line">					wa[<span class="built_in">Hash</span>(ha,la.ri[i]-(la.len[i]-la.len[t])+<span class="number">1</span>,la.ri[i])]++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,lb.cnt)<span class="comment">//B</span></span><br><span class="line">		&#123;</span><br><span class="line">			mb[<span class="built_in">Hash</span>(hb,lb.ri[i]-lb.len[i]+<span class="number">1</span>,lb.ri[i])]++;</span><br><span class="line">			<span class="keyword">if</span>((t=lb.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">				<span class="keyword">if</span>(lb.len[i]&lt;=(lb.len[t]&lt;&lt;<span class="number">1</span>))<span class="comment">// |T|&lt;=2|S|</span></span><br><span class="line">					wb[<span class="built_in">Hash</span>(hb,lb.ri[i]-lb.len[i]+<span class="number">1</span>,lb.ri[i]-lb.len[t])]++;<span class="comment">//!!!!!</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="type">int</span> l,r,t,bor,len;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,la.cnt)</span><br><span class="line">		<span class="keyword">if</span>((t=la.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			l=la.ri[i]-(la.len[i]-la.len[t])+<span class="number">1</span>;</span><br><span class="line">			r=la.ri[i];</span><br><span class="line">			len=r-l+<span class="number">1</span>;</span><br><span class="line">			ans-=wb[<span class="built_in">Hash</span>(ha,l,r)];</span><br><span class="line"></span><br><span class="line">			bor=la.<span class="built_in">ask</span>(r,len);</span><br><span class="line">			<span class="keyword">if</span>(len==bor) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(ra.<span class="built_in">check</span>(n-l+<span class="number">1</span>,len-bor))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(mb.<span class="built_in">count</span>(<span class="built_in">Hash</span>(ha,l,r)*pw[len-bor]+<span class="built_in">Hash</span>(ha,l,r-bor))) ans--;<span class="comment">//w+S</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			bor=ra.<span class="built_in">ask</span>(n-l+<span class="number">1</span>,len);</span><br><span class="line">			<span class="keyword">if</span>(la.<span class="built_in">check</span>(r,len-bor))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(mb.<span class="built_in">count</span>(<span class="built_in">Hash</span>(ha,l,r)*pw[bor]+<span class="built_in">Hash</span>(ha,l,l+bor<span class="number">-1</span>))) ans--;<span class="comment">//w+S</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,lb.cnt)</span><br><span class="line">		<span class="keyword">if</span>((t=lb.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			l=lb.ri[i]-lb.len[i]+<span class="number">1</span>;</span><br><span class="line">			r=lb.ri[i]-lb.len[t];</span><br><span class="line">			len=r-l+<span class="number">1</span>;</span><br><span class="line">			ans-=wa[<span class="built_in">Hash</span>(hb,l,r)];</span><br><span class="line"></span><br><span class="line">			bor=lb.<span class="built_in">ask</span>(r,len);</span><br><span class="line">			<span class="keyword">if</span>(len==bor) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(rb.<span class="built_in">check</span>(m-l+<span class="number">1</span>,len-bor))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(ma.<span class="built_in">count</span>(<span class="built_in">Hash</span>(hb,r-bor+<span class="number">1</span>,r)*pw[len]+<span class="built_in">Hash</span>(hb,l,r))) ans--;<span class="comment">//S+w</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			bor=rb.<span class="built_in">ask</span>(m-l+<span class="number">1</span>,len);</span><br><span class="line">			<span class="keyword">if</span>(lb.<span class="built_in">check</span>(r,len-bor))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(ma.<span class="built_in">count</span>(<span class="built_in">Hash</span>(hb,l+bor,r)*pw[len]+<span class="built_in">Hash</span>(hb,l,r))) ans--;<span class="comment">//S+w</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Work2&#123;</span><br><span class="line">	<span class="comment">// x-&gt;border(x) and y-&gt;border(y)</span></span><br><span class="line">	<span class="comment">// add</span></span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	map&lt;Hint,<span class="type">int</span>&gt; fa,fb;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span><span class="comment">//S=XaYb</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,la.cnt)</span><br><span class="line">			<span class="keyword">if</span>((t=la.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">				fa[<span class="built_in">Hash</span>(ha,la.ri[i]-(la.len[i]-la.len[t])+<span class="number">1</span>,la.ri[i])]++;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,lb.cnt)</span><br><span class="line">			<span class="keyword">if</span>((t=lb.fail[i])&gt;=<span class="number">2</span>)</span><br><span class="line">				fb[<span class="built_in">Hash</span>(hb,lb.ri[i]-lb.len[i]+<span class="number">1</span>,lb.ri[i]-lb.len[t])]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:fa) ans+=(ll)v.se*fb[v.fi];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ans=<span class="number">1ll</span>*(la.cnt<span class="number">-1</span>)*(lb.cnt<span class="number">-1</span>);</span><br><span class="line">	Work1::<span class="built_in">work</span>();</span><br><span class="line">	Work2::<span class="built_in">work</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>哈希</tag>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title>NIM游戏[牛客挑战赛36G]</title>
    <url>/2020/01/30/NIM%E6%B8%B8%E6%88%8F-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B36G/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://ac.nowcoder.com/acm/problem/54837">链接</a></p>
<span id="more"></span>

<h3 id="题面描述"><a href="#题面描述" class="headerlink" title="题面描述"></a>题面描述</h3><p>$n$ 个栈，第 $i$ 个栈有 $a_i$ 个石子，一共有 $b_i$ 中排列方式。选择一个栈后可任意决定其排列方式。</p>
<p>玩$\mbox{NIM}$游戏，每个人每次在某个栈中取走若干石子，不能取的人输。</p>
<p>求有多少种选栈的方案使得先手必败。</p>
<p>两个方案不同当且仅当存在一个栈仅出现在其中一个方案中或在两个方案中栈中物品的排列方式不同。</p>
<p>$n\leq 10^7,a_i\leq 10^5$</p>
<p>时限3s。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设 $m=\max\{a_i\}$</p>
<p>要先手必败，那么异或和为0。</p>
<p>显而易见的，答案就是所有的 $(b_ix^{a_i}+1)$ 的异或卷积的常数项。</p>
<p>暴力$\mbox{FWT}$，复杂度 $O(m^2\log m)$。</p>
<p>但是我们发现每个函数都只有两项有数。</p>
<p>分析下$\mbox{FWT}$的性质发现自己想不到…</p>
<p>如果是算卷积，可以分治$\mbox{FFT}$。</p>
<p>那不妨试试分治$\mbox{FWT}$ ?</p>
<p>我们同时处理次数连续的区间：</p>
<p>分治的过程中，二进制表示下，前面若干位是相同的。</p>
<p>所以，当 $x$ 的次数的范围是 $[l,l+2^k)$ 的时候，做完$\mbox{FWT}$以后，$x$ 的次数在 $[0,2^k)\bigcup[l,l+2^k)$ 这个范围内有数。</p>
<p>那么就设 $fa$ 为次数是 $[0,2^k)$ 的答案，$fb$ 为 $[l,l+2^k)$ 的答案。</p>
<p>分治时，若一个分支是 $[l,l+2^k)$，则求的是 $[l+2^{k-1})$ 和 $[l+2^{k-1},l+2^k)$ 的答案。</p>
<p>分四类讨论一下就可以得到新的 $fa,fb$ 的值。</p>
<p>每次分治，$\mbox{FWT}$的次数减少一半。</p>
<p>时间复杂度 $T(m)=2T(m/2)+O(m\log m)$，即 $O(m\log ^2 m)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j);i&lt;(k);i++)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> ll inv2=(mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line">ll x,y;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fwt</span><span class="params">(<span class="type">int</span> n,ll *a,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,p=(i&lt;&lt;<span class="number">1</span>);j&lt;n;j+=p)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,l=j+k,r=l+i;k&lt;i;k++,l++,r++)</span><br><span class="line">			&#123;</span><br><span class="line">				x=a[l],y=a[r]; a[l]=x+y,a[r]=x-y;</span><br><span class="line">				a[l]&gt;=mod?(a[l]-=mod):<span class="number">0</span>;</span><br><span class="line">				a[r]&lt;<span class="number">0</span>?(a[r]+=mod):<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(t!=<span class="number">1</span>) (a[l]*=inv2)%=mod,(a[r]*=inv2)%=mod;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fa[N],fb[N],la[N],lb[N],ra[N],rb[N],g1[N],g2[N],g3[N],g4[N];</span><br><span class="line">ll a[N],b[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!m) &#123;fa[l]=a[l]; fb[l]=b[l]; <span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="type">int</span> r=l+m;</span><br><span class="line">	<span class="built_in">solve</span>(l,m&gt;&gt;<span class="number">1</span>); <span class="built_in">solve</span>(r,m&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=i+l,k=i+r;i&lt;m;i++,j++,k++) la[i]=fa[j],ra[i]=fb[j],lb[i]=fa[k],rb[i]=fb[k];</span><br><span class="line">	<span class="built_in">fwt</span>(m,la,<span class="number">1</span>); <span class="built_in">fwt</span>(m,ra,<span class="number">1</span>); <span class="built_in">fwt</span>(m,lb,<span class="number">1</span>); <span class="built_in">fwt</span>(m,rb,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,m) g1[i]=la[i]*lb[i]%mod,g2[i]=la[i]*rb[i]%mod,g3[i]=ra[i]*lb[i]%mod,g4[i]=ra[i]*rb[i]%mod;</span><br><span class="line">	<span class="built_in">fwt</span>(m,g1,<span class="number">-1</span>); <span class="built_in">fwt</span>(m,g2,<span class="number">-1</span>); <span class="built_in">fwt</span>(m,g3,<span class="number">-1</span>); <span class="built_in">fwt</span>(m,g4,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=i+l,k=i+r;i&lt;m;i++,j++,k++) fa[j]=g1[i],fb[j]=g3[i],fb[k]=g2[i],fa[k]=g4[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,N) a[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> q,m,x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		q=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		x=(a[q]+b[q]*m)%mod;</span><br><span class="line">		y=(a[q]*m+b[q])%mod;</span><br><span class="line">		a[q]=x; b[q]=y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">0</span>,N/<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(fa[<span class="number">0</span>]+fb[<span class="number">0</span>]+mod<span class="number">-1</span>)%mod);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>博弈论</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Triple[CF1119H]</title>
    <url>/2020/01/29/Triple-CF1119H/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><a href="https://codeforces.com/problemset/problem/1119/H">链接</a></p>
<span id="more"></span>

<p>给三年整数 $x,y,z$，然后有 $n$ 个数组，第 $i$ 个数组有 $x$ 个 $a_i$，$y$ 个 $b_i$，$z$ 个 $c_i$。</p>
<p>一种方案为：从 $n$ 个数组中各选择 $1$ 个数。</p>
<p>对于每个 $t\in[0,2^k)$，求出有多少种方案，使得该方案中的数的异或和为 $t$，对 $998244353$ 取模。</p>
<p>$1\leq n \leq 10^5,1\leq k \leq 17$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个显然的做法是每个数组对应一个生成函数，都做一次 $\mbox{FWT}$。时间复杂度 $O(nk2^k)$，显然不行。</p>
<p>但这个生成函数只有三个位置有数，比较特殊。</p>
<p>考虑将 $\{ a_i,b_i,c_i\}$ 变为 $\{0,a_i\bigoplus b_i,a_i\bigoplus c_i\}$，最后异或上 $\bigoplus_{i=1}^n a_i$ 就是答案。</p>
<p>那么 $\mbox{FWT}$ 以后就只剩下四种答案：$x+y+z$,$x+y-z$,$x-y+z$,$x-y-z$。</p>
<p>最后乘起来的结果就是 $(x+y+z)^{a_1}(x+y-z)^{a_2}(x-y+z)^{a_3}(x-y-z)^{a_4}$</p>
<p>求出了 $a_1,a_2,a_3,a_4$ 就可以了。</p>
<p>首先有 $a_1+a_2+a_3+a_4=n$</p>
<p>我们发现当 $x=0,y=1,z=0$ 的时候答案只跟 $y$ 有关，由于$FWT(A+B)=FWT(A)+FWT(B)$，那么对于每个 $i$ ，将 $f[a_i\bigoplus b_i]$ 加 $1$ 后，$FWT$ 一下，求出的 $f_i$ 就有： $a_1+a_2-a_3-a_4=f_i$。</p>
<p>同理对 $z$ 进行同样的处理，有 $a_1-a_2+a_3-a_4=f_i$。</p>
<p>还差一个方程就可以解出来了。</p>
<p>可以发现，我们上面处理的是 $a$^$b$ 和 $a$^$c$ 的，还有一个 $b$^$c$ 没有处理。</p>
<p>考虑变为 $\{a_i\bigoplus b_i,0,c_i\bigoplus b_i\}$，这时候会有四种答案：$x+y+z,x+y-z,-x+y+z,-x+y-z$</p>
<p>将 $f[b_i\bigoplus c_i]$ 加 $1$ 后 $FWT$，就相当于 $a_1-a_2+a_4-a_3=f_i$</p>
<p>于是便可以解出 $a_1,a_2,a_3,a_4$。</p>
<p>然后快速幂，再 $UFWT$ 一下就好了。</p>
<p>时间复杂度 $O((n+2^k)k)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">const int N=1&lt;&lt;20;</span><br><span class="line">const ll mod=998244353;</span><br><span class="line">const ll inv2=(mod+1)/2;</span><br><span class="line">const ll inv4=inv2*inv2%mod;</span><br><span class="line">inline int read()</span><br><span class="line">&#123;</span><br><span class="line">	int x=0; char ch=getchar(); bool f=0;</span><br><span class="line">	for(;ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;;ch=getchar()) if(ch==&#x27;-&#x27;) f=1;</span><br><span class="line">	for(;ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;;ch=getchar()) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48);</span><br><span class="line">	return f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line">inline ll Pow(ll x,int y)</span><br><span class="line">&#123;</span><br><span class="line">	ll ans=1;</span><br><span class="line">	for(;y;y&gt;&gt;=1,x=x*x%mod) if(y&amp;1) ans=ans*x%mod;</span><br><span class="line">	return ans;</span><br><span class="line">&#125;</span><br><span class="line">inline void fwt(int n,ll *a,int t)</span><br><span class="line">&#123;</span><br><span class="line">	ll x,y;</span><br><span class="line">	for(int i=1;i&lt;n;i&lt;&lt;=1)</span><br><span class="line">		for(int j=0;j&lt;n;j+=(i&lt;&lt;1))</span><br><span class="line">			for(int k=0;k&lt;i;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				x=a[j+k],y=a[i+j+k];</span><br><span class="line">				a[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">				if(t!=1) (a[j+k]*=inv2)%=mod,(a[i+j+k]*=inv2)%=mod;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line">int n,k,m,a,b,c,s;</span><br><span class="line">ll x,y,z,d1,d2,d3,d4,f1[N],f2[N],f3[N],g[N];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	n=read(); k=read();</span><br><span class="line">	m=1&lt;&lt;k;</span><br><span class="line">	x=read(),y=read(),z=read();</span><br><span class="line">	for(int i=1;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a=read(),b=read(),c=read();</span><br><span class="line">		f1[a^b]++,f2[a^c]++,f3[b^c]++;</span><br><span class="line">		s^=a;</span><br><span class="line">	&#125;</span><br><span class="line">	fwt(m,f1,1); fwt(m,f2,1); fwt(m,f3,1);</span><br><span class="line">	d1=(x+y+z)%mod; d2=(mod+x+y-z)%mod;</span><br><span class="line">	d3=(x-y+z+mod)%mod; d4=(x-y-z+mod+mod)%mod;</span><br><span class="line">	for(int i=0;i&lt;m;i++)</span><br><span class="line">		g[i]=</span><br><span class="line">			Pow(d1,((ll)n+f1[i]+f2[i]+f3[i])%mod*inv4%mod)*</span><br><span class="line">			Pow(d2,((ll)n+f1[i]-f2[i]-f3[i]+mod*2)%mod*inv4%mod)%mod*</span><br><span class="line">			Pow(d3,((ll)n-f1[i]+f2[i]-f3[i]+mod*2)%mod*inv4%mod)%mod*</span><br><span class="line">			Pow(d4,((ll)n-f1[i]-f2[i]+f3[i]+mod*2)%mod*inv4%mod)%mod;</span><br><span class="line">	fwt(m,g,-1);</span><br><span class="line">	for(int i=0;i&lt;m;i++) printf(&quot;%lld &quot;,g[i^s]);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Distance Between Sweethearts</title>
    <url>/2020/01/29/Distance-Between-Sweethearts/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/gym/101955/problem/I">链接</a></p>
<span id="more"></span>

<p>给定六个不大于 $2000$ 的整数，$UI_{g},UA_{g},UG_{g},UI_{b},UA_{b},UG_{b}$，</p>
<p>求和：$\max\{|I_b-I_g|,|A_b-A_g|,|G_b-G_g|\}\bigoplus I_b\bigoplus A_b\bigoplus G_b\bigoplus I_g\bigoplus A_g\bigoplus G_g$，且满足：</p>
<p> $I_{g}\in\{0,UI_{g}\},A_{g}\in\{0,UA_{g}\},G_{g}\in\{0,UG_{g}\}$</p>
<p>$I_{b}\in\{0,UI_{b}\},A_{b}\in\{0,UA_{b}\},G_{b}\in\{0,UG_{b}\}$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>那个 $\max$ 比较烦人，把那个 $\max$ 扔掉，假设为 $k=\max\{x,y,z\}$。</p>
<p>要求出 $f_i$，表示在最大值为 $k$ 的情况下 $I_b\bigoplus A_b\bigoplus G_b\bigoplus I_g\bigoplus A_g\bigoplus G_g=i$ 的方案数。</p>
<p>但这样显然没法做，因为我们无法确定最大值是否为 $k$。</p>
<p>为了确定最大值为 $k$，我们可以利用 $[1,k-1]$ 的答案。</p>
<p>也就是把 $f_i$ 的状态改为 ：在最大值 $\leq k$ 的情况下 $I_b\bigoplus A_b\bigoplus G_b\bigoplus I_g\bigoplus A_g\bigoplus G_g=i$ 的方案数。</p>
<p>把六个异或的顺序改一改：$(I_b\bigoplus I_g)\bigoplus (G_b\bigoplus G_g)\bigoplus (A_b\bigoplus A_g)=i$</p>
<p>只需要看统计 $I_b\bigoplus I_g$ 的出现次数($G,A$ 同理)，然后 $\mbox {FWT}$ 就可以了。</p>
<p>此时可以把 $I_b,I_g$ 相差不超过 $k$ 的统计一下就好了。</p>
<p>时间复杂度 $O(n^2\log n)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2048</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fwt</span><span class="params">(<span class="type">int</span> n,ll *a,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x,y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				x=a[j+k],y=a[i+j+k];</span><br><span class="line">				a[j+k]=x+y,a[i+j+k]=x-y;</span><br><span class="line">				<span class="keyword">if</span>(t!=<span class="number">1</span>) a[j+k]=a[j+k]/<span class="number">2</span>,a[i+j+k]=a[i+j+k]/<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(ll *a,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="built_in">min</span>(x,y-z)) a[i^(i+z)]++;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt[<span class="number">3</span>][N],a[<span class="number">3</span>][N],las[N];</span><br><span class="line">ull ans;</span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>],g[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> _=<span class="built_in">read</span>(),T=<span class="number">1</span>;T&lt;=_;T++)</span><br><span class="line">	&#123;</span><br><span class="line">		b[<span class="number">0</span>]=<span class="built_in">read</span>(),b[<span class="number">1</span>]=<span class="built_in">read</span>(),b[<span class="number">2</span>]=<span class="built_in">read</span>();</span><br><span class="line">		g[<span class="number">0</span>]=<span class="built_in">read</span>(),g[<span class="number">1</span>]=<span class="built_in">read</span>(),g[<span class="number">2</span>]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) cnt[<span class="number">0</span>][i]=cnt[<span class="number">1</span>][i]=cnt[<span class="number">2</span>][i]=las[i]=<span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,<span class="number">2000</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">2</span>) <span class="built_in">get</span>(cnt[j],b[j],g[j],i);</span><br><span class="line">			<span class="keyword">if</span>(i) <span class="built_in">fo</span>(j,<span class="number">0</span>,<span class="number">2</span>) <span class="built_in">get</span>(cnt[j],g[j],b[j],i);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) <span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">2</span>) a[k][j]=cnt[k][j];</span><br><span class="line">			<span class="built_in">fo</span>(k,<span class="number">0</span>,<span class="number">2</span>) <span class="built_in">fwt</span>(N,a[k],<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) a[<span class="number">0</span>][j]=a[<span class="number">0</span>][j]*a[<span class="number">1</span>][j]*a[<span class="number">2</span>][j];</span><br><span class="line">			<span class="built_in">fwt</span>(N,a[<span class="number">0</span>],<span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) ans+=(a[<span class="number">0</span>][j]-las[j])*(j^i),las[j]=a[<span class="number">0</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %llu\n&quot;</span>,T,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>FWT</title>
    <url>/2020/01/29/FWT/</url>
    <content><![CDATA[<p>$\mbox{FWT}$ 知识点总结</p>
<span id="more"></span>

<h2 id="FWT及FMT"><a href="#FWT及FMT" class="headerlink" title="FWT及FMT"></a>FWT及FMT</h2><h3 id="先来看看FMT"><a href="#先来看看FMT" class="headerlink" title="先来看看FMT"></a>先来看看FMT</h3><p>我们记得，$\mbox{FFT}$做的是这样的卷积：$\sum_{i+j=k}A_iB_j=C_k$</p>
<p>但如果我们把符号换一下呢？</p>
<p>比如说或/与卷积：$\sum_{i|j=k}A_iB_j=C_k,\sum_{i&amp;j=k}A_iB_j=C_k$</p>
<p>还是像fft的思路，考虑一个数组，有个变换，使得数组变换后能实现对应位置相乘。</p>
<p>即：$FMT(A)[x]\cdot FMT(B)[x]=FMT(C)[x]$.</p>
<p>当是或卷积时，$FMT(A)[x]=\sum_{i|x}A_i$.</p>
<p>因为：$(\sum_{i|x}A_i)(\sum_{j|x}B_j)=\sum_{i|x,j|x}A_iB_j=\sum_{k|x}(\sum_{i|j=k}A_iB_j)=\sum_{k|x}C_k$</p>
<p>那如何快速求 $FMT(A)$ 及其逆变换呢？</p>
<p>与卷积与或卷积类似：$FMT(A)[x]=\sum_{x|i}A_i$</p>
<p>考虑基于枚举二进制位的分治，假设第 $i$ 位的二进制已经处理完了，然后看加上第 $i+1$ 位后答案应该是怎么样的：如果这一位是 0，那么不变，否则因为是枚举子集，加上 $i+1$ 位不取的结果即可。</p>
<p>那么逆变换就是把正变换的贡献减去即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//或卷积模板,opt=1时为正变换，-1时为逆变换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FMT</span><span class="params">(<span class="type">int</span> * a, <span class="type">int</span> n, <span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;n;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">                A[i + j + k]+=opt*A[j + k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或卷积的正变换其实就是高维前缀和（子集和），逆变换就是子集反演。</p>
<p>与卷积和或卷积类似了。</p>
<p>时间复杂度$O(n\log n)$</p>
<h2 id="再来看看FWT"><a href="#再来看看FWT" class="headerlink" title="再来看看FWT"></a>再来看看FWT</h2><p>定义 $k$ 进制不进位加法：$a\bigoplus b=(a+b) \% k$，减法类似。</p>
<p>FWT实际上就是求：$C_k=\sum_{i\bigoplus j=k}A_iB_j$</p>
<h3 id="2进制FWT"><a href="#2进制FWT" class="headerlink" title="2进制FWT"></a>2进制FWT</h3><p>此时不进位加法即为异或。以下 $n$ 满足 $n=2^x$</p>
<p>还是像fft的思路，考虑一个数组竖着排成一列变成一个 $n \times 1$ 的矩阵，然后有个变换，使得数组变换后能实现对应位置相乘。这个变换的实现就是令数组<strong>左乘</strong>一个 $n*n$ 的矩阵（可以回去看看fft的过程）。假设这个矩阵是 $T$，第 $i$ 行第 $j$ 列的数是 $T_{i,j}$</p>
<p>然后我们令$FWT(A)=TA$</p>
<p>因为要满足对应位置相乘，这里就是$FWT(A)[x]\cdot FWT(B)[x]=FWT(C)[x]$</p>
<p>由于$FWT(A)[x]=\sum_{i=0}^nT_{x,i}A_i$</p>
<p>代入上式得：$\sum_{i=0}^{n-1}T_{x,i}A_i\sum_{j=0}^{n-1}T_{x,j}B_j=\sum_{k=0}^{n-1}T_{x,k}C_k$</p>
<p>同时因为 $C_k=\sum_{i\bigoplus j=k}A_iB_j$</p>
<p>代入得：</p>
<p>$$\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}T_{x,i}T_{x,j}A_iB_j=\sum_{k=0}^{n-1}\sum_{i\bigoplus j=k}T_{x,k}A_iB_j$$</p>
<p>因此满足 $T_{x,i}T_{x,j}=T_{x,i\bigoplus j}=T_{x,(i+j)\bmod 2}$ 即可。</p>
<p>因为 $T_{x,i}$ 满足上述性质，把 $i$ 写成二进制形式：$i=\overline{i_0i_1\dots i_m}(2)$</p>
<p>因此 $T_{x,i}$ 可以等于 $\Pi <em>{j=0}^m T</em>{x_j,i_j}$ </p>
<p>同时还需要快速算出 $FWT(A)$:</p>
<p>不妨设 $i$ 在二进制中最高位为 $i_1$，舍去最高位后为 $i_0$.</p>
<p>考虑分治：</p>
<p>$$FWT(A)<em>n[i]\=\sum</em>{k=0}^{n-1}T_{i,k}A_k\=T_{i_1,0}\sum_{k=0}^{n/2-1}T_{i_0,k_0}A_{k}+T_{i_1,1}\sum_{k=n/2}^{n-1}T_{i_0,k_0}A_k\=T_{i_1,0}FWT(A_0)<em>{\frac{n}{2}}[i]+T</em>{i_1,1}FWT(A_1)_{\frac{n}{2}}[i]$$</p>
<p>其中 $A_0$ 为 $A$ 的前 $n/2$ 位，$A_1$ 为后 $n/2$ 位。</p>
<p>因此只要能找到合适的 $T_{x,i}$，就能实现了。</p>
<p>只需考虑 $0\le x,i &lt; 2$ 的情况即可。</p>
<p>满足：</p>
<p> $$T_{0,0}\times T_{0,0}=T_{0,0}\\T_{0,0}\times T_{0,1}=T_{0,1}\\T_{0,1}\times T_{0,1}=T_{0,0}\\T_{1,0}\times T_{1,0}=T_{1,0}\\T_{1,0}\times T_{1,1}=T_{1,1}\\T_{1,1}\times T_{1,1}=T_{1,0}\$$</p>
<p>考虑写成矩阵形式，构造可得：</p>
<p>$$\begin{bmatrix} T_{0,0}&amp;T_{0,1}\\ T_{1,0}&amp;T_{1,1}\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;-1\end{bmatrix}=\begin{bmatrix}\frac{1}{2}&amp;\frac{1}{2}\\\frac{1}{2}&amp;-\frac{1}{2}\end{bmatrix}^{-1}$$</p>
<p>带进程序里即可。</p>
<p>一个2进制FWT的模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FWT</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				ll x = a[j+k],y = a[i+j+k];</span><br><span class="line">				a[j+k] = x+y; a[i+j+k] = x-y+mod;</span><br><span class="line">				<span class="keyword">if</span>(a[j+k] &gt;= mod) a[j+k] -= mod;</span><br><span class="line">				<span class="keyword">if</span>(a[i+j+k] &gt;= mod) a[i+j+k] -= mod;</span><br><span class="line">				<span class="keyword">if</span>(t == <span class="number">-1</span>) a[j+k] = (a[j+k]*inv2)%mod,a[i+j+k] = (a[i+j+k]*inv2)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2进制 $\mbox{FWT}$ 的正变换实际上就是 $FWT[i]=\sum_{j}A_j(-1)^{|i&amp;j|}$.</p>
<h3 id="k进制FWT"><a href="#k进制FWT" class="headerlink" title="k进制FWT"></a>k进制FWT</h3><p>以下 $n$ 满足 $n=k^x$</p>
<p>前面同理，但还是要满足 $T_{x,i}T_{x,j}=T_{x,i\bigoplus j}=T_{x,(i+j)\bmod k}$，以及把 $i$ 写成 $k$ 进制形式：$i=\overline{i_0i_1\dots i_m}(k) $后，$T_{x,i}=\Pi <em>{j=0}^m T</em>{x_j,i_j}$ </p>
<p>因此只需考虑 $T_{x,i}(0\le x,i &lt; k)$ 即可。</p>
<p>想到1的 $k$ 次单位根：$T_{x,i}=\omega_{k}^{xi}$</p>
<p>那么：$\omega _{k}^i\omega _{k}^j=\omega_k^{(i+j)\bmod k}=\omega_k^{i\bigoplus j}$</p>
<p>由于矩阵需要存在逆矩阵，即要求满秩。</p>
<p>不妨想到范德蒙德矩阵：</p>
<p>$$\begin{bmatrix}<br>1 &amp; 1 &amp; 1 &amp; \dots &amp; 1\\<br>1 &amp; \omega _ k^1 &amp; \omega _ k^2 &amp; \dots &amp;\omega _ k^{k-1} \\<br>1 &amp; \omega _ k^2 &amp; \omega _ k^4 &amp; \dots &amp; \omega _ k^{2(k-1)}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \dots &amp; \vdots\\<br>1 &amp; \omega _ k^{k-1} &amp; \omega _ k^{2(k-1)} &amp; \dots &amp; \omega _ k^{(k-1)(k-1)}<br>\end{bmatrix}$$</p>
<p>逆矩阵和fft的一样。</p>
<p>这样子就能做任意进制的FWT了。</p>
<p>难度在求单位根上。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>1，UVA13277</p>
<p>模板题没啥好说的。</p>
<p>2，HDU6596</p>
<p>模板题 $\times 2$。</p>
<p>3，HDU6618</p>
<p>3进制FWT+倍增+状压，<a href="/2019/12/27/Good-Numbers-hdu6618/" title="见此">见此</a></p>
<p>4，<a href="/2020/01/29/Distance-Between-Sweethearts/" title="Distance Between Sweethearts">Distance Between Sweethearts</a></p>
<p>5，CF1119H</p>
<p>思维难度较大，<a href="/2020/01/29/Distance-Between-Sweethearts/" title="见此">见此</a></p>
<p>6，牛客挑战赛36G</p>
<p>分治FWT，<a href="/2020/01/30/NIM%E6%B8%B8%E6%88%8F-%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B36G/" title="见此">见此</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Acesrc and String Theory[hdu6661]</title>
    <url>/2020/01/16/Acesrc-and-String-Theory-hdu6661/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6661">HDU 6661</a></p>
<span id="more"></span>

<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个由小写字母组成的字符串，和一个 $k$，求有多少个非空子串满足这个子串是由某个字符串重复 $k$ 次组成的。</p>
<p>$|S|\leq 3\times 10^5,\sum |S|\leq 10^6,k\leq 20$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题是 $\mbox{NOI2016}$ 优秀的拆分的强化版。</p>
<p>一个合法的子串一定是形如 $AA\cdots A$ ($k$个$A$) ，那么我们试着枚举 $A$ 的长度 $i$。</p>
<p>类似“优秀的拆分”的做法，我们每隔 $i$ 个位置放一个隔板。如当 $i=3$ 时的一个例子：</p>
<p><img src="/Acesrc-and-String-Theory-hdu6661/0.png" alt="0"></p>
<p>可以发现，一个合法的子串一定刚好横跨了 $k$ 个隔板，我们试着枚举这些隔板是哪几个，设为 $b_i$。</p>
<p>设 $m_1=\min(i,LCP(Suf_{b_k},Suf_{b_{k+1}})),m_2=\min(i,LCS(Pre_{b_k},Pre_{b_{k+1}}))$</p>
<p>其中$\mbox{LCP}=\mbox{Longest Common Prefix},\mbox{LCS}=\mbox{Longest Common Suffix}$</p>
<p>若 $m_1+m_2&gt;i$，则对答案有 $m_1+m_2-i$ 的贡献。</p>
<p>还是上面的例子，当 $k=2$ ，取前两个隔板的情况为：</p>
<p><img src="/Acesrc-and-String-Theory-hdu6661/1.png" alt="1"></p>
<p>求最长公共前后缀用 $\mbox{SA}$ + $\mbox{ST}$表就可以做到 $O(n\log n)-O(1)$。</p>
<p>总的时间复杂度 $O(n\log n+k\sum_{i=1}^{\frac{n}{k}}\frac{n}{i})=O(kn\log n)$</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Log[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SA</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,base[N],wx[N],wy[N],sa[N],rank[N],height[N];</span><br><span class="line">    <span class="type">char</span> s[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getsa</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> *x = wx,*y = wy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) base[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) base[x[i] = s[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++) base[i] += base[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--base[x[i]]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i,j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++] = i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++] = sa[i]-j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) base[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) base[x[y[i]]]++;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) base[i] += base[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--base[x[y[i]]]] = y[i];</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]] = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                x[sa[i]] = (y[sa[i]]==y[sa[i<span class="number">-1</span>]] &amp;&amp; y[sa[i]+j]==y[sa[i<span class="number">-1</span>]+j])?p<span class="number">-1</span>:p++;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calc_height</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rank[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j,k=<span class="number">0</span>;i&lt;n;height[rank[i++]]=k)</span><br><span class="line">            <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];s[i+k]==s[j+k];k++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> f[N][<span class="number">22</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_st</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=height[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,k=<span class="number">1</span>;j&lt;=<span class="number">19</span>;++j,k&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i+k*<span class="number">2</span><span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+k][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lcp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=rank[x<span class="number">-1</span>]; y=rank[y<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y); x++;</span><br><span class="line">        <span class="type">int</span> k=Log[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sa,<span class="number">0</span>,<span class="built_in">sizeof</span>(sa));</span><br><span class="line">        <span class="built_in">memset</span>(height,<span class="number">0</span>,<span class="built_in">sizeof</span>(height));</span><br><span class="line">        <span class="built_in">memset</span>(rank,<span class="number">0</span>,<span class="built_in">sizeof</span>(rank));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">getsa</span>(s,n+<span class="number">1</span>,<span class="number">28</span>);</span><br><span class="line">        <span class="built_in">calc_height</span>(s,n);</span><br><span class="line">        <span class="built_in">get_st</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SA A,B;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> bl[N],n,k;</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1ll</span>*n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,m1,m2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(bl[<span class="number">1</span>]=i;bl[<span class="number">1</span>]+(i*(k<span class="number">-1</span>))&lt;=n;bl[<span class="number">1</span>]+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=k;j++) bl[j]=bl[j<span class="number">-1</span>]+i;</span><br><span class="line">            m1=m2=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;k&amp;&amp;m1+m2&gt;i;j++) m1=<span class="built_in">min</span>(m1,A.<span class="built_in">lcp</span>(bl[j],bl[j+<span class="number">1</span>])),m2=<span class="built_in">min</span>(m2,B.<span class="built_in">lcp</span>(n-bl[j]+<span class="number">1</span>,n-bl[j+<span class="number">1</span>]+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(m1+m2&gt;i) ans+=m1+m2-i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;N;i++) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> _=<span class="built_in">read</span>();_--;)</span><br><span class="line">    &#123;</span><br><span class="line">        k=<span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s); n=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) A.s[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) B.s[i]=s[n-i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        A.n=B.n=n,A.s[n]=B.s[n]=<span class="number">0</span>,A.<span class="built_in">work</span>(),B.<span class="built_in">work</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">solve</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2019多校6</title>
    <url>/2020/01/15/hdu2019%E5%A4%9A%E6%A0%A16/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=853">2019 Multi-University Training Contest 6</a></p>
<span id="more"></span>

<h3 id="Problem-A-Salty-Fish"><a href="#Problem-A-Salty-Fish" class="headerlink" title="Problem A Salty Fish"></a>Problem A Salty Fish</h3><a href="/2020/01/14/Salty-Fish-hdu6634/" title="Salty Fish[hdu6634]">Salty Fish[hdu6634]</a>

<h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h3><a href="/2019/12/29/Nonsense-Time-hdu6635/" title="Nonsense Time[hdu6635]">Nonsense Time[hdu6635]</a>

<h3 id="Problem-E-Snowy-Smile"><a href="#Problem-E-Snowy-Smile" class="headerlink" title="Problem E Snowy Smile"></a>Problem E Snowy Smile</h3><p>线段树维护最大字段和。</p>
<h3 id="Problem-F-Faraway"><a href="#Problem-F-Faraway" class="headerlink" title="Problem F Faraway"></a>Problem F Faraway</h3><p>拆开绝对值，然后暴力。</p>
<h3 id="Problem-H-TDL"><a href="#Problem-H-TDL" class="headerlink" title="Problem H TDL"></a>Problem H TDL</h3><p>签到题，暴力即可。</p>
<h3 id="Problem-I-Three-Investigators"><a href="#Problem-I-Three-Investigators" class="headerlink" title="Problem I Three Investigators"></a>Problem I Three Investigators</h3><a href="/2020/01/03/Three-Investigators-hdu6642/" title="Three Investigators[hdu6642]">Three Investigators[hdu6642]</a>

<h3 id="Problem-L-Stay-Real"><a href="#Problem-L-Stay-Real" class="headerlink" title="Problem L Stay Real"></a>Problem L Stay Real</h3><p>签到题，堆。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
  </entry>
  <entry>
    <title>Salty Fish[hdu6634]</title>
    <url>/2020/01/14/Salty-Fish-hdu6634/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵有根树，树上每个节点有 $a_i$ 个苹果。$m$ 个摄像机，每个摄像机可以看到 $x_i$ 的子树中所有与 $x_i$ 距离不超过 $k_i$ 的点中的苹果，可以花钱 $c_i$ 使该摄像机失效。求最终没有被看到的苹果数 - 花费的钱的最大值。</p>
<p>$n,m\leq 3\times 10^5$ , $\sum n,\sum m\leq 10^6$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h4><p>假设全部先选了所有的苹果，然后考虑放弃那些比较合适。</p>
<p>考虑最小割建图，$S$ 连每个摄像机，边权为 $c_i$；每个摄像机连对应的树上的点，边权为 $\infty$；每个树上的点连 $T$，权值为 $a_i$。</p>
<p>那么减去最小割就是答案了。</p>
<p>显然不能直接跑网络流，尽管线段树优化建图也不行。</p>
<p>那就只能模拟网络流了。</p>
<h4 id="模拟网络流"><a href="#模拟网络流" class="headerlink" title="模拟网络流"></a>模拟网络流</h4><p>贪心处理。</p>
<p>从叶节点往上推，把摄像机挂在树上。</p>
<p>每遇到一个摄像机都用当前深度最大的点去跟它抵消。</p>
<p>那么对于每个节点 $i$ 只需要记 $f_{i,j}$ 表示深度为 $j$ 的所有点还剩多少流量。</p>
<p>可以用 $\mbox{map}$ 维护。</p>
<p>合并的时候用启发式合并。这个只跟深度有关，因此长链剖分即可。</p>
<p>每个摄像机只会删除，不会令 $\mbox{map}$ 中的元素增加。</p>
<p>时间复杂度 $O((n+m)\log n)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> d,c;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;<span class="type">int</span>,ll&gt; f[N];</span><br><span class="line">map&lt;<span class="type">int</span>,ll&gt;::iterator it;</span><br><span class="line">vector&lt;node&gt; q[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">int</span> n,m,cnt;</span><br><span class="line"><span class="type">int</span> ver[N],ne[N],head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mx[N],son[N],dep[N],id[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	&#123;</span><br><span class="line">		v=ver[i];</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		<span class="keyword">if</span>(mx[son[u]]&lt;mx[v]) son[u]=v;</span><br><span class="line">		mx[u]=<span class="built_in">max</span>(mx[u],mx[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	mx[u]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u]),id[u]=id[son[u]];</span><br><span class="line">	<span class="keyword">else</span> id[u]=++cnt;</span><br><span class="line">	f[id[u]][dep[u]]+=a[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">	<span class="keyword">if</span>((v=ver[i])!=son[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="keyword">for</span>(it=f[id[v]].<span class="built_in">begin</span>();it!=f[id[v]].<span class="built_in">end</span>();it++)</span><br><span class="line">			f[id[u]][(*it).fi]+=(*it).se;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> d,c;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,q[u].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		d=q[u][i].d,c=q[u][i].c;</span><br><span class="line">		it=f[id[u]].<span class="built_in">upper_bound</span>(dep[u]+d);</span><br><span class="line">		<span class="keyword">if</span>(it==f[id[u]].<span class="built_in">begin</span>()) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(it--;c;)</span><br><span class="line">		&#123;</span><br><span class="line">			ll w=<span class="built_in">min</span>((ll)c,(*it).se);</span><br><span class="line">			(*it).se-=w; ans-=w; c-=w;</span><br><span class="line">			<span class="keyword">if</span>(!(*it).se)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(it==f[id[u]].<span class="built_in">begin</span>()) &#123;f[id[u]].<span class="built_in">erase</span>(it); <span class="keyword">break</span>;&#125;</span><br><span class="line">				<span class="type">int</span> t=(*it).fi;</span><br><span class="line">				it--;</span><br><span class="line">				f[id[u]].<span class="built_in">erase</span>(t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) head[i]=mx[i]=dep[i]=son[i]=id[i]=<span class="number">0</span>,q[i].<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,cnt) f[i].<span class="built_in">clear</span>();</span><br><span class="line">	ans=cnt=tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> _=<span class="built_in">read</span>(),x,k,c;_--;)</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),i);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),ans+=a[i];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,m) x=<span class="built_in">read</span>(),k=<span class="built_in">read</span>(),c=<span class="built_in">read</span>(),q[x].<span class="built_in">pb</span>((node)&#123;k,c&#125;);</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>Hotel[POI2014]</title>
    <url>/2020/01/03/Hotel-POI2014/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵树，求所有三个不同的点，两两距离相同的方案数。</p>
<p>$n\leq 5000$</p>
<p>加强版：$n\leq 10^5$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>两个点可以在 $\mbox {LCA }$处统计，尝试着三个点也在 $\mbox LCA$ 那里统计答案？</p>
<p>三个点两两距离相同，说明必定存在一个点，使得这个点到这三个点距离均为 $d$。</p>
<p><img src="/Hotel-POI2014/1.png" alt="1"></p>
<p>那么假设 $3$ 号点与 $\mbox {LCA}$ 的距离为 $j$，那么蓝点到 $\mbox{LCA}$ 的距离为 $d-j$。</p>
<p>因此可以设 $f_{i,j}$ 表示 $i$ 号点的子树中与 $i$ 距离为 $j$ 的点有多少个，设 $g_{i,j}$ 表示 $i$ 号点的子树中，某两个点到第三点的距离为 $d$，第三点到 $\mbox{LCA}$ 的距离为 $d-j$ 的方案数。</p>
<p>依次考虑每个儿子 $k$，DP方程大概长这样：</p>
<p>$$g_{i,j}=g’<em>{i,j}+g</em>{k,j+1}+f_{i,j}\times f_{k,j-1},\\f_{i,j+1}=f’<em>{i,j+1}+f</em>{k,j}$$</p>
<p>统计答案：$g_{i,0}+\sum{f_{i,j}g_{k,j-1}}+\sum{f_{i,j-1}g_{k,j}}$</p>
<p>每一个 $k$ 的时间是 $O(len_k)$ 的。</p>
<p>显然可以 $O(n^2)$ DP一下。</p>
<p>既然复杂度跟 $len_k$ 相关，那么长链剖分一下就可以了。</p>
<p>重儿子的转移：$f_{son_i}=f_i+1,g_{son_i}=g_i-1$</p>
<p>预留够足够的空间就可以了。</p>
<p>时间复杂度 $O(n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,len[N],son[N];</span><br><span class="line">ll tmp[N&lt;&lt;<span class="number">2</span>],*f[N],*g[N],*id=tmp,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			<span class="keyword">if</span>(len[son[u]]&lt;len[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">	len[u]=len[son[u]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) g[son[u]]=g[u]<span class="number">-1</span>,f[son[u]]=f[u]+<span class="number">1</span>,<span class="built_in">dfs2</span>(son[u],u);</span><br><span class="line">	ans+=g[u][<span class="number">0</span>]; f[u][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;ver[i]!=son[u])</span><br><span class="line">		&#123;</span><br><span class="line">			f[v]=id; id+=len[v]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">			g[v]=id; id+=len[v]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,len[v]<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ans+=g[u][j+<span class="number">1</span>]*f[v][j];</span><br><span class="line">				<span class="keyword">if</span>(j!=len[v]<span class="number">-1</span>) ans+=g[v][j+<span class="number">1</span>]*f[u][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fo</span>(j,<span class="number">0</span>,len[v]<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				g[u][j+<span class="number">1</span>]+=f[u][j+<span class="number">1</span>]*f[v][j];</span><br><span class="line">				<span class="keyword">if</span>(j) g[u][j<span class="number">-1</span>]+=g[v][j];</span><br><span class="line">				f[u][j+<span class="number">1</span>]+=f[v][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	f[<span class="number">1</span>]=id; id+=len[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	g[<span class="number">1</span>]=id; id+=len[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>); <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>Dominant Indices[CF1009F]</title>
    <url>/2020/01/03/Dominant-Indices-CF1009F/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵有根树，定义 $d_{u,i}$ 表示以 $u$ 为根的子树内离 $u$ 的距离为 $i$ 的节点个数。</p>
<p>对于每个节点 $u$，求出使 $d_{u,j}$ 最大的 $j$，且 $j$ 的编号最小。</p>
<p>$n\leq 10^6$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p> $d_{u,i}=\sum_{v\in Son_u}d_{v,i-1}$</p>
<p>这个东东实现一次的复杂度是 $O(\sum_{v\in son_u}len_v)$ 的（其中 $len_v$ 为 $v$ 的子树中离 $v$ 的最远距离）。</p>
<p>可以用<a href="/2020/01/03/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/" title="长链剖分">长链剖分</a>解决。</p>
<p>如果我们用重儿子继承，即先算重儿子的 $d$ 值，那么 $d_{u,i}=d_{son_u,i-1}$。</p>
<p>相当于数组移动了 $1$ 位。那么用指针实现，令 $f_{son_u}=f_{u}+1$ 即可。</p>
<p>每个长链只会被统计一次答案，且统计的时间为长链的长。</p>
<p>因此复杂度是 $O(n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000010</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,ans[N];</span><br><span class="line"><span class="type">int</span> ver[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ver[++tot]=y; ne[tot]=head[x]; head[x]=tot;</span><br><span class="line">	ver[++tot]=x; ne[tot]=head[y]; head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len[N],son[N];</span><br><span class="line"><span class="type">int</span> tmp[N],*f[N],*id=tmp;<span class="comment">//指针实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			<span class="keyword">if</span>(len[son[u]]&lt;len[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">	len[u]=len[son[u]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[u][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) f[son[u]]=f[u]+<span class="number">1</span>,<span class="built_in">dfs2</span>(son[u],u),ans[u]=ans[son[u]]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u],v;i;i=ne[i])</span><br><span class="line">		<span class="keyword">if</span>((v=ver[i])!=pre&amp;&amp;ver[i]!=son[u])</span><br><span class="line">		&#123;</span><br><span class="line">			f[v]=id; id+=len[v];</span><br><span class="line">			<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len[v];j++)</span><br><span class="line">			&#123;</span><br><span class="line">				f[u][j+<span class="number">1</span>]+=f[v][j];</span><br><span class="line">				<span class="keyword">if</span>(f[u][ans[u]]&lt;f[u][j+<span class="number">1</span>]||(f[u][ans[u]]==f[u][j+<span class="number">1</span>]&amp;&amp;ans[u]&gt;j+<span class="number">1</span>)) ans[u]=j+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span>(f[u][ans[u]]==<span class="number">1</span>) ans[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) <span class="built_in">add</span>(<span class="built_in">read</span>(),<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	f[<span class="number">1</span>]=id; id+=len[<span class="number">1</span>];<span class="comment">//用多少空间就加多少</span></span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>长链剖分</title>
    <url>/2020/01/03/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<p>长链剖分学习笔记。</p>
<span id="more"></span>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>长链剖分，顾名思义，就是每条链都很长嘛！</p>
<p>跟树链剖分名字比较像，那他们有什么不同呢？</p>
<p>树链剖分重儿子靠子树大小。</p>
<p>那长链剖分靠啥呢？当然是靠<strong>最深的点谁更深</strong>啦。</p>
<p>那么求出 $len_u$ 表示最深的点到 $u$ 的距离就可以啦~</p>
<p>好了，我们已经会对一棵树进行长链剖分了。</p>
<p>长链剖分有点类似于 dsu on tree，解决的是一些跟树上启发式合并相关的题。</p>
<p>长链剖分需要题目满足一些跟深度有关的性质。比如树形dp合并时dp数组的下标只需要用到 $len_v$ 个之类的。</p>
<p>这个东西这样讲感觉比较难懂。具体看例题吧。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h4><p>任何节点的 $k$ 级祖先所在长链长度大于 $k$ 。</p>
<p>证明十分显然。</p>
<h4 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h4><p>任何节点往上跳经过的长链条数最多为 $O(\sqrt{n})$ 条。</p>
<p>证明：每次跳长链长最多 $+1$，最坏情况为一直 $+1$。因此最多跳 $O(\sqrt{n})$ 条。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>dp题一般是先长链剖分，然后指针实现。</p>
<ol>
<li><a href="/2020/01/03/Dominant-Indices-CF1009F/" title="Dominant Indices[CF1009F]">Dominant Indices[CF1009F]</a></li>
<li><a href="/2020/01/03/Hotel-POI2014/" title="Hotel[POI2014]">Hotel[POI2014]</a></li>
<li><a href="/2020/01/14/Salty-Fish-hdu6634/" title="Salty Fish[hdu6634]">Salty Fish[hdu6634]</a></li>
</ol>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>Three Investigators[hdu6642]</title>
    <url>/2020/01/03/Three-Investigators-hdu6642/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个长度为 $n$ 的序列，对于每个前缀，求最多 $5$ 个互不相交的不下降子序列的元素和的最大值。</p>
<p>$n\leq 10^5,a_i\in[1,10^9]$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$5$ 这个东西很有用，最终的复杂度很可能就是跟 $2^5$ 之类的相关。</p>
<p>把 $a_i$ 拆成 $a_i$ 个 $a_i$，那么答案转变成统计元素数量的最大值。</p>
<p>发现这个东西就是杨氏图表前 $5$ 层的长度之和。</p>
<p>杨表的插入过程如下：</p>
<p>1，若当前层没有元素比 $x$ 大，则把 $x$ 插在末尾。</p>
<p>2，否则用比 $x$ 大的最小的数 $y$ 代替 $x$，然后将 $y$ 插入下一层中。</p>
<p>那么用 $\mbox{map}$ 处理杨表，每次插入 $a_i$ 个 $a_i$，每层最多会使 $2$ 个数字拆开，因此时间复杂度 $O(2^5n\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S 5</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="type">int</span>,ll&gt; a[S];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,ll num,<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;=S) <span class="keyword">return</span>;</span><br><span class="line">	a[k][u]+=num; ans+=num;</span><br><span class="line">	<span class="keyword">for</span>(map&lt;<span class="type">int</span>,ll&gt;::iterator it;num;)</span><br><span class="line">	&#123;</span><br><span class="line">		it=a[k].<span class="built_in">lower_bound</span>(u+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(it==a[k].<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">		ll d=<span class="built_in">min</span>((*it).second,num);</span><br><span class="line">		num-=d; ans-=d;</span><br><span class="line">		<span class="built_in">add</span>(k+<span class="number">1</span>,d,(*it).first);</span><br><span class="line">		<span class="keyword">if</span>((*it).second==d) a[k].<span class="built_in">erase</span>(it); <span class="keyword">else</span> a[k][(*it).first]-=d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> T=<span class="built_in">read</span>();T;T--,ans=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++) a[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">read</span>(),x,n=i;i;i--) x=<span class="built_in">read</span>(),<span class="built_in">add</span>(<span class="number">0</span>,x,x),<span class="built_in">printf</span>((i==<span class="number">1</span>)?<span class="string">&quot;%lld\n&quot;</span>:<span class="string">&quot;%lld &quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>杨氏图表</tag>
      </tags>
  </entry>
  <entry>
    <title>猎人杀[pkuwc2018]</title>
    <url>/2020/01/03/%E7%8C%8E%E4%BA%BA%E6%9D%80-pkuwc2018/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://loj.ac/problem/2541">loj</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道很不错的思维题。</p>
<p>想来想去想不到什么直接的做法。</p>
<p>先看看 $n\leq 20$ 该怎么做吧。</p>
<p>状态压缩，设 $f_S$ 表示 $S$ 集合先于 $1$ 号猎人死亡的概率。</p>
<p>直接 DP 就可以了。</p>
<p>接着继续想，还是想不到什么直接做的做法。</p>
<p>那么只能试试容斥了。</p>
<p>把 $f_S$ 的状态改一改，变成至少是 $S$ 中的人在 $1$ <strong>之后</strong>死的概率。</p>
<p>那么答案即为：$\sum_S (-1)^Sf_S$</p>
<p>而 $f_S$ 显然与不在 $S$ 的且不是 $1$ 的猎人无关。</p>
<p>则 $f_S=\frac{w_1}{w_1+\sum_{i\in S} w_i}$</p>
<p>有一个很重要的数据范围是 $\sum_{i=1}^nw_i\leq 10^5$</p>
<p>那就是说 $f_S$ 的分母不会超过 $10^5$。</p>
<p>那或许可以试着枚举 $j$，然后求出所有满足 $\sum_{i\in S}w_i=j$ 的集合的 $(-1)^S$ 的和？</p>
<p>考虑每个 $w_i$ 的贡献，选相当于乘 $-1$，不会相当于乘 $1$。则可以设以下生成函数：$(1-x^{w_i})$</p>
<p>$j$ 的答案即为 $\prod_{i=2}^n (1-x^{w_i})$ 的第 $j$ 项的系数。</p>
<p>分治FFT 即可。</p>
<p>时间复杂度 $O(n\log ^2n)$</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一道思维较好的容斥。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 210000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> G 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> w[N],n;</span><br><span class="line"><span class="type">int</span> siz[<span class="number">32</span>],m;</span><br><span class="line"><span class="type">int</span> len,L,R[N];</span><br><span class="line">ll a[<span class="number">32</span>][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">if</span>(i&gt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ll wn=<span class="built_in">Pow</span>(G,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">-1</span>) wn=<span class="built_in">Pow</span>(wn,mod<span class="number">-2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			ll w=<span class="number">1</span>,x,y;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++,w=w*wn%mod)</span><br><span class="line">				x=a[j+k],y=a[i+j+k]*w%mod,</span><br><span class="line">				a[j+k]=(x+y)%mod,a[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	ll invn=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=a[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre_ntt</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(L=<span class="number">0</span>,len=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>,L++); L--;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++) R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		siz[++m]=w[l];</span><br><span class="line">		a[m][<span class="number">0</span>]=<span class="number">1</span>; a[m][w[l]]=mod<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;w[l];i++) a[m][i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l,mid); <span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="type">int</span> ml=m<span class="number">-1</span>,mr=m,s=siz[ml]+siz[mr];</span><br><span class="line">	<span class="built_in">pre_ntt</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=siz[ml]+<span class="number">1</span>;i&lt;len;i++) a[ml][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=siz[mr]+<span class="number">1</span>;i&lt;len;i++) a[mr][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">ntt</span>(a[ml],len,<span class="number">1</span>); <span class="built_in">ntt</span>(a[mr],len,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[ml][i]=a[ml][i]*a[mr][i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(a[ml],len,<span class="number">-1</span>);</span><br><span class="line">	siz[--m]=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>; ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum+=(w[i]=<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">2</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=sum;i++) (ans+=a[<span class="number">1</span>][i]*w[<span class="number">1</span>]%mod*<span class="built_in">Pow</span>(w[<span class="number">1</span>]+i,mod<span class="number">-2</span>))%=mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>bzoj</category>
        <category>loj</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>期望</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>party[bzoj5404]</title>
    <url>/2020/01/02/party-bzoj5404/</url>
    <content><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5404">bzoj5404</a></p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="分析数据范围"><a href="#分析数据范围" class="headerlink" title="分析数据范围"></a>分析数据范围</h4><p>首先一看 $c$ 比较小，再看颜色数也只有 $1000$，这些十分有用，以后必定会用到。</p>
<h4 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h4><p>为了尽快到齐，那就一定会到达这 $c$ 的人的 $LCA$ 处。</p>
<p>这时我们需要求出每个人到达 $LCA$ 的特产有哪些。</p>
<h4 id="考虑第1步做法"><a href="#考虑第1步做法" class="headerlink" title="考虑第1步做法"></a>考虑第1步做法</h4><p>我们并不关心这些特产的出现次数，只关心有没有出现就可以了。</p>
<p>那就是状态压缩，每一位表示有没有，然后or起来就可以了。</p>
<p>这个东东可以用 bitset 搞一搞，一次的时间是 $O(\frac{m}{w})$，其中 $w$ 为 $64$，大概是在 $15$ 左右。 </p>
<p>那么如何求出一个点到它某个祖先的出现颜色的集合呢？</p>
<p>维护树上前缀和？显然不行，这个or操作不支持删除。</p>
<p>那么只能暴力树剖了，然后上线段树，时间复杂度 $O(q\frac{m}{w}\log^2n)$，不太行。</p>
<p>这时需要一个技巧：我们可以<strong>维护每个点到其重链顶端的路径的集合</strong>。</p>
<p>那么就只需要一直跳重链，跳到最后和 $LCA$ 同重链的时候再用线段树就可以了。</p>
<p>这样就可以省掉一个 $log$ 的时间。</p>
<h4 id="考虑第2步做法"><a href="#考虑第2步做法" class="headerlink" title="考虑第2步做法"></a>考虑第2步做法</h4><p>求出了上面那个东西，接下考虑如何通过这 $c$ 个集合求得答案。</p>
<p>这个答案是满足单调性的，试试二分？</p>
<p>考虑一个人选 $k$ 种颜色是否可行。</p>
<p>无法很快地判断出来，先试试暴力（假设只有一个询问）？</p>
<p>建一个二分图，$X$ 集合中 $ck$ 个点，每个人有 $k$ 个点；$Y$ 集合有 $m$ 个点，代表每种颜色。</p>
<p>若第 $i$ 个人的集合中出现了颜色 $j$ ，则 $i$ 的 $k$ 个点都连一条边到 $j$。</p>
<p>转换成判断是否存在完美匹配。</p>
<p>根据<a href="/2019/12/29/Hall%E5%AE%9A%E7%90%86/" title="Hall定理">Hall定理</a>，每个 $X$ 集合的子集连出去的点的集合大小必须大于等于该子集的大小。</p>
<p>只要一个人中的某个点出现在该子集中，那么这个人的所有点都要出现该子集中。</p>
<p>所以有 $2^c-1$ 种情况需要考虑。</p>
<p>那么就对于所有的 $S\subseteq X$ 有 $|S|k\leq |N_g(S)|$，也就是 $k\leq \min(\frac{|N_G(S)|}{|S|})$</p>
<p>那么二分的步骤都省略了，答案即为 $\min(\frac{|N_G(S)|}{|S|})$。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>记 $t=\frac{m}{w}$，则时间复杂度 $O(nt\log n+qt(c\log n+2^c))$</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 300010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 1004</span></span><br><span class="line"><span class="type">int</span> n,m,a[N];</span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line">	bitset&lt;M&gt; f[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc (u&lt;&lt;1|1)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ls lc,l,mid</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> p,<span class="type">int</span> u=<span class="number">1</span>,<span class="type">int</span> l=<span class="number">1</span>,<span class="type">int</span> r=n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(f[u][p]=<span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">add</span>(x,p,ls);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">add</span>(x,p,rs);</span><br><span class="line">		f[u]=f[lc]|f[rc];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,bitset&lt;M&gt;* A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> (<span class="type">void</span>)((*A)|=f[u]);</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">ask</span>(ls,L,R,A);</span><br><span class="line">		<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">ask</span>(rs,L,R,A);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; adj[N];</span><br><span class="line">	bitset&lt;M&gt; f[N];</span><br><span class="line">	<span class="type">int</span> siz[N],son[N],fa[N],dep[N],top[N],dfn[N],tim;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;adj[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		siz[u]=<span class="number">1</span>; fa[u]=pre; dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,adj[u].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=adj[u][i];</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[son[u]]&lt;siz[v]) son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> tp)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		f[u][a[u]]=<span class="number">1</span>;</span><br><span class="line">		dfn[u]=++tim;</span><br><span class="line">		SGT::<span class="built_in">add</span>(dfn[u],a[u]);</span><br><span class="line">		top[u]=tp;</span><br><span class="line">		<span class="type">int</span> v=son[u];</span><br><span class="line">		<span class="keyword">if</span>(v) f[v]=f[u],<span class="built_in">dfs2</span>(v,tp);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,adj[u].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">if</span>(!top[v=adj[u][i]])</span><br><span class="line">				f[v].<span class="built_in">reset</span>(),<span class="built_in">dfs2</span>(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;top[x]!=top[y];x=fa[top[x]])</span><br><span class="line">			<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="keyword">return</span> dep[x]&gt;=dep[y]?y:x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> z,bitset&lt;M&gt;* A)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;top[z]!=top[u];u=fa[top[u]]) *A|=f[u];</span><br><span class="line">		SGT::<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[z],dfn[u],A);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> q,c,cnt,ans,p[<span class="number">10</span>];</span><br><span class="line">bitset&lt;M&gt; dp[<span class="number">34</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); q=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">2</span>,n) Tree::<span class="built_in">add</span>(<span class="built_in">read</span>(),i);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	Tree::<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	Tree::<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(_,<span class="number">1</span>,q)</span><br><span class="line">	&#123;</span><br><span class="line">		c=<span class="built_in">read</span>(); cnt=<span class="number">1</span>&lt;&lt;c;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,c<span class="number">-1</span>) p[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="type">int</span> LCA=p[<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,c<span class="number">-1</span>) LCA=Tree::<span class="built_in">lca</span>(LCA,p[i]);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,cnt<span class="number">-1</span>) dp[i].<span class="built_in">reset</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,c<span class="number">-1</span>) Tree::<span class="built_in">get</span>(p[i],LCA,&amp;dp[<span class="number">1</span>&lt;&lt;i]);</span><br><span class="line">		ans=<span class="number">1e9</span>;</span><br><span class="line">		<span class="built_in">fo</span>(s,<span class="number">1</span>,cnt<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tmp=<span class="built_in">lowbit</span>(s),k=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(tmp!=s) dp[s]=dp[s^tmp]|dp[tmp];</span><br><span class="line">			<span class="built_in">fo</span>(i,<span class="number">0</span>,c<span class="number">-1</span>) <span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i)) k++;</span><br><span class="line">			ans=<span class="built_in">min</span>(ans,(<span class="type">int</span>)dp[s].<span class="built_in">count</span>()/k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans*c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Hall定理</tag>
        <tag>bitset</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>Exhausted[ARC076F]</title>
    <url>/2019/12/30/Exhausted-arc076F/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$m$ 张凳子排成一列，从 $1$ 开始编号。</p>
<p>$n$ 个人，第 $i$ 个人能坐在不比 $l_i$ 大的凳子上，或者不比 $r_i$ 小的凳子上。</p>
<p>问最少有多少个人没地方坐。</p>
<p>$n,m\leq 2\times 10^5,l_i&lt;r_i$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>还是很显然地假设先建一个二分图出来。那么根据<a href="/2019/12/29/Hall%E5%AE%9A%E7%90%86/" title="Hall定理">Hall定理</a>，最大匹配 = $|X|-\max\{|W|-|N_g(W)|\}$。</p>
<p>那么答案就是 $\max \{ |W|-|N_g(W)|\}$。</p>
<p>显然 $N_g(W)$ 只需要考虑所有的 $\{ [1,L] \bigcup [R,m]\}$ 即可。</p>
<p>若 $L,R$ 固定，则$|W|=\sum{[l_i\leq L]\times [r_i\geq R]}$</p>
<p>把 $L$ 看做 $x$ 轴， $R$ 看做 $y$ 轴，则求 $|W|$ 相当于二维数点问题。</p>
<p>那么答案即为 $\max\{|W|-(L+(m-R+1))\}=-(L+m+1)+\max\{ |W|+R\}$</p>
<p>枚举 $L$，将 $(l_i,r_i)$ 按 $l_i$ 排序，扫描线，用线段树维护区间加区间最值即可。</p>
<p>时间复杂度 $O((n+m)\log (n+m))$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A.l!=B.l) <span class="keyword">return</span> A.l&lt;B.l;</span><br><span class="line">		<span class="keyword">return</span> A.r&lt;B.r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tag[N&lt;&lt;<span class="number">1</span>],mx[N&lt;&lt;<span class="number">1</span>],ls[N&lt;&lt;<span class="number">1</span>],rs[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x)</span></span>&#123;tag[u]+=x; mx[u]+=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(ls[u]) <span class="built_in">pushtag</span>(ls[u],tag[u]);</span><br><span class="line">	<span class="keyword">if</span>(rs[u]) <span class="built_in">pushtag</span>(rs[u],tag[u]);</span><br><span class="line">	tag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=++cnt;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;mx[u]=r; <span class="keyword">return</span> u;&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	ls[u]=<span class="built_in">build</span>(l,mid);</span><br><span class="line">	rs[u]=<span class="built_in">build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,x);</span><br><span class="line">	<span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">add</span>(ls[u],l,mid,L,R,x);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">add</span>(rs[u],mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) q[i].l=<span class="built_in">read</span>(),q[i].r=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">0</span>,m+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">	ans=<span class="built_in">max</span>(<span class="number">0</span>,n-m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(;i&lt;=n&amp;&amp;q[i].l==j;i++) <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">0</span>,m+<span class="number">1</span>,<span class="number">0</span>,q[i].r,<span class="number">1</span>);</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,-(j+m+<span class="number">1</span>)+mx[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>AtCoder</category>
        <category>ARC</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Hall定理</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>圆桌会议[bzoj3693]</title>
    <url>/2019/12/29/%E5%9C%86%E6%A1%8C%E4%BC%9A%E8%AE%AE-bzoj3693/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$n$ 组人，第 $i$ 组 $a_i$ 个人，需要安排在一个$m$ 个座位的，编号为 $0,1,\cdots,m-1$ 的圆桌上，每个位置只能最多做一个人。</p>
<p>其中第 $i$ 组的人能坐在 $\{ l_i,(l_i+1)\%m,(l_i+2)\% m,\cdots,r_i\}$的位置上。</p>
<p>问是否存在一种合法的安排。</p>
<p>$n\leq 10^5,m\leq 10^9$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>容易想到建一个二分图，然后变成判断是否存在完美匹配的问题。</p>
<p>我们发现，尽管现在是在环上，但<a href="/2019/12/29/Hall%E5%AE%9A%E7%90%86/" title="Hall定理的结论1">Hall定理的结论1</a>仍然成立。</p>
<p>就可以先考虑简单一点的，在一条链上而不是在一个环上的情况。考虑完链的情况以后破环成链就能解决。</p>
<p>根据Hall定理的结论，我们需要对所有的区间 $[L,R]$ 都查询一遍看是否符合。</p>
<p>但十分显然的，我们只需要考虑 $R=r_i$ 的区间就可以了。</p>
<p>我们需要区间 $[L,R]$ 满足：$\sum a_i\leq R-L+1$，即 $(\sum a_i)+L\leq R+1$</p>
<p>那么把区间按右端点排序，然后枚举区间。每次在 $[1,l_i]$ 中加 $a_i$，查询 $[1,r_i]$ 中 $(\sum a)+L$ 的最大值，看是否小于等于 $R+1$ 即可。</p>
<p>环的话破环成链就可以了。</p>
<p>注意判断 $r_i=l_i-1$ 的情况。</p>
<p>时间复杂度 $O(n\log n)$</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 400010</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,a;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;A,<span class="type">const</span> node &amp;B)&#123;<span class="keyword">return</span> A.r&lt;B.r;&#125;</span><br><span class="line">&#125;q[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n,m,a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ls[N&lt;&lt;<span class="number">1</span>],rs[N&lt;&lt;<span class="number">1</span>],mx[N&lt;&lt;<span class="number">1</span>],tag[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">	mx[u]+=x; tag[u]+=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">pushtag</span>(ls[u],tag[u]);</span><br><span class="line">	<span class="built_in">pushtag</span>(rs[u],tag[u]);</span><br><span class="line">	tag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> u=++cnt;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;mx[u]=a[l]; <span class="keyword">return</span> u;&#125;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	ls[u]=<span class="built_in">build</span>(l,mid);</span><br><span class="line">	rs[u]=<span class="built_in">build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> <span class="built_in">pushtag</span>(u,x);</span><br><span class="line">	<span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) <span class="built_in">add</span>(ls[u],l,mid,L,R,x);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  <span class="built_in">add</span>(rs[u],mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line">	mx[u]=<span class="built_in">max</span>(mx[ls[u]],mx[rs[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> mx[u];</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,mx=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L&lt;=mid) mx=<span class="built_in">max</span>(mx,<span class="built_in">ask</span>(ls[u],l,mid,L,R));</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;R)  mx=<span class="built_in">max</span>(mx,<span class="built_in">ask</span>(rs[u],mid+<span class="number">1</span>,r,L,R));</span><br><span class="line">	<span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line">ll sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fo</span>(u,<span class="number">1</span>,cnt) ls[u]=rs[u]=tag[u]=mx[u]=<span class="number">0</span>;</span><br><span class="line">	cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pos(x) lower_bound(a+1,a+tot+1,(x))-a</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> _=<span class="built_in">read</span>(),tot,n_tot;_--;)</span><br><span class="line">	&#123;</span><br><span class="line">		n_tot=n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			q[i].l=<span class="built_in">read</span>()+<span class="number">1</span>,q[i].r=<span class="built_in">read</span>()+<span class="number">1</span>;</span><br><span class="line">			sum+=(q[i].a=<span class="built_in">read</span>());</span><br><span class="line">			<span class="keyword">if</span>(q[i].r==q[i].l<span class="number">-1</span>) q[i].l=<span class="number">1</span>,q[i].r=m;<span class="comment">//特判</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(q[i].l&gt;q[i].r) q[i].r+=m;</span><br><span class="line">			<span class="keyword">else</span> q[++n_tot]=(node)&#123;q[i].l+m,q[i].r+m,q[i].a&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;m) &#123;<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">		n=n_tot; tot=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n) a[++tot]=q[i].l,a[++tot]=q[i].r;</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>); tot=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">build</span>(<span class="number">1</span>,tot);</span><br><span class="line">		<span class="type">int</span> l,r;  <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">		&#123;</span><br><span class="line">			l=<span class="built_in">pos</span>(q[i].l); r=<span class="built_in">pos</span>(q[i].r);</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,tot,<span class="number">1</span>,l,q[i].a);</span><br><span class="line">			<span class="type">int</span> p=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,tot,<span class="number">1</span>,r);</span><br><span class="line">			<span class="keyword">if</span>(p&gt;q[i].r+<span class="number">1</span>) &#123;flag=<span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(flag?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Hall定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Roundgod and Milk Tea[hdu6667]</title>
    <url>/2019/12/29/Roundgod-and-Milk-Tea-hdu6667/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个班，每个班 $a_i$ 名学生，共做了 $b_i$ 杯奶茶。每个学生最多喝一杯奶茶，但不能喝本班的。问最多有多少个学生能喝到奶茶。</p>
<p>$n\leq 10^6,0\leq a_i,b_i\leq 10^9$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题让我学会了 Hall定理。。。</p>
<p>Hall定理详见：<a href="/2019/12/29/Hall%E5%AE%9A%E7%90%86/" title="Hall定理">Hall定理</a></p>
<p>首先先建个二分图，每个班的每个学生代表的点都向别班的每杯奶茶连边，</p>
<p>题目转换成了求该二分图的最大匹配。</p>
<p>Hall定理的推论：最大匹配数 = $|X|-\max(|W|-|N_g(W)|)$。</p>
<p>设 $Q=|W|-|N_g(W)|$ ，</p>
<p>下面考虑如何求 $Q$ 的最大值。</p>
<p>分三种情况讨论：</p>
<p>1，$|W|=0$，此时 $Q=0$。</p>
<p>2，$W$ 内只有第 $i$ 个班的学生，此时 $|N_g(W)|=(\sum b_j) -b_i$，为了让 $|W|$ 最大化，$|W|$ 应为 $a_i$，此时 $Q=a_i+b_i-(\sum b_j)$。</p>
<p>3，$W$ 内有多个班的学生，此时 $|N_g(W)|=\sum b_i$，为了让 $|W|$ 最大化，$|W|$ 应为 $\sum a_i$，此时 $Q=(\sum a_i)-(\sum b_i)$。</p>
<p>所以答案为：$(\sum a_i)-Q$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>学过编程的人都能写出来，懒得贴了。</p>
]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>Hall定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hall定理</title>
    <url>/2019/12/29/Hall%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>图论中一个比较有趣的定理。</p>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>二分图的完美匹配：即最大匹配数=$\min(|X|,|Y|)$</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>若一个二分图 $G=\{ X+Y,E \}(|X|\leq |Y|)$ 存在完美匹配，则任取一个 $X$ 中的子集 $W$，都会有 $|W|\leq |N_g(W)|$。</p>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><p>若该二分图存在完美匹配，且不满足上述条件：</p>
<p>则必然存在一个 $X$ 中的子集 $W$，使得 $W&gt; N_g(W)$。那么 $W$ 中的点就无法全部匹配了。</p>
<h3 id="充分性"><a href="#充分性" class="headerlink" title="充分性"></a>充分性</h3><p>若该二分图满足上述条件，且不存在完美匹配：</p>
<p>先进行最大匹配。</p>
<p>然后选择 $X$ 中一个未匹配的点 $x_1$，</p>
<p>由该条件可得，必然存在至少一个点 $y_1$ 与 $x_1$有连边。</p>
<p>又因为这是在最大匹配中，$y_1$ 必须另外一个在 $X$ 中的点 $x_2$ 配对（否则就不是最大匹配了）。</p>
<p>又由该条件得到：$\{ x_1,x_2 \}$ 必然存在至少两个点 $\{ y_1,y_2\}$ 与其相连，即必然存在至少一个点 $y_2$ 与 $x_2$有连边。</p>
<p>又因为这是在最大匹配中，$y_2 $ 必须另外一个在 $X$ 中的点 $x_3$ 配对（否则就不是最大匹配了）。</p>
<p>…</p>
<p>这样下来就找到了一条增广路，与最大匹配矛盾。</p>
<p>仅有这个定理还不够，因为没理由直接枚举全部 $X$ 的子集吧。</p>
<p>因此——</p>
<h2 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h2><h3 id="结论1"><a href="#结论1" class="headerlink" title="结论1"></a>结论1</h3><p>若 $X$ 中每个点连的边都是 $|Y|$ 上连续的一段，设 $[ l,r ]$ 为 $|Y|$ 上一段连续的点的集合，$f([l,r])$ 表示只与 $[l,r]$ 中的点连边的 $X$ 点的集合。那么：</p>
<p>   $$\forall 1\leq l\leq r\leq |Y|,|f([l,r])|\leq |[l,r]|\Leftrightarrow \forall W\subseteq X,|W|\leq |N_g(W)|$$</p>
<p>   证明挺显然的。</p>
<h3 id="结论2"><a href="#结论2" class="headerlink" title="结论2"></a>结论2</h3><p>一个二分图的最大匹配数 = $|X|-\max(|W|-|N_g(W)|)$</p>
<p>   不怎么会证。。。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol>
<li><a href="/2019/12/29/Roundgod-and-Milk-Tea-hdu6667/" title="Roundgod and Milk Tea[hdu6667]">Roundgod and Milk Tea[hdu6667]</a></li>
<li><a href="/2019/12/29/%E5%9C%86%E6%A1%8C%E4%BC%9A%E8%AE%AE-bzoj3693/" title="圆桌会议[bzoj3693]">圆桌会议[bzoj3693]</a></li>
<li><a href="/2019/12/30/Exhausted-arc076F/" title="Exhausted[arc076F]">Exhausted[arc076F]</a></li>
<li><a href="/2020/01/02/party-bzoj5404/" title="party[bzoj5404]">party[bzoj5404]</a>

</li>
</ol>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>Hall定理</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>Nonsense Time[hdu6635]</title>
    <url>/2019/12/29/Nonsense-Time-hdu6635/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个<strong>随机</strong>的排列 $p$，一开始所有位置都不能用。每次<strong>随机</strong>加一个位置使其变得可用，然后求当前最长上升子序列的长度。</p>
<p>$n\leq 50000,T\leq 3$</p>
<p>时限 $14s$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>一个很重要的前置知识：</strong>长度为 $n$ 的排列的最长上升子序列的长度的期望是 $O(\sqrt n)$</p>
<p>记住就好，不会证明…</p>
<p>因此每个位置有 $O(\frac{1}{\sqrt n})$ 的概率在LIS上。</p>
<p>本题倒着做或许会方便一些，每次删掉一个数。</p>
<p>那么每次先暴力求出LIS及其位置。如果每次使其不可用的位置不在LIS上，那么不管它。否则暴力再算一遍LIS。</p>
<p>期望复杂度 $O(\frac{n^2\log n}{\sqrt n})=O(n\sqrt n\log n)$</p>
<p>这是一道用了比较重要的性质的题，在此记录一下以免忘记。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>咕咕咕</p>
]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>期望</tag>
        <tag>树状数组</tag>
        <tag>随机</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2019多校5</title>
    <url>/2019/12/28/hdu2019%E5%A4%9A%E6%A0%A15/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=852">2019 Multi-University Training Contest 5</a></p>
<span id="more"></span>

<h3 id="Problem-A-fraction"><a href="#Problem-A-fraction" class="headerlink" title="Problem A fraction"></a>Problem A fraction</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一个质数 $p$ 和一个小于 $p$ 的正整数 $x$，求出最小的正整数 $b$ 使得存在至少一个正整数 $a$ 满足$a &lt; b$ 且 $a\equiv bx(\bmod p)$</p>
<p>$1\leq T \leq 2\times 10^5$</p>
<p>$1 &lt; x &lt; p$</p>
<p>$3\leq p \leq 10^{15},p\in \mathbb{P}$</p>
<p>保证有解。</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>先把 $a\equiv bx(\bmod p) (a &lt; b )$ 换成 $a=bx-py(y&gt;0)$的形式。</p>
<p>根据题意可得 $0&lt;a=bx-py&lt;b$</p>
<p>即：$py&lt;bx,b(x-1)&lt;py$</p>
<p>由 $x&gt;1$，$y&gt;0$，可得： $\frac{p}{x}&lt;\frac{b}{y}&lt;\frac{p}{x-1}$</p>
<p>$p,x,x-1$ 都已知，转换成 $\frac{a}{b}&lt;\frac{x}{y}&lt;\frac{c}{d}$ 且 $x$ 最小的问题。</p>
<p>当 $\frac{a}{b}$ 与 $\frac{c}{d}$ 间存在整数时，取 $y=1$ 会使得 $x$ 的最小值最小。</p>
<p>当不存在整数时，考虑减小范围。</p>
<p>不等式两边同时减去 $z$ 得：</p>
<p>$\frac{a-bz}{b}&lt;\frac{x-yz}{y}&lt;\frac{c-dz}{d}$</p>
<p>$z$ 的最值为 $\left \lceil \frac{a}{b} \right \rceil-1$</p>
<p>不等式取倒数得：</p>
<p>$\frac{d}{c-dz}&lt;\frac{y}{x-yz}&lt;\frac{b}{a-bz}$</p>
<p>变成更小的子问题。</p>
<p>正确性：递归处理同时保证 $y$ 最小的同时 $x-yz$ 最小，而 $x=(x-yz)+yz$，因此能保证 $x$ 最小。</p>
<p>时间复杂度为ex_gcd的时间，即 $O(\log p)$</p>
<h3 id="Problem-B-three-arrays"><a href="#Problem-B-three-arrays" class="headerlink" title="Problem B three arrays"></a>Problem B three arrays</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>有两个长度为 $n$ 的数组 $a,b$，任意排列 $a$ 和 $b$ 后，记 $c_i=a_i\bigoplus b_i$</p>
<p>求字典序最小的 $c$。</p>
<p>$n\leq 10^5$,$a_i,b_i&lt; 2^{30}$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>一道不错的题。</p>
<p>首先是异或，可以想到应该是跟 01trie 有关的东西。</p>
<p>那么对 $a,b$ 上的数分别建一个01trie。</p>
<p>然后两个序列上的数字看成点， 存在有向边 $(a_i,b_j)$ 当且仅当 $j$ 为使得 $a_i\bigoplus b_j$ 最小的 $j$，$(b_i,a_j)$ 同理。这样就得到了一个有向的二分图之类的东西。</p>
<p>若序列中的数两两不同，且同时存在 $(a_i,b_j)$ 和 $(b_j,a_i)$ 两条边，那么显然答案中一定会出现 $a_i$ 和 $b_j$ 配对的情况。因为如果不出现，交换位置一定会更优。</p>
<p>那么配对了以后可以在原来的序列中删去，变成了一个子问题。</p>
<p>如果序列中有相同的数，把这些数合并到一起就好了。</p>
<p>继续深挖性质。</p>
<p>发现不会出现长度大于 $2$ 的环。</p>
<p>一条边 $(x,y)$ 的意义在于 $x$ 最偏向 $y$，那么如果出现了 $(d_1,d_2),(d_2,d_3)$ 这两条边的话就说明 $d_1\bigoplus d_2 &gt; d_2\bigoplus d_3$，如果此时连成了环 $(d_1,d_2,\cdots,d_m)$ 的话，就会有 $d_1\bigoplus d_2&gt;d_2\bigoplus d_3&gt;\cdots&gt;d_{m-1}\bigoplus d_m&gt;d_m\bigoplus d_1&gt;d_1\bigoplus d_2$</p>
<p>矛盾，因此不可能出现。</p>
<p>那么可以dfs，用栈维护当前这条链是什么，当出现了一个长度2的环就尽量配对。当栈顶配对完了就弹出。</p>
<p>时间复杂度 $O(n(\log w+\log n))$，其中 $w$ 为 $a,b$ 中元素的最大值。</p>
<h3 id="Problem-D-equation"><a href="#Problem-D-equation" class="headerlink" title="Problem D equation"></a>Problem D equation</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>两个长度为 $n$ 的序列 $a,b$ 和整数 $C$</p>
<p>求下列方程所有的解，以分数形式输出。</p>
<p>$$\sum_{i=1}^n|xa_i+b_i|=C$$</p>
<p>$n\leq10^5,1\leq a_i,|b_i|\leq 10^3,C\leq 10^9$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>一次函数之和为一次函数，而 $|xa_i+b_i|$ 为一条折线，相当于两个一次函数。</p>
<p>$n$ 条这样的折线相加后，斜率和截距最多只会在 $n$ 个点处发生变化。</p>
<p>因此 $n$ 条折线相加后相当于 $n+1$ 个一次函数。</p>
<p>在每个一次函数的范围内判断一下就可以了。</p>
<h3 id="Problem-E-permutation1"><a href="#Problem-E-permutation1" class="headerlink" title="Problem E permutation1"></a>Problem E permutation1</h3><p>dfs模板题，签到题</p>
<h3 id="Problem-F-string-matching"><a href="#Problem-F-string-matching" class="headerlink" title="Problem F string matching"></a>Problem F string matching</h3><p>扩展kmp模板题，签到题</p>
<h3 id="Problem-G-permutation2"><a href="#Problem-G-permutation2" class="headerlink" title="Problem G permutation2"></a>Problem G permutation2</h3><p>递推模板题，签到题</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>Trie</tag>
        <tag>思维题</tag>
        <tag>exgcd</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Numbers[hdu6618]</title>
    <url>/2019/12/27/Good-Numbers-hdu6618/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6618">Good Numbers</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义一个正整数 $n$ 是好数当且仅当 $n$ 在<strong>8进制</strong>表示下所有的数码出现的次数为<strong>3的倍数(出现0次亦可)</strong>。</p>
<p>有多少个 $k$ 位的8进制数（不含前导0），满足这个数是好的，且是 $p$ 的倍数。对 $10^9+9$ 取模。</p>
<p>例如：当 $k=3,p=2$ 时，好数有 $222(8),444(8),666(8)$ 三个。</p>
<p>$1\le k \le 10^{18},p&lt;8$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为只有8进制，考虑状压dp，设 $f[i][S][j]$ 表示考虑第 $i$ 位，8个位出现次数模 $3$ 的状态，当前数模 $p$ 的余数为 $j$ 的方案数。时间复杂度 $O(8kpw)$，其中 $w$ 为 $3^8=6561$。</p>
<p>发现瓶颈在于 $k$。</p>
<p>考虑优化 $k$，可以倍增dp，类似于快速幂的处理方法。</p>
<p>考虑从第 $i$ 位转移到第 $2i$ 位：</p>
<p>把 $2i$ 个位拆成前 $i$ 位和后 $i$ 位，枚举这两个状态。</p>
<p>那么有：</p>
<p>$$f[2i][S_1\bigoplus S_2][j_1+t\times j_2]+=f[i][S_1][j_1]\times f[i][S_2][j_2]$$</p>
<p>其中 $\bigoplus$ 代表3进制不进位加法（异或）。</p>
<p>从 $i$ 位转移到 $i+1$ 位比较容易。</p>
<p>时间复杂度 $O(w^2p^2\log k)$。</p>
<p>这时又多了一个瓶颈 $w^2$。</p>
<p>枚举了 $j_1$ 和 $j_2$ 后发现 $S_1,S_2$ 很像异或卷积形式。</p>
<p>实际上就是 3进制的异或卷积，用 3进制FWT加速。</p>
<p>在模 $10^9+9$ 意义下 $1$ 的三次单位根存在。</p>
<p>优化到 $O(wp^2\log w\log k)$</p>
<p>注意前导0的处理。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 6561</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(x) memset((x),0,sizeof(x))</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="type">const</span> ll G=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll w1=<span class="built_in">Pow</span>(G,(mod<span class="number">-1</span>)/<span class="number">3</span>);</span><br><span class="line"><span class="type">const</span> ll w2=<span class="built_in">Pow</span>(G,(mod<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">2</span>);</span><br><span class="line"><span class="type">const</span> ll inv3=<span class="built_in">Pow</span>(<span class="number">3</span>,mod<span class="number">-2</span>);</span><br><span class="line"><span class="type">const</span> ll inv2=<span class="built_in">Pow</span>(<span class="number">2</span>,mod<span class="number">-2</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fwt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll c[<span class="number">3</span>],b[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,len=<span class="number">3</span>;len&lt;=n;i*=<span class="number">3</span>,len*=<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=len)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++) b[l]=a[j+k+l*i];</span><br><span class="line">				<span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					c[<span class="number">0</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]+b[<span class="number">2</span>])%mod;</span><br><span class="line">					c[<span class="number">1</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]*w1+b[<span class="number">2</span>]*w2)%mod;</span><br><span class="line">					c[<span class="number">2</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]*w2+b[<span class="number">2</span>]*w1)%mod;</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++) b[l]=c[l];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					c[<span class="number">0</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]+b[<span class="number">2</span>])%mod;</span><br><span class="line">					c[<span class="number">1</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]*w2+b[<span class="number">2</span>]*w1)%mod;</span><br><span class="line">					c[<span class="number">2</span>]=(b[<span class="number">0</span>]+b[<span class="number">1</span>]*w1+b[<span class="number">2</span>]*w2)%mod;</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++) b[l]=c[l]*inv3%mod;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++) a[j+k+l*i]=b[l];</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll p3[<span class="number">10</span>],a[<span class="number">8</span>][M],_a[<span class="number">8</span>][M],b[<span class="number">8</span>][M],_b[<span class="number">8</span>][M],c[<span class="number">8</span>][M],n;</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p3[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">8</span>;i++) p3[i]=p3[i<span class="number">-1</span>]*<span class="number">3</span>;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%d&quot;</span>,&amp;n,&amp;p))</span><br><span class="line">	&#123;</span><br><span class="line">		ll now,tmp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">59</span>;~t;t--)</span><br><span class="line">		<span class="keyword">if</span>((now=(n&gt;&gt;t)))</span><br><span class="line">			<span class="keyword">if</span>(now==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">mem</span>(a[i]),<span class="built_in">mem</span>(b[i]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">8</span>;i++) a[i%p][p3[i]]=b[i%p][p3[i]]=<span class="number">1</span>;</span><br><span class="line">				a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//之后就可以有前导0</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">fwt</span>(a[i],M,<span class="number">1</span>),<span class="built_in">fwt</span>(b[i],M,<span class="number">1</span>),<span class="built_in">memcpy</span>(c[i],a[i],<span class="built_in">sizeof</span>(a[i]));</span><br><span class="line">				tmp=<span class="number">8</span>%p;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">mem</span>(_a[i]),<span class="built_in">mem</span>(_b[i]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> l=(i*tmp+j)%p;</span><br><span class="line">						<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;M;k++)</span><br><span class="line">							(_a[l][k]+=a[i][k]*a[j][k])%=mod,</span><br><span class="line">							(_b[l][k]+=b[i][k]*a[j][k])%=mod;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">memcpy</span>(a[i],_a[i],<span class="built_in">sizeof</span>(_a[i])),<span class="built_in">memcpy</span>(b[i],_b[i],<span class="built_in">sizeof</span>(_b[i]));</span><br><span class="line">				tmp=tmp*tmp%p;</span><br><span class="line">				<span class="keyword">if</span>(!(now&amp;<span class="number">1ll</span>)) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">mem</span>(_a[i]),<span class="built_in">mem</span>(_b[i]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> l=(i*<span class="number">8</span>+j)%p;</span><br><span class="line">						<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;M;k++)</span><br><span class="line">							(_a[l][k]+=a[i][k]*c[j][k])%=mod,</span><br><span class="line">							(_b[l][k]+=b[i][k]*c[j][k])%=mod;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++) <span class="built_in">memcpy</span>(a[i],_a[i],<span class="built_in">sizeof</span>(a[i])),<span class="built_in">memcpy</span>(b[i],_b[i],<span class="built_in">sizeof</span>(b[i]));</span><br><span class="line">				tmp=tmp*<span class="number">8</span>%p;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">fwt</span>(b[<span class="number">0</span>],M,<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,b[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>状态压缩</tag>
        <tag>倍增</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2019多校2</title>
    <url>/2019/12/27/hdu2019%E5%A4%9A%E6%A0%A12/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=849">2019 Multi-University Training Contest 2</a></p>
<span id="more"></span>

<h3 id="Problem-E-Everything-Is-Generated-In-Equal-Probability"><a href="#Problem-E-Everything-Is-Generated-In-Equal-Probability" class="headerlink" title="Problem E  Everything Is Generated In Equal Probability"></a>Problem E  Everything Is Generated In Equal Probability</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有一序列 $A$ ，$h(A)$ 表示 $A$ 的逆序对个数，设函数 $g(A)=g(B)+h(A)$，其中 $B$ 为 $A$ 的 $2^n$ 种子序列中等概率选取的一个子序列。</p>
<p>设 $f(n)$ 表示任意选取长度为 $n$ 的排列 $P$，$g(P)$ 的期望。</p>
<p>对于 $i\in[1,n]$ ，求 $f(i)$</p>
<p>$n\leq 3000$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>考虑一个长度为 $n$ 的排列，由期望的线性性，可知长度为 $n$ 的排列的逆序对个数 $w(n)$=每对 $(i,j)$ 组成逆序对的期望之和，即 $w(n)=\frac{\binom{n}{2}}{2}$。</p>
<p>因此有：</p>
<p>$$f(i)=\frac{1}{2^i}\sum_{j=0}^{i}\binom{i}{j}f(j)+w(i)$$</p>
<p>将 $f(i)$ 从和式提出，移项得：</p>
<p>$f(i)=\frac{1}{2^i-1}\sum_{j=0}^{i-1}\binom{i}{j}f(j)+\frac{2^i}{2^i-1}w(i)$</p>
<p>$O(n^2)$ 求出 $f(n)$ 。</p>
<h3 id="Problem-H-Harmonious-Army"><a href="#Problem-H-Harmonious-Army" class="headerlink" title="Problem H Harmonious Army"></a>Problem H Harmonious Army</h3><h3 id="Problem-I-I-Love-Palindrome-String"><a href="#Problem-I-I-Love-Palindrome-String" class="headerlink" title="Problem I I Love Palindrome String"></a>Problem I I Love Palindrome String</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给一字符串 $s$，$\forall i\in[1,|S|]$，求有多少个长度为 $i$ 的子串满足它是回文串且该子串的前一半也是回文串。</p>
<p>$|S|\leq 3\times 10^5,\sum|S|\leq 4\times 10^6$ </p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>建出PAM，然后沿着 fail 边 dfs。</p>
<h3 id="Problem-J-Just-Skip-The-Problem"><a href="#Problem-J-Just-Skip-The-Problem" class="headerlink" title="Problem J Just Skip The Problem"></a>Problem J Just Skip The Problem</h3><p>签到题，输出 $n!$ 。</p>
<h3 id="Problem-K-Keen-On-Everything-But-Triangle"><a href="#Problem-K-Keen-On-Everything-But-Triangle" class="headerlink" title="Problem K Keen On Everything But Triangle"></a>Problem K Keen On Everything But Triangle</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给一个序列 $a$ ，多次询问区间 $[l_i,r_i]$ 中是否存在三个下标不同的数组成三角形。</p>
<p>$n,m\leq 10^5,a_i\leq10^9$</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>首先判断一序列能否形成三角形的方法是把序列排序，然后相邻三个判断。</p>
<p>不能形成三角形的最坏情况是斐波那契数列，$f_{44}$ 左右的时候就大于 $10^9$ 了。</p>
<p>因此一个序列长度 $&gt;45$ 就必能形成三角形。</p>
<p>剩下的暴力即可。</p>
<h3 id="Problem-L-Longest-Subarray"><a href="#Problem-L-Longest-Subarray" class="headerlink" title="Problem L Longest Subarray"></a>Problem L Longest Subarray</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给一个序列 $a$，代表颜色，范围是 $[1,C]$求是否存在一个区间使得在此区间内出现过的每种颜色的出现次数大于等于 $k$。</p>
<p>$n,C,k\leq 10^5$</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>每种颜色分开来考虑：对于每种颜色，假设固定了左端点，那么右端点的合法范围为两段区间。</p>
<p>随着左端点向左移动，这些区间可以比较容易的维护。</p>
<p>那么对每种颜色的合法区间+1，求最大值是否为 $C$ 即可。</p>
<p>这是操作可以很方便的用线段树实现。</p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>思维题</tag>
        <tag>期望</tag>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu2019多校1</title>
    <url>/2019/12/26/hdu2019%E5%A4%9A%E6%A0%A11/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=848">2019 Multi-University Training Contest 1</a></p>
<span id="more"></span>

<h3 id="Problem-B-Operation"><a href="#Problem-B-Operation" class="headerlink" title="Problem B Operation"></a>Problem B Operation</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有一个序列 $a$，刚开始长度为 $n$。一共 $m$ 次操作，共两种操作：</p>
<p>1，询问在区间 $[l,r]$ 中选一些元素使得异或和最大。输出异或和。</p>
<p>2，在该序列结尾添加一个数。</p>
<p>$n,m\leq 5\times 10^5,0\leq a_i &lt; 2^{30}$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>一个很显然的做法是线段树维护线性基合并，时间 $O(n\log^2w\log n)$，其中 $w$ 为 $a_i$ 的位数。但是显然过不去。</p>
<p>因为只是从结尾加一个数，考虑维护前缀的线性基。</p>
<p>但查询的时候还需要知道线性基里的数是否满足它的下标比 $l-1$ 大。</p>
<p>这时候可以在线性基里记录第 $i$ 位的下标 $p_i$。</p>
<p>那么插入的时候贪心，如果遇到一个下标比它小的数，那么把 $p_i$ 和值替换，然后拿原来的数继续往下贪心即可。</p>
<p>询问的时候判断一下 $l\leq p_i$ 就可以了。</p>
<p>时间复杂度 $O(n\log w)$。</p>
<h3 id="Problem-D-Vacation"><a href="#Problem-D-Vacation" class="headerlink" title="Problem D Vacation"></a>Problem D Vacation</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>$n+1$ 辆车，每辆车有长度 $l$，车头到终点距离 $s$，最大速度 $v$。模拟整个过程，一辆车无法超过另一辆车，接触后只能以前面的车的速度行驶。问第 $0$ 辆车的车头通过终点的时间。</p>
<p>$n\leq 10^5,l_i,s_i,v_i\leq 10^9,s_i\geq s_{i+1}+l_{i+1}$</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>最后 0 车通过终点的时候肯定是与前面一堆车一起的，枚举最前面的车是哪一辆，计算出通过时间，取最大值即为答案。</p>
<p>时间复杂度 $O(n)$</p>
<h3 id="Problem-E-Path"><a href="#Problem-E-Path" class="headerlink" title="Problem E Path"></a>Problem E Path</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>一个有向图，问需要割哪些边，使得 $1$ 到 $n$ 的最短路变大。一个方案费用为边权之和。输出最小费用。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>建出最短路图，然后跑最小割即可。</p>
<h3 id="Problem-F-Typewriter"><a href="#Problem-F-Typewriter" class="headerlink" title="Problem F Typewriter"></a>Problem F Typewriter</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给一个字符串 $s$，有两种操作：</p>
<p>1，花费 $p$ 在当前字符串后添加一个字母。</p>
<p>2，花费 $q$ 在当前字符串后添加一个当前字符串的子串。</p>
<p>当前字符串刚开始为空串，求使得变为 $s$ 的最少花费。</p>
<p>$n\leq 2\times 10^5$</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>容易想到 dp，设 $f_i$ 表示匹配到第 $i$ 位时的答案。</p>
<p>设 $j$ 为使得 $s[1,j]\in s[j+1,i]$ 的最大的 $j$。</p>
<p>对于每个 $i$ 求出了 $j$ 就可以 dp 了。</p>
<p>发现当 $i$ 增大时 $j$ 不减。</p>
<p>用 SAM 维护 $s[1,j]$ ，若 $s[j+1,i]$ 匹配不了，则把 $s_{j+1}$ 扔进 SAM 里，维护一下 $s[j+1,i]$ 在 SAM 中的位置以及是否匹配。</p>
<p>匹配位置最多往回跳 $n$ 次，最多往前加 $n$ 次。</p>
<p>时间复杂度 $O(n)$</p>
<h3 id="Problem-I-String"><a href="#Problem-I-String" class="headerlink" title="Problem I String"></a>Problem I String</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给一个字符串 $s$，构造一个字典序最小的，第 $i$ 个小写字母出现次数在 $[l_i,r_i]$ 范围内的子序列。</p>
<p>$n\leq 10^5$</p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>贪心，顺次考虑当前位能填的字母，从小到大枚举，判断是否可行的办法是先用序列自动机找到最靠前的那一位，然后记录每个字母是否出现的后缀和，再判断一下就可以了。</p>
<p>时间复杂度 $O(|S|\sum)$，其中 $\sum$ 为字符集大小。</p>
<h3 id="Problem-L-Sequence"><a href="#Problem-L-Sequence" class="headerlink" title="Problem L Sequence"></a>Problem L Sequence</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>一个长度为 $n$ 的序列 $a$，有 $m$ 次操作，每次操作一个 $k(k\in [1,3])$ ，则新的序列 $a$ 满足 $a’<em>{i}=\sum</em>{j=i-kx}a_j(k\geq 0)$</p>
<p>求出 $m$ 次操作后的序列，模 $998244353$。</p>
<p>$n\leq 10^5,m\leq 10^6$</p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>设该序列生成函数为 $A(x)=\sum_{i=1}^{n}a_ix^i$</p>
<p>那么一次操作相当于给 $A(x)$ 乘上一个 $\sum_{i=0}x^{ik}$</p>
<p>因此最后答案与操作顺序无关。</p>
<p>很显然的做法是多项式快速幂，比较卡常，好像过不了（反正当时没有过）。</p>
<p>那么考虑 $(\sum_{i=0}x^{ik})^m$ 等于什么。</p>
<p>由于 $(\sum_{i=0}x^i)^m=\sum_{i=0}\binom{m-1+i}{m-1}x^i$</p>
<p>那么 $(\sum_{i=0}x^{ik})^m=\sum_{i=0}\binom{m-1+i}{m-1}x^{ik}$</p>
<p>这样对于每个 $k$ 就只需要做一次卷积就可以了。</p>
<p>时间复杂度 $O(n\log n)$ </p>
]]></content>
      <categories>
        <category>hdu</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>网络流</tag>
        <tag>SAM</tag>
        <tag>FFT</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>局部极小值[cqoi2012]</title>
    <url>/2019/12/26/%E5%B1%80%E9%83%A8%E6%9E%81%E5%B0%8F%E5%80%BC-cqoi2012/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个 $n$ 行 $m$ 列的整数矩阵，其中 $1$ 到 $nm$ 之间的每个整数恰好出现一次。如果一个格子比所有相邻格子（$8$ 连通）都小，我们说这个格子是局部极小值。</p>
<p>给出所有局部极小值的位置，你的任务是判断有多少个可能的矩阵，对 $12345678$ 取模。</p>
<p>$n\leq 4,m\leq 7$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>范围这么小，比较容易想到的是状压dp，设 $f_{i,S}$ 表示考虑到第 $i$ 个数，局部最小值中的数已经填上的状态是 $S$ 的方案数。</p>
<p>分类讨论一下是否填的是局部最小值的位置，预处理一下，然后转移即可。</p>
<p>时间复杂度 $O(2^{|S|}nm|S|)$。</p>
<p>但是好像有点不对，因为只保证了你钦定的点是极小值，你没钦定的也可能变成极小值。</p>
<p>于是容斥一下，枚举哪一些点可能成为极小值，由子集反演可知容斥系数为 $(-1)^{|T|-|S|}$</p>
<p>用 dfs 枚举，加上一些适当剪枝。</p>
<p>时间复杂度 $O(不会分析)$。</p>
<h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> P 12345678ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="type">int</span> fx[<span class="number">9</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> fy[<span class="number">9</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,top;</span><br><span class="line"><span class="type">char</span> s[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;<span class="number">0</span> &amp;&amp; x&lt;=n &amp;&amp; y&gt;<span class="number">0</span> &amp;&amp; y&lt;=m;&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;<span class="type">int</span> x,y;&#125;;</span><br><span class="line">Point a[<span class="number">10</span>],st[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> g[<span class="number">260</span>],f[<span class="number">30</span>][<span class="number">260</span>],tot;</span><br><span class="line"><span class="type">bool</span> bo[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function">LL <span class="title">dp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">			<span class="keyword">if</span>(s[i][j] == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">				a[tot++] = (Point)&#123;i,j&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> sta = <span class="number">0</span>;sta&lt;(<span class="number">1</span>&lt;&lt;tot);sta++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[sta] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tot;i++) <span class="keyword">if</span>(~sta&amp;(<span class="number">1</span>&lt;&lt;i)) bo[a[i].x][a[i].y] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> k;</span><br><span class="line">				<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">9</span>;k++)</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">check</span>(i+fx[k],j+fy[k]) &amp;&amp; bo[i+fx[k]][j+fy[k]]) <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(k == <span class="number">9</span>) g[sta]++;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tot;i++) <span class="keyword">if</span>(~sta&amp;(<span class="number">1</span>&lt;&lt;i)) bo[a[i].x][a[i].y] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> sta=<span class="number">0</span>;sta&lt;(<span class="number">1</span>&lt;&lt;tot);sta++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][sta] = f[i<span class="number">-1</span>][sta] * <span class="built_in">max</span>(g[sta]-i+<span class="number">1</span>,<span class="number">0</span>) % P;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;tot;j++)</span><br><span class="line">				<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;sta)</span><br><span class="line">					f[i][sta] = (f[i][sta]+f[i<span class="number">-1</span>][sta^(<span class="number">1</span>&lt;&lt;j)])%P;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> f[n*m][(<span class="number">1</span>&lt;&lt;tot)<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(now &gt; top) <span class="keyword">return</span> <span class="built_in">void</span>((ans += d*<span class="built_in">dp</span>()%P+P)%=P);</span><br><span class="line">	<span class="built_in">dfs</span>(now+<span class="number">1</span>,d);</span><br><span class="line">	<span class="type">int</span> x = st[now].x,y = st[now].y,k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">9</span>;k++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(x+fx[k],y+fy[k]) &amp;&amp; s[x+fx[k]][y+fy[k]] == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">if</span>(k!=<span class="number">9</span>) <span class="keyword">return</span>;</span><br><span class="line">	s[x][y] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(now+<span class="number">1</span>,-d);</span><br><span class="line">	s[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,k;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">9</span>;k++) <span class="keyword">if</span>(<span class="built_in">check</span>(i + fx[k],j + fy[k]) &amp;&amp; s[i+fx[k]][j+fy[k]] == <span class="string">&#x27;X&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(k == <span class="number">9</span>) st[++top] = (Point)&#123;i,j&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bzoj</category>
        <category>各省省选</category>
      </categories>
      <tags>
        <tag>容斥原理</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>FFT</title>
    <url>/2019/12/25/FFT/</url>
    <content><![CDATA[<p>FFT有关的知识点总结。</p>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="多项式求导"><a href="#多项式求导" class="headerlink" title="多项式求导"></a>多项式求导</h3><p>根据 $(x^n)’=nx^{n-1}$ 可推出。</p>
<h3 id="多项式不定积分"><a href="#多项式不定积分" class="headerlink" title="多项式不定积分"></a>多项式不定积分</h3><p>根据 $\int x^ndx=\frac{x^{n+1}}{n+1} +C$ 可推出。</p>
<h3 id="多项式加法"><a href="#多项式加法" class="headerlink" title="多项式加法"></a>多项式加法</h3><p>对应系数相加。</p>
<h3 id="多项式减法"><a href="#多项式减法" class="headerlink" title="多项式减法"></a>多项式减法</h3><p>对应系数相减。</p>
<h3 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h3><h4 id="DFT与IDFT的原理"><a href="#DFT与IDFT的原理" class="headerlink" title="DFT与IDFT的原理"></a>DFT与IDFT的原理</h4><p>给定两个多项式 $A(x)=\sum_{i=0}^na_ix^i,B(x)=\sum_{i=0}^nb_ix^i$，则两个多项式相乘后是：$(A * B)(x)=(a_0b_0)+(a_1b_0+a_0b_1)x+\dots+(a_nb_n)x^{2n}$</p>
<p>一个 $n$ 次多项式 $f(x)=\sum_{i=0}^na_ix^i$ 可以由 $n+1$ 个点  $(x_i,f(x_i))$ 唯一表示，那么FFT就是把两个多项式 $A(x),B(x)$（假设系数都为 $n$，不够最高位补0即可）的系数表示法转成由<strong>大于</strong> $2n$ 个（因为相乘后多项式的次数是 $2n$的，要用大于 $2n$ 个点值才能表示）相同的点值 （即$(x_i,A(x_i)),(x_i,B(x_i))$）表示，然后对应函数值相乘，得到点值：$(x_i,A(x_i) \times B(x_i))$，最后再把点值表示换成系数表示的过程。</p>
<p>如果随便取一些 $x_i$，那么每次操作是 $O(n^2)$ 的，毫无卵用。。。</p>
<p>假设我们要取 $n$ 个点值（不妨设 $n$ 为偶数）。</p>
<p>考虑 $x_k$ 为方程 $x^n=1$ 的复数解，即 $x_k=\omega _ n ^ k = e ^ {\frac{2k\pi i}{n}}=\cos(\frac{2k\pi}{n})+i\sin(\frac{2k\pi}{n})$</p>
<p>取 $1$ 的 $n$ 次单位根的作用在于，这个 $\omega _ n ^ k$ 有如下性质：</p>
<p>1，$\omega _ n^k=\omega _ n^{k \bmod n}$</p>
<p>2，若 $n,k$ 为偶数，则 $\omega _ n^k=\omega _ {n/2}^{k/2}$</p>
<p>证明都十分显然。</p>
<p>我们先回到原问题上面，现在要求的是 $f(\omega _ n^0),f(\omega _ n^1)…f(\omega _ n^{n-1})$，考虑分治，把多项式中次数为偶数的系数放在 $f_0$ 中，奇数的放在 $f_1$ 中，即：<br>$$f_0(x)=\sum_{i=0}^{2i\leq n}a_{2i}x^i\\f_1(x)=\sum_{i=0}^{2i+1\leq n}a_{2i+1}x^i$$<br>那么有：$f(\omega _ n^k)=f_0((\omega _ n^k)^2)+(\omega _ n^k)f_1((\omega _ n^k)^2)$</p>
<p>又因为 $(\omega _ n^k)^2=\omega _ n^{2k}=\omega _ {n/2}^k$</p>
<p>所以：$$f(\omega _ n^k)=f_0(\omega _ {n/2}^k)+(\omega _ n^k)f_1((\omega _ {n/2}^k))\ (0\leq k &lt; n)$$</p>
<p>当 $0\leq k &lt; \frac{n}{2} $ 时，有：<br>$$f(\omega _ n^k)=f_0(\omega _ {n/2}^k)+(\omega _ n^k)f_1((\omega _ {n/2}^k))\\f(\omega _ n^{k+\frac{n}{2}})=f_0(\omega _ {n/2}^k)-(\omega _ n^k)f_1((\omega _ {n/2}^k))$$</p>
<p>这样就变成了两个子问题，递归求解即可。时间复杂度 $O(n\log n)$</p>
<p>现在我们已经将多项式用系数表示转成点值表示(dft)了，那么这个操作的逆变换(idft)怎么做呢？</p>
<p>考虑dft的过程，可以变成矩阵相乘的形式：</p>
<p>$$\begin{bmatrix}<br>f(\omega _ n^0)\\<br>f(\omega 1)\\<br>f(\omega 2) \<br>\vdots\\<br>f(\omega _ n^{n-1})<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>1 &amp; 1 &amp; 1 &amp; \dots &amp; 1\\<br>1 &amp; \omega _ n^1 &amp; \omega _ n^2 &amp; \dots &amp;\omega _ n^{n-1} \\<br>1 &amp; \omega _ n^2 &amp; \omega _ n^4 &amp; \dots &amp; \omega _ n^{2(n-1)}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\<br>1 &amp; \omega _ n^{n-1} &amp; \omega _ n^{2(n-1)} &amp; \dots &amp; \omega _ n^{(n-1)(n-1)}<br>\end{bmatrix}<br>\begin{bmatrix}<br>a_0\\<br>a_1\\<br>a_2\\<br>\vdots\\<br>a_{n-1}<br>\end{bmatrix}\$$</p>
<p>将上述表达式从左到右的矩阵记为 $Y,V,A$，则有 $Y=VA$。</p>
<p>因为是逆过程，所以要找到 $V$ 的逆矩阵使得 $V^{-1}Y=A$.</p>
<p>可以发现<del>我也不知道是怎么发现的</del> ，下面这个矩阵就是 $V$ 的逆矩阵：</p>
<p>$$V^{-1}<br>=\frac{1}{n}<br>\begin{bmatrix}<br>1 &amp; 1 &amp; 1 &amp; \dots &amp; 1\\<br>1 &amp; \omega _ n^{-1} &amp; \omega _ n^{-2} &amp; \dots &amp;\omega _ n^{-(n-1)} \\<br>1 &amp; \omega _ n^{-2} &amp; \omega _ n^{-4} &amp; \dots &amp; \omega _ n^{-2(n-1)}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \dots &amp; \vdots\\<br>1 &amp; \omega _ n^{-(n-1)} &amp; \omega _ n^{-2(n-1)} &amp; \dots &amp; \omega _ n^{-(n-1)(n-1)}<br>\end{bmatrix}<br>$$</p>
<p>证明的话…可以考虑暴力矩阵乘法：$C_{ij}=\sum_{k}V_{ik}V^{-1} _ {kj}$，把两个矩阵暴力乘起来后可以发现当 $i=j$ 时，$C_{ii}$ 的值为 $n$ ，否则为 $0$.</p>
<p>那么idft的过程就与dft的类似了。</p>
<p>所以只需要将序列分别dft一下，然后对应相乘，最后idft回去就可以啦~</p>
<p><strong>到现在为止我们能做一个递归版的 fft 啦！</strong></p>
<p>但时实测这样的速度非常慢，需要写非递归的。</p>
<p>考虑 fft 的过程，经过一堆分治后，系数 $a_i$最终会到达一个位置上，而这些位置跟 $i$ 有关，如果 $i$ 是偶数就会被分到 $f_0(x)$ 中（即左边），否则会被分到右边，因此 $i$ 最后的位置是将 $i$ 在二进制表示下将位翻转后的位置，预处理即可。</p>
<p><strong>到现在为止我们就会做一个非递归版的 fft 啦！</strong></p>
<h4 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h4><p>那如果要对大质数取模呢？</p>
<p>我们直接跑FFT，最后取个模不就可以了？</p>
<p>但是FFT会有比较大的精度问题，当数字比较大的时候很容易挂掉。</p>
<p>考虑这个质数的一个原根 $g$，它的性质与 $n$ 次单位根相似，即 $g^{P-1} \equiv 1(\bmod p)$，但因为我们必须要保证每次做 dft 时次数 $n$ 必须是偶数，所以一开始的 $n$ 必须是2的次幂。所以要满足：$2^k | (P-1)$。</p>
<p>如当 $P=998244353$ 时， $k$ 最大是 $23$，即 $n$ 最大是 $8388608‬$。这就是<strong>快速数论变换（NTT）</strong>了。此时需满足 $P$ 为质数，且满足 $2^k|(P-1)$ 中最大的 $k$ 要满足 $n\leq 2^k$。</p>
<p>能跑NTT的一些模数有：$998244353,1004535809,469762049$ 等，这三个数的原根都有 $3$。</p>
<p><strong>到现在为止我们就会做一个非递归版的对模数有限制的 ntt 啦！</strong></p>
<p>一个小模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> G 3<span class="comment">//原根</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353ll<span class="comment">//模数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> R[N],L;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre_ntt</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">1</span>,L=<span class="number">0</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>) L++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++) R[i] = (R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line">	<span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(LL *a,<span class="type">int</span> n,<span class="type">int</span> t)</span><span class="comment">//t=1时为dft,-1时为idft</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">if</span>(i&gt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(i&lt;&lt;<span class="number">1</span>)&lt;=n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ll wn=<span class="built_in">Pow</span>(G,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">-1</span>) wn=<span class="built_in">Pow</span>(wn,mod<span class="number">-2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			ll w=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++,w=w*wn%mod)</span><br><span class="line">			&#123;</span><br><span class="line">				ll x=a[j+k],y=a[i+j+k]*w%mod;</span><br><span class="line">				a[j+k]=(x+y)%mod; a[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	ll invn=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) a[i]=a[i]*invn%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="任意模数FFT"><a href="#任意模数FFT" class="headerlink" title="任意模数FFT"></a>任意模数FFT</h4><p>那如果模数不满足上面的限制呢？</p>
<p>这时有两种方法：</p>
<h5 id="三模数FFT"><a href="#三模数FFT" class="headerlink" title="三模数FFT"></a>三模数FFT</h5><p>先拿几个能做NTT的模数跑一次 NTT，然后用中国剩余定理合并。</p>
<p>显然选三个比较大的模数就可以了。</p>
<h5 id="拆系数FFT"><a href="#拆系数FFT" class="headerlink" title="拆系数FFT"></a>拆系数FFT</h5><p>设 $m=\left \lfloor \sqrt{P} \right \rfloor$，将FFT中每个数表示成 $bm+a$ 的形式，且 $a&lt;m$。那么就可以将两个数的乘法拆成四部分：$(bm+a)(dm+c)=bdm^2+(bc+ad)m+ac$。然后分别做普通的 FFT ，这样就避免了精度问题。此时一共需要 $4$ 次DFT，$3$ 次IDFT。常数大到爆炸。</p>
<p>考虑优化DFT，将两次dft合并到一次。</p>
<p>假设现在要求 $dft(a)$ 与 $dft(b)$。</p>
<p>设 $f_k=a_k+ib_k,g_k=a_k-ib_k$。</p>
<p>将有 $dft(f)<em>k=\text{conj}(dft(g)</em>{n-k})$。其中 $\text{conj}$ 表示共轭。</p>
<p>证明：$dft(f)<em>k=\sum</em>{j=0}^{n-1} w_n^{kj}f_j=\sum_{j=0}^{n-1} \text{conj}(w_n^{-kj}g_j)=\sum_{j=0}^{n-1} w_n^{kj}\text{conj}(g_j)=\text{conj}(dft(g)_{n-k})$。</p>
<p>于是 $dft(a)_k=\frac{dft(f)_k+dft(g)_k}{2}$ ，$dft(b)_k=-i\times \frac{dft(f)_k-dft(g)_k}{2}$。</p>
<p>这样做的前提条件显然是 $a,b$ 中的数均为实数。</p>
<p>考虑优化IDFT，设 $h=dft(a)+i\times dft(b)$。</p>
<p>那么 $idft(h)$ 的实部即为 $a$，虚部即为 $b$。</p>
<p>于是就优化成了分别 $2$ 次的DFT和IDFT了。</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ll mo=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">db pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">	db x,y;</span><br><span class="line">	<span class="built_in">P</span>(db _x=<span class="number">0</span>,db _y=<span class="number">0</span>) &#123;x=_x,y=_y;&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> +(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x+B.x,A.y+B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> -(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x-B.x,A.y-B.y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> *(<span class="type">const</span> P&amp;A,<span class="type">const</span> P&amp;B)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x*B.x-A.y*B.y,A.x*B.y+A.y*B.x&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">inline</span> P <span class="keyword">operator</span> /(<span class="type">const</span> P&amp;A,<span class="type">const</span> db &amp;x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (P)&#123;A.x/x,A.y/x&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">P <span class="title">conj</span><span class="params">(P A)</span> </span>&#123;<span class="keyword">return</span> (P)&#123;A.x,-A.y&#125;;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">P W[M]; <span class="type">int</span> R[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">			W[i+j]=(P)&#123;<span class="built_in">cos</span>(pi*j/i),<span class="built_in">sin</span>(pi*j/i)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;P&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(P *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	P w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k],</span><br><span class="line">				a[i+j+k]=a[j+k]-w,</span><br><span class="line">				a[j+k]=a[j+k]+w;</span><br><span class="line">	<span class="keyword">if</span>(t==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=a[i]/n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]+B[i];</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Real(A) ((ll)floor(A.x+0.5))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Imag(A) ((ll)floor(A.y+0.5))</span></span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> Poly C,D;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	C.<span class="built_in">resize</span>(len); D.<span class="built_in">resize</span>(len); A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(P)&#123;<span class="built_in">Real</span>(A[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(A[i])&gt;&gt;<span class="number">15</span>&#125;,D[i]=(P)&#123;<span class="built_in">Real</span>(B[i])&amp;<span class="number">32767</span>,<span class="built_in">Real</span>(B[i])&gt;&gt;<span class="number">15</span>&#125;;</span><br><span class="line">	<span class="built_in">ntt</span>(C,len,<span class="number">1</span>); <span class="built_in">ntt</span>(D,len,<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len)</span><br><span class="line">	&#123;</span><br><span class="line">		P d4,d0,d1,d2,d3;</span><br><span class="line">		j=(len-i)&amp;(len<span class="number">-1</span>);</span><br><span class="line">		d4=<span class="built_in">conj</span>(C[j]);</span><br><span class="line">		d0=(d4+C[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">		d1=(d4-C[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">		d4=<span class="built_in">conj</span>(D[j]);</span><br><span class="line">		d2=(d4+D[i])*<span class="built_in">P</span>(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">		d3=(d4-D[i])*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">		A[i]=d0*d2+d1*d3*<span class="built_in">P</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">		B[i]=d0*d3+d1*d2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) C[i]=(<span class="built_in">Real</span>(A[i]) + (<span class="built_in">Imag</span>(A[i]) % mo &lt;&lt; <span class="number">30</span>) + (<span class="built_in">Real</span>(B[i]) % mo &lt;&lt; <span class="number">15</span>))%mo;</span><br><span class="line">	C.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="一些技能"><a href="#一些技能" class="headerlink" title="一些技能"></a>一些技能</h2><h3 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h3><p>给一个$n$次多项式$A(x)$，求$B(x)$满足$A(x)* B(x)\equiv 1\left ( \bmod x^n \right )$</p>
<p>不妨设$n$为2的次幂：</p>
<p>当$n=1$时，求一个整数的逆就好了。</p>
<p>当$n\geq 2$时，</p>
<p>假设已经求出了$A(x)* C(x)\equiv 1\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>$\because A(x)* B(x)\equiv 1\left ( \bmod x^n \right )$</p>
<p>$\therefore A(x)* B(x)\equiv 1\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>$\therefore A(x)* (B(x)-C(x))\equiv 0\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>又$\because A(x)\not\equiv 0\left ( \bmod x^n \right )$</p>
<p>$\therefore (B(x)-C(x))\equiv 0\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>仔细想一想可以发现$\left (B(x)-C(x)\right )^2\equiv 0\left ( \bmod x^{n} \right )$</p>
<p>化简得$B^{2}(x)+C^{2}(x)-2B(x)C(x)\equiv 0\left ( \bmod x^{n} \right )$</p>
<p>同时乘上$A(x)$得：$B(x)+A(x)* C^{2}(x)-2C(x)\equiv 0\left ( \bmod x^{n} \right )$</p>
<p>移项得：$B(x)\equiv C(x)\left ( 2-A(x)* C(x)\right )\left ( \bmod x^{n} \right )$</p>
<p>多项式乘法+倍增即可。</p>
<p>时间复杂度$T(n)=T(\frac{n}{2})+O(n\log n)=O(n\log n)$</p>
<h3 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h3><p>给两个次数分别为$n$和$m$的多项式$F(x),G(x)$，求$Q(x),R(x)$满足$F(x)=G(x)* Q(x)+R(x)$,且$Q(x)$的次数为$n-m$</p>
<p>$\because F(x)\equiv G(x)* Q(x)+R(x)\left ( \bmod x^{n+1}\right )$</p>
<p>$\therefore  F(\frac{1}{x})\equiv G(\frac{1}{x})* Q(\frac{1}{x})+R(\frac{1}{x})\left ( \bmod x^{n+1}\right )$</p>
<p>同时乘以$x^n$得：$ F^{rev}(x)\equiv G^{rev}(x)* Q^{rev}(x)+R^{rev}(x)\times x^{n-dR}\left ( \bmod x^{n+1}\right )$(其中$rev$表示将多项式系数翻转，$dR$表示$R$这个多项式的次数，其余同理)</p>
<p>$\because dR &lt; m $</p>
<p>$\therefore n-dR&gt;n-m$</p>
<p>因此在$\bmod x^{n-m+1}$意义下，$R^{rev}(x)\times x^{n-dR}\equiv 0$</p>
<p>$\therefore F^{rev}(x)\equiv G^{rev}(x)* Q^{rev}(x) \left ( \bmod x^{n-m+1}\right )$</p>
<p>多项式求逆+翻转即可。</p>
<p>时间复杂度$O(n\log n)$</p>
<h3 id="多项式取模"><a href="#多项式取模" class="headerlink" title="多项式取模"></a>多项式取模</h3><p>求出除法以后，取模变得非常简单。</p>
<p>时间复杂度$O(n\log n)$</p>
<h3 id="多项式开方"><a href="#多项式开方" class="headerlink" title="多项式开方"></a>多项式开方</h3><p>给一个$n$次多项式$A(x)$，求$B(x)$满足$A(x)\equiv B^{2}(x)\left ( \bmod x^n \right )$</p>
<p>还是考虑倍增：</p>
<p>不妨设$n$为2的次幂：</p>
<p>当$n=1$时，求$x^2\equiv a\left ( \bmod p\right )$的解<del>就好了</del>。比较多的题目会保证常数项为1.</p>
<p>当$n\geq 2$时，</p>
<p>假设已经求出了$A(x)\equiv C^2(x)\left ( \bmod x^{\frac{n}{2}} \right )$，</p>
<p>易得$\left ( C(x)-B(x)\right ) * \left ( C(x)+B(x)\right )\equiv 0\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>因此会有两个解，设$C(x)-B(x)\equiv 0\left ( \bmod x^{\frac{n}{2}} \right )$，则有$  C(x)+B(x)\equiv 0\left ( \bmod x^{\frac{n}{2}} \right )$</p>
<p>所以$ \left ( C(x)+B(x)\right )^2\equiv 0\Rightarrow C^2(x)+B^2(x)+2B(x)* C(x)\equiv 0\Rightarrow B(x)\equiv-\frac{C^2(x)+A(x)}{2C(x)}\left ( \bmod x^{n} \right )$</p>
<p>多项式求逆+乘法+倍增即可。</p>
<p>时间复杂度$T(n)=T(\frac{n}{2})+O(n\log n)=O(n\log n)$</p>
<h3 id="多项式ln"><a href="#多项式ln" class="headerlink" title="多项式ln"></a>多项式ln</h3><p>为啥多项式可以求ln啊。。。无法理解。。。</p>
<p>先来看看泰勒展开：</p>
<p>$$e^x=\sum_{i=0}^{\infty}\frac{x^i}{i!}$$</p>
<p>那么多项式求ln实际上就是知道$G(x)=e^{F(x)}$，让你求$F(x)$的过程。</p>
<p>对等式两边同时求$ln$得$\ln(G(x))=F(x)$</p>
<p>求导得：$\frac{G’(x)}{G(x)}=F’(x)$</p>
<p>求积分得：$\int {\frac{G’(x)}{G(x)}}=F(x)$</p>
<p>没了。。。</p>
<p>时间复杂度$O(n\log n)$</p>
<h3 id="多项式exp"><a href="#多项式exp" class="headerlink" title="多项式exp"></a>多项式exp</h3><p>能求ln那当然能求exp啦。</p>
<p>$F(x)=e^{A(x)}$</p>
<p>求ln得：$\ln  F(x)=A(x)$</p>
<p>$\ln F(x)-A(x)=0$</p>
<p>考虑牛顿迭代：</p>
<p>$F_{i+1}(x)=F_i(x)-\frac{\ln F_{i}(x)-A(x)}{\left (\ln F_{i}(x)-A(x) \right )’}=F_{i}(x)-\frac{\ln F_{i}(x)-A(x)}{\frac{1}{F_{i}(x)}}=F_{i}(x)\left ( 1-\ln F_{i}(x)+A(x)\right )\left ( \bmod x^n \right )$</p>
<p>每次迭代 $n$ 会翻一倍，时间复杂度$T(n)=T(\frac{n}{2})+O(n\log n)=O(n\log n)$</p>
<h3 id="多项式求幂"><a href="#多项式求幂" class="headerlink" title="多项式求幂"></a>多项式求幂</h3><p>$F(x)=A^{k}(x)$</p>
<p>两边同时取对数得：$\ln F(x)=k \ln A(x)$</p>
<p>同时取指数得：$F(x)=\exp\left ( k\ln A(x)\right )$</p>
<p>时间复杂度 $O(n\log n)$</p>
<h3 id="多项式三角函数"><a href="#多项式三角函数" class="headerlink" title="多项式三角函数"></a>多项式三角函数</h3><p>不是很清楚这种东西有什么用…</p>
<p>求 $\sin(A),\cos(A)$ ：</p>
<p>直接硬上欧拉公式：</p>
<p>$$e^{ix}=\cos(x)+i\sin(x)\\ e^{-ix}=\cos(x)-i\sin(x)$$</p>
<p>解得：</p>
<p>$$\cos(x)=\frac{e^{ix}+e^{-ix}}{2}\\\sin(x)=\frac{e^{ix}-e^{-ix}}{2}$$</p>
<p>但是在模意义这个 $i$ 该怎么办呢？</p>
<p>考虑 $i^2=-1$，所以在模 $mod$ 的意义下这个 $i$ 就是 $mod-1$ 的二次剩余。</p>
<h3 id="多点求值"><a href="#多点求值" class="headerlink" title="多点求值"></a>多点求值</h3><a href="/2021/09/02/%E5%A4%9A%E7%82%B9%E6%B1%82%E5%80%BC/" title="“详见-多点求值”">“详见-多点求值”</a>

<h3 id="多点插值"><a href="#多点插值" class="headerlink" title="多点插值"></a>多点插值</h3><h3 id="常系数齐次线性递推"><a href="#常系数齐次线性递推" class="headerlink" title="常系数齐次线性递推"></a>常系数齐次线性递推</h3><a href="/2021/08/31/%E5%B8%B8%E7%B3%BB%E6%95%B0%E7%BA%BF%E6%80%A7%E9%BD%90%E6%AC%A1%E9%80%92%E6%8E%A8/" title="“详见”">“详见”</a>

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FO(x) freopen(#x<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),freopen(#x<span class="string">&quot;.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fo(i,j,k) for(int i=(j),end_i=(k);i&lt;=end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff(i,j,k) for(int i=(j),end_i=(k);i&lt; end_i;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fd(i,j,k) for(int i=(j),end_i=(k);i&gt;=end_i;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(x) cerr&lt;&lt;#x&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cle(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lb long db</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>(); <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=<span class="built_in">getchar</span>()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASET fo(___,1,read())</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Add</span><span class="params">(ll x,ll y)</span></span>&#123;x+=y; <span class="keyword">return</span> (x&lt;mod)?x:x-mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dec</span><span class="params">(ll x,ll y)</span></span>&#123;x-=y; <span class="keyword">return</span> (x&lt;<span class="number">0</span>)?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Mul</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line">ll W[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">PolyInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]=<span class="number">1</span>; w=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">2</span>/i);</span><br><span class="line">		<span class="built_in">fo</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) W[i+j]=W[i+j<span class="number">-1</span>]*w%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;ll&gt; Poly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *a,<span class="type">int</span> n,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> R[M];</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(i&lt;R[i]) <span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	ll w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">				w=W[i+k]*a[i+j+k]%mod,</span><br><span class="line">				a[i+j+k]=<span class="built_in">Dec</span>(a[j+k],w),</span><br><span class="line">				a[j+k]=<span class="built_in">Add</span>(a[j+k],w);</span><br><span class="line">	<span class="keyword">if</span>(t^<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">		w=<span class="built_in">Pow</span>(n,mod<span class="number">-2</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=w*a[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(Poly &amp;A,<span class="type">int</span> n,<span class="type">int</span> t)</span></span>&#123;<span class="built_in">ntt</span>(&amp;A[<span class="number">0</span>],n,t);&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> +(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Add</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> -(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(<span class="built_in">max</span>(A.<span class="built_in">size</span>(),B.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,B.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=<span class="built_in">Dec</span>(A[i],B[i]);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">df</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i<span class="number">-1</span>]=A[i]*i%mod;</span><br><span class="line">	A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">jf</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,A.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>) A[i]=A[i<span class="number">-1</span>]*<span class="built_in">Pow</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">	A[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*k%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> *(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>(),k=n+m<span class="number">-1</span>,len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;k;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(A,len,<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,len<span class="number">-1</span>) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(k);</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ~(Poly f)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=f.<span class="built_in">size</span>();</span><br><span class="line">	Poly g,h;</span><br><span class="line">	g.<span class="built_in">pb</span>(<span class="built_in">Pow</span>(f[<span class="number">0</span>],mod<span class="number">-2</span>));</span><br><span class="line">	<span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		h.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) h[i]=f[i];</span><br><span class="line">		<span class="built_in">ntt</span>(h,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],h[i]),g[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	g.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>); f.<span class="built_in">resize</span>(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(f,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>); <span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,(m&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>) g[i]=<span class="built_in">Mul</span>(<span class="number">2</span>+mod-<span class="built_in">Mul</span>(g[i],f[i]),g[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(g,m&lt;&lt;<span class="number">1</span>,<span class="number">-1</span>); g.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Ln</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	A=<span class="built_in">jf</span>((~A)*<span class="built_in">df</span>(A));</span><br><span class="line">	A.<span class="built_in">resize</span>(n); <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Exp</span><span class="params">(<span class="type">const</span> Poly &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>; <span class="keyword">for</span>(;n&lt;A.<span class="built_in">size</span>();n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	Poly B,C,D; B.<span class="built_in">clear</span>(); B.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">2</span>;m&lt;=n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=B; C.<span class="built_in">resize</span>(m); D=A; D.<span class="built_in">resize</span>(m);</span><br><span class="line">		C=D-<span class="built_in">Ln</span>(C); C[<span class="number">0</span>]=<span class="built_in">Add</span>(C[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">		B=B*C; B.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span> ^(Poly A,ll k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(!A.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	ll tmp=A[<span class="number">0</span>],w=<span class="built_in">Pow</span>(tmp,k);</span><br><span class="line">	tmp=<span class="built_in">Pow</span>(tmp,mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*tmp%mod;</span><br><span class="line">	A=<span class="built_in">Exp</span>(<span class="built_in">Ln</span>(A)*k);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,A.<span class="built_in">size</span>()<span class="number">-1</span>) A[i]=A[i]*w%mod;</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Cos</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)+<span class="built_in">Exp</span>(A*(mod-w4)))*((mod+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sin</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> ll w4=<span class="built_in">Pow</span>(<span class="number">3</span>,(mod<span class="number">-1</span>)/<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">Exp</span>(A*w4)-<span class="built_in">Exp</span>(A*(mod-w4)))*(<span class="built_in">Pow</span>(w4,mod<span class="number">-2</span>)*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Sqrt</span><span class="params">(Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly C,D,<span class="built_in">B</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	C.<span class="built_in">clear</span>(); D.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">4</span>;(l&gt;&gt;<span class="number">2</span>)&lt;n;l&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		C=A; C.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		D=B; D.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>); D=(~D);</span><br><span class="line">		C.<span class="built_in">resize</span>(l); D.<span class="built_in">resize</span>(l);</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">1</span>); <span class="built_in">ntt</span>(D,l,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,l) C[i]=C[i]*D[i]%mod;</span><br><span class="line">		<span class="built_in">ntt</span>(C,l,<span class="number">-1</span>);</span><br><span class="line">		B.<span class="built_in">resize</span>(l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">ff</span>(i,<span class="number">0</span>,(l&gt;&gt;<span class="number">1</span>)) B[i]=<span class="built_in">Add</span>(C[i],B[i])*((mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	B.<span class="built_in">resize</span>(n);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>/(Poly A,Poly B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>,deg=A.<span class="built_in">size</span>()-B.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A)); <span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;=deg;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	B.<span class="built_in">resize</span>(len); B=~B; B.<span class="built_in">resize</span>(deg);</span><br><span class="line">	A=A*B; A.<span class="built_in">resize</span>(deg);</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(A));</span><br><span class="line">	<span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Poly <span class="keyword">operator</span>%(<span class="type">const</span> Poly &amp;A,<span class="type">const</span> Poly &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(A.<span class="built_in">size</span>()&lt;B.<span class="built_in">size</span>()) <span class="keyword">return</span> A;</span><br><span class="line">	Poly C=A-(A/B)*B;</span><br><span class="line">	C.<span class="built_in">resize</span>(B.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">Pow</span><span class="params">(Poly A,ll n,Poly M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Poly B=A; n--;</span><br><span class="line">	<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>,A=(A*A)%M) <span class="keyword">if</span>(n&amp;<span class="number">1ll</span>) B=(B*A)%M;</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">64005</span>*<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ((u&lt;&lt;1)|1)</span></span><br><span class="line">Poly P[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll ans[N],a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Poly <span class="title">MulT</span><span class="params">(Poly A,Poly B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=A.<span class="built_in">size</span>(),m=B.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">reverse</span>(<span class="built_in">all</span>(B));</span><br><span class="line">	<span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;len&lt;n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	A.<span class="built_in">resize</span>(len); B.<span class="built_in">resize</span>(len);</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">1</span>); <span class="built_in">ntt</span>(B,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">ff</span>(i,<span class="number">0</span>,len) A[i]=A[i]*B[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(A,len,<span class="number">-1</span>);</span><br><span class="line">	B.<span class="built_in">clear</span>();</span><br><span class="line">	len--;</span><br><span class="line">	<span class="built_in">fo</span>(i,m<span class="number">-1</span>,n+m<span class="number">-2</span>) B.<span class="built_in">pb</span>(A[i&amp;len]);</span><br><span class="line">	<span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		P[u].<span class="built_in">pb</span>(<span class="number">1</span>); P[u].<span class="built_in">pb</span>(<span class="built_in">Dec</span>(<span class="number">0</span>,a[l]));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">	P[u]=P[lc]*P[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,Poly A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(ans[l]=A[<span class="number">0</span>]);</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(lc,l,mid,<span class="built_in">MulT</span>(A,P[rc])); <span class="built_in">solve</span>(rc,mid+<span class="number">1</span>,r,<span class="built_in">MulT</span>(A,P[lc]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">Poly F,G;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PolyInit</span>();</span><br><span class="line">	n=<span class="built_in">read</span>(); m=<span class="built_in">read</span>(); k=<span class="built_in">max</span>(n,m);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">0</span>,n) F.<span class="built_in">pb</span>(<span class="built_in">read</span>());</span><br><span class="line">	F.<span class="built_in">resize</span>(n+k+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k);</span><br><span class="line">	F=<span class="built_in">MulT</span>(F,(~P[<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,k,F);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>倍增</tag>
        <tag>牛顿迭代</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客挑战赛35</title>
    <url>/2019/12/25/%E7%89%9B%E5%AE%A2%E6%8C%91%E6%88%98%E8%B5%9B35/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/3274">牛客挑战赛35</a></p>
<span id="more"></span>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>签到题，用最大的匹配最小的，次大的匹配次小的…</p>
<p>但是手速还是过于慢了…花了 $2\min$ 才AC此题。</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个图 $G_1$，$G_i=L(G_{i-1})$，$L(G)$ 表示 $G$ 的线图。</p>
<p>当 $n$ 无穷大时，求 $|G_n|$ 的值。发散时输出 $-1$。</p>
<p>$n\leq 10^5,m\leq 2\times 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然我们可以只考虑一个连通块的情况。</p>
<p>下面证明几个性质：</p>
<h4 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h4><p>如果存在两个环有共同的点，那么 $|G_n|$ 发散。</p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>因为共享点，因此必然存在某个点的度数至少为3，求一次线图就至少多一个环，因此环数会一直变多，因此发散。</p>
<h4 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h4><p>若连通块是一个环，就不能再往里加边加点形成连通块。否组答案发散。</p>
<h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p>对该图求一次线图，变成性质1的情况。</p>
<p>因此边数大于点数的连通块都不可行。</p>
<p>边数等于点数的连通块只能是环。</p>
<p>下面考虑树的情况：</p>
<h4 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h4><p>除了一个4个点菊花图，所有出现度数大于等于3的点都会使得答案发散。</p>
<h4 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h4><p>求一次线图，变成性质2的情况或者更坏。</p>
<p>因此只需判断每个连通块是否为4个点的菊花，一条链，一个环的情况即可。</p>
<p>时间复杂度 $O(n)$</p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>现在给出长度为 $n$ 的置换 $F$，求所有长度为 $n$ 且字典序严格大于 $F$ 的置换的循环节个数之和模 $998244353$。</p>
<p>$n\leq 2\times 10^5$</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>很显然地，我们考虑固定前 $i-1$ 位，第 $i$ 位可以选和第 $p_i$ 位以后的点相连。</p>
<p>一条还没有成环的链可以看成一个点。</p>
<p>设 $p_i$ 后面一共有 $w$ 个可连的点/链，有 $p$ 个在之前已经成环的环，那么大概就会有三种情况对答案产生贡献：</p>
<p>第一种是直接已经成环的，此时产生 $wp\times (n-i)!$ 的贡献。</p>
<p>第二种是未成环的，此时产生 $w\times f(n-i)$ 的贡献，其中 $f(i)$ 表示所有长度为 $i$ 的置换的循环节个数之和，这个可以 $O(n)$ 算出来。</p>
<p>第三种是自环，产生 $(n-i)!$ 的贡献。</p>
<p>那么用树状数组维护 $w$ ，并查集维护链即可。</p>
<p>时间复杂度$O(n\log n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 200010</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll f[N],ans;</span><br><span class="line">ll fac[N],inv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">Pow</span>(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fd</span>(i,n,<span class="number">1</span>) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="type">int</span> Bit[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) Bit[x]++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> ans=<span class="number">0</span>)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) ans+=Bit[x]; <span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">init</span>(n);</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) f[i]=(fac[i<span class="number">-1</span>]+f[i<span class="number">-1</span>]*i)%mod;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n) fa[i]=i;</span><br><span class="line">	<span class="type">int</span> p=<span class="number">0</span>,s=<span class="number">0</span>,w=<span class="number">0</span>,x,y;</span><br><span class="line">	<span class="built_in">fo</span>(i,<span class="number">1</span>,n)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">read</span>();</span><br><span class="line">		y=<span class="built_in">find</span>(i);</span><br><span class="line">		w=n-x-<span class="built_in">ask</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(y&gt;x) ans=<span class="built_in">Add</span>(ans,fac[n-i]);</span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(<span class="built_in">Mul</span>(w,p),fac[n-i]));<span class="comment">//已成环的</span></span><br><span class="line">		ans=<span class="built_in">Add</span>(ans,<span class="built_in">Mul</span>(f[n-i],w));<span class="comment">//未成环的</span></span><br><span class="line">		<span class="built_in">add</span>(x);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(i)==x) p++;</span><br><span class="line">		<span class="keyword">else</span> fa[x]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>懒得写了…</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>将S串01反转后，去掉前导0的集合记为 $A$，将集合 $A$ 里01反转后不去掉前导0的集合记为 $B$。可以发现，当且仅当字符串 $t$ 由这两个集合里的字符串拼接而成才合法。</p>
<p>也就是说，从 $t$ 的后缀开始匹配，需要满足 $s,t$ 的某后缀相匹配，要么全相等，要不全不相等，且 $s$ 的这个后缀的第一个字符和前面一个字符不相等。</p>
<p>$O(n^2)$ DP一下就好了。</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>感觉是全场第2简单的题…</p>
<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>$n$ 个点的树复制 $k$ 遍，变成一个森林。在这个森林里加 $m$ 条边变成一个图。只有一次询问，问某两个点间最短路，边权为 $1$。</p>
<p>$n\leq 2\times 10^5,m,k\leq 50000$</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>虚树+Dijkstra即可。</p>
]]></content>
      <categories>
        <category>牛客网</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>最短路</tag>
        <tag>虚树</tag>
        <tag>思维题</tag>
        <tag>树状数组</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
</search>
